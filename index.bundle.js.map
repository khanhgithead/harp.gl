{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"THREE\"","webpack:///../@here/harp-utils/index.web.ts","webpack:///../@here/harp-datasource-protocol/index.ts","webpack:///../@here/harp-geoutils/index.ts","webpack:///../@here/harp-datasource-protocol/lib/Expr.ts","webpack:///../@here/harp-materials/index.ts","webpack:///../@here/harp-text-canvas/index.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoCoordinates.ts","webpack:///../@here/harp-geoutils/lib/math/MathUtils.ts","webpack:///../@here/harp-mapview/lib/Utils.ts","webpack:///../@here/harp-geoutils/lib/projection/EarthConstants.ts","webpack:///../@here/harp-geoutils/lib/math/Box3Like.ts","webpack:///../@here/harp-geoutils/lib/math/OrientedBox3Like.ts","webpack:///../@here/harp-geoutils/lib/projection/Projection.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextStyle.ts","webpack:///../@here/harp-mapview/lib/DecodedTileHelpers.ts","webpack:///../@here/harp-mapview/lib/text/TextElement.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoBox.ts","webpack:///../@here/harp-geoutils/lib/tiling/TilingScheme.ts","webpack:///../@here/harp-mapview/index.ts","webpack:///../@here/harp-materials/lib/Utils.ts","webpack:///../@here/harp-mapview/lib/MapView.ts","webpack:///../@here/harp-datasource-protocol/lib/ColorUtils.ts","webpack:///../@here/harp-datasource-protocol/lib/InterpolatedPropertyDefs.ts","webpack:///../@here/harp-text-canvas/lib/utils/UnicodeUtils.ts","webpack:///../@here/harp-mapview/lib/text/TextElementType.ts","webpack:///../@here/harp-mapview/lib/composing/Pass.ts","webpack:///../@here/harp-geoutils/lib/projection/MercatorProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/QuadTreeSubdivisionScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileKey.ts","webpack:///../@here/harp-materials/lib/MapMeshMaterialsDefs.ts","webpack:///../@here/harp-datasource-protocol/lib/Env.ts","webpack:///../@here/harp-datasource-protocol/lib/Theme.ts","webpack:///../@here/harp-mapview/lib/text/TextElementsRenderer.ts","webpack:///../@here/harp-mapview/lib/PickHandler.ts","webpack:///../@here/harp-mapview/lib/Tile.ts","webpack:///../@here/harp-mapview/lib/Statistics.ts","webpack:///../@here/harp-mapview/lib/AnimatedExtrusionHandler.ts","webpack:///../@here/harp-utils/lib/Logger/ILogger.ts","webpack:///../@here/harp-utils/lib/UrlUtils.ts","webpack:///../@here/harp-materials/lib/MapMeshMaterials.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/LinesChunks.ts","webpack:///../@here/harp-datasource-protocol/lib/StringEncodedNumeral.ts","webpack:///../@here/harp-datasource-protocol/lib/Techniques.ts","webpack:///../@here/harp-mapview/lib/DataSource.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryCreator.ts","webpack:///../@here/harp-text-canvas/lib/rendering/GlyphData.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextGeometry.ts","webpack:///../@here/harp-text-canvas/lib/utils/TypesettingUtils.ts","webpack:///../@here/harp-mapview/lib/MapViewPoints.ts","webpack:///../@here/harp-mapview/lib/DebugContext.ts","webpack:///../@here/harp-mapview/lib/ColorCache.ts","webpack:///../@here/harp-mapview/lib/ConcurrentDecoderFacade.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightInfo.ts","webpack:///../@here/harp-lines/lib/HighPrecisionUtils.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDecoderDefs.ts","webpack:///../@here/harp-omv-datasource/lib/OmvTile.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoCoordinatesLike.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoPointLike.ts","webpack:///../@here/harp-geoutils/lib/coordinates/LatLngLike.ts","webpack:///../@here/harp-geoutils/lib/projection/EquirectangularProjection.ts","webpack:///../@here/harp-geoutils/lib/projection/TransverseMercatorProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/FlatTileBoundingBoxGenerator.ts","webpack:///../@here/harp-geoutils/lib/tiling/HalfQuadTreeSubdivisionScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/SubTiles.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileKeyUtils.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileTreeTraverse.ts","webpack:///../@here/harp-utils/lib/Logger/ConsoleChannel.ts","webpack:///../@here/harp-utils/lib/Logger/Logger.ts","webpack:///../@here/harp-utils/lib/Logger/WorkerChannel.ts","webpack:///../@here/harp-materials/lib/CopyMaterial.ts","webpack:///../@here/harp-datasource-protocol/lib/InterpolatedProperty.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueParams.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueDescriptor.ts","webpack:///../@here/harp-datasource-protocol/lib/DecodedTile.ts","webpack:///../@here/harp-datasource-protocol/lib/StyleSetEvaluator.ts","webpack:///../@here/harp-mapview/lib/BackgroundDataSource.ts","webpack:///../@here/harp-geometry/lib/SubdivisionModifier.ts","webpack:///../@here/harp-lrucache/index.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextMaterials.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextBufferObject.ts","webpack:///../@here/harp-text-canvas/lib/utils/MaterialUtils.ts","webpack:///../@here/harp-mapview/lib/geometry/DisplacedBufferAttribute.ts","webpack:///../@here/harp-mapview/lib/ThemeHelpers.ts","webpack:///../@here/harp-mapview/lib/DepthPrePass.ts","webpack:///../@here/harp-mapview/lib/geometry/overlayOnElevation.ts","webpack:///../@here/harp-mapview/lib/RoadPicker.ts","webpack:///../@here/harp-mapview/lib/text/Placement.ts","webpack:///../@here/harp-mapview/lib/poi/PoiRenderer.ts","webpack:///../@here/harp-mapview/lib/poi/Poi.ts","webpack:///../@here/harp-mapview/lib/ScreenCollisions.ts","webpack:///../node_modules/rbush/rbush.min.js","webpack:///../@here/harp-mapview/lib/text/TextStyleCache.ts","webpack:///../@here/harp-mapview/lib/geometry/LodMesh.ts","webpack:///../@here/harp-mapview/lib/CameraMovementDetector.ts","webpack:///../@here/harp-mapview/lib/ClipPlanesEvaluator.ts","webpack:///../@here/harp-mapview/lib/composing/index.ts","webpack:///../@here/harp-mapview/lib/composing/MSAARenderPass.ts","webpack:///../@here/harp-mapview/lib/ConcurrentWorkerSet.ts","webpack:///../@here/harp-mapview/lib/workers/WorkerLoader.ts","webpack:///../@here/harp-mapview/lib/WorkerBasedDecoder.ts","webpack:///../@here/harp-mapview/lib/ElevationRangeSource.ts","webpack:///../@here/harp-mapview/lib/image/MapViewImageCache.ts","webpack:///../@here/harp-mapview/lib/image/ImageCache.ts","webpack:///../@here/harp-mapview/lib/MapViewFog.ts","webpack:///../@here/harp-mapview/lib/poi/PoiManager.ts","webpack:///../@here/harp-mapview/lib/poi/PoiTableManager.ts","webpack:///../@here/harp-mapview/lib/PolarTileDataSource.ts","webpack:///../@here/harp-mapview/lib/SkyCubemapTexture.ts","webpack:///../@here/harp-mapview/lib/ThemeLoader.ts","webpack:///../@here/harp-mapview/lib/VisibleTileSet.ts","webpack:///../@here/harp-mapview/lib/ConcurrentTilerFacade.ts","webpack:///../@here/harp-mapview/lib/WorkerBasedTiler.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightCoverageProvider.ts","webpack:///../@here/harp-transfer-manager/index.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometry.ts","webpack:///../@here/harp-lines/lib/TriangulateLines.ts","webpack:///../@here/harp-lines/lib/HighPrecisionLines.ts","webpack:///../@here/harp-mapview-decoder/lib/TileLoader.ts","webpack:///../@here/harp-omv-datasource/lib/OmvRestClient.ts","webpack:///./src/index.ts","webpack:///../@here/harp-geoutils/lib/projection/IdentityProjection.ts","webpack:///../@here/harp-geoutils/lib/projection/SphereProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/QuadTree.ts","webpack:///../@here/harp-geoutils/lib/tiling/HereTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/WebMercatorTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/MercatorTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/PolarTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/math/Vector3Like.ts","webpack:///../@here/harp-geoutils/lib/math/TransformLike.ts","webpack:///../@here/harp-geoutils/lib/math/OrientedBox3.ts","webpack:///../@here/harp-materials/lib/CirclePointsMaterial.ts","webpack:///../@here/harp-utils/index-common.ts","webpack:///../@here/harp-utils/lib/GroupedPriorityList.ts","webpack:///../@here/harp-utils/lib/Logger/index.ts","webpack:///../@here/harp-utils/lib/Logger/LoggerManager.ts","webpack:///../@here/harp-utils/lib/Logger/LoggerManagerImpl.ts","webpack:///../@here/harp-utils/lib/Logger/MultiChannel.ts","webpack:///../@here/harp-utils/lib/Math2D.ts","webpack:///../@here/harp-utils/lib/MathUtils.ts","webpack:///../@here/harp-utils/lib/Mixins.ts","webpack:///../@here/harp-utils/lib/assert.ts","webpack:///../@here/harp-utils/lib/ContextLogger.ts","webpack:///../@here/harp-utils/lib/PerformanceTimer.ts","webpack:///../@here/harp-utils/lib/ObjectUtils.ts","webpack:///../@here/harp-utils/lib/OptionsUtils.ts","webpack:///../@here/harp-utils/lib/UriResolver.ts","webpack:///../@here/harp-utils/lib/Functions.ts","webpack:///../@here/harp-utils/lib/SampleBilinear.ts","webpack:///../@here/harp-utils/lib/UrlPlatformUtils.web.ts","webpack:///../@here/harp-materials/lib/DisplacementFeature.ts","webpack:///../@here/harp-materials/lib/EdgeMaterial.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/ExtrusionChunks.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/FadingChunks.ts","webpack:///../@here/harp-materials/lib/HighPrecisionLineMaterial.ts","webpack:///../@here/harp-materials/lib/HighPrecisionPointMaterial.ts","webpack:///../@here/harp-materials/lib/IconMaterial.ts","webpack:///../@here/harp-materials/lib/LuminosityHighPassShader.ts","webpack:///../@here/harp-materials/lib/MSAAMaterial.ts","webpack:///../@here/harp-materials/lib/SepiaShader.ts","webpack:///../@here/harp-materials/lib/SolidLineMaterial.ts","webpack:///../@here/harp-materials/lib/VignetteShader.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprEvaluator.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ArrayOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/CastOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ColorOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ComparisonOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/FeatureOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/FlowOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/InterpolationOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/ExponentialInterpolant.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MapOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MathOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MiscOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ObjectOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/StringOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/TypeOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprInstantiator.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprParser.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerServiceProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerTilerProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerDecoderProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/TileInfo.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprPool.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueAttr.ts","webpack:///../@here/harp-datasource-protocol/lib/ThemeVisitor.ts","webpack:///../@here/harp-geometry/lib/EdgeLengthGeometrySubdivisionModifier.ts","webpack:///../@here/harp-geometry/lib/SphericalGeometrySubdivisionModifier.ts","webpack:///../@here/harp-text-canvas/lib/rendering/FontCatalog.ts","webpack:///../@here/harp-text-canvas/lib/rendering/GlyphTextureCache.ts","webpack:///../@here/harp-lrucache/lib/LRUCache.ts","webpack:///../@here/harp-text-canvas/lib/TextCanvas.ts","webpack:///../@here/harp-text-canvas/lib/typesetting/LineTypesetter.ts","webpack:///../@here/harp-text-canvas/lib/typesetting/PathTypesetter.ts","webpack:///../@here/harp-text-canvas/lib/utils/ContextualArabicConverter.ts","webpack:///../@here/harp-mapview/lib/geometry/DisplacedMesh.ts","webpack:///../@here/harp-mapview/lib/geometry/VertexCache.ts","webpack:///../@here/harp-mapview/lib/geometry/DisplacedBufferGeometry.ts","webpack:///../@here/harp-mapview/lib/PathBlockingElement.ts","webpack:///../@here/harp-mapview/lib/poi/BoxBuffer.ts","webpack:///../@here/harp-mapview/lib/poi/PixelPicker.ts","webpack:///../@here/harp-mapview/lib/text/PlacementStats.ts","webpack:///../@here/harp-mapview/lib/text/SimplePath.ts","webpack:///../@here/harp-mapview/lib/text/TextElementsRendererOptions.ts","webpack:///../@here/harp-mapview/lib/text/TextElementStateCache.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroupState.ts","webpack:///../@here/harp-mapview/lib/text/TextElementState.ts","webpack:///../@here/harp-mapview/lib/text/RenderState.ts","webpack:///../@here/harp-mapview/lib/text/UpdateStats.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroup.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroupPriorityList.ts","webpack:///../@here/harp-mapview/lib/text/TileTextStyleCache.ts","webpack:///../@here/harp-mapview/lib/composing/MapRenderingManager.ts","webpack:///../@here/harp-mapview/lib/composing/LowResRenderPass.ts","webpack:///../@here/harp-mapview/lib/composing/Outline.ts","webpack:///../@here/harp-mapview/lib/composing/UnrealBloomPass.ts","webpack:///../@here/harp-mapview/lib/workers/WorkerBootstrapDefs.ts","webpack:///../@here/harp-mapview/lib/FrustumIntersection.ts","webpack:///../@here/harp-mapview/lib/MapTileCuller.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryManager.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryLoader.ts","webpack:///../@here/harp-mapview/lib/PickingRaycaster.ts","webpack:///../@here/harp-mapview/lib/poi/PoiRendererFactory.ts","webpack:///../@here/harp-datasource-protocol/index-decoder.ts","webpack:///../@here/harp-datasource-protocol/lib/Extruder.ts","webpack:///../@here/harp-datasource-protocol/lib/Outliner.ts","webpack:///../@here/harp-datasource-protocol/lib/ThreeBufferUtils.ts","webpack:///../@here/harp-mapview/lib/ScreenProjector.ts","webpack:///../@here/harp-mapview/lib/SkyBackground.ts","webpack:///../@here/harp-mapview/lib/SkyGradientTexture.ts","webpack:///../@here/harp-mapview/lib/text/FontCatalogLoader.ts","webpack:///../@here/harp-mapview/lib/text/MapViewState.ts","webpack:///../@here/harp-mapview/lib/text/TextCanvasFactory.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightElementHandler.ts","webpack:///../@here/harp-mapview/lib/copyrights/UrlCopyrightProvider.ts","webpack:///../@here/harp-transfer-manager/src/TransferManager.ts","webpack:///../@here/harp-transfer-manager/src/DeferredPromise.ts","webpack:///../@here/harp-mapview/lib/image/Image.ts","webpack:///../@here/harp-mapview/lib/TextureLoader.ts","webpack:///../@here/harp-mapview/lib/geometry/TileDataAccessor.ts","webpack:///../@here/harp-lines/index.ts","webpack:///../@here/harp-lines/lib/Lines.ts","webpack:///../@here/harp-lines/lib/HighPrecisionPoints.ts","webpack:///../@here/harp-omv-datasource/index.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDataFilter.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDataSource.ts","webpack:///../@here/harp-mapview-decoder/index.ts","webpack:///../@here/harp-mapview-decoder/lib/TileDataSource.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDebugLabelsTile.ts","webpack:///../@here/harp-examples/config.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","THREE","exprEvaluator","ExprEvaluator","exprInstantiator","ExprInstantiator","ExprDependencies","properties","Set","ComputeExprDependencies","expr","dependencies","accept","this","instance","context","add","args","forEach","childExpr","op","featureState","branches","_","branch","fallback","condition","isJsonExpr","v","Array","isArray","length","ExprScope","Expr","code","ExprParser","parse","node","definitions","definitionExprCache","parseNode","undefined","lockedNames","cache","Map","env","scope","Value","ExprEvaluatorContext","m_dependencies","of","pool","ExprSerializer","serialize","m_isDynamic","exprIsDynamic","VarExpr","super","visitor","visitVarExpr","LiteralExpr","BooleanLiteralExpr","NumberLiteralExpr","StringLiteralExpr","NullLiteralExpr","ObjectLiteralExpr","Error","visitNullLiteralExpr","visitBooleanLiteralExpr","visitNumberLiteralExpr","visitStringLiteralExpr","visitObjectLiteralExpr","HasAttributeExpr","visitHasAttributeExpr","CallExpr","visitCallExpr","descriptor","getOperator","isDynamicOperator","some","e","isDynamic","MatchExpr","elementTy","every","visitMatchExpr","CaseExpr","visitCaseExpr","cond","map","label","body","push","referenceResolverState","parseCall","slice","has","cachedEntry","result","definitionEntry","isLiteralDefinition","fromJSON","isBoxedDefinition","isInterpolatedPropertyDefinition","interpolatedPropertyDefinitionToJsonExpr","delete","set","resolveReference","makeCallExpr","parseGetExpr","parseHasExpr","obj","parseLiteralExpr","conditions","isValidMatchLabel","JSON","stringify","parseMatchExpr","caseFallback","parseCaseExpr","GeoCoordinates","latitude","longitude","altitude","MathUtils","radToDeg","latLng","lat","lng","geoPoint","isGeoPointLike","fromGeoPoint","isGeoCoordinatesLike","fromDegrees","isLatLngLike","degToRad","isNaN","wrapped","sign","Math","other","normalizeAngleDeg","a","angleDistanceDeg","b","newEmptyBox3","min","x","Infinity","y","z","max","newVector3","clamp","interpolateAnglesDeg","p0","p1","logger","LoggerManager","groundNormalPlanarProj","Vector3","groundPlane","Plane","clone","groundSphere","Sphere","EarthConstants","EQUATORIAL_RADIUS","rayCaster","Raycaster","maxTiltAngleAllowed","MAX_TILT_ANGLE","space","tangentSpace","quaternions","Quaternion","vector3","matrix4","Matrix4","transforms","xAxis","yAxis","zAxis","position","MapViewUtils","orbitFocusPoint","mapView","deltaAzimuthDeg","deltaTiltDeg","maxTiltAngleRad","target","sphericalCoordinates","extractSphericalCoordinatesFromLocation","camera","tilt","heading","azimuth","PI","lookAt","distance","targetDistance","getWorldTargetFromCamera","projection","elevation","cameraPos","copy","cameraLookAt","getWorldDirection","constant","radius","targetWorldPos","type","ProjectionType","Planar","ray","intersectPlane","intersectSphere","getCameraPositionFromTargetCoordinates","targetCoordinates","yawDeg","pitchDeg","pitchRad","cos","yawRad","projectPoint","groundDistance","sin","Spherical","normalize","projectOnPlane","setFromAxisAngle","applyQuaternion","setLength","height","cameraHeight","sqrt","rayCastWorldCoordinates","pointOnScreenXinNDC","pointOnScreenYinNDC","pointInNDCPosition","extractRotation","matrixWorld","multiplyMatrices","getInverse","projectionMatrix","pointInCameraSpace","applyMatrix4","worldPosition","panCameraAboveFlatMap","offsetX","offsetY","panCameraAroundGlobe","fromWorld","toWorld","setFromUnitVectors","inverse","makeRotationFromQuaternion","updateMatrixWorld","getCameraRotationAtTarget","transform","localTangentSpace","makeBasis","setFromRotationMatrix","multiply","extractCameraTilt","normal","surfaceNormal","negate","cosTheta","dot","acos","assert","targetGeoCoords","getGeoTargetFromCamera","extractTiltAngleFromLocation","warn","extractAttitude","options","setFromMatrixPosition","unprojectPoint","setFromMatrixColumn","yaw","pitch","roll","atan2","location","sub","angleTo","cross","calculateDistanceToGroundFromZoomLevel","zoomLevel","cameraPitch","tileSize","EQUATORIAL_CIRCUMFERENCE","pow","focalLength","roundZoomLevel","round","estimateTextureSize","texture","objectSize","visitedObjects","image","uuid","imageBytes","width","heapSize","gpuSize","estimateMaterialSize","material","RawShaderMaterial","ShaderMaterial","rawMaterial","uniforms","uniform","Texture","MeshBasicMaterial","MapMeshBasicMaterial","meshMaterial","aoMap","specularMap","alphaMap","envMap","MapMeshStandardMaterial","standardMaterial","lightMap","emissiveMap","bumpMap","normalMap","displacementMap","roughnessMap","metalnessMap","LineBasicMaterial","LineDashedMaterial","estimateAttributeSize","attribute","attrName","generateUUID","attrBytes","bytesPerElement","array","BYTES_PER_ELEMENT","InterleavedBufferAttribute","BufferAttribute","count","itemSize","estimateGeometrySize","geometry","bufferGeometry","Geometry","vertices","faces","_bufferGeometry","BufferGeometry","attributes","index","getIsoLanguageCode","language","substring","MAX_TILT_DEG","MAX_TILT_RAD","DEG2RAD","zoomOnTargetPosition","targetPositionOnScreenXinNDC","targetPositionOnScreenYinNDC","maxTiltAngle","targetPosition","setZ","deltaTilt","newTargetPosition","getTargetAndDistance","elevationProvider","distanceTo","cameraPosZ","level","geoLocation","heightAboveTerrain","getHeight","unprojectAltitude","abs","getHeightAboveTerrain","cameraDir","multiplyScalar","fallbackTarget","getCameraCoordinatesFromTargetCoordinates","rotate","deltaYawDeg","deltaPitchDeg","rotateOnWorldAxis","newPitch","maxPitch","asin","rotateX","setRotation","geoCenter","quaternion","dirVec","dirLen","error","divideScalar","getCameraFrustumPlanes","near","far","top","tan","fov","zoom","aspect","left","view","enabled","fullWidth","fullHeight","filmOffset","getFilmWidth","right","bottom","rayCastGeoCoordinates","worldCoordinates","calculateDistanceFromZoomLevel","calculateZoomLevelFromDistance","log2","minZoomLevel","maxZoomLevel","calculateDepthFromClipDistance","clipDistance","perspCam","cameraRange","viewSpaceDistance","cameraToWorldDistance","calculateVerticalFovByHorizontalFov","hFov","atan","calculateHorizontalFovByVerticalFov","vFov","calculateFocalLengthByVerticalFov","calculateFovByFocalLength","calculateScreenSizeByFocalLength","worldSize","calculateWorldSizeByFocalLength","screenSize","estimateObject3dSize","parentSize","size","isObject3D","Scene","isMesh","isLine","isPoints","mesh","materials","geometries","featureData","userData","feature","getFeatureDataSize","estimateMeshSize","children","child","mapViewIsLoading","numTilesLoading","tileList","visibleTileSet","dataSourceTileList","tile","visibleTiles","tileLoader","isFinished","tileGeometryLoader","isLoading","textElementsRenderer","loading","poiTableManager","finishedLoading","allVisibleTilesLoaded","getBrowserLanguages","navigator","languages","languageList","lang","powerOfTwo","TileOffsetUtils","getKeyForTileKeyAndOffset","tileKey","offset","bitshift","shiftedOffset","offsetBits","totalOffsetsToStore","getShiftedOffset","mortonCode","extractOffsetAndMortonKeyFromKey","num","getParentKeyFromKey","calculatedKey","TileKey","fromMortonCode","parentMortonCode","MIN_ELEVATION","MAX_ELEVATION","MAX_BUILDING_HEIGHT","box3","obb","extents","unitScale","sourceProjection","worldPos","FontUnit","FontStyle","FontVariant","VerticalAlignment","HorizontalAlignment","WrappingMode","DefaultTextStyle","DEFAULT_FONT_NAME","DEFAULT_FONT_SIZE","unit","freeze","Pixel","backgroundSize","DEFAULT_FONT_STYLE","Regular","DEFAULT_FONT_VARIANT","DEFAULT_ROTATION","DEFAULT_COLOR","Color","DEFAULT_OPACITY","DEFAULT_BACKGROUND_COLOR","DEFAULT_BACKGROUND_OPACITY","DEFAULT_TRACKING","DEFAULT_LEADING","DEFAULT_MAX_LINES","DEFAULT_LINE_WIDTH","DEFAULT_CANVAS_ROTATION","DEFAULT_LINE_ROTATION","DEFAULT_WRAPPING_MODE","Word","DEFAULT_VERTICAL_ALIGNMENT","Above","DEFAULT_HORIZONTAL_ALIGNMENT","Left","TextRenderStyle","params","m_params","fontName","fontSize","fontStyle","fontVariant","rotation","color","opacity","backgroundColor","backgroundOpacity","TextLayoutStyle","tracking","leading","maxLines","lineWidth","canvasRotation","lineRotation","wrappingMode","verticalAlignment","horizontalAlignment","DEFAULT_SKIP_PROPERTIES","TEXTURE_PROPERTY_KEYS","getMaterialConstructor","technique","isExtrudedLineTechnique","shading","SolidLineMaterial","PointsMaterial","CirclePointsMaterial","applyTechniquePropertyToMaterial","propertyName","techniqueAttrValue","applySecondaryColorToMaterial","evaluateProperty","materialColor","techniqueColor","evaluateColorProperty","ColorUtils","hasAlphaInHex","removeAlphaFromHex","setHex","applyBaseColorToMaterial","colorValue","g","getRgbaFromHex","tech","setRGB","disableBlending","enableBlending","isInterpolatedProperty","isExpr","getPropertyValue","parsed","parseStringEncodedColor","getBaseColorPropName","techDescriptor","techniqueDescriptors","attrTransparencyColor","textureReadyCallback","Constructor","settings","HighPrecisionLineMaterial","fog","id","isExtrudedPolygonTechnique","flatShading","vertexColors","depthTest","isStandardTechnique","isTerrainTechnique","texturePropertyName","textureProperty","onLoad","wrapS","toWrappingMode","wrapT","magFilter","toTextureFilter","minFilter","flipY","repeatU","repeat","repeatV","needsUpdate","onError","textureUrl","isTextureBuffer","dataTextureProperties","textureDataType","toTextureDataType","textureBuffer","buffer","Uint8Array","UnsignedByteType","ByteType","Int8Array","ShortType","Int16Array","UnsignedShortType","Uint16Array","IntType","Int32Array","UnsignedIntType","Uint32Array","FloatType","Float32Array","HalfFloatType","getTextureBuffer","DataTexture","format","toPixelFormat","textureBlob","Blob","URL","createObjectURL","TextureLoader","load","isShaderTechnique","baseColorPropName","hasBaseColor","getOwnPropertyNames","filter","TRANSPARENCY_PROPERTY_KEYS","indexOf","prop","propColor","applyShaderTechniqueToMaterial","skipExtraProps","startsWith","BASE_TECHNIQUE_NON_MATERIAL_PROPS","applyTechniqueToMaterial","itemCount","normalized","elevationEnabled","DisplacedMesh","elevationRange","minElevation","maxElevation","Mesh","Circles","Squares","LineSegments","primitive","Line","Points","Object3D","baseColorProp","getBaseColorProp","techniques","poiInfo","poiRenderBatch","LoadingState","TextElement","text","points","renderParams","layoutParams","priority","xOffset","yOffset","featureId","style","fadeNear","fadeFar","tileOffset","visible","distanceScale","renderOrder","elevated","renderStyle","layoutStyle","TextElementType","PoiLabel","PathLabel","mayOverlap","reserveSpace","m_poiInfo","path","LineMarker","poiRenderOrder","m_renderStyle","m_layoutStyle","min2","iconMinZoomLevel","textMinZoomLevel","max2","iconMaxZoomLevel","textMaxZoomLevel","HIGHEST_PRIORITY","Number","MAX_SAFE_INTEGER","GeoBox","southWest","northEast","south","north","west","east","minAltitude","altitudeSpan","latitudeSpan","longitudeSpan","maxAltitude","point","containsHelper","isFlat","isSameAltitude","isWithinAltitudeRange","subdivisionScheme","boundingBoxGenerator","FlatTileBoundingBoxGenerator","tileTreeTraverse","TileTreeTraverse","subTiles","TileKeyUtils","geoCoordinatesToTileKey","geoBox","geoRectangleToTileKeys","getGeoBox","getWorldBox","transparent","forcedBlending","blending","CustomBlending","premultipliedAlpha","blendSrc","OneFactor","blendDst","OneMinusSrcAlphaFactor","blendSrcAlpha","blendDstAlpha","SrcAlphaFactor","getShaderMaterialDefine","fallbackValue","defines","getShaderDefine","setShaderDefine","updated","DEFINE_BOOL_TRUE","currentValue","DEFINE_BOOL_FALSE","shaderContent","shaderName","insertedShaderName","addTab","tabChar","replace","NormalBlending","MapViewEventNames","setLogLevelForAll","LogLevel","DEFAULT_FOV_CALCULATION","FALLBACK_RENDER_ORDER_OFFSET","UPDATE","Update","RENDER_EVENT","Render","DID_RENDER_EVENT","AfterRender","FIRST_FRAME_EVENT","FirstFrame","FRAME_COMPLETE_EVENT","FrameComplete","THEME_LOADED_EVENT","ThemeLoaded","ANIMATION_STARTED_EVENT","AnimationStarted","ANIMATION_FINISHED_EVENT","AnimationFinished","MOVEMENT_STARTED_EVENT","MovementStarted","MOVEMENT_FINISHED_EVENT","MovementFinished","CONTEXT_LOST_EVENT","ContextLost","CONTEXT_RESTORED_EVENT","ContextRestored","COPYRIGHT_CHANGED_EVENT","CopyrightChanged","vector2","Vector2","frustumPoints","MapViewPowerPreference","MapViewDefaults","mercatorProjection","maxVisibleDataSourceTiles","extendedFrustumCulling","tileCacheSize","resourceComputationType","ResourceComputationType","EstimationInMb","quadTreeSearchDistanceUp","quadTreeSearchDistanceDown","pixelRatio","window","devicePixelRatio","theme","MapView","EventDispatcher","dumpNext","m_renderLabels","m_screenCollisions","ScreenCollisions","m_visibleTileSetLock","m_tileWrappingEnabled","m_zoomLevel","m_minZoomLevel","m_maxZoomLevel","m_minCameraHeight","m_screenCamera","OrthographicCamera","m_rteCamera","PerspectiveCamera","m_yaw","m_pitch","m_roll","m_focalLength","m_targetDistance","m_targetGeoPos","fromObject","m_targetWorldPos","m_viewRanges","minimum","maximum","m_scene","m_fog","MapViewFog","m_mapTilesRoot","m_mapAnchors","m_animationCount","m_drawing","m_updatePending","m_frameNumber","m_maxFps","m_detectedFps","m_forceCameraAspect","m_tileDataSources","m_connectedDataSources","m_failedDataSources","m_enablePolarDataSource","m_plane","m_sphere","m_theme","m_themeIsLoading","m_firstFrameRendered","m_firstFrameComplete","m_initialTextPlacementDone","m_frameTimeIndex","m_frameTimeRing","m_imageCache","MapViewImageCache","m_poiManager","PoiManager","m_poiTableManager","PoiTableManager","m_lastTileIds","m_copyrightInfo","m_env","MapEnv","onWebGLContextLost","event","dispatchEvent","onWebGLContextRestored","m_renderer","clearColor","setClearColor","update","m_options","m_uriResolver","uriResolver","minCameraHeight","decoderUrl","ConcurrentDecoderFacade","defaultScriptUrl","resolveUri","decoderCount","defaultWorkerCount","m_visibleTileSetOptions","clipPlanesEvaluator","createDefaultClipPlanesEvaluator","enablePolarDataSource","m_pixelRatio","maxFps","enableStatistics","m_languages","handleRequestAnimationFrame","renderFunc","handlePostponedAnimationFrame","postponedAnimationFrame","m_pickHandler","PickHandler","enableRoadPicking","enablePickTechnique","tileWrappingEnabled","setupStats","canvas","addEventListener","WebGLRenderer","antialias","nativeWebglAntialiasEnabled","alpha","preserveDrawingBuffer","powerPreference","Default","autoClear","debug","checkShaderErrors","info","autoReset","setupRenderer","fovCalculation","getCanvasClientSize","m_camera","up","m_screenProjector","ScreenProjector","setupCamera","m_raycaster","PickingRaycaster","m_movementDetector","CameraMovementDetector","movementThrottleTimeout","movementStarted","movementFinished","mapPassAntialiasSettings","customAntialiasSettings","mapRenderingManager","MapRenderingManager","dynamicPixelRatio","m_tileGeometryManager","TileGeometryManager","enableMixedLod","m_enableMixedLod","m_visibleTiles","createVisibleTileSet","m_animatedExtrusionHandler","AnimatedExtrusionHandler","m_backgroundDataSource","BackgroundDataSource","addDataSource","styleSetName","polarStyleSetName","m_polarDataSource","PolarTileDataSource","geometryLevelOffset","polarGeometryLevelOffset","updatePolarDataSource","backgroundTilingScheme","setTilingScheme","initTheme","m_textElementsRenderer","createTextRenderer","drawFrame","resetTextRenderer","m_movementFinishedUpdateTimerId","clearTimeout","m_animationFrameHandle","cancelAnimationFrame","removeEventListener","dataSource","dispose","clearTileCache","clearRenderStates","clear","getDataSourceCacheSize","numVisibleTiles","setDataSourceCacheSize","setNumberOfVisibleTiles","floor","updateImages","updateLighting","invalidateCache","updateSkyBackground","m_pointOfView","pointOfView","postEffectsFile","fetch","then","response","json","postEffects","m_postEffects","setPostEffects","ThemeLoader","isThemeLoaded","loadedTheme","catch","sky","reset","lights","renderer","images","imageTextures","poiTables","loadPoiTables","textStyles","defaultTextStyle","fontCatalogs","priorities","labelPriorities","styles","setTheme","time","Date","now","fps","setLanguages","disable","disableFading","m_previousFrameTimeStamp","listener","m_collisionDebugCanvas","rendererClearColor","getClearColor","getHex","lookAtImpl","enableNativeWebglAntialias","calculateFocalLength","getSize","updateCameras","dataSourceName","find","ds","ready","isVisible","getDataSourceByName","attach","setEnableElevationOverlay","m_elevationProvider","updateStorageLevelOffset","connect","Promise","resolve","resolveOnce","DataSourceConnect","message","dsIndex","detach","removeDataSource","splice","textElements","addOverlayText","clearOverlayText","targetOrParams","tiltDeg","headingDeg","geoPos","limitedPitch","maxPitchRadWithCurvature","maxPitchDegWithCurvature","entries","cameraIsMoving","animating","isAnimating","m_pixelToWorld","lookAtDistance","pixelToWorld","getPixelRatio","setPixelRatio","ratio","lowResPixelRatio","project","setFromCamera","getNormalizedScreenCoordinates","getWorldPositionAt","intersectMapObjects","setSize","collisionDebugCanvas","Resize","PerformanceTimer","clearCache","fun","forEachVisibleTile","forEachCachedTile","markTilesDirty","elevationSource","elevationRangeSource","m_elevationSource","m_elevationRangeSource","dataSources","setTileUpdateCallback","overlayOnElevation","bloom","outline","vignette","sepia","updateOutline","enableShadows","shadowMap","PCFSoftShadowMap","tangentSpaceMatrix","getOptionValue","updateLookAtSettings","twinDataSource","viewRanges","setFovOnCamera","maxGeometryHeightScaled","getScaleFactor","reduce","maxGeometryHeight","assign","updateClipPlanes","updateProjectionMatrix","setScalar","$zoom","$pixelToMeters","$frameNumber","vector","projectionMatrixInverse","viewPos","matrixWorldInverse","shadowsEnabled","m_createdLights","transformedPoints","ndcToView","element","directionalLight","isDirectionalLight","pointsInLightSpace","viewToLightSpace","shadow","box","Box3","expandByPoint","lightDirection","lightPosHyp","worldTarget","addScaledVector","m_previousRequestAnimationTime","currentFps","capturedFrames","sum","synchronousRendering","requestAnimationFrame","vSyncFrameTime","frameInterval","previousFrameTime","targetTime","m_targetRequestAnimationTime","detectCurrentFps","render","enabledDataSources","isDataSourceEnabled","frameStartTime","currentFrameEvent","stats","PerformanceStatistics","gatherStatistics","currentFrame","timeSincePreviousFrame","setValue","storeAndClearFrameInfo","setupTime","cullTime","textPlacementTime","drawTime","textDrawTime","endTime","m_thisFrameTilesChanged","updateEnv","updateLights","lockVisibleTileSet","viewRangesStatus","updateRenderList","storageLevel","getEnabledTileDataSources","viewRangesChanged","renderList","renderedTiles","renderTileObjects","frameNumLastVisible","isDynamicFrame","initializing","childObject","geoPosition","addValue","checkCameraMoved","CameraPositionChanged","renderLabels","prepareRenderTextElements","m_skyBackground","updateCamera","finishRenderTextElements","appResults","disposePendingTiles","checkCopyrightUpdates","frameRenderTime","addWebGLInfo","addMemoryInfo","worldOffsetX","computeWorldOffsetX","willRender","objects","processTileObjectFeatures","center","displacement","setRotationFromMatrix","boundingBox","getRotationMatrix","frustumCulled","_backupRenderOrder","isBuilding","kind","includes","GeometryKind","Building","levelOffset","didRender","Boolean","starts","objInfos","isBufferGeometry","getIndex","endOfLastGroup","clearGroups","featureIndex","getFeatureId","getFeatureState","$state","parentEnv","start","groups","addGroup","placeText","renderText","themeName","resize","VisibleTileSet","FrustumIntersection","SkyBackground","updateSkyBackgroundColors","addNewSkyBackground","removeSkyBackGround","groundColor","background","updateTexture","light","remove","lightDescription","createLight","setTimeout","tileIdList","sort","newTileIds","join","checkIfTilesChanged","newCopyrightInfo","getRenderedTilesCopyrightInfo","allEqual","values","tileCopyrightInfo","copyrightInfo","CopyrightInfo","mergeArrays","poiManager","keys","addImage","url","preload","atlas","addTextureAtlas","imageTexture","addImageTexture","enable","TextElementsRenderer","MapViewState","TextCanvasFactory","PoiRendererFactory","FontCatalogLoader","overlayText","limitFov","clientWidth","clientHeight","tmpColor","getHexFromRgba","getHexFromRgb","getHexFromHsl","h","setHSL","hex","getAlphaFromHex","InterpolationMode","interpolationMode","zoomLevels","interpolation","step","exponent","UnicodeUtils","Direction","whiteSpaceRanges","isWhiteSpace","codePoint","range","newLineRanges","isNewLine","nonPrintableRanges","isPrintable","rtlBlocks","neutralBidirectionalRanges","weakBidirectionalRanges","getDirection","block","weakRange","Weak","neutralRange","Neutral","RTL","LTR","rtlMirroredCodePoints","isRtlMirrored","Pass","renderToScreen","scene","writeBuffer","readBuffer","delta","setRenderTarget","shader","textureID","UniformsUtils","vertexShader","fragmentShader","fsQuad","FullScreenQuad","PlaneBufferGeometry","m_mesh","MercatorProjection","Projection","val","MercatorConstants","MAXIMUM_LATITUDE","log","latitudeProject","latitudeClamp","exp","worldPoint","cosh","geoPointLike","latitudeClampProject","latitudeInRadians","fromRadians","unprojectLatitude","worldCenter","worldNorth","worldSouth","worldYCenter","isBox3Like","isOrientedBox3Like","EPSILON","worldBox","minGeo","maxGeo","fromCoordinates","_worldPoint","webMercatorProjection","reprojectPoint","sy","projectBox","maxY","quadTreeSubdivisionScheme","row","column","quadkey","mask","parseInt","charAt","fromRowColumnLevel","quadKey64","quadKey","m_mortonCode","quadkey64","m_hereTile","coordX","coordY","totalWidth","totalHeight","rowsAtLevel","columnsAtLevel","changedLevelBy","toString","col","qnr","subQuad","fromQuadKey","fromHereTile","msb","ExtrusionFeatureDefs","DEFAULT_RATIO_MIN","DEFAULT_RATIO_MAX","MIN_BUILDING_HEIGHT","Env","_name","parent","lookup","unmap","def","bdef","styleDef","DEFAULT_TEXT_DISTANCE_SCALE","Log","updateStats","placementStats","tempPosition","tempScreenPosition","tempScreenPoints","tempPoiScreenPosition","tmpTextBufferCreationParams","tmpAdditionParams","tmpBufferAdditionParams","TileTextElements","group","TextElementLists","lists","list","elements","addTextToCanvas","textElement","screenPosition","pathOverflow","layer","letterCaseArray","glyphCaseArray","pickingData","addText","glyphs","isPlacementTimeExceeded","startTime","m_viewState","m_viewCamera","m_viewUpdateCallback","m_textCanvasFactory","m_poiRendererFactory","m_fontCatalogLoader","m_initialized","m_glyphLoadingCount","m_textRenderers","m_tmpVector","m_overloaded","m_cacheInvalidated","m_forceNewLabelsPass","m_textElementStateCache","TextElementStateCache","m_textStyleCache","TextStyleCache","initializeDefaultOptions","setGlyphCountLimits","minNumGlyphs","maxNumGlyphs","initialized","updateGlyphDebugMesh","textRenderer","textCanvas","tileTextElementsChanged","textElementsChanged","checkIfTextElementsChanged","textElementsAvailable","hasOverlayText","initialize","updateTextElements","renderedTilesChanged","frameNumber","clearVisited","findReplacements","anyTextGroupEvicted","prepopulateScreenWithBlockingElements","placeNewTextElements","placeTextElements","placeOverlayTextElements","updateTextRenderers","m_overlayTextElements","concat","pickResults","pickHandler","pickData","pickObjectType","isDuplicate","pickResult","pickText","PickObjectType","Text","poiRenderer","pickTextElements","Icon","waitInitialized","m_loadPromise","memoryUsage","getMemoryUsage","m_initPromise","initializeDefaultAssets","initializeTextCanvases","boxes","renderListEntry","startLinePointProj","endLinePointProj","pathBlockingElement","blockingElements","project3","line","screenSpaceLines","end","lineWithBound","minX","maxX","minY","allocateIBoxes","groupState","maxNumPlacedLabels","pass","visited","shieldGroups","hiddenKinds","hiddenGeometryKinds","elevationMap","getDisplacementMap","textElementState","textElementStates","PersistentLabels","total","numRenderedTextElements","uninitialized","viewDistance","tooFar","elementVisible","NewLabels","textElementStyle","getTextElementStyle","hasOrIntersects","overlayTextElement","elementType","isPathLabelTooSmall","numNotVisible","dbgPathTooSmall","numPathTooSmall","textRenderState","forceNewPassOnLoaded","initializeGlyphs","getLayer","DEFAULT_TEXT_CANVAS_LAYER","storage","drawCount","capacity","numCannotAdd","textRenderStyle","textLayoutStyle","addPoiLabel","addLineMarkerLabel","addPathLabel","loadingState","Initialized","Requested","Loaded","newLoadPromise","fontCatalog","loadCharset","all","bounds","getGlyphs","defaultFontCatalogName","initializeDefaultTextElementStyle","loadCatalogs","catalog","loadedTextCanvas","createTextCanvas","createPoiRenderer","defaultTextCanvas","defaultPoiRenderer","initializeTextElementStyles","debugGlyphs","debugContext","getValue","m_debugGlyphTextureCacheMesh","initializeGlyphDebugMesh","m_debugGlyphTextureCacheWireMesh","defaultFontCatalog","planeGeometry","PlaneGeometry","textureSize","maxWidth","maxHeight","depthWrite","wireframe","WireframeGeometry","wireframeMaterial","clearTextCache","checkIfOverloaded","updateStartTime","overloaded","updateTextElementsFromSource","from","tileDataSource","tiles","sortedTiles","sortedGroups","createSortedGroupsForSorting","numTextElementsUpdated","textElementLists","selectTextElementsToUpdateByDistance","textElementGroup","maxViewDistance","found","getOrSet","checkReadyForPlacement","PrePlacementResult","Ok","deduplicateElement","Duplicate","totalLabels","results","totalGroups","newGroups","tilesToRender","shouldRenderText","groupedPriorityLists","textElementGroups","foundGroup","farDistanceLimitRatio","maxDistanceRatioForTextLabels","maxDistanceRatioForPoiLabels","getMaxViewDistance","tileTextElements","prepareTextElementGroup","fadeAnimationRunning","placeStartTime","placeNew","maxNumPlacedTextElements","maxNumVisibleLabels","groupStates","sortedGroupStates","currentPriority","currentPriorityBegin","textElementGroupState","newPriority","placeTextElementGroup","beginGroupIndex","endGroupIndex","screenXOrigin","screenYOrigin","textPath","screenPoints","pt","pX","pY","SimplePath","LineCurve","factor","labelDistanceScaleMin","labelDistanceScaleMax","state","maxVisibilityDist","distanceFadeValue","textDistance","labelState","iconIndex","pointLabel","iconRenderStates","iconRenderState","setViewDistance","iconRejected","renderIcon","isClamped","isValid","distanceScaleFactor","getDistanceScalingFactor","iconReady","prepareRender","placeIcon","PlacementResult","Invisible","Rejected","distanceFadeFactor","getDistanceFadingFactor","viewState","poiTextMaxDistance","ignoreDistance","iconIsOptional","shouldRenderPointText","placeResult","placePointLabel","numPoiTextsInvisible","textRejected","textIsOptional","startFadeOut","renderTextDuringMovements","shouldRenderPoiText","isFading","startFadeIn","fadeFactor","scaleFactor","textBufferObject","createTextBufferObject","backgroundIsVisible","scale","addTextBufferObject","addTextBufferToCanvas","numRenderedPoiTexts","allocateSpace","renderPoi","renderDistance","numRenderedPoiIcons","addPointLabel","lineMarkerLabel","shieldGroup","shieldGroupIndex","lineTechnique","minDistanceSqr","minDistance","pointIndex","tooClose","j","Math2D","distSquared","textMaxDistance","pathLabel","Path","SimpleLineCurve","getPoint","computeViewDistance","textRenderDistance","prevSize","placePathLabel","prevOpacity","prevBgOpacity","numTextElementsInScene","newOverloaded","tmpOBB","OrientedBox3","m_roadPicker","RoadPicker","registerTile","raycasterFromScreenPoint","screenX","screenY","scenePosition","intersects","intersectsRay","intersectObjects","intersect","Unspecified","intersection","addObjInfo","geometryType","GeometryType","Point","ExtrudedLine","SolidLine","TextPath","Polygon","ExtrudedPolygon","Area","planeIntersectPosition","intersectRoads","MapViewPoints","faceIndex","objInfosIndex","polygonStartFace","TileLoaderState","numBytes","frameNumLastRequested","frameNumVisible","numFramesVisible","visibilityCounter","skipRendering","m_boundingBox","m_disposed","m_localTangentSpace","m_forceHasGeometry","m_textElementGroups","TextElementGroupPriorityList","m_pathBlockingElements","m_worldCenter","m_visibleArea","m_elevationRange","m_ownedTextures","WeakSet","getTilingScheme","updateBoundingBox","TileTextStyleCache","m_resourceInfo","computeResourceInfo","TextElementGroup","addTextElement","removeTextElement","m_textElementsChanged","blockingElement","changed","m_decodedTile","tileInfo","roadIntersectionData","_zoomLevel","area","updatePriority","calculationStatus","m_maxGeometryHeight","elevateBoundingBox","decodedTile","invalidateResourceInfo","forceHasGeometry","decodeTime","copyrightHolderIds","requestUpdate","m_tileGeometryLoader","hasGeometry","basicGeometryLoaded","allGeometryLoaded","m_tileLoader","loadAndDecode","tileLoaderState","Ready","Canceled","Failed","m_animatedExtrusionTileHandler","handler","disposeMaterial","materialProperty","shouldDisposeTexture","disposeObject","shouldDisposeObjectGeometry","shouldDisposeObjectMaterial","rootObject","traverse","preparedTextPaths","clearTextElements","hasTextElements","cancel","worldExtent","LodMesh","setLevelOfDetail","newBoundingBox","tmpPos","num3dObjects","numTextElements","aggregatedObjSize","intersectionData","numEntries","techniqueIndex","ids","getRoadIntersectionDataSize","numUserTextElements","RingBuffer","head","tail","data","next","enqOne","previous","Iterator","m_buffer","m_index","SimpleTimer","statistics","running","m_currentValue","SampledTimer","numResets","maxNumSamples","samples","getStats","computeArrayStats","asArray","median","median75","median90","median95","median97","median99","median999","mid","avg","numSamples","stages","stage","hasTimer","getTimer","currentStage","stop","timers","nullTimer","keepSamples","timer","addTimer","header","footer","maxNameLength","print","toFixed","simpleStats","FrameStats","messages","oldValue","FrameStatsArray","frameEntries","frameStats","currentSize","enq","maxNumFrames","configs","m_instance","m_frameEvents","clearFrames","webGlInfo","calls","lines","triangles","memory","textures","programs","performance","totalJSHeapSize","usedJSHeapSize","jsHeapSizeLimit","addFrame","onlyLastFrame","frames","plainObject","getAsPlainObject","simpleStatistics","AnimatedExtrusionState","m_mapView","duration","forceEnabled","m_tileHandlerMap","m_zoomDirection","m_zoomLevelPrevious","tileHandler","zoomLevelChanged","m_forceAnimatedExtrusion","animatedExtrusion","m_forceAnimatedExtrusionDuration","extrusionDuration","tileKeys","m_tile","extrudedObjects","m_animatedExtrusionDuration","m_extrudedObjects","m_animatedExtrusionState","None","m_animatedExtrusionStartTime","animateExtrusion","Playing","Started","currentTime","timeProgress","extrusionRatio","easeInOutCubic","Finished","stopExtrusionAnimation","animatedExtrusionHandler","extrudedObject","startExtrusionAnimationIfNeeded","zoomDirection","customDepthMaterial","removeTile","childTileKeys","getSubTileKeys","childTileKey","extrusionStartTime","nextLevelDiff","getChildTiles","parentTileKey","startExtrusionAnimation","parentUri","childUri","absoluteUrlWithOriginRe","test","getUrlOrigin","substr","baseUrl","RegExp","idx","lastIndexOf","getUrlHostAndProtocol","protocol","host","urlOriginRe","match","emptyTexture","visibilityRange","linkMixinWithMaterial","mixin","shaderDefines","shaderUniforms","linkMixinWithShader","DisplacementFeature","FadingFeature","ExtrusionFeature","isEnabled","displacementMaterial","updateDisplacementFeature","useDisplacementMap","onBeforeCompile","insertShaderInclude","DisplacementFeatureMixin","m_displacementMap","setDisplacementMap","Uniform","displacementScale","displacementBias","chainCallbacks","source","fadingMaterial","DEFAULT_FADE_NEAR","DEFAULT_FADE_FAR","patchGlobalShaderChunks","ShaderChunk","fading_pars_vertex","updateFadingFeature","useFading","addRenderHelper","updateUniforms","additionalCallback","onBeforeRender","FadingFeatureMixin","m_fadeNear","m_fadeFar","getFadeNear","setFadeNear","getFadeFar","setFadeFar","extrusionMaterial","extrusion_pars_vertex","updateExtrusionFeature","useExtrusion","ExtrusionFeatureMixin","m_extrusion","getExtrusionRatio","setExtrusionRatio","zFightingWorkaround","ZFIGHTING_WORKAROUND","addFadingProperties","applyFadingParameters","addExtrusionProperties","applyExtrusionParameters","addDisplacementProperties","applyDisplacementParameters","copyFadingParameters","copyExtrusionParameters","copyDisplacementParameters","MapMeshDepthMaterial","MeshDepthMaterial","MeshStandardMaterial","applyMixinsWithoutProperties","LineCapsModes","extrude_line_vert_func","round_edges_and_add_caps","CAPS_NONE","CAPS_SQUARE","CAPS_ROUND","CAPS_TRIANGLE_IN","CAPS_TRIANGLE_OUT","tile_clip_func","high_precision_vert_func","StringEncodedNumeralType","StringEncodedMeters","Meters","regExp","decoder","encodedValue","exec","StringEncodedPixels","Pixels","StringEncodedHex","Hex","StringEncodedRGB","RGB","channels","StringEncodedRGBA","RGBA","parseFloat","StringEncodedHSL","HSL","StringEncodedMetricFormats","StringEncodedMetricFormatMaxSize","StringEncodedColorFormats","StringEncodedColorFormatMaxSize","StringEncodedNumeralFormats","StringEncodedNumeralFormatMaxSize","tmpBuffer","numeral","pixelToMeters","matchedFormat","formats","baseTechniqueParamsDescriptor","attrScopes","AttrScope","TechniqueGeometry","FeatureGeometry","transient","TechniqueRendering","pointTechniquePropTypes","mergeTechniqueDescriptor","enablePicking","squaresTechniquePropTypes","squares","circlesTechniquePropTypes","circles","lineMarkerTechniquePropTypes","useAbbreviation","useIsoCode","textMayOverlap","iconMayOverlap","textReserveSpace","iconReserveSpace","alwaysOnTop","showOnMap","stackMode","iconFadeTime","textFadeTime","iconXOffset","iconYOffset","iconScale","screenHeight","screenWidth","poiTable","poiName","poiNameField","imageTextureField","imageTexturePrefix","imageTexturePostfix","hAlignment","vAlignment","polygonalTechniqueDescriptor","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","lineColor","lineFadeFar","lineFadeNear","solidLineTechniqueDescriptor","clipping","secondaryRenderOrder","secondaryWidth","secondaryColor","dashSize","gapSize","lineTechniqueDescriptor","fillTechniqueDescriptor","fill","standardTechniqueDescriptor","roughness","metalness","alphaTest","emissive","emissiveIntensity","refractionRatio","mapProperties","normalMapProperties","displacementMapProperties","roughnessMapProperties","emissiveMapProperties","bumpMapProperties","metalnessMapProperties","alphaMapProperties","standard","extrudedPolygonTechniqueDescriptor","floorHeight","defaultColor","defaultHeight","constantHeight","boundaryWalls","footprint","maxSlope","enableDepthPrePass","animateExtrusionDuration","lineColorMix","textTechniqueDescriptor","shaderTechniqueDescriptor","isStandardExtrudedLineTechnique","isFillTechnique","dashes","textureCoordinateType","transferList","texturePropertyKey","ArrayBuffer","imageName","textureName","UPDATE_EVENT","DataSource","cacheable","useGeometryLoader","addGroundPlane","minDataLevel","maxDataLevel","minDisplayLevel","maxDisplayLevel","m_storageLevelOffset","m_featureStateMap","storageLevelOffset","uniqueNameCounter","m_styleSetName","styleSet","tmpVector3","tmpVector2","AttachmentCache","bufferAttributes","interleavedAttributes","AttachmentInfo","description","getBufferAttribute","getArrayConstructor","interleavedBuffer","InterleavedBuffer","stride","attrs","interleavedAttr","TileGeometryCreator","enabledKinds","disabledKinds","_kindState","srcGeometry","createdOffsets","compileTechniques","createObjects","preparePois","createTextElements","isPoiTechnique","isLineMarkerTechnique","isTextTechnique","createLabelRejectionElements","pathGeometries","addBlockingElement","PathBlockingElement","processPriorities","initDecodedTile","geometryKind","resetVisibilityCounter","textPathGeometries","textFilter","processedPaths","newPaths","pop","textStyleCache","discreteZoomLevel","discreteZoomEnv","prepareTextPaths","ContextualArabicConverter","convert","getRenderStyle","getLayoutStyle","pathLengthSqr","textGeometries","stringCatalog","positions","numPositions","getX","getY","getZ","texts","techniqueFilter","attachment","getAttachments","groupCount","groupIndex","usesObject3D","onMaterialUpdated","addOwnedTexture","createMaterial","techniqueKind","setupTerrainMaterial","vertexAttributes","vertexAttribute","setAttribute","interleavedVertexAttributes","attr","getInterleavedBufferAttributes","setIndex","getAttribute","needsVertexNormals","computeVertexNormals","isSolidLineTechnique","isHighPrecisionLineMaterial","lineMaterial","clipTileSize","setShaderMaterialDefine","hasSolidLinesOutlines","hasFeatureGroups","featureStarts","buildObject","geometryId","isCirclesTechnique","isSquaresTechnique","enableRayTesting","isLineTechnique","isSegmentsTechnique","hasDynamicColor","fadingParams","getFadingParams","mat","unitFactor","metricUnit","outlineWidth","extrudedMaterial","addUserData","castShadow","receiveShadow","hasDynamicPrimaryColor","hasDynamicSecondaryColor","polygonMaterial","standardMat","extrusionAnimationEnabled","animateExtrusionValue","isRenderDepthPrePassEnabled","depthPassMesh","createDepthPrePassMesh","registerTileObject","materialFeature","setDepthPrePassStencil","edgeIndex","edgeGeometry","colorAttribute","extrusionAttribute","normalAttribute","uvAttribute","extrudedPolygonTechnique","getPolygonFadingParams","materialParams","colorMix","edgeMaterial","EdgeMaterial","edgeObj","depthPacking","RGBADepthPacking","extrusionAnimationDuration","animatedExtrusionTileHandler","AnimatedExtrusionTileHandler","outlineGeometry","fillTechnique","outlineMaterial","outlineObj","outlineTechnique","secondaryCaps","caps","techniqueLineWidth","techniqueSecondaryWidth","techniqueOpacity","poiGeometries","addPois","createTexCoords","shouldSubdivide","tmpV","moveTileCenter","geom","posArray","sw","se","nw","ne","posAttr","toArray","normAttr","uvAttr","sphericalModifier","SphericalGeometrySubdivisionModifier","zoomLevelOffset","subdivision","zoomLevelGeometry","EdgeLengthGeometrySubdivisionModifier","SubdivisionMode","All","modify","createGroundPlaneMaterial","createGroundPlane","Background","mainAttachment","attachments","_category","_styleSet","computeRenderOrder","category","findIndex","entry","_secondaryCategory","terrainColor","tileDisplacementMap","xCountVertices","yCountVertices","LuminanceFormat","DEFAULT_COLOR_MIX","GlyphData","advanceX","u0","v0","u1","v1","font","sourceTextureCoordinates","dynamicTextureCoordinates","copyIndex","isInCache","character","String","fromCodePoint","direction","metrics","lineHeight","MAX_CAPACITY","VERTEX_BUFFER_STRIDE","INDEX_BUFFER_STRIDE","VERTICES_PER_QUAD","INDICES_PER_QUAD","QUAD_VERTEX_MEMORY_FOOTPRINT","QUAD_INDEX_MEMORY_FOOTPRINT","backgroundMaterial","initialSize","m_currentCapacity","m_drawCount","m_updateOffset","m_pickingCount","m_vertexBuffer","setUsage","DynamicDrawUsage","m_positionAttribute","m_uvAttribute","m_colorAttribute","m_bgColorAttribute","m_indexBuffer","m_geometry","m_pickingDataArray","m_bgMesh","updateRange","setDrawRange","glyphData","corners","weight","bgWeight","mirrored","newSize","resizeBuffers","baseVertex","baseIndex","setXYZW","mirroredUVIdx","setX","vertexOffset","bgColor","bgOpacity","cosR","sinR","offsetZ","rotSign","red","green","blue","bgRed","bgGreen","bgBlue","bgAlpha","targetOffset","srcOffset","glyph","w","bw","startIdx","endIdx","pickCallback","positionIndex","newVertexBuffer","newIndexBuffer","TypesettingUtils","EM_TO_PX","PT_TO_PX","OBLIQUE_ANGLE","OBLIQUE_OFFSET","getPixelSize","originalSize","Em","Percent","getSmallCapsScale","smallCapsTransformations","SmallCaps","xHeight","capHeight","computeGlyphTransform","localRotation","cosAngle","sinAngle","localCosAngle","localSinAngle","updateBounds","globalBounds","individualBounds","Box2","raycaster","screenCoords","origin","mouseCoords","ceil","indices","il","fromArray","pointInfo","getPointInfo","pointIsOnScreen","testPoint","absoluteScreenPosition","relativeScreenPosition","pickCoordinates","dx","dy","halfSize","isNode","DebugOption","SET_EVENT_TYPE","DebugContext","m_optionsMap","__debugContext","opt","hasEventListener","option","ColorCache","m_map","colorCode","padStart","decoderServiceType","scriptUrl","workerCount","workerSet","getWorkerSet","WorkerBasedDecoder","workerSets","ConcurrentWorkerSet","destroy","sourceInfo","existingInfo","findItem","year","link","formatAsHtml","filtered","HighPrecisionUtils","doubleToFloatVec","fround","createHighPrecisionCameraPos","objectInverseWorldMatrix","mvp","eyePos","eyePosFloat","viewProjection","eyePosHi","eyePosLo","createAttributes","positionVec","positionVecLow","addHPValue","major","addHPVector","vec","positionHigh","Float32BufferAttribute","positionLow","addInterleavedAttributes3","positionOffset","newPositions","majorX","minorX","majorY","minorY","majorZ","minorZ","setPositions","makeFloatVec","minorVec","updateHpUniforms","shaderMaterial","highPrecisionCameraInfo","isMaterial","u_mvp","u_eyepos","u_eyepos_lowpart","convertPositions","vAny","returnPositions","createLine","linePositions","addCircles","wireFrame","triangulateLine","hpLineGeometry","hpPositions","positionAttribute","positionLowAttribute","hpSolidMaterial","lineObject","HPL","HighPrecisionWireFrameLine","HighPrecisionLine","setupForRendering","createPoints","pointPositions","materialParameters","hpPointsGeometry","hpPointsMaterial","isHighPrecisionPointMaterial","HighPrecisionPointMaterial","pointsObject","HPP","HighPrecisionPoints","FeatureModifierId","OmvFilterString","StringMatch","matchString","str","filterString","Any","Match","StartsWith","EndsWith","endsWith","OmvGeometryType","OMV_TILE_DECODER_SERVICE_TYPE","OMV_TILER_SERVICE_TYPE","OmvTile","Tile","EquirectangularProjection","geoToWorldScale","worldToGeoScale","latitudeSpanInRadians","longitudeSpanInRadians","sizeX","sizeY","normalizedEquirectangularProjection","equirectangularProjection","TransverseMercatorProjection","m_phi0","m_lambda0","_unitScale","lon","TransverseMercatorUtils","POLE_RADIUS","rsq","POLE_RADIUS_SQ","nearestQuarter","deltaLon","deltaLat","distanceToPoleSq","distanceToPole","dir","offsetLon","clamped","clampGeoPoint","normalLon","phi","lambda","B","atanh","outScale","tau","nx","ny","D","sinh","pointsToCheck","E","POLE_EDGE_DEG","containsEastCut","containsCenterX","containsCenterY","alignLatitude","projected","vx","vy","vz","minZ","maxZ","lowerQ","upperQ","containsLowerQY","containsUpperQY","geoPoints","alignLongitude","latitudes","longitudes","altitudes","referencePoint","bad","good","POLE_EDGE","transverseMercatorProjection","tilingScheme","m_tilingScheme","m_worldBox","m_worldDimensions","levelDimensionX","getLevelDimensionX","levelDimensionY","getLevelDimensionY","originX","originY","unprojectBox","halfQuadTreeSubdivisionScheme","SubTiles","iterator","ZCurveIterator","RowColumnIterator","parentKey","worldCoordinatesToTileKey","cx","cy","worldSizeX","worldSizeY","wrap","lower","upper","minVal","maxVal","southWestLongitude","longitudeInRadians","southWestLatitude","northEastLongitude","northEastLatitude","minTileKey","maxTileKey","columnCount","minColumn","maxColumn","minRow","maxRow","m_subdivisionScheme","divX","getSubdivisionX","divY","getSubdivisionY","optionalParams","console","trace","m_channel","Trace","prefix","Debug","Info","Warn","WORKERCHANNEL_MSG_TYPE","workerMessage","self","postMessage","CopyShader","tDiffuse","CopyMaterial","NoBlending","interpolants","DiscreteInterpolant","LinearInterpolant","CubicInterpolant","ExponentialInterpolant","getInterpolatedMetric","nChannels","interpolant","Exponential","evaluate","_stringEncodedNumeralDynamicMask","resultBuffer","maskInterpolant","Dynamic","parseStringEncodedNumeral","_stringEncodedNumeralType","getInterpolatedColor","isCubic","removeDuplicatePropertyValues","Discrete","firstValue","needsMask","propValues","maskValues","baseFormat","allowedValueFormats","valueIdx","matched","valueFormat","procesStringEnocodedNumeralInterpolatedProperty","StandardGeometryKind","GeometryKindSet","subset","elem","hasIntersection","TextureCoordinateType","PoiStackMode","descriptors","projectionName","sphereProjection","attributeMap","$id","emptyTechniqueDescriptor","StyleConditionClassifier","_whenExpr","savedStyle","switchStyle","_style","enclosingExpr","matchVarStringComparison","_geometryType","saved","OptimizedSubSetKey","keyUpdateNeeded","envLayer","envGeometryType","updateKey","cachedStyleSet","makeDecodedTechnique","attrValue","toJSON","m_techniques","m_exprPool","ExprPool","m_cachedResults","m_styleConditionClassifier","m_subStyleSetCache","m_definitionExprCache","m_tmpOptimizedSubSetKey","m_emptyEnv","m_featureDependencies","m_definitions","resolveStyleReferences","isJsonExprReference","definitionName","isActualSelectorDefinition","resolveReferences","techniqueRenderOrder","styleSetIndex","_styleSetIndex","computeDefaultRenderOrder","compileStyleSet","m_previousResult","m_previousEnv","optimizedSubSetKey","m_layer","m_geometryType","searchedStyleSet","getOptimizedStyleSet","currStyle","processStyle","techinque","_index","subSetKey","optimizedStyleSet","createPreFilteredStyleSet","compileStyle","checkStyleDynamicAttributes","when","classify","intern","deps","_minZoomLevelExpr","_maxZoomLevelExpr","err","checkZoomLevel","Condition","getTechniqueForStyleMatch","final","_dynamicTechniques","dynamicAttributes","evaluateTechniqueProperties","getDynamicTechniqueKey","createTechnique","_staticTechnique","dynamicAttrKey","_attrName","_dynamicTechniqueAttributes","_dynamicFeatureAttributes","_dynamicForwardedAttributes","_staticAttributes","dynamicFeatureAttributes","dynamicTechniqueAttributes","dynamicForwardedAttributes","targetStaticAttributes","techniqueDescriptor","processAttribute","_usesFeatureState","attrScope","secondaryCategory","labelProperty","instantiationContext","attrExpr","instantiate","dynamicAttrs","DEFAULT_TILING_SCHEME","newScheme","removeDecodedTile","MIN_SAFE_INTEGER","webMercatorTilingScheme","tmpVectorA","tmpVectorB","tmpVectorC","positionAttr","uv","edgeAttr","edge","wallAttr","wall","indexAttr","middleVertex","lerpVectors","newIndices","shift","v2","shouldSplitTriangle","v3","SdfShaderChunks","sdf_attributes","sdf_varying","sdf_varying_computation","sdf_frag_uniforms","sdf_sampling_functions","GlyphClearMaterial","GlyphCopyMaterial","pageOffset","page0","DEFAULT_IMAGE","page1","page2","page3","page4","page5","page6","page7","SdfTextMaterial","vertexSource","fragmentSource","sdfTexture","sdfParams","Vector4","distanceRange","MSDF","isMsdf","BG_TEXT","isBackground","side","DoubleSide","extensions","derivatives","characterBounds","DisplacedBufferAttribute","originalAttribute","m_normals","m_uvs","m_textureWidth","m_textureHeight","m_cache","VertexCache","MAX_CACHE_SIZE","m_lastPos","m_tmpNormal","resetTexture","normals","uvs","m_lastBufferIndex","getDisplacedCoordinate","m_texture","bufferIndex","displacePosition","fromBufferAttribute","u","sampleBilinear","AlphaFormat","RGBFormat","RGBAFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","dataType","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","AmbientLight","intensity","DirectionalLight","bias","mapSize","DEPTH_PRE_PASS_STENCIL_MASK","createDepthPrePassMaterial","baseMaterial","depthFunc","EqualDepth","colorWrite","enforceBlending","depthPassMaterial","LessDepth","evaluateBaseColorProperty","originalGeometry","depthPassGeometry","extrusionAxisAttribute","materialIndex","depthMesh","colorMesh","depthMaterial","stencilWrite","stencilFail","KeepStencilOp","stencilZFail","stencilZPass","ReplaceStencilOp","stencilFunc","AlwaysStencilFunc","stencilRef","stencilFuncMask","colorMaterial","ZeroStencilOp","EqualStencilFunc","overlayObject","hasDisplacementFeature","overlayPosition","worldCoords","geoCoords","contains","sampleHeight","overlayPath","firstObject","Terrain","extendedTileInfo","lineFeatures","lineGroup","numFeatures","widths","techniqueCatalog","featureIds","pickPos","distanceToPoint","techniqueIndices","px","py","pickDistance","featureStart","featureEnd","startX","startY","widthEntry","actualWidth","lineWidthSqr","closestDistSqr","MAX_VALUE","endX","endY","distSqr","distToSegmentSquared","roadPickResult","distFromCenter","tmpPosition","tmpCameraDir","refPosition","viewDistance0","viewDistance1","anchorPlacementsCentered","Center","Below","Right","anchorPlacementsCornered","tmpPlacementPosition","tmpPlacementBounds","viewCamera","updatePoiFromPoiTable","projectionType","getWorldPosition","checkViewDistance","TooFar","NotReady","tmpBox","tmpBoxes","tmpMeasurementParams","tmpCollisionBoxes","tmpCollisionBox","CollisionBox","tmpScreenPosition","tmpTextOffset","tmp2DBox","Box","pointLabelMargin","placePointLabelAtCurrentAnchor","screenCollisions","isRejected","forceMeasurement","outScreenPosition","measureText","outputCharacterBounds","textOffset","hAlign","vAlign","poiIsRenderable","computedWidth","computedHeight","computePointTextOffset","expandByVector","translate","persistent","isAllocated","textReservesSpace","allocate","PoiRenderer","computeIconScreenBox","multiAnchor","newLabel","basePlacement","placements","placementsNum","matchIdx","allInvisible","tryIdx","anchorPlacement","basePlacementTest","placementResult","placePointLabelChoosingAnchor","candidateBoxes","checkGlyphCollision","search","checkGlyphVisible","isFullyVisible","glyphBox","collisionBox","intersectsDetails","DetailedCollisionBox","screenProjector","outScreenPoints","anyPointVisible","projectOnScreen","minScreenSpace","setFromPoints","lengthSq","tempPos","PoiRenderBufferBatch","imageItem","getColor","boxBuffer","setup","init","updateBufferGeometry","updateMemoryUsage","iconTexture","IconTexture","imageData","UVMapping","premultiplyAlpha","generateMipmaps","m_material","IconMaterial","BoxBuffer","PoiRenderBuffer","batches","m_batchMap","imageTextureName","batchKey","mappedIndex","bufferBatch","batchSet","screenBox","batchIndex","registerPoi","uvBox","addBox","batch","pickBoxes","m_tempScreenBox","m_renderBuffer","centerX","centerY","preparePoi","allocateScreenSpace","addPoi","poiTableName","getImageTexture","m_missingTextureName","imageDefinition","imageCache","findImageByName","loaded","loadingPromise","imageUrl","loadImage","loadedImageItem","setupPoiInfo","imageWidth","imageHeight","iconWidth","iconHeight","minS","maxS","minT","maxT","iconScaleH","iconScaleV","s0","t0","s1","t1","ImageOrigin","RBush","detailBoxes","isLineWithBound","screenBounds","rtree","bbox","insert","containsBox","testBox","detailBox","boundedLine","intersectsLine","lineXDiffTransformed","signBL","signBR","signTL","signTR","lineYDiffTransformed","normalX","normalY","debugCanvas","m_renderContext","m_renderingEnabled","m_numAllocations","m_numSuccessfulTests","m_numFailedTests","m_numSuccessfulVisibilityTests","m_numFailedVisibilityTests","getContext","strokeStyle","strokeRect","boundsArray","collisionFound","f","_maxEntries","_minEntries","leaf","_all","toBBox","collides","_build","_splitRoot","_insert","_condense","compareMinX","compareMinY","apply","_chooseSubtree","_split","_adjustParentBBoxes","_chooseSplitAxis","_chooseSplitIndex","M","_allDistMargin","defaultTextRenderStyle","defaultTextLayoutStyle","m_textStyles","m_defaultStyle","themedDefaultStyle","createTextElementStyle","textRenderers","styledTextRenderer","styleId","defaultRenderParams","defaultOpacity","hexColor","defaultBackgroundSize","hasBackgroundDefined","defaultBackgroundOpacity","hexBgColor","themeRenderParams","floorZoomLevel","defaultLayoutParams","wrapping","themeLayoutParams","styleName","fontCatalogName","m_geometries","disposeGeometries","m_throttlingTimeout","m_movementStartedFunc","m_movementFinishedFunc","m_lastCameraPos","m_newCameraPos","m_throttlingTimerId","m_movementDetectorDeadline","onDeadlineTimer","startMovementFinishedTimer","newAttitude","newCameraPos","m_lastAttitude","cameraMoved","equals","m_cameraMovedLastFrame","NaN","removeMovementFinishedTimer","remainingTime","nearMin","nearMultiplier","nearFarMultiplier","farOffset","m_tmpVectors","m_tmpQuaternion","farMin","nearPlane","farPlane","extractBasis","fwd","fwdRot","ElevationBasedClipPlanesEvaluator","m_minElevation","m_maxElevation","TopViewClipPlanesEvaluator","nearFarMarginRatio","farMaxRatio","nearFarMargin","m_minimumViewRange","evaluateDistanceSphericalProj","evaluateDistancePlanarProj","minimumViewRange","getCameraAltitude","farMax","cameraAltitude","cam","halfFovAngle","farTangent","getTangentBasedFarPlane","getFovBasedFarPlane","getOrthoBasedFarPlane","getTangentDistance","te","fovAngle","dVec","cameraFwdVec","tVec","cta","a2","r2","TiltViewClipPlanesEvaluator","halfPiLimit","cameraTilt","topAngleRad","bottomAngleRad","z1","z2","sinBeta","topDist","bottomDist","planesDist","getFrustumGroundIntersectionDist","cosHalfFov","cameraToOrigin","getCameraPitch","modifiedAlpha","getTiltedFovBasedFarPlane","cosAlpha","dSqr","cosAlpha1","minNear","minFarOffset","minFar","m_nearPlane","m_farPlane","fixedNear","invalidatePlanes","fixedFar","nearDist","farDist","MSAARenderPass","MSAASampling","samplingLevel","Level_1","m_renderTarget","m_localCamera","m_quadScene","m_quadUniforms","m_quadMaterial","MSAAMaterial","m_quad","WebGLRenderTarget","offsets","OffsetVectors","oldClearColor","oldView","oldRenderTarget","getRenderTarget","setViewOffset","uniformCenteredDistribution","sampleWeight","isLoggingMessage","DEFAULT_WORKER_INITIALIZATION_TIMEOUT","m_workerChannelLogger","m_eventListeners","m_workers","m_availableWorkers","m_workerPromises","m_readyPromises","m_requests","m_workerRequestQueue","m_nextMessageId","m_stopped","m_referenceCount","onWorkerMessage","workerId","WorkerServiceProtocol","isResponseMessage","messageId","worker","checkWorkerRequestQueue","errorMessage","errorStack","stack","resolver","isInitializedMessage","readyPromise","getReadyPromise","service","eventHandler","m_workerCount","hardwareConcurrency","timeout","workerConnectionTimeout","workerPromise","WorkerLoader","startWorker","evt","waitForAllResponses","terminateWorkers","serviceId","ensureStarted","promise","callback","request","requestController","reject","ServiceMessageName","Request","postRequestMessage","promises","buffers","signal","aborted","RequestController","unshift","workerEntry","terminate","newPromise","that","startWorkerImmediately","directlyFallbackToBlobBasedLoading","startWorkerBlob","pageUrl","href","fullScriptUrl","Worker","waitWorkerInitialized","fetchScriptSourceToBlobUrl","blobUrl","sourceLoaderCache","scriptSource","blob","firstMessageCallback","isWorkerBootstrapRequest","resolvedDependencies","dependency","resolved","dependencyUrlMapping","cleanup","errorCallback","filename","lineno","timerId","nextUniqueServiceId","m_serviceCreated","addReference","broadcastRequest","WORKER_SERVICE_MANAGER_SERVICE_ID","Requests","DestroyService","targetServiceId","removeReference","CreateService","targetServiceType","tileKeyCode","WorkerDecoderProtocol","DecodeTileRequest","getProjectionName","invokeRequest","TileInfoRequest","DecoderMessageName","Configuration","broadcastMessage","CalculationStatus","m_name2Url","m_url2Name","hasName","oldNames","ImageCache","findImage","registerImage","startLoading","m_images","imageCacheItem","findImageCacheItem","mapViews","itemsToRemove","mapViewIndex","keyToDelete","imageLoader","ImageLoader","renderImage","ex","errorEvent","createImageBitmap","imageBitmap","document","createElement","drawImage","getImageData","m_enabled","Fog","m_fogIsDefined","m_cachedTheme","enableFog","startRatio","viewRange","horizontalDensity","verticalDensity","endRatio","density","smoothStep","lerp","setFogInRawShaderMaterials","Material","m_imageTextures","m_poiShieldGroups","m_missingPoiTableName","loadedOk","m_missingPoiName","assertExists","poiGeometry","addLineMarker","ok","statusText","jsonAtlas","imageTextureDef","reason","getPoiTable","notifyMissingPoiTable","poiTableEntry","getEntry","notifyMissingPoi","iconName","composeTechniqueTextureName","iconMinLevel","iconMaxLevel","textMinLevel","textMaxLevel","updateMinMaxZoomLevelsFromPoiInfo","groupKey","positionArray","checkCreateTextElement","techniqueTextureName","poiTechnique","PoiTableEntry","jsonEntry","isOK","altNames","Show","Hide","ShowParent","PoiTable","useAltNamesForKey","poiList","poiDict","m_isLoading","m_loadedOk","entryIdx","poiTableUrl","jsonPoiTable","tableEntry","verifyJSON","newPoiEntry","altName","m_poiTables","loadPromises","poiTableRef","addTable","finally","finishLoading","debugTiles","polarTilingScheme","m_maxLatitude","m_geometryLevelOffset","m_debugTiles","m_northPoleMaterial","m_southPoleMaterial","m_styleSetEvaluator","styleSetEvaluator","$geometryType","$layer","getMatchingTechniques","StyleSetEvaluator","setStyleSet","createTileGeometry","latA","latB","lonA","lonB","isNorthPole","srcProjection","dstProjection","maxLat","poleLat","pBL","pBR","pTR","pTL","needsGeometryCut","isLeftHalf","poleX","poleY","pPole","pXX","lats","lmax","lmin","nearest","inPointB","inPointD","cutStart","intersectEdge","cutEnd","cutIndexStart","cutIndexEnd","Face3","fromGeometry","SkyCubemapFaceId","SKY_CUBEMAP_FACE_COUNT","createCubemapFaceArray","m_skybox","CubeTextureLoader","CubeTexture","face","DEFAULT_MAX_THEME_INTHERITANCE_DEPTH","themeUrl","resolveReferenceUri","getAppBaseUrl","resolveUrls","checkTechniqueSupport","resolveDefinitions","resolveBaseThemes","contextLoader","ContextLogger","resolveThemeReferences","extends","childUrlResolver","composeUriResolvers","RelativeUriResolver","resolveIncludes","resolveIncludeUris","baseTheme","convertFlatTheme","resolveResourceUris","resolveResources","contextLogger","pushAttr","resolvedDef","resolveStyle","resolveStyleSet","currentStyle","pushIndex","resolvedStyle","cloneDeep","resolvedWhen","resolveExpressionReferences","resolvedValue","failed","resolveInternal","defName","maxInheritanceDepth","baseThemes","baseThemesMerged","actualBaseTheme","mergeThemes","currentStyleSets","incomingStyleSets","faceUrl","DataSourceCache","cacheSize","rct","m_disposedTiles","m_resourceComputationType","m_tileCache","LRUCache","evictionCallback","canEvict","getKey","setCapacityAndMeasure","getKeyForTile","deleteByKey","shrinkToCapacity","evictAll","selector","evictSelected","inDataSource","m_frustumIntersection","m_cameraOverride","m_viewRange","m_coveringMap","m_dataSourceCache","computationType","setCapacity","evaluateClipPlanes","visibleTileKeysResult","getVisibleTileKeysForDataSources","visibleTileKeys","distanceDiff","minDiff","actuallyVisibleTiles","allDataSourceTilesLoaded","dataZoomLevel","getDataZoomLevel","tileEntry","getTile","prepareTileInfo","skipOverlappedTiles","visibleArea","updateTiles","allVisibleTileLoaded","allBoundingBoxesFinal","fillMissingTilesFromCache","disposeTile","oldViewRanges","newViewRanges","getTileImpl","dataSourceVisibleTileList","visibleLevel","visibleTileKey","getTileKey","searchLevelsUp","searchLevelsDown","getCacheSearchLevels","childLevel","markDataSourceTilesDirty","disposeTiles","listEntry","isFullyCovering","SearchDirection","defaultSearchDirection","NONE","BOTH","DOWN","UP","incompleteTiles","tileCode","checkedTiles","searchDirection","findUp","findDown","childTileCode","childTile","parentCode","exists","parentTile","foundUp","cacheOnly","updateTile","tileToUpdate","resultTile","tileCache","initTile","dataSourceCache","retainedTiles","markTileDirty","tileGeometryManager","dataSourceBuckets","bucket","updateFrustum","compute","calculationFinal","tileKeyEntry","tileKeyEntries","canGetTile","ConcurrentTilerFacade","tilerServiceType","WorkerBasedTiler","indexId","input","WorkerTilerProtocol","RegisterIndex","UpdateIndex","TileRequest","m_cachedTreePromise","getCopyrightCoverageData","coverageInfo","initRBush","matchingEntries","getTree","minLevel","maxLevel","item","tree","alt","arg","isLineAccessor","isObject3dAccessor","BufferedGeometryAccessorBase","startCapSize","endCapSize","constructor","rawShaderMaterial","diffuse","BufferedGeometryAccessor","checkSetUp","positionsArray","subarray","getVertices","IndexedBufferedGeometryAccessor","reconstructLineWidth","k","UNIT_Z","POINTS","BEVEL_POINTS","STEP","addCircle","lineAngle","SECTORS_IN_CIRCLE","angle","startWithCircle","endWithCircle","angleVec","prevBt","bt","averageBt","p2","p3","N","useBevel","inclineWidth","inBuffer","startOffset","outBuffer","i2","startIndex","xd","yd","zd","_renderer","_scene","_geometry","_material","_group","force","doUpdateMatrixWorldInverse","matrixWorldNeedsUpdate","TileLoader","dataProvider","tileDecoder","loadAbortController","AbortController","Loading","Decoding","donePromise","abort","onDone","myLoadCancellationToken","payload","onLoaded","resolveDonePromise","rejectedDonePromise","byteLength","startDecodeTile","decodeTile","onDecoded","doneState","getTileInfo","APIFormat","AuthenticationMethod","AuthenticationTypeBearer","method","AuthorizationHeader","AuthenticationTypeTomTomV1","QueryString","AuthenticationTypeAccessToken","downloadManager","TransferManager","urlParams","abortSignal","tileUrl","dataUrl","authenticationCode","getActualAuthenticationCode","applyAuthCode","addQueryParams","apiFormat","XYZJson","downloadJson","downloadArrayBuffer","getBearerToken","HereV1","MapboxV4","XYZOMV","XYZMVT","XYZSpace","TomtomV1","authMethod","authenticationMethod","getDefaultAuthMethod","headers","Headers","authType","append","authParams","queryParams","queryString","concatinator","s3Base","querySelector","getElementById","innerText","getFullYear","releases","date","hash","version","dropdown","res","release","appendChild","onchange","selected","omvDataSource","OmvDataSource","apikey","innerWidth","beginAnimation","main","IdentityProjection","identityProjection","getLongitudeQuadrant","oneOverPI","quadrantIndex","lengthOfVector3","makeBox3","halfEquatorialRadius","minLongitude","maxLongitude","minLongitudeQuadrant","maxLongitudeQuadrant","xMin","xMax","yMin","yMax","cosMaxLongitude","sinMaxLongitude","xCenter","xExtent","yCenter","yExtent","minLatitude","maxLatutide","zMax","zMin","zCenter","zExtent","SphereProjection","_minElevation","worldpoint","cosLatitude","parallelRadiusSq","parallelRadius","midX","midY","cosSouth","sinSouth","cosWest","sinWest","cosNorth","sinNorth","cosEast","sinEast","cosMidX","sinMidX","cosMidY","sinMidY","rMax","rMin","_worldBox","mx","my","gx","gy","cosLongitude","sinLongitude","sinLatitude","visitTileKey","subTileKey","hereTilingScheme","TilingScheme","mercatorTilingScheme","intersectsSlab","rayDir","axis","extent","finv","t2","tmpVec","tmpT","rotationMatrix","newBox","matrix","frustumOrPlanes","planes","plane","dz","distanceToPointSquared","subVectors","lengths","getComponent","dd","parameters","shaderParams","DEFAULT_CIRCLE_SIZE","m_color","m_opacity","PriorityListGroup","foundIndex","GroupedPriorityList","getGroup","findGroup","otherGroup","normalizedPriority","LoggerManagerImpl","m_loggers","channel","ConsoleChannel","WorkerChannel","loggerName","m_levelSetForAll","Logger","config","ax","ay","bx","by","xmax","ymax","computeSquaredLineLength","squaredLineLength","xDiff","yDiff","l0x","l0y","l1x","l1y","lineLengthSuared","edge0","edge1","smootherStep","inMin","inMax","outMin","outMax","lowerBound","upperBound","startValue","endValue","derivedCtor","baseCtors","baseCtor","getOwnPropertyDescriptor","m_logger","headerMessage","m_headerLogged","createLogMethod","severity","rest","nowFunc","getTime","getNowFunc","cloneInternal","src","cached","flags","candidate","optionValue","uri","resolvers","originalUrl","f1","f2","maxXIndex","maxYIndex","xIndex","xIndexFloor","yIndex","yIndexFloor","swIndex","seIndex","nwIndex","neIndex","swElevation","seElevation","nwElevation","neElevation","xFrac","isInteger","xFracInverse","yFrac","yFracInverse","hasDisplacementMap","hasExtrusion","edgeColor","edgeColorMix","MIN_BUILDING_HEIGHT_SQUARED","extrusion_vertex","extrusion_normal_fragment_begin","extrusion_pars_fragment","extrusion_fragment","fading_vertex","fading_pars_fragment","fading_fragment","updateTransparencyFeature","points_frag","DEFAULT_SIZE","DEFAULT_SCALE","uvTransform","Matrix3","LuminosityHighPassShader","luminosityThreshold","smoothWidth","AdditiveBlending","SepiaShader","amount","LineCapsDefinesMapping","Square","Round","TriangleIn","TriangleOut","DefinesLineCapsMapping","lineCapsName","defineKey","LineDashesModes","LineDashesDefinesMapping","DASHES_SQUARE","DASHES_ROUND","Diamond","DASHES_DIAMOND","DefinesLineDashesMapping","lineDashesName","CAPS_MODE","DASHES_MODE","fogParam","opacityParam","merge","dashColor","outlineColor","extrusionWidth","DEFAULT_WIDTH","DEFAULT_OUTLINE_WIDTH","drawRange","DEFAULT_DRAW_RANGE_START","DEFAULT_DRAW_RANGE_END","DEFAULT_DASH_SIZE","DEFAULT_GAP_SIZE","UniformsLib","drawRangeStart","drawRangeEnd","invalidateFog","invalidateOpacity","capsMode","dashesMode","useTileClip","VignetteShader","darkness","operatorDescriptors","evaluator","m_partialEvaluation","previousEvaluationMode","fromValue","builtin","builtins","defineOperator","defineOperators","CastOperators","ComparisonOperators","MathOperators","StringOperators","ColorOperators","TypeOperators","MiscOperators","FlowOperators","ArrayOperators","InterpolationOperators","ObjectOperators","FeatureOperators","MapOperators","operators","at","rgba","rgbaToHex","rgb","rgbToHex","hsl","euclideanModulo","hslToHex","compare","strict","isEnv","conditionalCast","any","none","boolean","number","string","interpolate","_interpolatedProperty","_mode","interpolatorType","base","stops","isConstantInterpolation","createInterpolatedProperty","_exponent","_stops","prepareInterpolateCallExpr","interpolatedProperty","evaluateInterpolatedProperty","_inputIsZoom","classifyStepCallExpr","first","last","hasConstantValues","literal","prepareStepCallExpr","Interpolant","i1","sampleValues","valueSize","offset1","offset0","weight1","weight0","pixels","ppi","ln","ln2","log10","pi","coalesce","LookupMode","lookupMember","lookupMode","memberName","in","downcase","toLocaleLowerCase","upcase","toLocaleUpperCase","typeof","emptyEnv","_context","preserve","newBranch","newCondition","instantiatedBranch","Character","Token","isSpace","codepoint","Tab","Lf","Cr","Space","isNumber","_0","_9","isLetter","A","Z","isIdentChar","isLetterOrNumber","Dollar","Dot","LBracket","RBracket","tokenSpell","token","Eof","Identifier","Comma","LParen","RParen","Exclaim","TildeEqual","CaretEqual","DollarEqual","EqualEqual","ExclaimEqual","Less","Greater","LessEqual","GreaterEqual","BarBar","AmpAmp","Lexer","m_token","m_char","m_text","yylex","codePointAt","yyinp","ch","SingleQuote","DoubleQuote","Equal","Caret","Tilde","Bar","Amp","getEqualityOp","getRelationalOp","lex","parseLogicalOr","yyexpect","hasAttribute","parseLiteral","parseUnary","parsePrimary","parseRelational","parseEquality","expressions","parseLogicalAnd","isUnknownServiceError","isRequestMessage","Response","isRegisterIndexRequest","isUpdateIndexRequest","isTileRequest","abortController","isConfigurationMessage","isDecodeTileRequest","isTileInfoRequest","FeatureGroupType","FeatureGroup","storeExtendedTags","startSize","textIndex","layerIndex","classIndex","typeIndex","LineFeatureGroup","getNumBytes","segmentIds","segmentStartOffsets","segmentEndOffsets","PolygonFeatureGroup","groupNumRings","outerRingStartIndex","innerRingIsOuterContour","innerRingStartIndex","ExtendedTileInfo","textCatalog","pointGroup","polygonGroup","layerCatalog","classCatalog","typeCatalog","finishFeatureGroup","featureGroup","featureGroupFinished","getFeatureName","abbreviation","isoCode","finish","featureGroupSize","tileInfoFinished","getFeatureText","evaluateTechniqueAttr","attributeName","techniqueIndexMap","stringMap","layerMap","classMap","typeMap","infoTileTechniqueIndex","decodedTechnique","featureText","featureGroupType","stringIndex","addLayer","addClass","addType","segmentId","endOffset","contour","isOuterRing","addStringValue","ExtendedTileInfoVisitor","visitAllPointFeatures","visitAllLineFeatures","visitAllPolygonFeatures","numFeaturesFound","numPointFeatures","pointFeatures","visitPointFeature","numLineFeatures","visitLineFeature","numPolygonFeatures","polygonsFeatures","visitPolygonFeature","acceptPoint","getTag","positionsStart","numPointValues","acceptLine","acceptPolygon","polygons","ringStart","numRings","polygonAccessor","ringIndex","pointsStart","m_booleanLiterals","m_numberLiterals","m_stringLiterals","m_objectLiterals","m_arrayLiterals","m_varExprs","m_hasAttributeExprs","m_matchExprs","m_caseExprs","m_callExprs","branchesMatching","defaultValue","evaluated","cachedExprResults","visitFunc","visit","VERTEX_POSITION_CACHE","SubdivisionModifier","subdivisionMode","m_projectedBox","m_maxLengthX","m_maxLengthY","m_maxLength","shouldSplitAB","shouldSplitEdge","shouldSplitBC","shouldSplitCA","ab","bc","ca","maxDistance","NoDiagonals","aa","bb","cc","beta","gamma","FontCatalog","fonts","unicodeBlocks","maxCodePointCount","m_replacementGlyph","m_glyphTextureCache","GlyphTextureCache","m_loadingJson","m_loadingPages","m_loadingGlyphs","m_loadedJson","m_loadedPages","m_loadedGlyphs","loadJSON","replacementDirUrl","replacementJson","replacementTexture","loadTexture","replacementFont","replacementGlyph","chars","xadvance","xoffset","yoffset","supportedBlocks","rawJSON","loadPages","assetsPath","getAssetsPath","jsonPath","jsonPromise","pagePromises","page","pages","loadPage","pagePath","charset","AllCaps","toUpperCase","glyphPromises","char","getFont","fontHash","glyphHash","fontGlyphMap","glyphPromise","createReplacementGlyph","charUnicodeBlock","loadAssets","loadedGlyph","shouldTransform","transformedCharacter","getGlyph","selectedFontName","textureBytes","loadedPage","loadBlock","sourceGlyphData","texturePath","pagePromise","fontStylePath","Bold","bold","Italic","italic","BoldItalic","boldItalic","entryWidth","entryHeight","nRows","m_cacheHeight","m_cacheWidth","m_textureSize","m_entryCache","initCacheEntries","m_rt","depthBuffer","stencilBuffer","m_copyTextureSet","m_copyTransform","m_copyPositions","m_copyMaterial","m_copyVertexBuffer","m_copyPositionAttribute","m_copyUVAttribute","m_copyGeometry","copyIndexBuffer","m_copyMesh","m_copyGeometryDrawCount","m_clearMaterial","m_clearPositionAttribute","m_clearGeometry","clearIndexBuffer","m_clearMesh","m_clearGeometryDrawCount","oldestEntry","oldest","clearCacheEntry","copyGlyphToCache","willClearGeometry","willCopyGeometry","srcPages","nCopies","pageIndex","dummyFont","lineGap","dummyGlyphData","dummyEntry","cacheLocation","copyTextureIndex","applyMatrix3","setXYZ","setXY","Entry","newer","older","cacheCapacity","sizeFunction","m_size","m_newest","m_oldest","m_capacity","m_sizeFunction","callbackfn","thisArg","newCapacity","evict","sizeMeasure","entrySize","promoteEntry","newest","cb","entryOlder","deleteEntry","evictOldest","itemToRemove","isOk","tempTextPosition","tempTextBounds","tempVertexBuffer","m_fontCatalog","minGlyphCount","maxGlyphCount","m_ownsMaterial","createSdfTextMaterial","m_ownsBgMaterial","m_bgMaterial","m_defaultLayer","TextGeometry","m_layers","m_defaultTextRenderStyle","m_currentTextRenderStyle","m_defaultTextLayoutStyle","m_currentTextLayoutStyle","m_lineTypesetter","LineTypesetter","m_pathTypesetter","PathTypesetter","bgMaterial","backgroundMesh","oldTarget","layerId","outputBounds","upperCaseArray","pathOrigin","textPathOverflow","targetLayer","tempLayer","prevDrawCount","updatePosition","addPickingData","glyphArray","smallCapsEnabled","textBounds","storeStyles","computeTextBuffer","TextBufferObject","pick","glyphBounds","isPath","typesettingParams","smallCapsArray","vertexBuffer","arrangeGlyphs","m_tempTransform","m_tempCorners","m_tempLineDirection","m_tempRunDirection","m_tempPixelSize","m_tempPixelBgSize","m_tempScale","m_tempSmallCaps","m_currentParams","isOnlyMeasured","lineStartIdx","glyphWrapIdx","wordWrapIdx","lineStartX","lineCurrX","glyphWrapX","wordWrapX","lineCount","isBidirectionalLine","wrapPointIdx","wrapPointX","lineAlignment","placeLine","isBidirectional","placeRun","glyphDataArray","isRTL","runStart","neutralIdx","weakRunStart","weakGlyph","glyphFont","glyphFontMetrics","isBoldEmulated","isItalicEmulated","isSmallCaps","smallCapsScale","glyphScale","emulationWeight","isMirrored","verticalOffset","glyphVertexPosition","horizontalOffset","addToBuffer","m_tempPathPosition","m_tempPathLength","m_tempPathOffset","getLength","pathWidth","defaultGlyphRotation","normalDisplacement","textPoint","tangent","getTangent","ContextualForm","CombinedForm","m_singleCharactersMap","m_combinedCharactersMap","m_neutralCharacters","output","currentCodePoint","charCodeAt","isArabicCharacter","prevIndex","isNeutral","prevCodePoint","prevMap","getCharacterMap","Initial","Medial","nextIndex","nextCodePoint","nextMap","Final","combinedMap","getCombinedCharacterMap","fromCharCode","Connected","Isolated","isBufferGeom","isDisplacementMaterial","isDisplacementFeature","m_getDisplacementRange","firstMaterial","displacedPositions","isDataTexture","isDataTextureMap","raycast","displacementRange","m_displacedGeometry","DisplacedBufferGeometry","getDisplacedPositionAttribute","Field","maxVertexCount","m_vertexCount","m_oldestIdx","m_newestIdx","Count","vertexId","vertex","vertexIdx","getVertex","setVertex","newerIdx","getNewerIdx","olderIdx","getOlderIdx","setOlderIdx","setNewerIdx","OlderIdx","NewerIdx","X","Y","tmpNormalMin","tmpNormalMax","tmpBBox","m_displacementRange","m_originalBoundingBox","m_displacedPositions","resetAttributes","displacementRangeChanged","resetBoundingVolumes","computeBoundingBox","origBBox","union","boundingSphere","getBoundingSphere","needsBoundingBoxUpdate","computeBoundingSphere","Line3","BoxBufferMesh","startElementCount","maxElementCount","resizeBuffer","pickInfos","internalMesh","indexAttribute","glyphCount","positionAttributeCount","colorAttributeCount","uvAttributeCount","indexAttributeCount","pickInfoCount","pickInfo","canAddElements","clearAttributes","isEmpty","pickInfoIndex","isPixelTransparent","forceResize","xScreenPos","yScreenPos","pixelIsTransparent","screenToUvCoordinates","pixel","getPixelFromImage","newPositionArray","newColorArray","newUvArray","numIndexValues","newIndexArray","getPixelFromImageBitmap","xPos","yPos","pixelData","getPixelFromImageData","imgData","strd","Uint8ClampedArray","getPixel","pickedColor","close","pixelsData","resortedGroups","numNotRendered","m_lengths","PathParam","curves","m_point","curve","lineCurve","curveLengths","getCurveLengths","diff","segmentLength","numSecondChanceLabels","tmpCachedDuplicate","getCacheKey","hasFeatureId","isBetterPathDuplicate","newCandidate","_newDistance","oldCandidate","_oldDistance","isBetterPointDuplicate","_newCandidate","newDistance","_oldCandidate","oldDistance","findDuplicateByText","elementState","candidates","maxSqDistError","getDedupSqDistTolerance","entryCount","elementPosition","duplicate","dupIndex","dupDistSquared","isBetterDuplicate","candidateEntry","cachedElement","areDiffType","areBothVisible","distanceToSquared","m_referenceMap","m_textMap","textElementFilter","updateElements","TextElementGroupState","m_sortedGroupStates","replaceCallback","replaceElement","anyEviction","updateFading","traverseVisibleElements","cacheResult","findDuplicate","cachedDuplicate","replacement","cachedEntries","duplicateIndex","findDuplicateById","m_visited","m_textElementStates","TextElementState","visibleElementsCallback","m_textRenderState","m_iconRenderStates","renderState","m_viewDistance","predecessor","RenderState","_point","FadingState","DEFAULT_FADE_TIME","m_state","Undefined","FadingIn","FadingOut","FadedIn","FadedOut","fadingTime","textRenderStyles","textLayoutStyles","styleCache","createRenderStyle","createLayoutStyle","DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL","DEFAULT_STATIC_MSAA_SAMPLING_LEVEL","Level_4","antialiasSettings","msaaEnabled","strength","threshold","thickness","ghostExtrudedPolygons","m_width","m_height","m_renderPass","RenderPass","m_target1","m_target2","m_sepiaPass","ShaderPass","m_vignettePass","m_readBuffer","m_msaaPass","m_dynamicMsaaSamplingLevel","dynamicMsaaSamplingLevel","m_staticMsaaSamplingLevel","staticMsaaSamplingLevel","m_lowResPass","LowResRenderPass","isStaticFrame","usePostEffects","activeTarget","clearDepth","m_outlineEffect","OutlineEffect","nextEffectEnabled","m_bloomPass","BloomPass","m_savedWidth","m_savedHeight","m_defaultThickness","m_defaultColor","m_defaultAlpha","m_defaultKeepAlive","m_ghostExtrudedPolygons","m_removeThresholdCount","m_originalMaterials","m_originalOnBeforeRenders","m_shaderIDs","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshPhysicalMaterial","m_uniformsChunk","outlineThickness","outlineAlpha","domElement","ghost","depth","stencil","updateStyle","setViewport","setScissor","setScissorTest","renderTarget","currentAutoClear","renderOutline","currentSceneAutoUpdate","autoUpdate","currentSceneBackground","currentShadowMapEnabled","setOutlineMaterial","restoreOriginalMaterial","cleanupCache","originalMaterial","shaderID","originalUniforms","originalVertexShader","ShaderLib","isRawShaderMaterial","createInvisibleMaterial","isShaderMaterial","vertexShaderChunk","vertexShaderChunk2","DECLARE_TRANSFORMED","BackSide","skinning","morphTargets","morphNormals","used","keepAlive","getOutlineMaterialFromCache","updateOutlineMaterial","getOutlineMaterial","outlineParameters","BlurDirectionX","BlurDirectionY","resolution","m_renderTargetsHorizontal","m_renderTargetsVertical","m_nMips","m_separableBlurMaterials","m_basic","m_bloomTintColors","pars","resx","resy","m_renderTargetBright","renderTargetHorizonal","renderTargetVertical","m_highPassUniforms","m_materialHighPassFilter","kernelSizeArray","getSeperableBlurMaterial","m_compositeMaterial","getCompositeMaterial","m_copyUniforms","m_materialCopy","rt","inputRenderTarget","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","nMips","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomFactors","bloomTintColors","bloomRadius","tmpVectors3","tmpVector4","TileKeyEntry","longitudeOffset","m_extendedFrustumCulling","m_frustum","Frustum","m_viewProjectionMatrix","m_rootTileKeys","m_tileKeyEntries","m_mapTileCuller","MapTileCuller","projectionMatrixOverride","setFromProjectionMatrix","computeRequiredInitialRootTileKeys","viewportHeight","targetTileArea","useElevationRangeSource","tileBounds","uniqueZoomLevels","workList","tileKeyAndOffset","getElevationRange","FinalPrecise","computeTileAreaAndDistance","subTileEntry","frustumIntersectsTileBox","intersectsBox","getCenter","projectedPoint","rootTileKey","worldGeoPoint","totalAngleRad","worldLengthHorizontal","worldLeftPoint","worldLeftGeoPoint","offsetRange","SQRT2","m_globalFrustumMin","m_globalFrustumMax","m_frustumCorners","frustumCorners","getFrustumCorners","frustumCorner","globalFrustumMin","globalFrustumMax","invProjMatrix","cornerIndex","addPoint","enableFilterByKind","m_visibilityCounter","kinds","incrementVisibilityCounter","TileGeometryLoader","geometryLoader","enabledGeometryKinds","disabledGeometryKinds","m_tileUpdateCallback","updateTileObjectVisibility","addOrRemoveToEnabledSet","enableDisableKinds","addOrRemoveToDisabledSet","addOrRemoveToHiddenSet","visibilityHasChanged","oneKind","visibilityChange","addRemove","visibleKinds","tileKinds","availableGeometryKinds","needUpdate","nowVisible","addToSet","kindSet","kindsSet","m_isFinished","foundSet","compileGeometryKind","Label","m_availableGeometryKinds","prepareAvailableGeometryKinds","discardNeedlessTile","geometryCreationPending","compareGeometryKinds","processTechniques","setGeometryKinds","setDecodedTile","prepareForRender","m_enabledKinds","m_disabledKinds","m_timeout","loadingFinished","geometryCreator","createAllGeometries","geometryCreationTime","addMessage","disposed","enabledSame","disabledSame","enabledEmpty","disabledEmpty","indexBuffer","vertexStride","contourEdges","nSegments","vFootprint0","vRoof0","vFootprint1","vRoof1","currEdgeStart","currEdgeGoal","prevEdgeStart","prevEdgeGoal","polygonContour","polygonContourEdges","isExtruded","addFootprintEdges","wallEdgeSlope","prevEdgeIdx","v0x","v0y","v1x","v1y","vFoot0","ThreeBufferUtils","getBufferElementType","fromThreeBufferAttribute","bufferAttribute","fromThreeInterleavedBufferAttribute","fromThreeBufferGeometry","attributeNames","isOnScreen","ndc","projectVector","tempV3","ndcToScreen","tempV2","m_sky","m_projectionType","m_skyTexture","SkyGradientTexture","SkyCubemapTexture","isSameSkyType","DEFAULT_TEXTURE_SIZE","DEFAULT_MONOMIAL_POWER","cameraRight","cameraUp","topColor","bottomColor","m_faceCount","m_faces","fillTextureData","monomialPower","unpackAlignment","m_farClipPlaneDividedVertically","m_groundPlane","m_bottomMidFarPoint","m_topMidFarPoint","m_horizonPosition","m_farClipPlaneCorners","setHorizonPosition","updateTexturePosition","faceIdx","upDir","unproject","intersectLine","skyRatio","DEFAULT_FONT_CATALOG_NAME","m_catalogsLoading","defaultFontCatalogUrl","catalogCallback","fontCatalogConfig","fontCatalogPromise","m_renderedTilesChangeCheck","m_minGlyphCount","m_maxGlyphCount","TextCanvas","CopyrightElementHandler","m_defaults","m_mapViews","mergedCopyrightInfo","staticInfo","m_element","display","defaults","deduped","innerHTML","htmlElement","UrlCopyrightProvider","CopyrightCoverageProvider","m_fetchURL","m_baseScheme","m_requestHeaders","m_cachedCopyrightResponse","fetchFunction","maxRetries","activeDownloadCount","downloadQueue","activeDownloads","defaultInstance","retryCount","status","waitFor","retryTimeout","fetchRepeatedly","milliseconds","downloadAs","download","arrayBuffer","maxParallelDownloads","deferred","DeferredPromise","doDownload","onDownloadDone","execDeferredDownload","future","converter","cacheKey","pendingFetch","newFetch","executor","resolveFunc","rejectFunc","ImageItem","m_textureLoader","requestHeaders","crossOrigin","loadWithThreeLoader","isJPEG","setCrossOrigin","m_wantsPoints","m_wantsLines","m_wantsAreas","m_wantsObject3D","wantsAll","wantsPoints","wantsLines","wantsAreas","wantsObject3D","visitObject","wantsFeature","visitMesh","BufferedGeometryLineAccessor","BufferedGeometryObject3dAccessor","IndexedBufferedGeometryLineAccessor","meshObject","geometryAccessor","getBufferGeometry","getIndexedGeometryAccessor","getGeometryAccessor","getCount","setRange","visitPoint","visitLine","visitArea","visitObject3D","tmpNormal","tmpTangent0","tmpTangent1","tmpBitangent","LINE_VERTEX_ATTRIBUTES","NORMAL_UV_VERTEX_ATTRIBUTES","LINE_VERTEX_ATTRIBUTES_NUV","HP_LINE_VERTEX_ATTRIBUTES","HP_LINE_VERTEX_ATTRIBUTES_NUV","LineGeometry","getVertexDescriptor","hasNormalsAndUvs","highPrecision","createLineGeometry","polyline","colors","pointCount","segments","tangents","hasSegmentOffsets","hasTexCoords","sqrLength","lineCoverage","lineLength","isClosed","tmpVertices","addVertexPair","T1","T2","segment","extrusionCoord","highComp","lowComp","setComponent","computeBitangent","createSimpleLineGeometry","LineGroup","isSimple","vertexDescriptor","descr","createGeometry","isHighPrecisionPointsMaterial","dimensionality","setDimensionality","m_processLayersDefault","m_processPointsDefault","m_processLinesDefault","m_processPolygonsDefault","m_layersToProcess","m_layersToIgnore","m_pointsToProcess","m_ignoredPoints","m_linesToProcess","m_linesToIgnore","m_polygonsToProcess","m_polygonsToIgnore","m_kindsToProcess","m_kindsToIgnore","processLayersDefault","processPointsDefault","processLinesDefault","processPolygonsDefault","addItem","addItems","layersToProcess","layersToIgnore","pointsToProcess","pointsToIgnore","linesToProcess","linesToIgnore","polygonsToProcess","polygonsToIgnore","kindsToProcess","kindsToIgnore","items","layerName","matchLayer","geometryTypes","geomType","classes","featureClass","matchClass","featureAttribute","geomTypes","featureClasses","OmvGenericFeatureFilter","layerItems","layerItem","itemsToProcess","itemsToIgnore","defaultResult","filters","hasKindFilter","wantsLayer","wantsPointFeature","wantsLineFeature","wantsPolygonFeature","wantsKind","OmvGenericFeatureModifier","doProcessFeature","featureClassThing","matchItems","matchAttribute","getDataProvider","OmvRestClient","missingOmvDecoderServiceInfoEmitted","TileDataSource","tileFactory","TileFactory","concurrentDecoderServiceName","concurrentDecoderScriptUrl","copyrightProvider","m_decoderOptions","showMissingTechniques","filterDescription","filterDescr","gatherFeatureAttributes","createTileInfo","gatherRoadSegments","featureModifierId","skipShortLabels","enableElevationOverlay","configureDecoder","configure","m_modelConstructor","m_tileFactory","m_isReady","m_decoder","getTileDecoder","concurrentDecoderWorkerCount","getCopyrights","TileInfoLoader","loaderState","debugMaterial","linewidth","NeverDepth","debugCircleMaterial","debugBlackCircleMaterial","OmvDebugLabelsTile","addLabelDebugInfo","debugTextPaths","debugTextPathsFull","tileGeometryCreator","colorMap","indexFilter","lineGeometry","lineIndices","redPointGeometry","redPointIndices","redPointPositions","blackPointGeometry","blackPointIndices","blackPointPositions","pointScale","elementIndex","pathIndex","isRedPoint","pointSize","labelElement","lineMesh","redPointMesh","blackPointMesh"],"mappings":"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","file":"index.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 121);\n","module.exports = THREE;","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./index-common\";\nexport * from \"./lib/UrlPlatformUtils.web\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/ColorUtils\";\nexport * from \"./lib/Expr\";\nexport * from \"./lib/Techniques\";\nexport * from \"./lib/TechniqueParams\";\nexport * from \"./lib/Theme\";\nexport * from \"./lib/PostEffects\";\nexport * from \"./lib/InterpolatedProperty\";\nexport * from \"./lib/InterpolatedPropertyDefs\";\nexport * from \"./lib/WorkerServiceProtocol\";\nexport * from \"./lib/WorkerTilerProtocol\";\nexport * from \"./lib/WorkerDecoderProtocol\";\nexport * from \"./lib/ITileDecoder\";\nexport * from \"./lib/ITiler\";\nexport * from \"./lib/DecodedTile\";\nexport * from \"./lib/TileInfo\";\nexport * from \"./lib/GeoJsonDataType\";\nexport * from \"./lib/ThemeVisitor\";\nexport * from \"./lib/StringEncodedNumeral\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/coordinates/GeoBox\";\nexport * from \"./lib/coordinates/GeoCoordinatesLike\";\nexport * from \"./lib/coordinates/GeoCoordinates\";\nexport * from \"./lib/coordinates/GeoPointLike\";\nexport * from \"./lib/coordinates/LatLngLike\";\nexport * from \"./lib/projection/EarthConstants\";\nexport * from \"./lib/projection/EquirectangularProjection\";\nexport * from \"./lib/projection/IdentityProjection\";\nexport * from \"./lib/projection/Projection\";\nexport * from \"./lib/projection/MercatorProjection\";\nexport * from \"./lib/projection/TransverseMercatorProjection\";\nexport * from \"./lib/projection/SphereProjection\";\nexport * from \"./lib/tiling/FlatTileBoundingBoxGenerator\";\nexport * from \"./lib/tiling/HalfQuadTreeSubdivisionScheme\";\nexport * from \"./lib/tiling/QuadTreeSubdivisionScheme\";\nexport * from \"./lib/tiling/QuadTree\";\nexport * from \"./lib/tiling/SubTiles\";\nexport * from \"./lib/tiling/SubdivisionScheme\";\nexport * from \"./lib/tiling/TileKey\";\nexport * from \"./lib/tiling/TileKeyUtils\";\nexport * from \"./lib/tiling/TileTreeTraverse\";\nexport * from \"./lib/tiling/TilingScheme\";\nexport * from \"./lib/tiling/HereTilingScheme\";\nexport * from \"./lib/tiling/WebMercatorTilingScheme\";\nexport * from \"./lib/tiling/MercatorTilingScheme\";\nexport * from \"./lib/tiling/PolarTilingScheme\";\nexport * from \"./lib/math/Vector3Like\";\nexport * from \"./lib/math/Box3Like\";\nexport * from \"./lib/math/OrientedBox3Like\";\nexport * from \"./lib/math/MathUtils\";\nexport * from \"./lib/math/TransformLike\";\nexport * from \"./lib/math/OrientedBox3\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, Value } from \"./Env\";\nimport { ExprEvaluator, ExprEvaluatorContext, OperatorDescriptor } from \"./ExprEvaluator\";\nimport { ExprInstantiator, InstantiationContext } from \"./ExprInstantiator\";\nimport { ExprParser } from \"./ExprParser\";\nimport { ExprPool } from \"./ExprPool\";\nimport {\n    interpolatedPropertyDefinitionToJsonExpr,\n    isInterpolatedPropertyDefinition\n} from \"./InterpolatedPropertyDefs\";\nimport { Definitions, isBoxedDefinition, isLiteralDefinition } from \"./Theme\";\n\nexport * from \"./Env\";\n\nconst exprEvaluator = new ExprEvaluator();\n\nconst exprInstantiator = new ExprInstantiator();\n\nexport interface ExprVisitor<Result, Context> {\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: Context): Result;\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: Context): Result;\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: Context): Result;\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: Context): Result;\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: Context): Result;\n    visitVarExpr(expr: VarExpr, context: Context): Result;\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: Context): Result;\n    visitCallExpr(expr: CallExpr, context: Context): Result;\n    visitMatchExpr(expr: MatchExpr, context: Context): Result;\n    visitCaseExpr(expr: CaseExpr, context: Context): Result;\n}\n\n/**\n * The dependencies of an [[Expr]].\n */\nexport class ExprDependencies {\n    /**\n     * The properties needed to evaluate the [[Expr]].\n     */\n    readonly properties = new Set<string>();\n\n    /**\n     * `true` if the expression depends on the feature state.\n     */\n    featureState?: boolean;\n}\n\nclass ComputeExprDependencies implements ExprVisitor<void, ExprDependencies> {\n    static instance = new ComputeExprDependencies();\n\n    /**\n     * Gets the dependencies of an [[Expr]].\n     *\n     * @param expr The [[Expr]] to process.\n     * @param scope The evaluation scope. Defaults to [[ExprScope.Value]].\n     * @param dependencies The output [[Set]] of dependency names.\n     */\n    static of(expr: Expr) {\n        const dependencies = new ExprDependencies();\n        expr.accept(this.instance, dependencies);\n        return dependencies;\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitVarExpr(expr: VarExpr, context: ExprDependencies): void {\n        context.properties.add(expr.name);\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: ExprDependencies): void {\n        context.properties.add(expr.name);\n    }\n\n    visitCallExpr(expr: CallExpr, context: ExprDependencies): void {\n        expr.args.forEach(childExpr => childExpr.accept(this, context));\n\n        switch (expr.op) {\n            case \"feature-state\":\n                context.featureState = true;\n                context.properties.add(\"$state\");\n                break;\n            case \"id\":\n                context.properties.add(\"$id\");\n                break;\n            case \"geometry-type\":\n                context.properties.add(\"$geometryType\");\n                break;\n            default:\n                break;\n        }\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: ExprDependencies): void {\n        expr.value.accept(this, context);\n        expr.branches.forEach(([_, branch]) => branch.accept(this, context));\n        expr.fallback.accept(this, context);\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: ExprDependencies): void {\n        expr.branches.forEach(([condition, branch]) => {\n            condition.accept(this, context);\n            branch.accept(this, context);\n        });\n        expr.fallback.accept(this, context);\n    }\n}\n\n/**\n * A type represeting JSON values.\n */\nexport type JsonValue = null | boolean | number | string | JsonObject | JsonArray;\n\n/**\n * A type representing JSON arrays.\n */\nexport interface JsonArray extends Array<JsonValue> {}\n\n/**\n * A type representing JSON objects.\n */\nexport interface JsonObject {\n    [name: string]: JsonValue;\n}\n\n/**\n * The JSON representation of an [[Expr]] object.\n */\nexport type JsonExpr = JsonArray;\n\nexport function isJsonExpr(v: any): v is JsonExpr {\n    return Array.isArray(v) && v.length > 0 && typeof v[0] === \"string\";\n}\n\n/**\n * Internal state needed by [[Expr.fromJSON]] to resolve `\"ref\"` expressions.\n * @hidden\n */\ninterface ReferenceResolverState {\n    definitions: Definitions;\n    lockedNames: Set<string>;\n    cache: Map<string, Expr>;\n}\n\n/**\n * The evaluation scope of an [[Expr]].\n */\nexport enum ExprScope {\n    /**\n     * The scope of an [[Expr]] used as value of an attribute.\n     */\n    Value,\n\n    /**\n     * The scope of an [[Expr]] used in a [[Technique]] `when` condition.\n     */\n    Condition,\n\n    /**\n     * The scope of an [[Expr]] used as dynamic property attribute value.\n     */\n    Dynamic\n}\n\n/**\n * Abstract class defining a shape of a [[Theme]]'s expression\n */\nexport abstract class Expr {\n    /**\n     * Tests of given value is an [[Expr]].\n     *\n     * @param value The object to test.\n     */\n    static isExpr(value: any): value is Expr {\n        return value instanceof Expr;\n    }\n\n    /**\n     * Creates an expression from the given `code`.\n     *\n     * @param code The code to parse.\n     * @returns The parsed [[Expr]].\n     * @deprecated\n     */\n    static parse(code: string): Expr | never {\n        const parser = new ExprParser(code);\n        const expr = parser.parse();\n        return expr;\n    }\n\n    /**\n     * Parse expression in JSON form.\n     *\n     * If `definitions` are defined, then references (`['ref', name]`) are resolved.\n     *\n     * Pass `definitionExprCache` to reuse `Expr` instances created from definitions across\n     * many `fromJSON` calls.\n     *\n     * @param node expression in JSON format to parse\n     * @param definitions optional set of definitions needed definition resolved by `ref` operator\n     * @param definitionExprCache optional cache of `Expr` instances derived from `definitions`\n     */\n    static fromJSON(\n        node: JsonValue,\n        definitions?: Definitions,\n        definitionExprCache?: Map<string, Expr>\n    ) {\n        const referenceResolverState: ReferenceResolverState | undefined =\n            definitions !== undefined\n                ? {\n                      definitions,\n                      lockedNames: new Set(),\n                      cache: definitionExprCache || new Map<string, Expr>()\n                  }\n                : undefined;\n\n        return parseNode(node, referenceResolverState);\n    }\n\n    private m_dependencies?: ExprDependencies;\n    private m_isDynamic?: boolean;\n\n    /**\n     * Evaluate an expression returning a [[Value]] object.\n     *\n     * @param env The [[Env]] used to lookup symbols.\n     * @param scope The evaluation scope. Defaults to [[ExprScope.Value]].\n     * @param cache A cache of previously computed results.\n     */\n    evaluate(\n        env: Env,\n        scope: ExprScope = ExprScope.Value,\n        cache?: Map<Expr, Value>\n    ): Value | never {\n        return this.accept(\n            exprEvaluator,\n            new ExprEvaluatorContext(exprEvaluator, env, scope, cache)\n        );\n    }\n\n    /**\n     * Instantiates this [[Expr]] by resolving references to the `get` and\n     * `has` operator using the given instantiation context.\n     *\n     * @param context The [[InstantationContext]] used to resolve names.\n     */\n    instantiate(context: InstantiationContext): Expr {\n        return this.accept(exprInstantiator, context);\n    }\n\n    /**\n     * Gets the dependencies of this [[Expr]].\n     */\n    dependencies(): ExprDependencies {\n        if (!this.m_dependencies) {\n            this.m_dependencies = ComputeExprDependencies.of(this);\n        }\n        return this.m_dependencies;\n    }\n\n    /**\n     * Create a unique object that is structurally equivalent to this [[Expr]].\n     *\n     * @param pool The [[ExprPool]] used to create a unique\n     * equivalent object of this [[Expr]].\n     */\n    intern(pool: ExprPool): Expr {\n        return pool.add(this);\n    }\n\n    toJSON(): JsonValue {\n        return new ExprSerializer().serialize(this);\n    }\n\n    /**\n     * Returns `true` if a dynamic execution context is required to evaluate this [[Expr]].\n     */\n    isDynamic(): boolean {\n        if (this.m_isDynamic === undefined) {\n            this.m_isDynamic = this.exprIsDynamic();\n        }\n        return this.m_isDynamic;\n    }\n\n    abstract accept<Result, Context>(\n        visitor: ExprVisitor<Result, Context>,\n        context: Context\n    ): Result;\n\n    /**\n     * Update the dynamic state of this [[Expr]].\n     *\n     * [[exprIsDynamic]] must never be called directly.\n     *\n     * @hidden\n     */\n    protected abstract exprIsDynamic(): boolean;\n}\n\n/**\n * @hidden\n */\nexport type RelationalOp = \"<\" | \">\" | \"<=\" | \">=\";\n\n/**\n * @hidden\n */\nexport type EqualityOp = \"~=\" | \"^=\" | \"$=\" | \"==\" | \"!=\";\n\n/**\n * @hidden\n */\nexport type BinaryOp = RelationalOp | EqualityOp;\n\n/**\n * Var expression.\n * @hidden\n */\nexport class VarExpr extends Expr {\n    constructor(readonly name: string) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitVarExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\nexport abstract class LiteralExpr extends Expr {\n    /**\n     * Create a [[LiteralExpr]] from the given value.\n     *\n     * @param value A constant value.\n     */\n    static fromValue(value: Value): Expr {\n        switch (typeof value) {\n            case \"boolean\":\n                return new BooleanLiteralExpr(value);\n            case \"number\":\n                return new NumberLiteralExpr(value);\n            case \"string\":\n                return new StringLiteralExpr(value);\n            case \"object\":\n                return value === null ? NullLiteralExpr.instance : new ObjectLiteralExpr(value);\n            default:\n                throw new Error(`failed to create a literal from '${value}'`);\n        } // switch\n    }\n\n    abstract get value(): Value;\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * Null literal expression.\n * @hidden\n */\nexport class NullLiteralExpr extends LiteralExpr {\n    static instance = new NullLiteralExpr();\n    /** @override */\n    readonly value: Value = null;\n\n    protected constructor() {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitNullLiteralExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * Boolean literal expression.\n * @hidden\n */\nexport class BooleanLiteralExpr extends LiteralExpr {\n    constructor(readonly value: boolean) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitBooleanLiteralExpr(this, context);\n    }\n}\n\n/**\n * Number literal expression.\n * @hidden\n */\nexport class NumberLiteralExpr extends LiteralExpr {\n    constructor(readonly value: number) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitNumberLiteralExpr(this, context);\n    }\n}\n\n/**\n * String literal expression.\n * @hidden\n */\nexport class StringLiteralExpr extends LiteralExpr {\n    constructor(readonly value: string) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitStringLiteralExpr(this, context);\n    }\n}\n\n/**\n * Object literal expression.\n * @hidden\n */\nexport class ObjectLiteralExpr extends LiteralExpr {\n    constructor(readonly value: object) {\n        super();\n    }\n\n    get isArrayLiteral() {\n        return Array.isArray(this.value);\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitObjectLiteralExpr(this, context);\n    }\n}\n\n/**\n * A has expression with an attribute, for example `has(ref)`.\n * @hidden\n */\nexport class HasAttributeExpr extends Expr {\n    constructor(readonly name: string) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitHasAttributeExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * @hidden\n */\nexport class CallExpr extends Expr {\n    descriptor?: OperatorDescriptor;\n\n    constructor(readonly op: string, readonly args: Expr[]) {\n        super();\n    }\n\n    /**\n     * Returns the child nodes of this [[Expr]].\n     * @deprecated\n     */\n    get children() {\n        return this.args;\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitCallExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        const descriptor = this.descriptor || ExprEvaluator.getOperator(this.op);\n\n        if (descriptor && descriptor.isDynamicOperator && descriptor.isDynamicOperator(this)) {\n            return true;\n        }\n\n        return this.args.some(e => e.isDynamic());\n    }\n}\n\n/**\n * @hidden\n */\nexport type MatchLabel = number | string | number[] | string[];\n\n/**\n * @hidden\n */\nexport class MatchExpr extends Expr {\n    /**\n     * Tests if the given JSON node is a valid label for the `\"match\"` operator.\n     *\n     * @param node A JSON value.\n     */\n    static isValidMatchLabel(node: JsonValue): node is MatchLabel {\n        switch (typeof node) {\n            case \"number\":\n            case \"string\":\n                return true;\n            case \"object\":\n                if (!Array.isArray(node) || node.length === 0) {\n                    return false;\n                }\n                const elementTy = typeof node[0];\n                if (elementTy === \"number\" || elementTy === \"string\") {\n                    return node.every(t => typeof t === elementTy);\n                }\n                return false;\n            default:\n                return false;\n        } // switch\n    }\n\n    constructor(\n        readonly value: Expr,\n        readonly branches: Array<[MatchLabel, Expr]>,\n        readonly fallback: Expr\n    ) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitMatchExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return (\n            this.value.isDynamic() ||\n            this.branches.some(([_, branch]) => branch.isDynamic()) ||\n            this.fallback.isDynamic()\n        );\n    }\n}\n\n/**\n * @hidden\n */\nexport class CaseExpr extends Expr {\n    constructor(readonly branches: Array<[Expr, Expr]>, readonly fallback: Expr) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitCaseExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return (\n            this.branches.some(([cond, branch]) => cond.isDynamic() || branch.isDynamic()) ||\n            this.fallback.isDynamic()\n        );\n    }\n}\n\n/**\n * @hidden\n */\nclass ExprSerializer implements ExprVisitor<JsonValue, void> {\n    serialize(expr: Expr): JsonValue {\n        return expr.accept(this, undefined);\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: void): JsonValue {\n        return null;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: void): JsonValue {\n        return [\"literal\", expr.value as JsonObject];\n    }\n\n    visitVarExpr(expr: VarExpr, context: void): JsonValue {\n        return [\"get\", expr.name];\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: void): JsonValue {\n        return [\"has\", expr.name];\n    }\n\n    visitCallExpr(expr: CallExpr, context: void): JsonValue {\n        return [expr.op, ...expr.args.map(childExpr => this.serialize(childExpr))];\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: void): JsonValue {\n        const branches: JsonValue[] = [];\n        for (const [label, body] of expr.branches) {\n            branches.push(label, this.serialize(body));\n        }\n        return [\"match\", this.serialize(expr.value), ...branches, this.serialize(expr.fallback)];\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: void): JsonValue {\n        const branches: JsonValue[] = [];\n        for (const [condition, body] of expr.branches) {\n            branches.push(this.serialize(condition), this.serialize(body));\n        }\n        return [\"case\", ...branches, this.serialize(expr.fallback)];\n    }\n}\n\nfunction parseNode(\n    node: JsonValue,\n    referenceResolverState: ReferenceResolverState | undefined\n): Expr {\n    if (Array.isArray(node)) {\n        return parseCall(node, referenceResolverState);\n    } else if (node === null) {\n        return NullLiteralExpr.instance;\n    } else if (typeof node === \"boolean\") {\n        return new BooleanLiteralExpr(node);\n    } else if (typeof node === \"number\") {\n        return new NumberLiteralExpr(node);\n    } else if (typeof node === \"string\") {\n        return new StringLiteralExpr(node);\n    }\n    throw new Error(`failed to create expression from: ${JSON.stringify(node)}`);\n}\n\nfunction parseCall(node: JsonArray, referenceResolverState?: ReferenceResolverState): Expr {\n    const op = node[0];\n\n    if (typeof op !== \"string\") {\n        throw new Error(\"expected a builtin function name\");\n    }\n\n    switch (op) {\n        case \"!has\":\n        case \"!in\":\n            return new CallExpr(\"!\", [parseCall([op.slice(1), ...node.slice(1)])]);\n\n        case \"ref\":\n            return resolveReference(node, referenceResolverState);\n\n        case \"get\":\n            return parseGetExpr(node, referenceResolverState);\n\n        case \"has\":\n            return parseHasExpr(node, referenceResolverState);\n\n        case \"literal\":\n            return parseLiteralExpr(node);\n\n        case \"match\":\n            return parseMatchExpr(node, referenceResolverState);\n\n        case \"case\":\n            return parseCaseExpr(node, referenceResolverState);\n\n        default:\n            return makeCallExpr(op, node, referenceResolverState);\n    } // switch\n}\n\nfunction parseGetExpr(node: JsonArray, referenceResolverState: ReferenceResolverState | undefined) {\n    if (node[2] !== undefined) {\n        return makeCallExpr(\"get\", node, referenceResolverState);\n    }\n    const name = node[1];\n    if (typeof name !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    return new VarExpr(name);\n}\n\nfunction parseHasExpr(node: JsonArray, referenceResolverState: ReferenceResolverState | undefined) {\n    if (node[2] !== undefined) {\n        return makeCallExpr(\"has\", node, referenceResolverState);\n    }\n    const name = node[1];\n    if (typeof name !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    return new HasAttributeExpr(name);\n}\n\nfunction parseLiteralExpr(node: JsonArray) {\n    const obj = node[1];\n    if (obj === null || typeof obj !== \"object\") {\n        throw new Error(\"expected an object or array literal\");\n    }\n    return new ObjectLiteralExpr(obj);\n}\n\nfunction parseMatchExpr(\n    node: JsonArray,\n    referenceResolverState: ReferenceResolverState | undefined\n) {\n    if (node.length < 4) {\n        throw new Error(\"not enough arguments\");\n    }\n    if (!(node.length % 2)) {\n        throw new Error(\"fallback is missing in 'match' expression\");\n    }\n    const value = parseNode(node[1], referenceResolverState);\n    const conditions: Array<[MatchLabel, Expr]> = [];\n    for (let i = 2; i < node.length - 1; i += 2) {\n        const label = node[i];\n        if (!MatchExpr.isValidMatchLabel(label)) {\n            throw new Error(`'${JSON.stringify(label)}' is not a valid label for 'match'`);\n        }\n        const expr = parseNode(node[i + 1], referenceResolverState);\n        conditions.push([label, expr]);\n    }\n    const fallback = parseNode(node[node.length - 1], referenceResolverState);\n    return new MatchExpr(value, conditions, fallback);\n}\n\nfunction parseCaseExpr(\n    node: JsonArray,\n    referenceResolverState: ReferenceResolverState | undefined\n) {\n    if (node.length < 3) {\n        throw new Error(\"not enough arguments\");\n    }\n    if (node.length % 2) {\n        throw new Error(\"fallback is missing in 'case' expression\");\n    }\n    const branches: Array<[Expr, Expr]> = [];\n    for (let i = 1; i < node.length - 1; i += 2) {\n        const condition = parseNode(node[i], referenceResolverState);\n        const expr = parseNode(node[i + 1], referenceResolverState);\n        branches.push([condition, expr]);\n    }\n    const caseFallback = parseNode(node[node.length - 1], referenceResolverState);\n    return new CaseExpr(branches, caseFallback);\n}\n\nfunction makeCallExpr(\n    op: string,\n    node: any[],\n    referenceResolverState?: ReferenceResolverState\n): Expr {\n    return new CallExpr(\n        op,\n        node.slice(1).map(childExpr => parseNode(childExpr, referenceResolverState))\n    );\n}\n\nfunction resolveReference(node: JsonArray, referenceResolverState?: ReferenceResolverState) {\n    if (typeof node[1] !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    if (referenceResolverState === undefined) {\n        throw new Error(`ref used with no definitions`);\n    }\n    const name = node[1] as string;\n\n    if (referenceResolverState.lockedNames.has(name)) {\n        throw new Error(`circular referene to '${name}'`);\n    }\n\n    if (!(name in referenceResolverState.definitions)) {\n        throw new Error(`definition '${name}' not found`);\n    }\n\n    const cachedEntry = referenceResolverState.cache.get(name);\n    if (cachedEntry !== undefined) {\n        return cachedEntry;\n    }\n    let definitionEntry = referenceResolverState.definitions[name] as any;\n    let result: Expr;\n    if (isLiteralDefinition(definitionEntry)) {\n        return Expr.fromJSON(definitionEntry);\n    } else if (isBoxedDefinition(definitionEntry)) {\n        if (isInterpolatedPropertyDefinition(definitionEntry.value)) {\n            // found a reference to an interpolation using\n            // the deprecated object-like syntax.\n            return Expr.fromJSON(interpolatedPropertyDefinitionToJsonExpr(definitionEntry.value));\n        } else if (isJsonExpr(definitionEntry.value)) {\n            definitionEntry = definitionEntry.value;\n        } else {\n            return Expr.fromJSON(definitionEntry.value);\n        }\n    }\n\n    if (isJsonExpr(definitionEntry)) {\n        referenceResolverState.lockedNames.add(name);\n        try {\n            result = parseNode(definitionEntry, referenceResolverState);\n        } finally {\n            referenceResolverState.lockedNames.delete(name);\n        }\n    } else {\n        throw new Error(`unsupported definition ${name}`);\n    }\n    referenceResolverState.cache.set(name, result);\n    return result;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/CirclePointsMaterial\";\nexport * from \"./lib/CopyMaterial\";\nexport * from \"./lib/DisplacementFeature\";\nexport * from \"./lib/EdgeMaterial\";\nexport * from \"./lib/HighPrecisionLineMaterial\";\nexport * from \"./lib/HighPrecisionPointMaterial\";\nexport * from \"./lib/IconMaterial\";\nexport * from \"./lib/LuminosityHighPassShader\";\nexport * from \"./lib/MapMeshMaterialsDefs\";\nexport * from \"./lib/MapMeshMaterials\";\nexport * from \"./lib/MSAAMaterial\";\nexport * from \"./lib/SepiaShader\";\nexport * from \"./lib/SolidLineMaterial\";\nexport * from \"./lib/Utils\";\nexport * from \"./lib/VignetteShader\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/rendering/FontCatalog\";\nexport * from \"./lib/rendering/GlyphData\";\nexport * from \"./lib/rendering/TextStyle\";\nexport * from \"./lib/rendering/TextBufferObject\";\nexport * from \"./lib/TextCanvas\";\n\nexport * from \"./lib/utils/ContextualArabicConverter\";\nexport * from \"./lib/utils/MaterialUtils\";\nexport * from \"./lib/utils/TypesettingUtils\";\nexport * from \"./lib/utils/UnicodeUtils\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoCoordinatesLike, isGeoCoordinatesLike } from \"./GeoCoordinatesLike\";\nimport { GeoPointLike, isGeoPointLike } from \"./GeoPointLike\";\nimport { isLatLngLike, LatLngLike } from \"./LatLngLike\";\n\nimport * as THREE from \"three\";\n\n/**\n * Represents an object in different geo coordinate formats\n */\nexport type GeoCoordLike = GeoPointLike | GeoCoordinatesLike | LatLngLike;\n\n/**\n * `GeoCoordinates` is used to represent geo positions.\n */\nexport class GeoCoordinates implements GeoCoordinatesLike {\n    /**\n     * Returns a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in degrees.\n     * @param longitude Longitude in degrees.\n     * @param altitude Altitude in meters.\n     */\n    static fromDegrees(latitude: number, longitude: number, altitude?: number): GeoCoordinates {\n        return new GeoCoordinates(latitude, longitude, altitude);\n    }\n\n    /**\n     * Returns a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in radians.\n     * @param longitude Longitude in radians.\n     * @param altitude Altitude in meters.\n     */\n    static fromRadians(latitude: number, longitude: number, altitude?: number): GeoCoordinates {\n        return new GeoCoordinates(\n            THREE.MathUtils.radToDeg(latitude),\n            THREE.MathUtils.radToDeg(longitude),\n            altitude\n        );\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from a [[LatLngLike]] literal.\n     * ```typescript\n     * const center = { lat: 53.3, lng: 13.4 };\n     * mapView.geoCenter = GeoCoordinates.fromLatLng(center);\n     * ```\n     * @param latLng A [[LatLngLike]] object literal.\n     */\n    static fromLatLng(latLng: LatLngLike) {\n        return new GeoCoordinates(latLng.lat, latLng.lng);\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from a [[GeoPointLike]] tuple.\n     *\n     * Example:\n     * ```typescript\n     * mapView.geoCenter = GeoCoordinates.fromGeoPoint([longitude, latitude]);\n     *\n     * let geoCoords: number[] = ...;\n     *\n     * if (isGeoPointLike(geoCoords)) {\n     *     const p = GeoCoordinates.fromGeoPoint(geoCoords);\n     * }\n     * ```\n     * @param geoPoint An [[Array]] of at least two elements following the order\n     * longitude, latitude, altitude.\n     */\n    static fromGeoPoint(geoPoint: GeoPointLike): GeoCoordinates {\n        return new GeoCoordinates(geoPoint[1], geoPoint[0], geoPoint[2]);\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from different types of geo coordinate objects.\n     *\n     * Example:\n     * ```typescript\n     * const fromGeoPointLike = GeoCoordinates.fromObject([longitude, latitude]);\n     * const fromGeoCoordinateLike = GeoCoordinates.fromObject({ longitude, latitude });\n     * const fromGeoCoordinate = GeoCoordinates.fromObject(new GeoCoordinates(latitude, longitude));\n     * const fromLatLngLike = GeoCoordinates.fromObject({ lat: latitude , lng: longitude });\n     * ```\n     *\n     * @param geoPoint Either [[GeoPointLike]], [[GeoCoordinatesLike]]\n     * or [[LatLngLike]] object literal.\n     */\n    static fromObject(geoPoint: GeoCoordLike): GeoCoordinates {\n        if (isGeoPointLike(geoPoint)) {\n            return GeoCoordinates.fromGeoPoint(geoPoint);\n        } else if (isGeoCoordinatesLike(geoPoint)) {\n            return GeoCoordinates.fromDegrees(\n                geoPoint.latitude,\n                geoPoint.longitude,\n                geoPoint.altitude\n            );\n        } else if (isLatLngLike(geoPoint)) {\n            return GeoCoordinates.fromDegrees(geoPoint.lat, geoPoint.lng);\n        }\n\n        throw new Error(\"Invalid input coordinate format.\");\n    }\n\n    /**\n     * Creates a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in degrees.\n     * @param longitude Longitude in degrees.\n     * @param altitude Altitude in meters.\n     */\n    constructor(public latitude: number, public longitude: number, public altitude?: number) {}\n\n    /**\n     * Returns the latitude in radians.\n     */\n    get latitudeInRadians(): number {\n        return THREE.MathUtils.degToRad(this.latitude);\n    }\n\n    /**\n     * Returns the longitude in radians.\n     */\n    get longitudeInRadians(): number {\n        return THREE.MathUtils.degToRad(this.longitude);\n    }\n\n    /**\n     * Returns the latitude in degrees.\n     * @deprecated Use the [[latitude]] property instead.\n     */\n    get latitudeInDegrees(): number {\n        return this.latitude;\n    } // compat api\n\n    /**\n     * Returns the longitude in degrees.\n     * @deprecated Use the [[longitude]] property instead.\n     */\n    get longitudeInDegrees(): number {\n        return this.longitude;\n    } // compat api\n\n    /**\n     * The latitude in the degrees.\n     */\n    get lat() {\n        return this.latitude;\n    }\n\n    /**\n     * The longitude in the degrees.\n     */\n    get lng() {\n        return this.longitude;\n    }\n\n    /**\n     * Returns `true` if this `GeoCoordinates` is valid; returns `false` otherwise.\n     */\n    isValid(): boolean {\n        return !isNaN(this.latitude) && !isNaN(this.longitude);\n    }\n\n    /**\n     * Returns the normalized `GeoCoordinates`.\n     */\n    normalized(): GeoCoordinates {\n        let { latitude, longitude } = this;\n\n        if (isNaN(latitude) || isNaN(longitude)) {\n            return this;\n        }\n\n        if (latitude > 90) {\n            let wrapped = (latitude + 90) % 360;\n            if (wrapped >= 180) {\n                longitude += 180;\n                wrapped = 360 - wrapped;\n            }\n\n            latitude = wrapped - 90;\n        }\n\n        if (latitude < -90) {\n            let wrapped = (latitude - 90) % 360;\n            if (wrapped <= -180) {\n                longitude += 180;\n                wrapped = -360 - wrapped;\n            }\n\n            latitude = wrapped + 90;\n        }\n\n        if (longitude < -180 || longitude > 180) {\n            const sign = Math.sign(longitude);\n            longitude = (((longitude % 360) + 180 * sign) % 360) - 180 * sign;\n        }\n\n        if (latitude === this.latitude && longitude === this.longitude) {\n            return this;\n        }\n\n        return new GeoCoordinates(latitude, longitude, this.altitude);\n    }\n\n    /**\n     * Returns `true` if this `GeoCoordinates` is equal to the other.\n     *\n     * @param other GeoCoordinatesLike to compare to.\n     */\n    equals(other: GeoCoordinatesLike): boolean {\n        return (\n            this.latitude === other.latitude &&\n            this.longitude === other.longitude &&\n            this.altitude === other.altitude\n        );\n    }\n\n    /**\n     * Copy values from the other.\n     *\n     * @param other GeoCoordinatesLike to copy all values from.\n     */\n    copy(other: GeoCoordinatesLike): GeoCoordinates {\n        this.latitude = other.latitude;\n        this.longitude = other.longitude;\n        this.altitude = other.altitude;\n        return this;\n    }\n\n    /**\n     * Clones this `GeoCoordinates`.\n     */\n    clone(): GeoCoordinates {\n        return new GeoCoordinates(this.latitude, this.longitude, this.altitude);\n    }\n\n    /**\n     * Returns this [[GeoCoordinates]] as [[LatLngLike]] literal.\n     */\n    toLatLng(): LatLngLike {\n        return { lat: this.latitude, lng: this.longitude };\n    }\n\n    /**\n     * Converts this [[GeoCoordinates]] to a [[GeoPointLike]].\n     */\n    toGeoPoint(): GeoPointLike {\n        return this.altitude !== undefined\n            ? [this.longitude, this.latitude, this.altitude]\n            : [this.longitude, this.latitude];\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Box3Like } from \"./Box3Like\";\nimport { Vector3Like } from \"./Vector3Like\";\n\nimport * as THREE from \"three\";\n\nexport namespace MathUtils {\n    /**\n     * Creates a new empty bounding box.\n     * @deprecated\n     */\n    export function newEmptyBox3(): Box3Like {\n        return {\n            min: { x: Infinity, y: Infinity, z: Infinity },\n            max: { x: -Infinity, y: -Infinity, z: -Infinity }\n        };\n    }\n\n    /**\n     * Creates a new [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     */\n    export function newVector3(x: number, y: number, z: number): Vector3Like;\n\n    /**\n     * Creates a new [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     * @param v The resulting [Vector3Like] instance.\n     */\n    export function newVector3<Vector extends Vector3Like>(\n        x: number,\n        y: number,\n        z: number,\n        v: Vector\n    ): Vector;\n\n    /**\n     * Set the components of the given [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     * @param v The [Vector3Like]\n     */\n    export function newVector3(x: number, y: number, z: number, v?: Vector3Like): Vector3Like {\n        if (v === undefined) {\n            return { x, y, z };\n        }\n        v.x = x;\n        v.y = y;\n        v.z = z;\n        return v;\n    }\n\n    /**\n     * Converts an angle measured in degrees to an equivalent value in radians.\n     *\n     * @param degrees Value in degrees.\n     * @returns Value in radians.\n     * @deprecated use THREE.MathUtils.degToRad instead\n     */\n    export const degToRad = THREE.MathUtils.degToRad;\n\n    /**\n     * Converts an angle measured in radians to an equivalent value in degrees.\n     *\n     * @param degrees Value in radians.\n     * @returns Value in degrees.\n     * @deprecated\n     */\n    export const radToDeg = THREE.MathUtils.radToDeg;\n\n    /**\n     * Ensures that input value fits in a given range.\n     *\n     * @param value The value to be clamped.\n     * @param min Minimum value.\n     * @param max Maximum value.\n     * @returns Clamped value.\n     * @deprecated\n     */\n    export const clamp = THREE.MathUtils.clamp;\n\n    /**\n     * Normalize angle in degrees to range `[0, 360)`.\n     *\n     * @param a Angle in degrees.\n     * @returns Angle in degrees in range `[0, 360)`.\n     */\n    export function normalizeAngleDeg(a: number): number {\n        a = a % 360;\n        if (a < 0) {\n            a = a + 360;\n        }\n        return a;\n    }\n\n    /**\n     * Return the minimal delta between angles `a` and `b` given in degrees.\n     *\n     * Equivalent to `a - b` in coordinate space with exception vector direction can be reversed\n     * that if `abs(a-b) > 180` because trip is shorter in 'other' direction.\n     *\n     * Useful when interpolating between `b` and `a` in angle space.\n     *\n     * @param a Start angle in degrees.\n     * @param b End angle in degrees.\n     * @returns Angle that that satisfies condition `a - b - d = 0` in angle space.\n     */\n    export function angleDistanceDeg(a: number, b: number): number {\n        a = normalizeAngleDeg(a);\n        b = normalizeAngleDeg(b);\n\n        const d = a - b;\n        if (d > 180) {\n            return d - 360;\n        } else if (d <= -180) {\n            return d + 360;\n        } else {\n            return d;\n        }\n    }\n\n    /**\n     * Interpolate linearly between two angles given in degrees.\n     *\n     * @param p0 Angle from in degrees\n     * @param p1 Angle to in degrees\n     * @param t Interpolation factor (alpha), in range `0-1`.\n     */\n    export function interpolateAnglesDeg(p0: number, p1: number, t: number): number {\n        // hand crafted version,\n        // see stack for maybe better versions:\n        //    https://stackoverflow.com/questions/2708476/rotation-interpolation\n\n        const d = angleDistanceDeg(p1, p0);\n        const r = (p0 + d * t) % 360;\n        return r;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GeoCoordinates, Projection, ProjectionType, TileKey } from \"@here/harp-geoutils\";\nimport { EarthConstants } from \"@here/harp-geoutils/lib/projection/EarthConstants\";\nimport { MapMeshBasicMaterial, MapMeshStandardMaterial } from \"@here/harp-materials\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport { ElevationProvider } from \"./ElevationProvider\";\nimport { LodMesh } from \"./geometry/LodMesh\";\nimport { MapView, MAX_TILT_ANGLE } from \"./MapView\";\nimport { getFeatureDataSize, TileFeatureData } from \"./Tile\";\n\nconst logger = LoggerManager.instance.create(\"MapViewUtils\");\n\n// Estimation of the size of an Object3D with all the simple properties, like matrices and flags.\n// There may be cases where it is possible to construct Object3Ds with considerable less memory\n// consumption, but this value is used to simplify the estimation.\nconst MINIMUM_OBJECT3D_SIZE_ESTIMATION = 1000;\n\nconst MINIMUM_ATTRIBUTE_SIZE_ESTIMATION = 56;\n\n/**\n * Zoom level to request terrain tiles for getting the height of the camera above terrain.\n */\nconst TERRAIN_ZOOM_LEVEL = 4;\n\n// Caching those for performance reasons.\nconst groundNormalPlanarProj = new THREE.Vector3(0, 0, 1);\nconst groundPlane = new THREE.Plane(groundNormalPlanarProj.clone());\nconst groundSphere = new THREE.Sphere(undefined, EarthConstants.EQUATORIAL_RADIUS);\nconst rayCaster = new THREE.Raycaster();\nconst maxTiltAngleAllowed = THREE.MathUtils.degToRad(MAX_TILT_ANGLE);\nconst epsilon = 1e-5;\n\n/**\n * Cached ThreeJS instances for realtime maths.\n */\nconst space = {\n    x: new THREE.Vector3(),\n    y: new THREE.Vector3(),\n    z: new THREE.Vector3()\n};\nconst tangentSpace = {\n    x: new THREE.Vector3(),\n    y: new THREE.Vector3(),\n    z: new THREE.Vector3()\n};\nconst cache = {\n    quaternions: [new THREE.Quaternion(), new THREE.Quaternion()],\n    vector3: [new THREE.Vector3(), new THREE.Vector3()],\n    matrix4: [new THREE.Matrix4(), new THREE.Matrix4()],\n    transforms: [\n        {\n            xAxis: new THREE.Vector3(),\n            yAxis: new THREE.Vector3(),\n            zAxis: new THREE.Vector3(),\n            position: new THREE.Vector3()\n        }\n    ]\n};\n\nexport namespace MapViewUtils {\n    export const MAX_TILT_DEG = 89;\n    export const MAX_TILT_RAD = MAX_TILT_DEG * THREE.MathUtils.DEG2RAD;\n\n    /**\n     * The anti clockwise rotation of an object along the axes of its tangent space, with itself\n     * as origin.\n     */\n    export interface Attitude {\n        /**\n         * Rotation of the object along its vertical axis.\n         */\n        yaw: number;\n\n        /**\n         * Rotation of the object along its horizontal axis.\n         */\n        pitch: number;\n\n        /**\n         * Rotation of the object along its forward axis.\n         */\n        roll: number;\n    }\n\n    /**\n     * Describes estimated usage of memory on heap and GPU.\n     */\n    export interface MemoryUsage {\n        heapSize: number;\n        gpuSize: number;\n    }\n\n    /**\n     * Zooms and moves the map in such a way that the given target position remains at the same\n     * position after the zoom.\n     *\n     * @param mapView Instance of MapView.\n     * @param targetPositionOnScreenXinNDC Target x position in NDC space.\n     * @param targetPositionOnScreenYinNDC Target y position in NDC space.\n     * @param zoomLevel The desired zoom level.\n     * @param maxTiltAngle The maximum tilt angle to comply by, in globe projection, in radian.\n     */\n    export function zoomOnTargetPosition(\n        mapView: MapView,\n        targetPositionOnScreenXinNDC: number,\n        targetPositionOnScreenYinNDC: number,\n        zoomLevel: number,\n        maxTiltAngle: number = maxTiltAngleAllowed\n    ): void {\n        // Get current target position in world space before we zoom.\n        const targetPosition = rayCastWorldCoordinates(\n            mapView,\n            targetPositionOnScreenXinNDC,\n            targetPositionOnScreenYinNDC\n        );\n        const groundDistance = calculateDistanceToGroundFromZoomLevel(mapView, zoomLevel);\n\n        // Set the cameras height according to the given zoom level.\n        if (mapView.projection.type === ProjectionType.Planar) {\n            mapView.camera.position.setZ(groundDistance);\n        } else if (mapView.projection.type === ProjectionType.Spherical) {\n            mapView.camera.position.setLength(EarthConstants.EQUATORIAL_RADIUS + groundDistance);\n        }\n\n        // In sphere, we may have to also orbit the camera around the position located at the\n        // center of the screen, in order to limit the tilt to `maxTiltAngle`, as we change\n        // this tilt by changing the camera's height above.\n        if (mapView.projection.type === ProjectionType.Spherical) {\n            // FIXME: We cannot use mapView.tilt here b/c it does not reflect the latest camera\n            // changes.\n            // tslint:disable-next-line: deprecation\n            const tilt = extractCameraTilt(mapView.camera, mapView.projection);\n            const deltaTilt = tilt - maxTiltAngle;\n            if (deltaTilt > 0) {\n                orbitFocusPoint(mapView, 0, deltaTilt, maxTiltAngle);\n            }\n        }\n\n        // Get new target position after the zoom\n        const newTargetPosition = rayCastWorldCoordinates(\n            mapView,\n            targetPositionOnScreenXinNDC,\n            targetPositionOnScreenYinNDC\n        );\n\n        if (!targetPosition || !newTargetPosition) {\n            return;\n        }\n\n        if (mapView.projection.type === ProjectionType.Planar) {\n            // Calculate the difference and pan the map to maintain the map relative to the target\n            // position.\n            targetPosition.sub(newTargetPosition);\n            panCameraAboveFlatMap(mapView, targetPosition.x, targetPosition.y);\n        } else if (mapView.projection.type === ProjectionType.Spherical) {\n            panCameraAroundGlobe(mapView, targetPosition, newTargetPosition);\n        }\n    }\n\n    /**\n     * Orbits the camera around the focus point of the camera.\n     *\n     * @param mapView The [[MapView]] instance to manipulate.\n     * @param deltaAzimuthDeg Delta azimuth in degrees.\n     * @param deltaTiltDeg Delta tilt in degrees.\n     * @param maxTiltAngleRad The maximum tilt between the camera and its target in radian.\n     */\n    export function orbitFocusPoint(\n        mapView: MapView,\n        deltaAzimuthDeg: number,\n        deltaTiltDeg: number,\n        maxTiltAngleRad = maxTiltAngleAllowed\n    ) {\n        const target = mapView.target;\n        const sphericalCoordinates = extractSphericalCoordinatesFromLocation(\n            mapView,\n            mapView.camera,\n            target\n        );\n        const tilt = Math.max(\n            Math.min(\n                THREE.MathUtils.radToDeg(maxTiltAngleRad),\n                deltaTiltDeg + THREE.MathUtils.radToDeg(sphericalCoordinates.tilt)\n            ),\n            0\n        );\n        const heading =\n            THREE.MathUtils.radToDeg(sphericalCoordinates.azimuth + Math.PI) + deltaAzimuthDeg;\n        mapView.lookAt({\n            target,\n            distance: mapView.targetDistance,\n            tilt,\n            heading\n        });\n    }\n\n    /**\n     * Calculate target (focus) point geo-coordinates for given camera.\n     * @see getTargetPositionFromCamera\n     *\n     * @param camera The camera looking on target point.\n     * @param projection The geo-projection used.\n     * @param elevation Optional elevation above (or below) sea level measured in world units.\n     *\n     * @deprecated This function is for internal use only and will be removed in the future. Use\n     * MapView.worldTarget instead.\n     */\n    export function getGeoTargetFromCamera(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevation?: number\n    ): GeoCoordinates | null {\n        // This function does almost the same as:\n        // rayCastGeoCoordinates(mapView, 0, 0)\n        // but in more gentle and performance wise manner\n        // tslint:disable-next-line: deprecation\n        const targetWorldPos = getWorldTargetFromCamera(camera, projection, elevation);\n        if (targetWorldPos !== null) {\n            return projection.unprojectPoint(targetWorldPos);\n        }\n        return null;\n    }\n\n    /**\n     * Calculate target (focus) point world coordinates for given camera position and orientation.\n     * @param camera The camera looking on target point.\n     * @param projection The geo-projection used.\n     * @param elevation Optional elevation above (or below) sea level in world units.\n     *\n     * @deprecated This function is for internal use only and will be removed in the future.\n     */\n    export function getWorldTargetFromCamera(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevation?: number\n    ): THREE.Vector3 | null {\n        const cameraPos = cache.vector3[0].copy(camera.position);\n        const cameraLookAt = camera.getWorldDirection(cache.vector3[1]);\n        rayCaster.set(cameraPos, cameraLookAt);\n        if (elevation !== undefined) {\n            groundPlane.constant -= elevation;\n            groundSphere.radius += elevation;\n        }\n        const targetWorldPos = new THREE.Vector3();\n        const result =\n            projection.type === ProjectionType.Planar\n                ? rayCaster.ray.intersectPlane(groundPlane, targetWorldPos)\n                : rayCaster.ray.intersectSphere(groundSphere, targetWorldPos);\n        if (elevation !== undefined) {\n            groundPlane.constant = 0;\n            groundSphere.radius = EarthConstants.EQUATORIAL_RADIUS;\n        }\n        return result;\n    }\n\n    /**\n     * Returns the height of the camera above the earths surface.\n     *\n     * If there is an ElevationProvider, this is used. Otherwise the projection is used to determine\n     * how high the camera is above the surface.\n     *\n     * @param level Which level to request the surface height from.\n     * @return Height in world units.\n     */\n    function getHeightAboveTerrain(\n        location: THREE.Vector3,\n        projection: Projection,\n        elevationProvider?: ElevationProvider,\n        level?: number\n    ): number {\n        if (elevationProvider !== undefined) {\n            const geoLocation = projection.unprojectPoint(location);\n            const heightAboveTerrain = elevationProvider.getHeight(geoLocation, level);\n            if (heightAboveTerrain !== undefined) {\n                const height = projection.unprojectAltitude(location) - heightAboveTerrain;\n                return Math.max(height, 1);\n            }\n        }\n        return Math.abs(projection.groundDistance(location));\n    }\n\n    /**\n     * @internal\n     * @deprecated This method will be moved to MapView.\n     */\n    export function getTargetAndDistance(\n        projection: Projection,\n        camera: THREE.Camera,\n        elevationProvider?: ElevationProvider\n    ): { target: THREE.Vector3; distance: number } {\n        const cameraPitch = extractAttitude({ projection }, camera).pitch;\n\n        //FIXME: For now we keep the old behaviour when terrain is enabled (i.e. use the camera\n        //       height above terrain to deduce the target distance).\n        //       This leads to zoomlevel changes while panning. We have to find a proper solution\n        //       for terrain (e.g. raycast with the ground surfcae that is elevated by the average\n        //       elevation in the scene)\n        const terrainEnabled = elevationProvider !== undefined;\n\n        // Even for a tilt of 90° raycastTargetFromCamera is returning some point almost at\n        // infinity.\n        const target =\n            !terrainEnabled && cameraPitch < MAX_TILT_RAD\n                ? // tslint:disable-next-line: deprecation\n                  getWorldTargetFromCamera(camera, projection)\n                : null;\n        if (target !== null) {\n            const distance = camera.position.distanceTo(target);\n            return { target, distance };\n        } else {\n            // We either reached the [[PITCH_LIMIT]] or we did not hit the ground surface.\n            // In this case we do the reverse, i.e. compute some fallback distance and\n            // use it to compute the tagret point by using the camera direction.\n            const cameraPosZ = getHeightAboveTerrain(\n                camera.position,\n                projection,\n                elevationProvider,\n                TERRAIN_ZOOM_LEVEL\n            );\n\n            //For flat projection we fallback to the target distance at 89 degree pitch.\n            //For spherical projection we fallback to the tangent line distance\n            const distance =\n                projection.type === ProjectionType.Planar\n                    ? cameraPosZ / Math.cos(Math.min(cameraPitch, MAX_TILT_RAD))\n                    : Math.sqrt(\n                          Math.pow(cameraPosZ + EarthConstants.EQUATORIAL_RADIUS, 2) -\n                              Math.pow(EarthConstants.EQUATORIAL_RADIUS, 2)\n                      );\n\n            const cameraDir = camera.getWorldDirection(cache.vector3[0]);\n            cameraDir.multiplyScalar(distance);\n            const fallbackTarget = cache.vector3[1];\n            fallbackTarget.copy(camera.position).add(cameraDir);\n            return { target: fallbackTarget, distance };\n        }\n    }\n\n    /**\n     * Returns the [[GeoCoordinates]] of the camera, given its target coordinates on the map and its\n     * zoom, yaw and pitch.\n     *\n     * @param targetCoordinates Coordinates of the center of the view.\n     * @param distance Distance to the target in meters.\n     * @param yawDeg Camera yaw in degrees.\n     * @param pitchDeg Camera pitch in degrees.\n     * @param projection Active MapView, needed to get the camera fov and map projection.\n     * @param result Optional output vector.\n     * @returns Camera position in world space.\n     */\n    export function getCameraPositionFromTargetCoordinates(\n        targetCoordinates: GeoCoordinates,\n        distance: number,\n        yawDeg: number,\n        pitchDeg: number,\n        projection: Projection,\n        result: THREE.Vector3 = new THREE.Vector3()\n    ): THREE.Vector3 {\n        const pitchRad = THREE.MathUtils.degToRad(pitchDeg);\n        const altitude = Math.cos(pitchRad) * distance;\n        const yawRad = THREE.MathUtils.degToRad(yawDeg);\n        projection.projectPoint(targetCoordinates, result);\n        const groundDistance = distance * Math.sin(pitchRad);\n        if (projection.type === ProjectionType.Planar) {\n            result.x = result.x + Math.sin(yawRad) * groundDistance;\n            result.y = result.y - Math.cos(yawRad) * groundDistance;\n            result.z = result.z + altitude;\n        } else if (projection.type === ProjectionType.Spherical) {\n            // In globe yaw and pitch are understood to be in tangent space. The approach below is\n            // to find the Z and Y tangent space axes, then rotate Y around Z by the given yaw, and\n            // set its new length (groundDistance). Finally the up vector's length is set to the\n            // camera height and added to the transformed Y above.\n\n            // Get the Z axis in tangent space: it is the normalized position vector of the target.\n            tangentSpace.z.copy(result).normalize();\n\n            // Get the Y axis (north axis in tangent space):\n            tangentSpace.y\n                .set(0, 0, 1)\n                .projectOnPlane(tangentSpace.z)\n                .normalize();\n\n            // Rotate this north axis by the given yaw, giving the camera direction relative to\n            // the target.\n            cache.quaternions[0].setFromAxisAngle(tangentSpace.z, yawRad - Math.PI);\n            tangentSpace.y.applyQuaternion(cache.quaternions[0]);\n\n            // Push the camera to the specified distance.\n            tangentSpace.y.setLength(groundDistance);\n\n            // Now get the actual camera position vector: from the target position, add the\n            // previous computation to get the projection of the camera on the ground, then add\n            // the height of the camera in the tangent space.\n            const height = distance * Math.cos(pitchRad);\n            result.add(tangentSpace.y).add(tangentSpace.z.setLength(height));\n\n            const a = EarthConstants.EQUATORIAL_RADIUS + altitude;\n            const b = Math.sin(pitchRad) * distance;\n            const cameraHeight = Math.sqrt(a * a + b * b);\n            result.setLength(cameraHeight);\n        }\n\n        return result;\n    }\n\n    /**\n     * @deprecated use getCameraPositionFromTargetCoordinates instead\n     */\n    export function getCameraCoordinatesFromTargetCoordinates(\n        targetCoordinates: GeoCoordinates,\n        distance: number,\n        yawDeg: number,\n        pitchDeg: number,\n        mapView: MapView\n    ): GeoCoordinates {\n        return mapView.projection.unprojectPoint(\n            getCameraPositionFromTargetCoordinates(\n                targetCoordinates,\n                distance,\n                yawDeg,\n                pitchDeg,\n                mapView.projection,\n                cache.vector3[1]\n            )\n        );\n    }\n\n    /**\n     * Casts a ray in NDC space from the current map view and returns the intersection point of that\n     * ray wih the map in world space.\n     *\n     * @param mapView Instance of MapView.\n     * @param pointOnScreenXinNDC X coordinate in NDC space.\n     * @param pointOnScreenYinNDC Y coordinate in NDC space.\n     * @param elevation Optional param used to offset the ground plane. Used when wanting to pan\n     * based on a plane at some altitude. Necessary for example when panning with terrain.\n     *\n     * @returns Intersection coordinates, or `null` if raycast failed.\n     */\n    export function rayCastWorldCoordinates(\n        mapView: MapView,\n        pointOnScreenXinNDC: number,\n        pointOnScreenYinNDC: number,\n        elevation?: number\n    ): THREE.Vector3 | null {\n        const pointInNDCPosition = cache.vector3[0].set(\n            pointOnScreenXinNDC,\n            pointOnScreenYinNDC,\n            0\n        );\n        const cameraPos = cache.vector3[1].copy(mapView.camera.position);\n\n        cache.matrix4[0].extractRotation(mapView.camera.matrixWorld);\n\n        // Prepare the unprojection matrix which projects from NDC space to camera space\n        // and takes the current rotation of the camera into account.\n        cache.matrix4[1].multiplyMatrices(\n            cache.matrix4[0],\n            cache.matrix4[1].getInverse(mapView.camera.projectionMatrix)\n        );\n        // Unproject the point via the unprojection matrix.\n        const pointInCameraSpace = pointInNDCPosition.applyMatrix4(cache.matrix4[1]);\n        // Use the point in camera space as the vector towards this point.\n        rayCaster.set(cameraPos, pointInCameraSpace.normalize());\n        if (elevation !== undefined) {\n            groundPlane.constant -= elevation;\n            groundSphere.radius += elevation;\n        }\n\n        const worldPosition = new THREE.Vector3();\n        const result =\n            mapView.projection.type === ProjectionType.Planar\n                ? rayCaster.ray.intersectPlane(groundPlane, worldPosition)\n                : rayCaster.ray.intersectSphere(groundSphere, worldPosition);\n\n        if (elevation !== undefined) {\n            groundPlane.constant = 0;\n            groundSphere.radius = EarthConstants.EQUATORIAL_RADIUS;\n        }\n        return result;\n    }\n\n    /**\n     * Pans the camera according to the projection.\n     *\n     * @param mapView Instance of MapView.\n     * @param xOffset In world space. Value > 0 will pan the map to the right, value < 0 will pan\n     * the map to the left in default camera orientation.\n     * @param yOffset In world space. Value > 0 will pan the map upwards, value < 0 will pan the map\n     * downwards in default camera orientation.\n     */\n    export function panCameraAboveFlatMap(\n        mapView: MapView,\n        offsetX: number,\n        offsetY: number\n    ): void {\n        mapView.camera.position.x += offsetX;\n        mapView.camera.position.y += offsetY;\n    }\n\n    /**\n     * The function doing a pan in the spherical space when [[MapView]]'s active [[ProjectionType]]\n     * is spherical. In other words, the function that rotates the camera around the globe.\n     *\n     * @param mapView MapView instance.\n     * @param fromWorld Start vector representing the scene position of a geolocation.\n     * @param toWorld End vector representing the scene position of a geolocation.\n     */\n    export function panCameraAroundGlobe(\n        mapView: MapView,\n        fromWorld: THREE.Vector3,\n        toWorld: THREE.Vector3\n    ) {\n        cache.quaternions[0]\n            .setFromUnitVectors(fromWorld.normalize(), toWorld.normalize())\n            .inverse();\n        cache.matrix4[0].makeRotationFromQuaternion(cache.quaternions[0]);\n        mapView.camera.applyMatrix4(cache.matrix4[0]);\n        mapView.camera.updateMatrixWorld();\n    }\n\n    /**\n     * Rotates the camera by the given delta yaw and delta pitch. The pitch will be clamped to the\n     * maximum possible tilt to the new target, and under the horizon in sphere projection.\n     *\n     * @param mapView The [[MapView]] instance in use.\n     * @param deltaYawDeg Delta yaw in degrees.\n     * @param deltaPitchDeg Delta pitch in degrees.\n     * @param maxTiltAngleRad Max tilt angle in radians.\n     */\n    export function rotate(\n        mapView: MapView,\n        deltaYawDeg: number,\n        deltaPitchDeg: number = 0,\n        maxTiltAngleRad = Math.PI / 4\n    ) {\n        // 1. Apply yaw: rotate around the vertical axis.\n        mapView.camera.rotateOnWorldAxis(\n            mapView.projection.type === ProjectionType.Spherical\n                ? cache.vector3[0].copy(mapView.camera.position).normalize()\n                : cache.vector3[0].set(0, 0, 1),\n            THREE.MathUtils.degToRad(-deltaYawDeg)\n        );\n        mapView.camera.updateMatrixWorld();\n\n        // 2. Apply pitch: rotate around the camera's local X axis.\n        if (deltaPitchDeg === 0) {\n            return;\n        }\n        const pitch = MapViewUtils.extractAttitude(mapView, mapView.camera).pitch;\n        // `maxTiltAngle` is equivalent to a `maxPitchAngle` in flat projections.\n        let newPitch = THREE.MathUtils.clamp(\n            pitch + THREE.MathUtils.degToRad(deltaPitchDeg),\n            0,\n            maxTiltAngleRad\n        );\n        // In sphere projection, the value of a maximum pitch is smaller than the value of the\n        // maximum tilt, as the curvature of the surface adds up to it.\n        if (mapView.projection.type === ProjectionType.Spherical) {\n            // Deduce max pitch from max tilt. To this end the sine law of triangles is used below.\n            const maxPitch = Math.asin(\n                (EarthConstants.EQUATORIAL_RADIUS * Math.sin(Math.PI - maxTiltAngleRad)) /\n                    mapView.camera.position.length()\n            );\n            newPitch = Math.min(newPitch, maxPitch);\n        }\n        mapView.camera.rotateX(newPitch - pitch);\n    }\n\n    /**\n     * Computes the rotation of the camera according to yaw and pitch in degrees. The computations\n     * hinge on the current `projection` and `target`, because yaw and pitch are defined in\n     * tangent space of the target point.\n     *\n     * **Note:** `yaw == 0 && pitch == 0` will north up the map and you will look downwards onto the\n     * map.\n     *\n     * @param projection Current projection.\n     * @param target The camera target.\n     * @param yawDeg Yaw in degrees, counter-clockwise (as opposed to azimuth), starting north.\n     * @param pitchDeg Pitch in degrees.\n     */\n    export function getCameraRotationAtTarget(\n        projection: Projection,\n        target: GeoCoordinates,\n        yawDeg: number,\n        pitchDeg: number,\n        result: THREE.Quaternion = new THREE.Quaternion()\n    ): THREE.Quaternion {\n        const transform = cache.transforms[0];\n        projection.localTangentSpace(target, transform);\n\n        cache.matrix4[0].makeBasis(transform.xAxis, transform.yAxis, transform.zAxis);\n        result.setFromRotationMatrix(cache.matrix4[0]);\n\n        cache.quaternions[0].setFromAxisAngle(\n            cache.vector3[1].set(0, 0, 1),\n            THREE.MathUtils.degToRad(yawDeg)\n        );\n        cache.quaternions[1].setFromAxisAngle(\n            cache.vector3[1].set(1, 0, 0),\n            THREE.MathUtils.degToRad(pitchDeg)\n        );\n\n        result.multiply(cache.quaternions[0]);\n        result.multiply(cache.quaternions[1]);\n        return result;\n    }\n\n    /**\n     * Sets the rotation of the camera according to yaw and pitch in degrees. The computations hinge\n     * on the current projection and `geoCenter`, because yaw and pitch are defined in tangent\n     * space. In particular, `MapView#geoCenter` needs to be set before calling `setRotation`.\n     *\n     * **Note:** `yaw == 0 && pitch == 0` will north up the map and you will look downwards onto the\n     * map.\n     *\n     * @param mapView Instance of MapView.\n     * @param yawDeg Yaw in degrees, counter-clockwise (as opposed to azimuth), starting north.\n     * @param pitchDeg Pitch in degrees.\n     */\n    export function setRotation(mapView: MapView, yawDeg: number, pitchDeg: number) {\n        getCameraRotationAtTarget(\n            mapView.projection,\n            mapView.geoCenter,\n            yawDeg,\n            pitchDeg,\n            mapView.camera.quaternion\n        );\n    }\n\n    /**\n     * Extracts current camera tilt angle in radians.\n     *\n     * @param camera The [[Camera]] in use.\n     * @param projection The [[Projection]] used to convert between geo and world coordinates.\n     *\n     * @deprecated Use MapView.tilt\n     */\n    export function extractCameraTilt(camera: THREE.Camera, projection: Projection): number {\n        // For planar projections the camera target point local tangent is the same\n        // at every point on the ground (ignoring terrain fluctuations), so we may\n        // simply use inverted ground normal for tilt calculation. This simplifies\n        // the more generic calculus used for spherical projections.\n        if (projection.type === ProjectionType.Planar) {\n            const lookAt: THREE.Vector3 = camera.getWorldDirection(cache.vector3[0]).normalize();\n            const normal: THREE.Vector3 = projection\n                .surfaceNormal(camera.position, cache.vector3[1])\n                .negate();\n            const cosTheta = lookAt.dot(normal);\n            return Math.acos(THREE.MathUtils.clamp(cosTheta, -1, 1));\n        } else {\n            // Sanity check if new projection type is introduced.\n            assert(projection.type === ProjectionType.Spherical);\n            // tslint:disable-next-line: deprecation\n            const targetGeoCoords = MapViewUtils.getGeoTargetFromCamera(camera, projection);\n            // If focus point is lost we then expose maximum allowable tilt value.\n            if (targetGeoCoords !== null) {\n                return MapViewUtils.extractTiltAngleFromLocation(\n                    projection,\n                    camera,\n                    targetGeoCoords\n                );\n            } else {\n                logger.warn(\n                    \"MapView camera is pointing in the void, using maxTilt: \",\n                    maxTiltAngleAllowed\n                );\n                return maxTiltAngleAllowed;\n            }\n        }\n    }\n\n    /**\n     * Extracts yaw, pitch, and roll rotation in radians.\n     * - Yaw : Rotation around the vertical axis, counter-clockwise (as opposed to azimuth),\n     * starting north.\n     * - Pitch :Rotation around the horizontal axis.\n     * - Roll : Rotation around the view axis.\n     *\n     * @see https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles\n     *\n     * @param options Subset of necessary [[MapView]] properties.\n     * @param object The [[THREE.Object3D]] instance to extract the rotations from.\n     */\n    export function extractAttitude(\n        options: { projection: Projection },\n        object: THREE.Object3D\n    ): Attitude {\n        // 1. Build the matrix of the tangent space of the object.\n        cache.vector3[1].setFromMatrixPosition(object.matrixWorld); // Ensure using world position.\n        options.projection.localTangentSpace(options.projection.unprojectPoint(cache.vector3[1]), {\n            xAxis: tangentSpace.x,\n            yAxis: tangentSpace.y,\n            zAxis: tangentSpace.z,\n            position: cache.vector3[0]\n        });\n        cache.matrix4[1].makeBasis(tangentSpace.x, tangentSpace.y, tangentSpace.z);\n\n        // 2. Change the basis of matrixWorld to the tangent space to get the new base axes.\n        cache.matrix4[0].getInverse(cache.matrix4[1]).multiply(object.matrixWorld);\n        space.x.setFromMatrixColumn(cache.matrix4[0], 0);\n        space.y.setFromMatrixColumn(cache.matrix4[0], 1);\n        space.z.setFromMatrixColumn(cache.matrix4[0], 2);\n\n        // 3. Deduce orientation from the base axes.\n        let yaw = 0;\n        let pitch = 0;\n        let roll = 0;\n\n        // Decompose rotation matrix into Z0 X Z1 Euler angles.\n        const d = space.z.dot(cache.vector3[1].set(0, 0, 1));\n        if (d < 1.0 - epsilon) {\n            if (d > -1.0 + epsilon) {\n                yaw = Math.atan2(space.z.x, -space.z.y);\n                pitch = Math.acos(space.z.z);\n                roll = Math.atan2(space.x.z, space.y.z);\n            } else {\n                // Looking bottom-up with space.z.z == -1.0\n                yaw = -Math.atan2(-space.y.x, space.x.x);\n                pitch = 180;\n                roll = 0;\n            }\n        } else {\n            // Looking top-down with space.z.z == 1.0\n            yaw = Math.atan2(-space.y.x, space.x.x);\n            pitch = 0.0;\n            roll = 0.0;\n        }\n\n        return {\n            yaw,\n            pitch,\n            roll\n        };\n    }\n\n    /**\n     * Gets the spherical coordinates in radian of the object to the coordinates of `point`.\n     *\n     * Note: this method can be used to get the direction that an object points to, when `location`\n     * is the target of that object, by adding PI to it. Otherwise it only returns the spherical\n     * coordinates of `object` in the tangent space of `location`.\n     *\n     * @param mapView The [[MapView]] instance to consider.\n     * @param object The object to get the coordinates from.\n     * @param location The reference point.\n     */\n    export function extractSphericalCoordinatesFromLocation(\n        mapView: MapView,\n        object: THREE.Object3D,\n        location: GeoCoordinates\n    ): { azimuth: number; tilt: number } {\n        mapView.projection.localTangentSpace(location, {\n            xAxis: tangentSpace.x,\n            yAxis: tangentSpace.y,\n            zAxis: tangentSpace.z,\n            position: cache.vector3[0]\n        });\n\n        let tilt = 0;\n        let azimuth = 0;\n\n        // Get point to object vector in `cache.vector3[1]` and deduce `tilt` from the angle with\n        // tangent Z.\n        cache.vector3[1]\n            .copy(object.position)\n            .sub(cache.vector3[0])\n            .normalize();\n        if (cache.vector3[1].dot(tangentSpace.z) > 1 - epsilon) {\n            // Top down view: the azimuth of the object would be opposite the yaw, and clockwise.\n            azimuth = Math.PI - extractAttitude(mapView, object).yaw;\n            // Wrap between -PI and PI.\n            azimuth = Math.atan2(Math.sin(azimuth), Math.cos(azimuth));\n            tilt = 0;\n            return { tilt, azimuth };\n        }\n        tilt = cache.vector3[1].angleTo(tangentSpace.z);\n        // Tilted view: the azimuth is the direction of the object from the origin.\n        cache.vector3[1]\n            .copy(object.position)\n            .sub(cache.vector3[0])\n            .projectOnPlane(tangentSpace.z)\n            .normalize();\n        azimuth = cache.vector3[1].angleTo(tangentSpace.y);\n        if (cache.vector3[1].cross(tangentSpace.y).dot(tangentSpace.z) < 0) {\n            azimuth = -azimuth;\n        }\n        return { tilt, azimuth };\n    }\n\n    /**\n     * Gets the tilt angle (in radians) of the object relative to the coordinates of `location`.\n     *\n     * Note: this method can be used to get the direction that an object points to, when `location`\n     * is the target of that object, by adding PI to it. Otherwise it only returns the tilt angle\n     * (in radians) of `object` in the tangent space of `location`.\n     *\n     * @param projection The [[Projection]] used when converting from geo to world coordinates.\n     * @param object The object to get the coordinates from.\n     * @param location The reference point.\n     */\n    export function extractTiltAngleFromLocation(\n        projection: Projection,\n        object: THREE.Object3D,\n        location: GeoCoordinates\n    ): number {\n        projection.localTangentSpace(location, {\n            xAxis: tangentSpace.x,\n            yAxis: tangentSpace.y,\n            zAxis: tangentSpace.z,\n            position: cache.vector3[0]\n        });\n\n        // Get point to object vector (dirVec) and compute the `tilt` as the angle with tangent Z.\n        const dirVec = cache.vector3[1].copy(object.position).sub(cache.vector3[0]);\n        const dirLen = dirVec.length();\n        if (dirLen < epsilon) {\n            logger.error(\"Can not calculate tilt for the zero length vector!\");\n            return 0;\n        }\n        dirVec.divideScalar(dirLen);\n\n        const cosTheta = dirVec.dot(tangentSpace.z);\n        if (cosTheta > 1 - epsilon) {\n            // Top down view.\n            return 0;\n        }\n        return Math.acos(THREE.MathUtils.clamp(cosTheta, -1, 1));\n    }\n\n    /**\n     * Get perspective camera frustum planes distances.\n     * @return all plane distances in helper object.\n     */\n    export function getCameraFrustumPlanes(\n        camera: THREE.PerspectiveCamera\n    ): { left: number; right: number; top: number; bottom: number; near: number; far: number } {\n        const near = camera.near;\n        const far = camera.far;\n        let top = (near * Math.tan(THREE.MathUtils.degToRad(0.5 * camera.fov))) / camera.zoom;\n        let height = 2 * top;\n        let width = camera.aspect * height;\n        let left = -0.5 * width;\n\n        const view = camera.view;\n        if (view !== null && view.enabled) {\n            const fullWidth = view.fullWidth;\n            const fullHeight = view.fullHeight;\n\n            left += (view.offsetX * width) / fullWidth;\n            top -= (view.offsetY * height) / fullHeight;\n            width *= view.width / fullWidth;\n            height *= view.height / fullHeight;\n        }\n\n        // Correct by skew factor\n        left += camera.filmOffset !== 0 ? (near * camera.filmOffset) / camera.getFilmWidth() : 0;\n\n        return {\n            left,\n            right: left + width,\n            top,\n            bottom: top - height,\n            near,\n            far\n        };\n    }\n\n    /**\n     * Casts a ray in NDC space from the current view of the camera and returns the intersection\n     * point of that ray against the map in geo coordinates. The return value can be `null` when\n     * the raycast is above the horizon.\n     *\n     * @param mapView Instance of MapView.\n     * @param pointOnScreenXNDC  Abscissa in NDC space.\n     * @param pointOnScreenYNDC  Ordinate in NDC space.\n     * @returns Intersection geo coordinates, or `null` if raycast is above the horizon.\n     */\n    export function rayCastGeoCoordinates(\n        mapView: MapView,\n        pointOnScreenXinNDC: number,\n        pointOnScreenYinNDC: number\n    ): GeoCoordinates | null {\n        const worldCoordinates = rayCastWorldCoordinates(\n            mapView,\n            pointOnScreenXinNDC,\n            pointOnScreenYinNDC\n        );\n\n        if (!worldCoordinates) {\n            return null;\n        }\n\n        return mapView.projection.unprojectPoint(worldCoordinates);\n    }\n\n    /**\n     * Calculates and returns the distance from the ground, which is needed to put the camera to\n     * this height, to see the size of the area that would be covered by one tile for the given zoom\n     * level.\n     *\n     * @param mapView Instance of MapView.\n     * @param options Subset of necessary [[MapView]] properties.\n     */\n    export function calculateDistanceToGroundFromZoomLevel(\n        options: { projection: Projection; focalLength: number; camera: THREE.Object3D },\n        zoomLevel: number\n    ): number {\n        const cameraPitch = extractAttitude(options, options.camera).pitch;\n        const tileSize = EarthConstants.EQUATORIAL_CIRCUMFERENCE / Math.pow(2, zoomLevel);\n        return ((options.focalLength * tileSize) / 256) * Math.cos(cameraPitch);\n    }\n\n    /**\n     * Calculates and returns the distance to the target point.\n     *\n     * @param options Necessary subset of MapView properties to compute the distance.\n     * @param zoomLevel The zoom level to get the equivalent height to.\n     */\n    export function calculateDistanceFromZoomLevel(\n        options: { focalLength: number },\n        zoomLevel: number\n    ): number {\n        const tileSize = EarthConstants.EQUATORIAL_CIRCUMFERENCE / Math.pow(2, zoomLevel);\n        return (options.focalLength * tileSize) / 256;\n    }\n\n    /**\n     * Calculates the zoom level, which corresponds to the current distance from\n     * camera to lookAt point.\n     * Therefore the zoom level is a `float` and not an `int`. The height of the camera can be in\n     * between zoom levels. By setting the zoom level, you change the height position of the camera\n     * in away that the field of view of the camera should be able to cover one tile for the given\n     * zoom level.\n     *\n     * As an example for this, when you have a tile of zoom level 14 in front of the camera and you\n     * set the zoom level of the camera to 14, then you are able to see the whole tile in front of\n     * you.\n     *\n     * @param options Subset of necessary [[MapView]] properties.\n     * @param distance The distance in meters, which are scene units in [[MapView]].\n     */\n    export function calculateZoomLevelFromDistance(\n        options: { focalLength: number; minZoomLevel: number; maxZoomLevel: number },\n        distance: number\n    ): number {\n        const tileSize = (256 * distance) / options.focalLength;\n        const zoomLevel = THREE.MathUtils.clamp(\n            Math.log2(EarthConstants.EQUATORIAL_CIRCUMFERENCE / tileSize),\n            options.minZoomLevel,\n            options.maxZoomLevel\n        );\n        // Round to avoid modify the zoom level without distance change, with the imprecision\n        // introduced by ray-casting and distance calculus.\n        // NOTE: Using 10 fractional digits as rounding precision, this solves HARP-8523.\n        return roundZoomLevel(zoomLevel);\n    }\n\n    /**\n     * Translates a linear clip-space distance value to the actual value stored in the depth buffer.\n     * This is useful as the depth values are not stored in the depth buffer linearly, and this can\n     * lead into confusing behavior when not taken into account.\n     *\n     * @param clipDistance Distance from the camera in clip space (range: [0, 1]).\n     * @param camera Camera applying the perspective projection.\n     */\n    export function calculateDepthFromClipDistance(\n        clipDistance: number,\n        camera: THREE.Camera\n    ): number {\n        const perspCam = camera as THREE.PerspectiveCamera;\n        const cameraRange = perspCam.far - perspCam.near;\n        const viewSpaceDistance = clipDistance * perspCam.far;\n\n        return (1.0 - perspCam.near / viewSpaceDistance) * (perspCam.far / cameraRange);\n    }\n\n    /**\n     * Translates a linear distance value [0..1], where 1 is the distance to the far plane, into\n     * [0..cameraFar].\n     *\n     * @param distance Distance from the camera (range: [0, 1]).\n     * @param camera Camera applying the perspective projection.\n     */\n    export function cameraToWorldDistance(distance: number, camera: THREE.Camera): number {\n        const perspCam = camera as THREE.PerspectiveCamera;\n        return distance * perspCam.far;\n    }\n\n    /**\n     * Calculates vertical field of view for given horizontal field of vision and aspect ratio.\n     *\n     * @param hFov Horizontal field of view in rad.\n     * @param aspect Aspect ratio.\n     */\n    export function calculateVerticalFovByHorizontalFov(hFov: number, aspect: number): number {\n        return 2 * Math.atan(Math.tan(hFov / 2) / aspect);\n    }\n\n    /**\n     * Calculates horizontal field of view for given vertical field of vision and aspect ratio.\n     *\n     * @param hFov Vertical field of view in rad.\n     * @param aspect Aspect ratio.\n     */\n    export function calculateHorizontalFovByVerticalFov(vFov: number, aspect: number): number {\n        return 2 * Math.atan(Math.tan(vFov / 2) * aspect);\n    }\n\n    /**\n     * Calculates the focal length based on the vertical FOV and height.\n     *\n     * @param vFov Vertical field of view in rad.\n     * @param height Height of canvas in pixels.\n     */\n    export function calculateFocalLengthByVerticalFov(vFov: number, height: number): number {\n        return height / 2 / Math.tan(vFov / 2);\n    }\n\n    /**\n     * Calculates the vertical field of view based on the focal length and the height.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param height Height of canvas in pixels.\n     */\n    export function calculateFovByFocalLength(focalLength: number, height: number): number {\n        return THREE.MathUtils.radToDeg(2 * Math.atan(height / 2 / focalLength));\n    }\n\n    /**\n     * Calculates object's screen size based on the focal length and it's camera distance.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param distance Object distance in world space.\n     * @param worldSize Object size in world space.\n     * @return object size in screen space.\n     */\n    export function calculateScreenSizeByFocalLength(\n        focalLength: number,\n        distance: number,\n        worldSize: number\n    ): number {\n        return (focalLength * worldSize) / distance;\n    }\n\n    /**\n     * Calculates object's world size based on the focal length and it's camera distance.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param distance Object distance in world space.\n     * @param screenSize Object size in screen space.\n     * @return object size in world space.\n     */\n    export function calculateWorldSizeByFocalLength(\n        focalLength: number,\n        distance: number,\n        screenSize: number\n    ): number {\n        return (distance * screenSize) / focalLength;\n    }\n\n    /**\n     * Function performs zoom level rounding to 10-th place after comma.\n     *\n     * Inaccuracies on the 13-th fractional digit may be observed when doing small\n     * tilt changes, thus causing the zoom level to be discretized to smaller value then real\n     * one, for example when acquiring tiles storage level or visibility level.\n     * This causes zoom level jitter and displaying wrong tile set (with different zoom level)\n     * for a certain camera arrangements (angles).\n     *\n     * @note Rounding function is used to limit zoom level jitter and fluctuations.\n     *\n     * @param zoomLevel Input zoom level from based on camera distance.\n     * @return The resulting zoom level rounded to 10-th place after comma.\n     */\n    export function roundZoomLevel(zoomLevel: number) {\n        // Here 10 digits gives quite big safety margin, yet still giving enough precision for\n        // zoom level based interpolations.\n        return Math.round(zoomLevel * 10e10) / 10e10;\n    }\n\n    /**\n     * Computes estimate for size of a THREE.Object3D object and its children. Shared materials\n     * and/or attributes will be counted multiple times.\n     *\n     * @param object The mesh object to evaluate\n     * @param size The [[MemoryUsage]] to update.\n     * @param visitedObjects Optional map to store large objects that could be shared.\n     *\n     * @returns Estimate of object size in bytes for heap and GPU.\n     */\n    export function estimateObject3dSize(\n        object: THREE.Object3D,\n        parentSize?: MemoryUsage,\n        visitedObjects?: Map<string, boolean>\n    ): MemoryUsage {\n        const size =\n            parentSize !== undefined\n                ? parentSize\n                : {\n                      heapSize: 0,\n                      gpuSize: 0\n                  };\n\n        if (visitedObjects === undefined) {\n            visitedObjects = new Map();\n        }\n\n        estimateMeshSize(object, size, visitedObjects);\n\n        if (object.children.length > 0) {\n            for (const child of object.children) {\n                estimateObject3dSize(child, size, visitedObjects);\n            }\n        }\n        return size;\n    }\n\n    /**\n     * Check if tiles or other content is currently being loaded.\n     *\n     * This method can be removed once HARP-7932 is implemented.\n     *\n     * @returns `true` if MapView has visible tiles or other content that is being loaded.\n     */\n    export function mapViewIsLoading(mapView: MapView) {\n        let numTilesLoading = 0;\n\n        for (const tileList of mapView.visibleTileSet.dataSourceTileList) {\n            numTilesLoading += tileList.numTilesLoading;\n\n            for (const tile of tileList.visibleTiles) {\n                if (tile.tileLoader !== undefined && !tile.tileLoader.isFinished) {\n                    numTilesLoading++;\n                }\n                if (tile.tileGeometryLoader !== undefined && !tile.tileGeometryLoader.isFinished) {\n                    numTilesLoading++;\n                }\n            }\n        }\n        let isLoading = numTilesLoading > 0;\n\n        if (mapView.textElementsRenderer !== undefined) {\n            isLoading = isLoading || mapView.textElementsRenderer.loading;\n        }\n\n        isLoading =\n            isLoading ||\n            !mapView.poiTableManager.finishedLoading ||\n            !mapView.visibleTileSet.allVisibleTilesLoaded;\n\n        return isLoading;\n    }\n\n    function estimateTextureSize(\n        texture: THREE.Texture | null,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (texture === null || texture === undefined || texture.image === undefined) {\n            return;\n        }\n\n        if (texture.uuid !== undefined && visitedObjects.get(texture.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(texture.uuid, true);\n\n        // May be HTMLImage or ImageData\n        const image = texture.image;\n        // Assuming RGBA\n        const imageBytes = 4 * image.width * image.height;\n        objectSize.heapSize += imageBytes;\n        objectSize.gpuSize += imageBytes;\n    }\n\n    function estimateMaterialSize(\n        material: THREE.Material,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (material.uuid !== undefined && visitedObjects.get(material.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(material.uuid, true);\n\n        if (\n            material instanceof THREE.RawShaderMaterial ||\n            material instanceof THREE.ShaderMaterial\n        ) {\n            const rawMaterial = material;\n            for (const name in rawMaterial.uniforms) {\n                if (rawMaterial.uniforms[name] !== undefined) {\n                    const uniform = rawMaterial.uniforms[name];\n                    if (uniform instanceof THREE.Texture) {\n                        estimateTextureSize(uniform, objectSize, visitedObjects);\n                    }\n                }\n            }\n        } else if (\n            material instanceof THREE.MeshBasicMaterial ||\n            material instanceof MapMeshBasicMaterial\n        ) {\n            const meshMaterial = material;\n            estimateTextureSize(meshMaterial.map, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.aoMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.specularMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.alphaMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.envMap, objectSize, visitedObjects);\n        } else if (material instanceof MapMeshStandardMaterial) {\n            const standardMaterial = material;\n\n            estimateTextureSize(standardMaterial.map, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.lightMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.aoMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.emissiveMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.bumpMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.normalMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.displacementMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.roughnessMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.metalnessMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.alphaMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.envMap, objectSize, visitedObjects);\n        } else if (\n            material instanceof THREE.LineBasicMaterial ||\n            material instanceof THREE.LineDashedMaterial\n        ) {\n            // Nothing to be done here\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified material: \", material);\n        }\n    }\n\n    function estimateAttributeSize(\n        attribute: any,\n        attrName: string,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        // Attributes (apparently) do not have their uuid set up.\n        if (attribute.uuid === undefined) {\n            attribute.uuid = THREE.MathUtils.generateUUID();\n        }\n\n        if (visitedObjects.get(attribute.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(attribute.uuid, true);\n\n        let attrBytes = 0;\n        let bytesPerElement = 4;\n        if (attribute.array.BYTES_PER_ELEMENT !== undefined) {\n            bytesPerElement = attribute.array.BYTES_PER_ELEMENT;\n        }\n        if (\n            attribute instanceof THREE.InterleavedBufferAttribute ||\n            attribute instanceof THREE.BufferAttribute\n        ) {\n            attrBytes = bytesPerElement * attribute.count * attribute.itemSize;\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified attribute: \", attrName);\n        }\n\n        objectSize.heapSize += attrBytes + MINIMUM_ATTRIBUTE_SIZE_ESTIMATION;\n        objectSize.gpuSize += attrBytes;\n    }\n\n    function estimateGeometrySize(\n        geometry: THREE.Geometry | THREE.BufferGeometry,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        const isNewObject =\n            geometry.uuid === undefined || visitedObjects.get(geometry.uuid) !== true;\n\n        if (!isNewObject) {\n            return;\n        }\n        visitedObjects.set(geometry.uuid, true);\n\n        let bufferGeometry: THREE.BufferGeometry | undefined;\n\n        if (geometry instanceof THREE.Geometry) {\n            // Each vertex is represented as 3 floats vector (24 bytes).\n            objectSize.heapSize += geometry.vertices.length * 24;\n            // Face: 3 indices (24 byte), 1 normal (3 floats = 24). Vertex normals and\n            // colors are not counted here.\n            objectSize.heapSize += geometry.faces.length * (24 + 24);\n            // Additionally, the internal _bufferGeometry is also counted:\n            bufferGeometry = (geometry as any)._bufferGeometry;\n        } else if (geometry instanceof THREE.BufferGeometry) {\n            bufferGeometry = geometry;\n        }\n\n        if (bufferGeometry === undefined) {\n            // Nothing more to calculate.\n            return;\n        }\n\n        const attributes = bufferGeometry.attributes;\n        if (attributes === undefined) {\n            logger.warn(\"estimateGeometrySize: unidentified geometry: \", geometry);\n            return;\n        }\n\n        for (const property in attributes) {\n            if (attributes[property] !== undefined) {\n                estimateAttributeSize(attributes[property], property, objectSize, visitedObjects);\n            }\n        }\n        if (bufferGeometry.index !== null) {\n            estimateAttributeSize(bufferGeometry.index, \"index\", objectSize, visitedObjects);\n        }\n    }\n\n    function estimateMeshSize(\n        object: THREE.Object3D,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (!object.isObject3D || object instanceof THREE.Scene) {\n            return;\n        }\n\n        if (object.uuid !== undefined && visitedObjects.get(object.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(object.uuid, true);\n\n        if ((object as any).isMesh || (object as any).isLine || (object as any).isPoints) {\n            // Estimated minimum impact on heap.\n            let heapSize = MINIMUM_OBJECT3D_SIZE_ESTIMATION;\n            const gpuSize = 0;\n\n            // Cast to LodMesh class which contains the minimal required properties sub-set.\n            const mesh = object as LodMesh;\n\n            // Calculate material(s) impact.\n            if (mesh.material !== undefined) {\n                if (Array.isArray(mesh.material)) {\n                    const materials = mesh.material as THREE.Material[];\n                    for (const material of materials) {\n                        estimateMaterialSize(material, objectSize, visitedObjects);\n                    }\n                } else {\n                    const material = mesh.material as THREE.Material;\n                    estimateMaterialSize(material, objectSize, visitedObjects);\n                }\n            }\n\n            // Calculate cost of geometry.\n            if (mesh.geometries !== undefined) {\n                for (const geometry of mesh.geometries) {\n                    estimateGeometrySize(geometry, objectSize, visitedObjects);\n                }\n            } else if (mesh.geometry !== undefined) {\n                estimateGeometrySize(mesh.geometry, objectSize, visitedObjects);\n            }\n\n            // Add info that is required for picking (parts of) objects and match them to\n            // the featureID in the map data.\n            const featureData: TileFeatureData | undefined =\n                object.userData !== undefined\n                    ? (object.userData.feature as TileFeatureData)\n                    : undefined;\n\n            if (featureData !== undefined) {\n                heapSize += getFeatureDataSize(featureData);\n            }\n\n            objectSize.heapSize += heapSize;\n            objectSize.gpuSize += gpuSize;\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified object\", object);\n        }\n    }\n\n    /**\n     * Gets language list used by the browser\n     *\n     * @returns Array of iso language codes\n     */\n    export function getBrowserLanguages(): string[] | undefined {\n        if (navigator.languages !== undefined && navigator.languages.length > 0) {\n            const languageList = [];\n            for (const lang of navigator.languages) {\n                languageList.push(getIsoLanguageCode(lang));\n            }\n            return languageList;\n        }\n        if (navigator.language !== undefined) {\n            return [getIsoLanguageCode(navigator.language)];\n        }\n        return undefined;\n    }\n\n    /**\n     * Gets ISO-639-1 language code from browser's code (ex. en for en-US)\n     */\n    function getIsoLanguageCode(language: string) {\n        return language.substring(0, 2);\n    }\n}\n\n/** @hidden */\nconst powerOfTwo = [\n    0x1,\n    0x2,\n    0x4,\n    0x8,\n    0x10,\n    0x20,\n    0x40,\n    0x80,\n    0x100,\n    0x200,\n    0x400,\n    0x800,\n    0x1000,\n    0x2000,\n    0x4000,\n    0x8000,\n    0x10000,\n    0x20000,\n    0x40000,\n    0x80000,\n    0x100000,\n    0x200000,\n    0x400000,\n    0x800000,\n    0x1000000,\n    0x2000000,\n    0x4000000,\n    0x8000000,\n    0x10000000,\n    0x20000000,\n    0x40000000,\n    0x80000000,\n    0x100000000,\n    0x200000000,\n    0x400000000,\n    0x800000000,\n    0x1000000000,\n    0x2000000000,\n    0x4000000000,\n    0x8000000000,\n    0x10000000000,\n    0x20000000000,\n    0x40000000000,\n    0x80000000000,\n    0x100000000000,\n    0x200000000000,\n    0x400000000000,\n    0x800000000000,\n    0x1000000000000,\n    0x2000000000000,\n    0x4000000000000,\n    0x8000000000000,\n    0x10000000000000\n];\n\nexport namespace TileOffsetUtils {\n    /**\n     * Creates a unique key based on the supplied parameters. Note, the uniqueness is bounded by the\n     * bitshift. The [[TileKey.mortonCode()]] supports currently up to 26 levels (this is because\n     * 26*2 equals 52, and 2^52 is the highest bit that can be set in an integer in Javascript), the\n     * bitshift reduces this accordingly, so given the default bitshift of four, we support up to 24\n     * levels. Given the current support up to level 19 this should be fine.\n     *\n     * @param tileKey The unique [[TileKey]] from which to compute the unique key.\n     * @param offset How much the given [[TileKey]] is offset\n     * @param bitshift How much space we have to store the offset. The default of 4 means we have\n     *      enough space to store 16 unique tiles in a single view.\n     */\n    export function getKeyForTileKeyAndOffset(\n        tileKey: TileKey,\n        offset: number,\n        bitshift: number = 4\n    ) {\n        const shiftedOffset = getShiftedOffset(offset, bitshift);\n        return tileKey.mortonCode() + shiftedOffset;\n    }\n\n    /**\n     * Extracts the offset and morton key from the given key (must be created by:\n     * [[getKeyForTileKeyAndOffset]])\n     *\n     * Note, we can't use bitshift operators in Javascript because they work on 32-bit integers, and\n     * would truncate the numbers, hence using powers of two.\n     *\n     * @param key Key to extract offset and morton key.\n     * @param bitshift How many bits to shift by, must be the same as was used when creating the\n     * key.\n     */\n    export function extractOffsetAndMortonKeyFromKey(key: number, bitshift: number = 4) {\n        let offset = 0;\n        let mortonCode = key;\n        let i = 0;\n        // Compute the offset\n        for (; i < bitshift; i++) {\n            // Note, we use 52, because 2^53-1 is the biggest value, the highest value\n            // that can be set is the bit in the 52th position.\n            const num = powerOfTwo[52 - i];\n            if (mortonCode >= num) {\n                mortonCode -= num;\n                offset += powerOfTwo[bitshift - 1 - i];\n            }\n        }\n        // We subtract half of the total amount, this undoes what is computed in getShiftedOffset\n        offset -= powerOfTwo[bitshift - 1];\n        return { offset, mortonCode };\n    }\n\n    /**\n     * Returns the key of the parent. Key must have been computed using the function\n     * [[getKeyForTileKeyAndOffset]].\n     *\n     * @param calculatedKey Key to decompose\n     * @param bitshift Bit shift used to create the key\n     */\n    export function getParentKeyFromKey(calculatedKey: number, bitshift: number = 4) {\n        const { offset, mortonCode } = extractOffsetAndMortonKeyFromKey(calculatedKey, bitshift);\n        const parentTileKey = TileKey.fromMortonCode(TileKey.parentMortonCode(mortonCode));\n        return getKeyForTileKeyAndOffset(parentTileKey, offset, bitshift);\n    }\n\n    /**\n     * Packs the supplied offset into the high bits, where the highbits are between 2^52 and\n     * 2^(52-bitshift).\n     *\n     * Offsets are wrapped around, to fit in the offsetBits. In practice, this doesn't really\n     * matter, this is primarily used to find a unique id, if there is an offset 10, which is\n     * wrapped to 2, it doesn't matter, because the offset of 10 is still stored in the tile.\n     * What can be a problem though is that the cache gets filled up and isn't emptied.\n     *\n     * Note, because bit shifting in JavaScript works on 32 bit integers, we use powers of 2 to set\n     * the high bits instead.\n     *\n     * @param offset Offset to pack into the high bits.\n     * @param offsetBits How many bits to use to pack the offset.\n     */\n    function getShiftedOffset(offset: number, offsetBits: number = 4) {\n        let result = 0;\n        const totalOffsetsToStore = powerOfTwo[offsetBits];\n        //Offsets are stored by adding half 2 ^ (bitshift - 1), i.e.half of the max amount stored,\n        //and then wrapped based on this value.For example, given a bitshift of 3, and an offset -\n        //3, it would have 4 added(half of 2 ^ 3), and be stored as 1, 3 would have 4 added and be\n        //stored as 7, 4 would be added with 4 and be stored as 0 (it wraps around).\n        offset += totalOffsetsToStore / 2;\n        while (offset < 0) {\n            offset += totalOffsetsToStore;\n        }\n        while (offset >= totalOffsetsToStore) {\n            offset -= totalOffsetsToStore;\n        }\n        // Offset is now a number between >= 0 and < totalOffsetsToStore\n        for (let i = 0; i < offsetBits && offset > 0; i++) {\n            // tslint:disable: no-bitwise\n            // 53 is used because 2^53-1 is the biggest number that Javascript can represent as an\n            // integer safely.\n            if (offset & 0x1) {\n                result += powerOfTwo[53 - offsetBits + i];\n            }\n            offset >>>= 1;\n            // tslint:enable: no-bitwise\n        }\n        assert(offset === 0);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport class EarthConstants {\n    /** The equatorial circumference in meters. */\n    static EQUATORIAL_CIRCUMFERENCE: number = 40075016.6855784861531768177614;\n\n    /** The equatorial radius in meters. */\n    static EQUATORIAL_RADIUS: number = 6378137.0;\n\n    /** The lowest point on earth (Dead Sea) in meters. */\n    static MIN_ELEVATION: number = -433.0;\n\n    /** The highest point on earth (Mt. Everest) in meters. */\n    static MAX_ELEVATION: number = 8848.0;\n\n    /** The highest artificial structure (building) on earth, Burj Khalifa tower in Dubai */\n    static MAX_BUILDING_HEIGHT: number = 828;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * An interface representing bounding box in world coordinates.\n */\nexport interface Box3Like {\n    /**\n     * The minimum position in world coordinates of this bounding box.\n     */\n    readonly min: Vector3Like;\n\n    /**\n     * The maximum position in world coordinates of this bounding box.\n     */\n    readonly max: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the [[Box3Like]] interface.\n *\n * @param object A valid object.\n */\nexport function isBox3Like(object: {}): object is Box3Like {\n    const box3 = object as Partial<Box3Like>;\n    return box3.min !== undefined && box3.max !== undefined;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TransformLike } from \"./TransformLike\";\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * The interface [[OrientedBox3Like]] is used to represent oriented bounding box.\n */\nexport interface OrientedBox3Like extends TransformLike {\n    /**\n     * The extents of this bounding box.\n     */\n    readonly extents: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the interface [[OrientedBox3Like]].\n *\n * @param object The object.\n */\nexport function isOrientedBox3Like(object: {}): object is OrientedBox3Like {\n    const obb = object as Partial<OrientedBox3Like>;\n    return (\n        obb.position !== undefined &&\n        obb.xAxis !== undefined &&\n        obb.yAxis !== undefined &&\n        obb.zAxis !== undefined &&\n        obb.extents !== undefined\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\n\n/**\n * The type of projection.\n */\nexport enum ProjectionType {\n    /**\n     * A type of [Projection] with zero curvature.\n     */\n    Planar,\n\n    /**\n     * A spherical [Projection].\n     */\n    Spherical\n}\n\n/**\n * `Projection` is used to convert positions from geo coordinates to world coordinates and vice\n * versa.\n */\nexport abstract class Projection {\n    /**\n     * The type of this [Projection].\n     */\n    abstract get type(): ProjectionType;\n\n    /**\n     * Constructs the Projection\n     *\n     * @param unitScale How to transform the projected coordinates to world units.\n     */\n    constructor(readonly unitScale: number) {\n        //Prevent empty constructor error.\n    }\n\n    /**\n     * Returns the world extents in world coordinates.\n     *\n     * @param minElevation The minimum elevation in meters.\n     * @param maxElevation The maximum elevation in meters.\n     * @param result The optional object that will be used to create the resulting bounding box.\n     */\n    abstract worldExtent<Bounds extends Box3Like>(\n        minElevation: number,\n        maxElevation: number,\n        result?: Bounds\n    ): Bounds;\n\n    /**\n     * Projects a point from geo coordinates (latitude, longitude, altitude) to world coordinates\n     * (x,y,z).\n     *\n     * Example:\n     * ```typescript\n     * const worldPos = new THREE.Vector3();\n     * projection.projectPoint(geoPos, worldPos);\n     * ```\n     *\n     * @param geoPoint The position in geo coordinates.\n     * @param result The optional object used to store the resulting world position, result must\n     * implement [[Vector3Like]].\n     */\n    abstract projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates;\n\n    /**\n     * Gets the [[TransformLike]] of the local tangent space at the given geo coordinates.\n     *\n     * @param geoPoint The geo coordinates.\n     * @param result The [[TransformLike]].\n     */\n    localTangentSpace(geoPoint: GeoCoordinatesLike, result: TransformLike): TransformLike {\n        this.projectPoint(geoPoint, result.position);\n        MathUtils.newVector3(1, 0, 0, result.xAxis);\n        MathUtils.newVector3(0, 1, 0, result.yAxis);\n        MathUtils.newVector3(0, 0, 1, result.zAxis);\n        return result;\n    }\n\n    /**\n     * Returns the geo coordinates (latitude, longitude, altitude) from the given world position\n     * (x,y,z).\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = projection.unprojectPoint(worldPos);\n     * console.log(geoPos.latitude, geoPos.longitude, geoPos.altitude);\n     * ```\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract unprojectPoint(worldPoint: Vector3Like): GeoCoordinates;\n\n    /**\n     * Returns the altitude at the given world position (x,y,z) in meters.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract unprojectAltitude(worldPoint: Vector3Like): number;\n\n    /**\n     * Projects bounds in geo coordinates to a bounding box in world coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const bounds = projection.projectBox(geoBox);\n     * console.log(bounds.min, bounds.max);\n     * ```\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     */\n    abstract projectBox(geoBox: GeoBox): Box3Like;\n\n    /**\n     * Projects bounds in geo coordinates to a bounding box in world coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const bounds = projection.projectBox(geoBox, new THREE.Box3());\n     * console.log(bounds.min, bounds.max);\n     * ```\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     * @param result The resulting [[OrientedBox3Like]].\n     */\n    abstract projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result: WorldBoundingBox\n    ): WorldBoundingBox;\n\n    /**\n     * Converts a bounding box in world coordinates to a bounding box in geo coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = projection.unprojectPoint(worldPos);\n     * console.log(geoPos.latitude, geoPos.longitude, geoPos.altitude);\n     * ```\n     *\n     * @param worldBox The bounding box in world coordinates.\n     */\n    abstract unprojectBox(worldBox: Box3Like): GeoBox;\n\n    /**\n     * Returns the scaling factor that must be used to convert the units used by `worldPoint` to\n     * meters.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract getScaleFactor(worldPoint: Vector3Like): number;\n\n    /**\n     * Returns the surface normal at the given world position.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract surfaceNormal(worldPoint: Vector3Like): Vector3Like;\n\n    /**\n     * Returns the surface normal at the given world position.\n     *\n     * @param worldPoint The position in world coordinates.\n     * @returns The resulting normal vector.\n     */\n    abstract surfaceNormal<Normal extends Vector3Like>(\n        worldPoint: Vector3Like,\n        result: Normal\n    ): Normal;\n\n    /**\n     * Returns the signed distance between the given coordinates and\n     * the closest point on the surface.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract groundDistance(worldPoint: Vector3Like): number;\n\n    /**\n     * Scales the given world coordinates to the surface.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract scalePointToSurface(worldPoint: Vector3Like): Vector3Like;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid world position for the given source projection.\n     * @returns The world position reprojected using this [[Projection]].\n     */\n    reprojectPoint(sourceProjection: Projection, worldPos: Vector3Like): Vector3Like;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid position in the world space defined by the source projection.\n     * @param result The resulting position reprojected using this [[Projection]].\n     */\n    reprojectPoint<WorldCoordinates extends Vector3Like>(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result: WorldCoordinates\n    ): typeof result;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     * Implementations should be aware of worldPos and result may be one object\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid position in the world space defined by the source projection.\n     * @param result The resulting position reprojected using this [[Projection]].\n     * @hidden\n     */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        if (sourceProjection === this) {\n            if (result === undefined) {\n                return { x: worldPos.x, y: worldPos.y, z: worldPos.z };\n            }\n            result.x = worldPos.x;\n            result.y = worldPos.y;\n            result.z = worldPos.z;\n            return result;\n        }\n        return this.projectPoint(sourceProjection.unprojectPoint(worldPos), result);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Unit of measurement used to specify a font's size.\n */\nexport enum FontUnit {\n    Em,\n    Pixel,\n    Point,\n    Percent\n}\n\n/**\n * Pair of unit and size specifying a font's size.\n */\nexport interface FontSize {\n    unit: FontUnit;\n    size: number;\n    backgroundSize: number;\n}\n\n/**\n * Style to be used when rendering glyphs.\n */\nexport enum FontStyle {\n    Regular,\n    Bold,\n    Italic,\n    BoldItalic\n}\n\n/**\n * Variant to be used when rendering.\n */\nexport enum FontVariant {\n    Regular,\n    AllCaps,\n    SmallCaps\n}\n\n/**\n * Vertical alignment to be used when placing text.\n */\nexport enum VerticalAlignment {\n    Above = 0.0,\n    Center = -0.5,\n    Below = -1.0\n}\n\n/**\n * Horizontal alignment to be used when placing text.\n */\nexport enum HorizontalAlignment {\n    Left = 0.0,\n    Center = -0.5,\n    Right = -1.0\n}\n\n/**\n * Text wrapping rule used when `lineWidth` is reached.\n */\nexport enum WrappingMode {\n    None,\n    Character,\n    Word\n}\n\n/**\n * Namespace containing default values for all members of [[TextRenderParameters]] and\n * [[TextLayoutParameters]].\n */\nexport namespace DefaultTextStyle {\n    export const DEFAULT_FONT_NAME: string = \"\";\n    export const DEFAULT_FONT_SIZE: FontSize = {\n        unit: Object.freeze(FontUnit.Pixel),\n        size: Object.freeze(16.0),\n        backgroundSize: Object.freeze(0.0)\n    };\n    export const DEFAULT_FONT_STYLE: FontStyle = FontStyle.Regular;\n    export const DEFAULT_FONT_VARIANT: FontVariant = FontVariant.Regular;\n    export const DEFAULT_ROTATION: number = 0.0;\n    export const DEFAULT_COLOR: THREE.Color = new THREE.Color(0x000000);\n    export const DEFAULT_OPACITY: number = 1.0;\n    export const DEFAULT_BACKGROUND_COLOR: THREE.Color = new THREE.Color(0x000000);\n    export const DEFAULT_BACKGROUND_OPACITY: number = 0.0;\n\n    export const DEFAULT_TRACKING: number = 0.0;\n    export const DEFAULT_LEADING: number = 0.0;\n    export const DEFAULT_MAX_LINES: number = Infinity;\n    export const DEFAULT_LINE_WIDTH: number = Infinity;\n    export const DEFAULT_CANVAS_ROTATION: number = 0.0;\n    export const DEFAULT_LINE_ROTATION: number = 0.0;\n    export const DEFAULT_WRAPPING_MODE: WrappingMode = WrappingMode.Word;\n    export const DEFAULT_VERTICAL_ALIGNMENT: VerticalAlignment = VerticalAlignment.Above;\n    export const DEFAULT_HORIZONTAL_ALIGNMENT: HorizontalAlignment = HorizontalAlignment.Left;\n}\n\n/**\n * [[TextCanvas]] text rendering parameters.\n */\nexport interface TextRenderParameters {\n    fontName?: string;\n    fontSize?: FontSize;\n    fontStyle?: FontStyle;\n    fontVariant?: FontVariant;\n    rotation?: number;\n    color?: THREE.Color;\n    backgroundColor?: THREE.Color;\n    opacity?: number;\n    backgroundOpacity?: number;\n}\n\n/**\n * [[TextCanvas]] text rendering style.\n */\nexport class TextRenderStyle {\n    private m_params: TextRenderParameters;\n\n    /**\n     * Creates a new `TextRenderStyle`.\n     *\n     * @param params Input [[TextRenderParameters]].\n     *\n     * @returns New `TextRenderStyle`.\n     */\n    constructor(params: TextRenderParameters = {}) {\n        this.m_params = {\n            fontName:\n                params.fontName !== undefined\n                    ? params.fontName\n                    : DefaultTextStyle.DEFAULT_FONT_NAME,\n            fontSize:\n                params.fontSize !== undefined\n                    ? params.fontSize\n                    : {\n                          unit: DefaultTextStyle.DEFAULT_FONT_SIZE.unit,\n                          size: DefaultTextStyle.DEFAULT_FONT_SIZE.size,\n                          backgroundSize: DefaultTextStyle.DEFAULT_FONT_SIZE.backgroundSize\n                      },\n            fontStyle:\n                params.fontStyle !== undefined\n                    ? params.fontStyle\n                    : DefaultTextStyle.DEFAULT_FONT_STYLE,\n            fontVariant:\n                params.fontVariant !== undefined\n                    ? params.fontVariant\n                    : DefaultTextStyle.DEFAULT_FONT_VARIANT,\n            rotation:\n                params.rotation !== undefined ? params.rotation : DefaultTextStyle.DEFAULT_ROTATION,\n            color:\n                params.color !== undefined\n                    ? params.color\n                    : new THREE.Color(DefaultTextStyle.DEFAULT_COLOR),\n            opacity:\n                params.opacity !== undefined ? params.opacity : DefaultTextStyle.DEFAULT_OPACITY,\n            backgroundColor:\n                params.backgroundColor !== undefined\n                    ? params.backgroundColor\n                    : new THREE.Color(DefaultTextStyle.DEFAULT_BACKGROUND_COLOR),\n            backgroundOpacity:\n                params.backgroundOpacity !== undefined\n                    ? params.backgroundOpacity\n                    : DefaultTextStyle.DEFAULT_BACKGROUND_OPACITY\n        };\n    }\n\n    /**\n     * Current [[TextRenderParameters]] for this style.\n     */\n    get params(): TextRenderParameters {\n        return this.m_params;\n    }\n    set params(value: TextRenderParameters) {\n        this.m_params = { ...this.m_params, ...value };\n    }\n\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    get fontName(): string {\n        return this.m_params.fontName!;\n    }\n    set fontName(value: string) {\n        this.m_params.fontName = value;\n    }\n\n    /**\n     * Collection of unit and sizes to apply for the currently active [[Font]].\n     */\n    get fontSize(): FontSize {\n        return this.m_params.fontSize!;\n    }\n    set fontSize(value: FontSize) {\n        this.m_params.fontSize = value;\n    }\n\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    get fontStyle(): FontStyle {\n        return this.m_params.fontStyle!;\n    }\n    set fontStyle(value: FontStyle) {\n        this.m_params.fontStyle = value;\n    }\n\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    get fontVariant(): FontVariant {\n        return this.m_params.fontVariant!;\n    }\n    set fontVariant(value: FontVariant) {\n        this.m_params.fontVariant = value;\n    }\n\n    /**\n     * Glyph local rotation (radians).\n     */\n    get rotation(): number {\n        return this.m_params.rotation!;\n    }\n    set rotation(value: number) {\n        this.m_params.rotation = value;\n    }\n\n    /**\n     * Glyph color.\n     */\n    get color(): THREE.Color {\n        return this.m_params.color!;\n    }\n    set color(value: THREE.Color) {\n        this.m_params.color = value;\n    }\n\n    /**\n     * Glyph background color.\n     */\n    get backgroundColor(): THREE.Color {\n        return this.m_params.backgroundColor!;\n    }\n    set backgroundColor(value: THREE.Color) {\n        this.m_params.backgroundColor = value;\n    }\n\n    /**\n     * Glyph opacity.\n     */\n    get opacity(): number {\n        return this.m_params.opacity!;\n    }\n    set opacity(value: number) {\n        this.m_params.opacity = value;\n    }\n\n    /**\n     * Glyph background opacity.\n     */\n    get backgroundOpacity(): number {\n        return this.m_params.backgroundOpacity!;\n    }\n    set backgroundOpacity(value: number) {\n        this.m_params.backgroundOpacity = value;\n    }\n\n    /**\n     * Clone this `TextRenderStyle`.\n     *\n     * @param params Input [[TextRenderParameters]].\n     *\n     * @returns Cloned `TextRenderStyle`.\n     */\n    clone(params: TextRenderParameters = {}): TextRenderStyle {\n        return new TextRenderStyle({ ...this.m_params, ...params });\n    }\n}\n\n/**\n * [[TextCanvas]] text layout parameters.\n */\nexport interface TextLayoutParameters {\n    tracking?: number;\n    leading?: number;\n    maxLines?: number;\n    lineWidth?: number;\n    canvasRotation?: number;\n    lineRotation?: number;\n    wrappingMode?: WrappingMode;\n    verticalAlignment?: VerticalAlignment;\n    horizontalAlignment?: HorizontalAlignment;\n}\n\n/**\n * [[TextCanvas]] text rendering style.\n */\nexport class TextLayoutStyle {\n    private m_params: TextLayoutParameters;\n\n    /**\n     * Creates a new `TextLayoutStyle`.\n     *\n     * @param params Input [[TextLayoutParameters]].\n     *\n     * @returns New `TextLayoutStyle`.\n     */\n    constructor(params: TextLayoutParameters = {}) {\n        this.m_params = {\n            tracking:\n                params.tracking !== undefined ? params.tracking : DefaultTextStyle.DEFAULT_TRACKING,\n            leading:\n                params.leading !== undefined ? params.leading : DefaultTextStyle.DEFAULT_LEADING,\n            maxLines:\n                params.maxLines !== undefined\n                    ? params.maxLines\n                    : DefaultTextStyle.DEFAULT_MAX_LINES,\n            lineWidth:\n                params.lineWidth !== undefined\n                    ? params.lineWidth\n                    : DefaultTextStyle.DEFAULT_LINE_WIDTH,\n            canvasRotation:\n                params.canvasRotation !== undefined\n                    ? params.canvasRotation\n                    : DefaultTextStyle.DEFAULT_CANVAS_ROTATION,\n            lineRotation:\n                params.lineRotation !== undefined\n                    ? params.lineRotation\n                    : DefaultTextStyle.DEFAULT_LINE_ROTATION,\n            wrappingMode:\n                params.wrappingMode !== undefined\n                    ? params.wrappingMode\n                    : DefaultTextStyle.DEFAULT_WRAPPING_MODE,\n            verticalAlignment:\n                params.verticalAlignment !== undefined\n                    ? params.verticalAlignment\n                    : DefaultTextStyle.DEFAULT_VERTICAL_ALIGNMENT,\n            horizontalAlignment:\n                params.horizontalAlignment !== undefined\n                    ? params.horizontalAlignment\n                    : DefaultTextStyle.DEFAULT_HORIZONTAL_ALIGNMENT\n        };\n    }\n\n    /**\n     * Current [[TextLayoutParameters]] for this style.\n     */\n    get params(): TextLayoutParameters {\n        return this.m_params;\n    }\n    set params(value: TextLayoutParameters) {\n        this.m_params = { ...this.m_params, ...value };\n    }\n\n    /**\n     * Inter-glyph spacing (pixels). Scaled by [[FontSize]].\n     */\n    get tracking(): number {\n        return this.m_params.tracking!;\n    }\n    set tracking(value: number) {\n        this.m_params.tracking = value;\n    }\n\n    /**\n     * Inter-line spacing (pixels). Scaled by [[FontSize]].\n     */\n    get leading(): number {\n        return this.m_params.leading!;\n    }\n    set leading(value: number) {\n        this.m_params.leading = value;\n    }\n\n    /**\n     * Maximum number of lines to be considered when using [[TextCanvas]].\n     */\n    get maxLines(): number {\n        return this.m_params.maxLines!;\n    }\n    set maxLines(value: number) {\n        this.m_params.maxLines = value;\n    }\n\n    /**\n     * Maximum line width (pixels).\n     */\n    get lineWidth(): number {\n        return this.m_params.lineWidth!;\n    }\n    set lineWidth(value: number) {\n        this.m_params.lineWidth = value;\n    }\n\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    get canvasRotation(): number {\n        return this.m_params.canvasRotation!;\n    }\n    set canvasRotation(value: number) {\n        this.m_params.canvasRotation = value;\n    }\n\n    /**\n     * Line typesetting rotation (radians).\n     */\n    get lineRotation(): number {\n        return this.m_params.lineRotation!;\n    }\n    set lineRotation(value: number) {\n        this.m_params.lineRotation = value;\n    }\n\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    get wrappingMode(): WrappingMode {\n        return this.m_params.wrappingMode!;\n    }\n    set wrappingMode(value: WrappingMode) {\n        this.m_params.wrappingMode = value;\n    }\n\n    /**\n     * Text position regarding the baseline.\n     */\n    get verticalAlignment(): VerticalAlignment {\n        return this.m_params.verticalAlignment!;\n    }\n    set verticalAlignment(value: VerticalAlignment) {\n        this.m_params.verticalAlignment = value;\n    }\n\n    /**\n     * Text position inside a line.\n     */\n    get horizontalAlignment(): HorizontalAlignment {\n        return this.m_params.horizontalAlignment!;\n    }\n    set horizontalAlignment(value: HorizontalAlignment) {\n        this.m_params.horizontalAlignment = value;\n    }\n\n    /**\n     * Clone this `TextLayoutStyle`.\n     *\n     * @param params Input [[TextLayoutParameters]].\n     *\n     * @returns Cloned `TextLayoutStyle`.\n     */\n    clone(params: TextLayoutParameters = {}): TextLayoutStyle {\n        return new TextLayoutStyle({ ...this.m_params, ...params });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BufferAttribute,\n    ColorUtils,\n    Env,\n    Expr,\n    getPropertyValue,\n    InterpolatedProperty,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isInterpolatedProperty,\n    isJsonExpr,\n    isShaderTechnique,\n    isStandardTechnique,\n    isTerrainTechnique,\n    isTextureBuffer,\n    parseStringEncodedColor,\n    ShaderTechnique,\n    Technique,\n    techniqueDescriptors,\n    TEXTURE_PROPERTY_KEYS,\n    TextureProperties,\n    TRANSPARENCY_PROPERTY_KEYS,\n    Value\n} from \"@here/harp-datasource-protocol\";\nimport {\n    CirclePointsMaterial,\n    disableBlending,\n    enableBlending,\n    HighPrecisionLineMaterial,\n    MapMeshBasicMaterial,\n    MapMeshStandardMaterial,\n    SolidLineMaterial\n} from \"@here/harp-materials\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { DisplacedMesh } from \"./geometry/DisplacedMesh\";\nimport { Circles, Squares } from \"./MapViewPoints\";\nimport { toPixelFormat, toTextureDataType, toTextureFilter, toWrappingMode } from \"./ThemeHelpers\";\nimport { Tile } from \"./Tile\";\n\nconst logger = LoggerManager.instance.create(\"DecodedTileHelpers\");\n\nconst DEFAULT_SKIP_PROPERTIES = [\n    ...TEXTURE_PROPERTY_KEYS,\n    \"mapProperties\",\n    \"normalMapProperties\",\n    \"displacementMapProperties\",\n    \"roughnessMapProperties\",\n    \"emissiveMapProperties\",\n    \"alphaMapProperties\",\n    \"metalnessMapProperties\",\n    \"bumpMapProperties\"\n];\n\n/**\n * The structure of the options to pass into [[createMaterial]].\n */\nexport interface MaterialOptions {\n    /**\n     * The shader [[Technique]] to choose.\n     */\n    technique: Technique;\n\n    /**\n     * Environment used to evaluate dynamic technique attributes.\n     *\n     * Usually [[MapView.mapEnv]].\n     */\n    env: Env;\n\n    /**\n     * Properties to skip.\n     *\n     * @see [[applyTechniqueToMaterial]]\n     */\n    skipExtraProps?: string[];\n\n    /**\n     * `RawShaderMaterial` instances need to know about the fog at instantiation in order to avoid\n     * recompiling them manually later (ThreeJS does not update fog for `RawShaderMaterial`s).\n     */\n    fog?: boolean;\n}\n\n/**\n * Create a material, depending on the rendering technique provided in the options.\n *\n * @param options The material options the subsequent functions need.\n * @param materialUpdateCallback Optional callback when the material gets updated,\n *                               e.g. after texture loading.\n *\n * @returns new material instance that matches `technique.name`\n */\nexport function createMaterial(\n    options: MaterialOptions,\n    textureReadyCallback?: (texture: THREE.Texture) => void\n): THREE.Material | undefined {\n    const technique = options.technique;\n    const Constructor = getMaterialConstructor(technique);\n\n    const settings: { [key: string]: any } = {};\n\n    if (Constructor === undefined) {\n        return undefined;\n    }\n\n    if (\n        Constructor.prototype instanceof THREE.RawShaderMaterial &&\n        Constructor !== HighPrecisionLineMaterial\n    ) {\n        settings.fog = options.fog;\n    }\n\n    const material = new Constructor(settings);\n\n    if (technique.id !== undefined) {\n        material.name = technique.id;\n    }\n\n    if (isExtrudedPolygonTechnique(technique)) {\n        material.flatShading = true;\n        // We do not support mixing vertex colors (static) and material colors (may be dynamic)\n        // mixture. Vertex colors are stored in VBO and are not modifiable - some solution for\n        // this problem is proposed in the HARP-8289 and PR #1164.\n        // TODO: Remove when problem with substitute (vertex & material) colors will be solved.\n        if (technique.vertexColors === true) {\n            delete technique.color;\n        }\n    }\n\n    material.depthTest = isExtrudedPolygonTechnique(technique) && technique.depthTest !== false;\n\n    if (\n        isStandardTechnique(technique) ||\n        isTerrainTechnique(technique) ||\n        isExtrudedPolygonTechnique(technique)\n    ) {\n        TEXTURE_PROPERTY_KEYS.forEach((texturePropertyName: string) => {\n            const textureProperty = (technique as any)[texturePropertyName];\n            if (textureProperty === undefined) {\n                return;\n            }\n\n            const onLoad = (texture: THREE.Texture) => {\n                const properties = (technique as any)[\n                    texturePropertyName + \"Properties\"\n                ] as TextureProperties;\n                if (properties !== undefined) {\n                    if (properties.wrapS !== undefined) {\n                        texture.wrapS = toWrappingMode(properties.wrapS);\n                    }\n                    if (properties.wrapT !== undefined) {\n                        texture.wrapT = toWrappingMode(properties.wrapT);\n                    }\n                    if (properties.magFilter !== undefined) {\n                        texture.magFilter = toTextureFilter(properties.magFilter);\n                    }\n                    if (properties.minFilter !== undefined) {\n                        texture.minFilter = toTextureFilter(properties.minFilter);\n                    }\n                    if (properties.flipY !== undefined) {\n                        texture.flipY = properties.flipY;\n                    }\n                    if (properties.repeatU !== undefined) {\n                        texture.repeat.x = properties.repeatU;\n                    }\n                    if (properties.repeatV !== undefined) {\n                        texture.repeat.y = properties.repeatV;\n                    }\n                }\n                (material as any)[texturePropertyName] = texture;\n                texture.needsUpdate = true;\n                material.needsUpdate = true;\n\n                if (textureReadyCallback) {\n                    textureReadyCallback(texture);\n                }\n            };\n\n            const onError = (error: ErrorEvent | string) => {\n                logger.error(\"#createMaterial: Failed to load texture: \", error);\n            };\n\n            let textureUrl: string | undefined;\n            if (typeof textureProperty === \"string\") {\n                textureUrl = textureProperty;\n            } else if (isTextureBuffer(textureProperty)) {\n                if (textureProperty.type === \"image/raw\") {\n                    const properties = textureProperty.dataTextureProperties;\n                    if (properties !== undefined) {\n                        const textureDataType: THREE.TextureDataType | undefined = properties.type\n                            ? toTextureDataType(properties.type)\n                            : undefined;\n                        const textureBuffer = getTextureBuffer(\n                            textureProperty.buffer,\n                            textureDataType\n                        );\n\n                        const texture = new THREE.DataTexture(\n                            textureBuffer,\n                            properties.width,\n                            properties.height,\n                            properties.format ? toPixelFormat(properties.format) : undefined,\n                            textureDataType\n                        );\n                        onLoad(texture);\n                    } else {\n                        onError(\"no data texture properties provided.\");\n                    }\n                } else {\n                    const textureBlob = new Blob([textureProperty.buffer], {\n                        type: textureProperty.type\n                    });\n                    textureUrl = URL.createObjectURL(textureBlob);\n                }\n            }\n\n            if (textureUrl) {\n                new THREE.TextureLoader().load(\n                    textureUrl,\n                    onLoad,\n                    undefined, // onProgress\n                    onError\n                );\n            }\n        });\n    }\n\n    if (isShaderTechnique(technique)) {\n        // Special case for ShaderTechnique.\n        applyShaderTechniqueToMaterial(technique, material);\n    } else {\n        // Generic technique.\n        applyTechniqueToMaterial(technique, material, options.env, options.skipExtraProps);\n    }\n\n    return material;\n}\n\n/**\n * Returns a [[THREE.BufferAttribute]] created from a provided [[BufferAttribute]] object.\n *\n * @param attribute BufferAttribute a WebGL compliant buffer\n */\nexport function getBufferAttribute(attribute: BufferAttribute): THREE.BufferAttribute {\n    switch (attribute.type) {\n        case \"float\":\n            return new THREE.BufferAttribute(\n                new Float32Array(attribute.buffer),\n                attribute.itemCount\n            );\n        case \"uint8\":\n            return new THREE.BufferAttribute(\n                new Uint8Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"uint16\":\n            return new THREE.BufferAttribute(\n                new Uint16Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"uint32\":\n            return new THREE.BufferAttribute(\n                new Uint32Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int8\":\n            return new THREE.BufferAttribute(\n                new Int8Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int16\":\n            return new THREE.BufferAttribute(\n                new Int16Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int32\":\n            return new THREE.BufferAttribute(\n                new Int32Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        default:\n            throw new Error(`unsupported buffer of type ${attribute.type}`);\n    } // switch\n}\n\n/**\n * Determines if a technique uses THREE.Object3D instances.\n * @param technique The technique to check.\n * @returns true if technique uses THREE.Object3D, false otherwise.\n */\nexport function usesObject3D(technique: Technique): boolean {\n    const name = technique.name;\n    return (\n        name !== undefined &&\n        name !== \"text\" &&\n        name !== \"labeled-icon\" &&\n        name !== \"line-marker\" &&\n        name !== \"label-rejection-line\"\n    );\n}\n\n/**\n * Builds the object associated with the given technique.\n *\n * @param technique The technique.\n * @param geometry The object's geometry.\n * @param material The object's material.\n * @param tile The tile where the object is located.\n * @param elevationEnabled True if elevation is enabled, false otherwise.\n */\nexport function buildObject(\n    technique: Technique,\n    geometry: THREE.BufferGeometry,\n    material: THREE.Material | THREE.Material[],\n    tile: Tile,\n    elevationEnabled: boolean\n): THREE.Object3D {\n    assert(technique.name !== undefined);\n\n    switch (technique.name) {\n        case \"extruded-line\":\n        case \"standard\":\n        case \"extruded-polygon\":\n        case \"fill\":\n            return elevationEnabled\n                ? new DisplacedMesh(\n                      () => ({\n                          min: tile.elevationRange.minElevation,\n                          max: tile.elevationRange.maxElevation\n                      }),\n                      geometry,\n                      material\n                  )\n                : new THREE.Mesh(geometry, material);\n        case \"terrain\":\n        case \"dashed-line\":\n        case \"solid-line\":\n            return new THREE.Mesh(geometry, material);\n\n        case \"circles\":\n            return new Circles(geometry, material);\n\n        case \"squares\":\n            return new Squares(geometry, material);\n\n        case \"line\":\n            return new THREE.LineSegments(geometry, material);\n\n        case \"segments\":\n            return new THREE.LineSegments(geometry, material);\n\n        case \"shader\": {\n            assert(isShaderTechnique(technique), \"Invalid technique\");\n\n            switch (technique.primitive) {\n                case \"line\":\n                    return new THREE.Line(geometry, material);\n                case \"segments\":\n                    return new THREE.LineSegments(geometry, material);\n                case \"point\":\n                    return new THREE.Points(geometry, material);\n                case \"mesh\":\n                    return new THREE.Mesh(geometry, material);\n            }\n        }\n    }\n    assert(false, \"Invalid technique\");\n    return new THREE.Object3D();\n}\n\n/**\n * Non material properties of [[BaseTechnique]]\n */\nexport const BASE_TECHNIQUE_NON_MATERIAL_PROPS = [\"name\", \"id\", \"renderOrder\", \"transient\"];\n\n/**\n * Generic material type constructor.\n */\nexport type MaterialConstructor = new (params?: {}) => THREE.Material;\n\n/**\n * Returns a [[MaterialConstructor]] basing on provided technique object.\n *\n * @param technique [[Technique]] object which the material will be based on.\n */\nexport function getMaterialConstructor(technique: Technique): MaterialConstructor | undefined {\n    if (technique.name === undefined) {\n        return undefined;\n    }\n\n    switch (technique.name) {\n        case \"extruded-line\":\n            if (!isExtrudedLineTechnique(technique)) {\n                throw new Error(\"Invalid extruded-line technique\");\n            }\n            return technique.shading === \"standard\"\n                ? MapMeshStandardMaterial\n                : MapMeshBasicMaterial;\n\n        case \"standard\":\n        case \"terrain\":\n        case \"extruded-polygon\":\n            return MapMeshStandardMaterial;\n\n        case \"dashed-line\":\n        case \"solid-line\":\n            return SolidLineMaterial;\n\n        case \"fill\":\n            return MapMeshBasicMaterial;\n\n        case \"squares\":\n            return THREE.PointsMaterial;\n\n        case \"circles\":\n            return CirclePointsMaterial;\n\n        case \"line\":\n        case \"segments\":\n            return THREE.LineBasicMaterial;\n\n        case \"shader\":\n            return THREE.ShaderMaterial;\n\n        case \"text\":\n        case \"labeled-icon\":\n        case \"line-marker\":\n        case \"label-rejection-line\":\n            return undefined;\n    }\n}\n\n/**\n * Allows to easy parse/encode technique's base color property value as number coded color.\n *\n * Function takes care about property parsing, interpolation and encoding if neccessary.\n *\n * @see ColorUtils\n * @param technique the technique where we search for base (transparency) color value\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n * @returns [[number]] encoded color value (in custom #TTRRGGBB) format or `undefined` if\n * base color property is not defined in the technique passed.\n */\nexport function evaluateBaseColorProperty(technique: Technique, env: Env): number | undefined {\n    const baseColorProp = getBaseColorProp(technique);\n    if (baseColorProp !== undefined) {\n        return evaluateColorProperty(baseColorProp, env);\n    }\n    return undefined;\n}\n\n/**\n * Apply [[ShaderTechnique]] parameters to material.\n *\n * @param technique the [[ShaderTechnique]] which requires special handling\n * @param material material to which technique will be applied\n */\nfunction applyShaderTechniqueToMaterial(technique: ShaderTechnique, material: THREE.Material) {\n    // The shader technique takes the argument from its `params' member.\n    const params = technique.params as { [key: string]: any };\n    // Remove base color and transparency properties from the processed set.\n    const baseColorPropName = getBaseColorPropName(technique);\n    const hasBaseColor = baseColorPropName && baseColorPropName in technique.params;\n    const props = Object.getOwnPropertyNames(params).filter(propertyName => {\n        // Omit base color and related transparency attributes if its defined in technique\n        if (\n            baseColorPropName === propertyName ||\n            (hasBaseColor && TRANSPARENCY_PROPERTY_KEYS.indexOf(propertyName) !== -1)\n        ) {\n            return false;\n        }\n        const prop = propertyName as keyof typeof params;\n        if (prop === \"name\") {\n            // skip reserved property names\n            return false;\n        }\n        return true;\n    });\n\n    // Apply all technique properties omitting base color and transparency attributes.\n    props.forEach(propertyName => {\n        // TODO: Check if properties values should not be interpolated, possible bug in old code!\n        // This behavior is kept in the new version too, level is set to undefined.\n        applyTechniquePropertyToMaterial(material, propertyName, params[propertyName]);\n    });\n\n    if (hasBaseColor) {\n        const propColor = baseColorPropName as keyof THREE.Material;\n        // Finally apply base color and related properties to material (opacity, transparent)\n        applyBaseColorToMaterial(material, material[propColor], technique, params[propColor]);\n    }\n}\n\n/**\n * Apply generic technique parameters to material.\n *\n * Skips non-material [[Technique]] props:\n *  * [[BaseTechnique]] props,\n *  * `name` which is used as discriminator for technique types,\n *  * props starting with `_`\n *  * props found `skipExtraProps`\n *\n * `THREE.Color` properties are supported.\n *\n * @param technique technique from where params are copied\n * @param material target material\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n * @param skipExtraProps optional, skipped props.\n */\nfunction applyTechniqueToMaterial(\n    technique: Technique,\n    material: THREE.Material,\n    env: Env,\n    skipExtraProps?: string[]\n) {\n    // Remove transparent color from the firstly processed properties set.\n    const baseColorPropName = getBaseColorPropName(technique);\n    const hasBaseColor = baseColorPropName && baseColorPropName in technique;\n    const genericProps = Object.getOwnPropertyNames(technique).filter(propertyName => {\n        if (\n            propertyName.startsWith(\"_\") ||\n            BASE_TECHNIQUE_NON_MATERIAL_PROPS.indexOf(propertyName) !== -1 ||\n            DEFAULT_SKIP_PROPERTIES.indexOf(propertyName) !== -1 ||\n            (skipExtraProps !== undefined && skipExtraProps.indexOf(propertyName) !== -1)\n        ) {\n            return false;\n        }\n        // Omit base color and related transparency attributes if its defined in technique.\n        if (\n            baseColorPropName === propertyName ||\n            (hasBaseColor && TRANSPARENCY_PROPERTY_KEYS.indexOf(propertyName) !== -1)\n        ) {\n            return false;\n        }\n        const prop = propertyName as keyof typeof technique;\n        const m = material as any;\n        if (typeof m[prop] === \"undefined\") {\n            return false;\n        }\n        return true;\n    });\n\n    // Apply all other properties (even colors), but not transparent (base) ones.\n    genericProps.forEach(propertyName => {\n        const value = technique[propertyName as keyof Technique];\n        if (value !== undefined) {\n            applyTechniquePropertyToMaterial(material, propertyName, value, env);\n        }\n    });\n\n    // Finally apply base (possibly transparent) color itself, using blend modes to\n    // provide transparency if needed.\n    if (hasBaseColor) {\n        applyBaseColorToMaterial(\n            material,\n            material[baseColorPropName as keyof THREE.Material],\n            technique,\n            technique[baseColorPropName as keyof Technique] as Value,\n            env\n        );\n    }\n}\n\n/**\n * Apply single and generic technique property to corresponding material parameter.\n *\n * @note Special handling for material attributes of [[THREE.Color]] type is provided thus it\n * does not provide constructor that would take [[string]] or [[number]] values.\n *\n * @param material target material\n * @param propertyName material and technique parameter name (or index) that is to be transferred\n * @param techniqueAttrValue technique property value which will be applied to material attribute\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nfunction applyTechniquePropertyToMaterial(\n    material: THREE.Material,\n    propertyName: string,\n    techniqueAttrValue: Value,\n    env?: Env\n) {\n    const m = material as any;\n    if (m[propertyName] instanceof THREE.Color) {\n        applySecondaryColorToMaterial(\n            material[propertyName as keyof THREE.Material],\n            techniqueAttrValue,\n            env\n        );\n    } else {\n        const value = evaluateProperty(techniqueAttrValue, env);\n        if (value !== null) {\n            m[propertyName] = value;\n        }\n    }\n}\n\n/**\n * Apply technique color to material taking special care with transparent (RGBA) colors.\n *\n * @note This function is intended to be used with secondary, triary etc. technique colors,\n * not the base ones that may contain transparency information. Such colors should be processed\n * with [[applyTechniqueBaseColorToMaterial]] function.\n *\n * @param technique an technique the applied color comes from\n * @param material the material to which color is applied\n * @param prop technique property (color) name\n * @param value color value\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nexport function applySecondaryColorToMaterial(\n    materialColor: THREE.Color,\n    techniqueColor: Value | Expr | InterpolatedProperty,\n    env?: Env\n) {\n    let value = evaluateColorProperty(techniqueColor, env);\n    if (value === undefined) {\n        return;\n    }\n    if (ColorUtils.hasAlphaInHex(value)) {\n        logger.warn(\"Used RGBA value for technique color without transparency support!\");\n        // Just for clarity remove transparency component, even if that would be ignored\n        // by THREE.Color.setHex() function.\n        value = ColorUtils.removeAlphaFromHex(value);\n    }\n\n    materialColor.setHex(value);\n}\n\n/**\n * Apply technique base color (transparency support) to material with modifying material opacity.\n *\n * This method applies main (or base) technique color with transparency support to the corresponding\n * material color, with an effect on entire [[THREE.Material]] __opacity__ and __transparent__\n * attributes.\n *\n * @note Transparent colors should be processed as the very last technique attributes,\n * since their effect on material properties like [[THREE.Material.opacity]] and\n * [[THREE.Material.transparent]] could be overridden by corresponding technique params.\n *\n * @param technique an technique the applied color comes from\n * @param material the material to which color is applied\n * @param prop technique property (color) name\n * @param value color value in custom number format\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nexport function applyBaseColorToMaterial(\n    material: THREE.Material,\n    materialColor: THREE.Color,\n    technique: Technique,\n    techniqueColor: Value,\n    env?: Env\n) {\n    const colorValue = evaluateColorProperty(techniqueColor, env);\n    if (colorValue === undefined) {\n        return;\n    }\n\n    const { r, g, b, a } = ColorUtils.getRgbaFromHex(colorValue);\n    // Override material opacity and blending by mixing technique defined opacity\n    // with main color transparency\n    const tech = technique as any;\n    let opacity = a;\n    if (tech.opacity !== undefined) {\n        opacity *= evaluateProperty(tech.opacity, env);\n    }\n\n    opacity = THREE.MathUtils.clamp(opacity, 0, 1);\n    material.opacity = opacity;\n    materialColor.setRGB(r, g, b);\n\n    const opaque = opacity >= 1.0;\n    if (!opaque) {\n        enableBlending(material);\n    } else {\n        disableBlending(material);\n    }\n}\n\n/**\n * Calculates the value of the technique defined property.\n *\n * Function takes care about property interpolation (when @param `env` is set) as also parsing\n * string encoded numbers.\n *\n * @note Use with care, because function does not recognize property type.\n * @param value the value of color property defined in technique\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nfunction evaluateProperty(value: any, env?: Env): any {\n    if (env !== undefined && (isInterpolatedProperty(value) || Expr.isExpr(value))) {\n        value = getPropertyValue(value, env);\n    }\n    return value;\n}\n\n/**\n * Calculates the numerical value of the technique defined color property.\n *\n * Function takes care about color interpolation (when @param `env is set) as also parsing\n * string encoded colors.\n *\n * @note Use with care, because function does not recognize property type.\n * @param value the value of color property defined in technique\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nexport function evaluateColorProperty(value: Value, env?: Env): number | undefined {\n    value = evaluateProperty(value, env);\n\n    if (value === undefined || value === null) {\n        return undefined;\n    }\n\n    if (typeof value === \"number\") {\n        return value;\n    }\n\n    if (typeof value === \"string\") {\n        const parsed = parseStringEncodedColor(value);\n        if (parsed !== undefined) {\n            return parsed;\n        }\n    }\n\n    logger.error(`Unsupported color format: '${value}'`);\n    return undefined;\n}\n\n/**\n * Compile expressions in techniques as they were received from decoder.\n */\nexport function compileTechniques(techniques: Technique[]) {\n    techniques.forEach((technique: any) => {\n        for (const propertyName in technique) {\n            if (!technique.hasOwnProperty(propertyName)) {\n                continue;\n            }\n            const value = technique[propertyName];\n            if (isJsonExpr(value) && propertyName !== \"kind\") {\n                // \"kind\" is reserved.\n                try {\n                    technique[propertyName] = Expr.fromJSON(value);\n                } catch (error) {\n                    logger.error(\"#compileTechniques: Failed to compile expression:\", error);\n                }\n            }\n        }\n    });\n}\n\n/**\n * Allows to access base color property value for given technique.\n *\n * The color value may be encoded in [[number]], [[string]] or even as\n * [[InterpolateProperty]].\n *\n * @param technique The techniqe where we seach for base color property.\n * @returns The value of technique color used to apply transparency.\n */\nfunction getBaseColorProp(technique: Technique): any {\n    const baseColorPropName = getBaseColorPropName(technique);\n    if (baseColorPropName !== undefined) {\n        if (!isShaderTechnique(technique)) {\n            const propColor = baseColorPropName as keyof typeof technique;\n            return technique[propColor];\n        } else {\n            const params = technique.params as { [key: string]: any };\n            const propColor = baseColorPropName as keyof typeof params;\n            return params[propColor];\n        }\n    }\n    return undefined;\n}\n\nfunction getBaseColorPropName(technique: Technique): string | undefined {\n    const techDescriptor = techniqueDescriptors[technique.name];\n    return techDescriptor !== undefined ? techDescriptor.attrTransparencyColor : undefined;\n}\n\nfunction getTextureBuffer(\n    buffer: ArrayBuffer,\n    textureDataType: THREE.TextureDataType | undefined\n): THREE.TypedArray {\n    if (textureDataType === undefined) {\n        return new Uint8Array(buffer);\n    }\n\n    switch (textureDataType) {\n        case THREE.UnsignedByteType:\n            return new Uint8Array(buffer);\n        case THREE.ByteType:\n            return new Int8Array(buffer);\n        case THREE.ShortType:\n            return new Int16Array(buffer);\n        case THREE.UnsignedShortType:\n            return new Uint16Array(buffer);\n        case THREE.IntType:\n            return new Int32Array(buffer);\n        case THREE.UnsignedIntType:\n            return new Uint32Array(buffer);\n        case THREE.FloatType:\n            return new Float32Array(buffer);\n        case THREE.HalfFloatType:\n            return new Uint16Array(buffer);\n    }\n\n    throw new Error(\"Unsupported texture data type\");\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    GeometryKind,\n    GeometryKindSet,\n    ImageTexture,\n    LineMarkerTechnique,\n    PoiStackMode,\n    PoiTechnique\n} from \"@here/harp-datasource-protocol\";\nimport {\n    GlyphData,\n    TextBufferObject,\n    TextLayoutParameters,\n    TextLayoutStyle,\n    TextRenderParameters,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport { Math2D, MathUtils } from \"@here/harp-utils\";\n\nimport * as THREE from \"three\";\n\nimport { ImageItem } from \"../image/Image\";\nimport { PickResult } from \"../PickHandler\";\nimport { TextElementType } from \"./TextElementType\";\n\n/**\n * Additional information for an icon that is to be rendered along with a [[TextElement]].\n */\nexport interface PoiInfo {\n    /**\n     * Technique defining the POI or LineMarker\n     */\n    technique: PoiTechnique | LineMarkerTechnique;\n\n    /**\n     * Name of the [[ImageTexture]].\n     */\n    imageTextureName: string;\n\n    /**\n     * Name of the POI table [[PoiTable]].\n     */\n    poiTableName?: string;\n\n    /**\n     * Name of the POI description in the [[PoiTable]].\n     */\n    poiName?: string;\n\n    /**\n     * Specify stack mode. Defaults to `ShowInStack`.\n     */\n    stackMode?: PoiStackMode;\n\n    /**\n     * Minimum zoomLevel at which to display the label icon. No default.\n     */\n    iconMinZoomLevel?: number;\n\n    /**\n     * Maximum zoomLevel at which to display the label icon. No default.\n     */\n    iconMaxZoomLevel?: number;\n\n    /**\n     * Minimum zoomLevel at which to display the label text. No default.\n     */\n    textMinZoomLevel?: number;\n\n    /**\n     * Maximum zoomLevel at which to display the label text. No default.\n     */\n    textMaxZoomLevel?: number;\n\n    /**\n     * If true, the text icon will appear even if the text part is blocked by other labels. Defaults\n     * to `false`.\n     */\n    textIsOptional?: boolean;\n\n    /**\n     * If true, the text will appear even if the icon cannot be rendered because of missing icon\n     * graphics. Defaults to `true`.\n     */\n    iconIsOptional?: boolean;\n\n    /**\n     * If `true`, icon is allowed to overlap other labels or icons of lower priority.\n     */\n    mayOverlap?: boolean;\n\n    /**\n     * If `true`, icon will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     */\n    reserveSpace?: boolean;\n\n    /**\n     * If isValid is `false`, the icon will no longer be placed or rendered. The reason may be a\n     * missing resource.\n     */\n    isValid?: boolean;\n\n    /**\n     * ID to identify the (POI) icon.\n     */\n    featureId?: number;\n\n    /**\n     * Reference back to owning [[TextElement]].\n     */\n    textElement: TextElement;\n\n    /**\n     * @hidden\n     * If false, text will not be rendered during camera movements. Defaults to `true`;\n     */\n    renderTextDuringMovements?: boolean;\n\n    /**\n     * @hidden\n     * Direct access to [[ImageItem]] once it is resolved.\n     */\n    imageItem?: ImageItem;\n\n    /**\n     * @hidden\n     * Direct access to [[ImageTexture]] once it is resolved.\n     */\n    imageTexture?: ImageTexture;\n\n    /**\n     * @hidden\n     * Layout help: A shield group is for all [[LineMarker]]s that have the same icon and text,\n     * making them the same road shield icon.\n     */\n    shieldGroupIndex?: number;\n\n    /**\n     * @hidden\n     * Internal reference to a render batch, made up of all icons that use the same Material.\n     */\n    poiRenderBatch?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    computedWidth?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    computedHeight?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    uvBox?: Math2D.UvBox;\n\n    /**\n     * @hidden\n     * Computed from owning [[TextElement]]. Value is set when `PoiInfo` is assigned to\n     * [[TextElement]].\n     */\n    renderOrder?: number;\n}\n\n/**\n * Return 'true' if the POI has been successfully prepared for rendering.\n *\n * @param poiInfo PoiInfo containing information for rendering the POI icon.\n */\nexport function poiIsRenderable(poiInfo: PoiInfo): boolean {\n    return poiInfo.poiRenderBatch !== undefined;\n}\n\nexport interface TextPickResult extends PickResult {\n    /**\n     * Text of the picked [[TextElement]]\n     */\n    text?: string;\n}\n\n/**\n * State of loading.\n */\nexport enum LoadingState {\n    Requested,\n    Loaded,\n    Initialized\n}\n\n/**\n * `TextElement` is used to create 2D text elements (for example, labels).\n */\nexport class TextElement {\n    /**\n     * Text elements with this priority are placed on screen before any others.\n     */\n    static readonly HIGHEST_PRIORITY = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Determines visibility. If set to `false`, it will not be rendered.\n     */\n    visible: boolean = true;\n\n    /**\n     * Determines minimum zoom level for visibility. Can be used to reduce the number of visible\n     * `TextElement`s based on zoom level.\n     */\n    minZoomLevel?: number;\n    /**\n     * Determines maximum zoom level for visibility. Can be used to reduce the number of visible\n     * `TextElement`s based on zoom level.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * If `true`, label is allowed to overlap other labels or icons of lower priority.\n     * @default `false`\n     */\n    mayOverlap?: boolean;\n\n    /**\n     * If `true`, label will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     * @default `true`\n     */\n    reserveSpace?: boolean;\n\n    /**\n     * If `true`, the label will always be rendered on top. If overlapping with other labels, the\n     * render order is undefined;\n     * @default `false`\n     */\n    alwaysOnTop?: boolean;\n\n    /**\n     * Ignore distance limit. Used for label in labeled-icons.\n     */\n    ignoreDistance?: boolean;\n\n    /**\n     * Scaling factor of text. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale: number = 0.5;\n\n    /**\n     * Optional user data. Will be retrieved during picking.\n     */\n    userData?: any;\n\n    /**\n     * If specified, determines the render order between `TextElement`s. The number different\n     * renderOrders should be as small as possible, because every specific `renderOrder` may result\n     * in one or more draw calls.\n     *\n     * TextElements with the same integer `renderOrder` will be rendered in the same batch.\n     *\n     * The `renderOrder` of `TextElement`s are only relative to other `TextElement`s, and not other\n     * map elements.\n     *\n     * A `TextElement` with a higher `renderOrder` will be rendered after a `TextElement` with a\n     * lower `renderOrder`.\n     */\n    renderOrder?: number = 0;\n\n    /**\n     * Specified kind of geometry. One kind is set as default in the technique, and can be\n     * overridden in the style.\n     */\n    kind?: GeometryKind | GeometryKindSet;\n\n    /**\n     * @hidden\n     * Used during rendering.\n     */\n    loadingState?: LoadingState;\n\n    /**\n     * If set to `true` the geometry has been already overlaid on elevation.\n     */\n    elevated: boolean = false;\n\n    /**\n     * @hidden\n     * Array storing the style [[GlyphData]] for this `TextElement` to speed up label placement in\n     * [[TextElementsRenderer]]. Valid after `loadingState` is `Initialized`.\n     */\n    glyphs?: GlyphData[];\n\n    /**\n     * @hidden\n     * Array storing the casing (`true`: uppercase, `false`: lowercase) for this `TextElement`.\n     * Used by labels in [[TextElementsRenderer]] to support `SmallCaps`. Valid after `loadingState`\n     * is `Initialized`.\n     */\n    glyphCaseArray?: boolean[];\n\n    /**\n     * Screen space bounds for this `TextElement`. Used by point labels in [[TextElementsRenderer]].\n     * Valid after `loadingState` is `Initialized`.\n     */\n    bounds?: THREE.Box2;\n\n    /**\n     * @hidden\n     * Pre-computed text vertex buffer. Used by point labels in [[TextElementsRenderer]]. Valid\n     * after label becomes visible for the first time.\n     */\n    textBufferObject?: TextBufferObject;\n\n    /**\n     * @hidden\n     * If `true`, the estimated bounding box of the path is too small for the label to fit, so it is\n     * being ignored for rendering in the latest frame.\n     */\n    dbgPathTooSmall?: boolean;\n\n    pathLengthSqr?: number;\n\n    type: TextElementType;\n\n    private m_poiInfo?: PoiInfo;\n\n    private m_renderStyle?: TextRenderStyle;\n\n    private m_layoutStyle?: TextLayoutStyle;\n\n    /**\n     * Creates a new `TextElement`.\n     *\n     * @param text The text to display.\n     * @param points The position or a list of points for a curved text, both in world space.\n     * @param renderParams `TextElement` text rendering parameters.\n     * @param layoutParams `TextElement` text layout parameters.\n     * @param priority The priority of the `TextElement. Elements with the highest priority get\n     *              placed first, elements with priority of `0` are placed last, elements with a\n     *              negative value are always rendered, ignoring priorities and allowing\n     *              overrides.\n     * @param xOffset Optional X offset of this `TextElement` in screen coordinates.\n     * @param yOffset Optional Y offset of this `TextElement` in screen coordinates.\n     * @param featureId Optional number to identify feature (originated from `OmvDataSource`).\n     * @param fadeNear Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the\n     *              label starts fading out (opacity decreases).\n     * @param fadeFar Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the\n     *              label becomes transparent. A value of <= 0.0 disables fading.\n     */\n    constructor(\n        readonly text: string,\n        readonly points: THREE.Vector3[] | THREE.Vector3,\n        readonly renderParams: TextRenderParameters | TextRenderStyle,\n        readonly layoutParams: TextLayoutParameters | TextLayoutStyle,\n        public priority = 0,\n        public xOffset: number = 0,\n        public yOffset: number = 0,\n        public featureId?: number,\n        public style?: string,\n        public fadeNear?: number,\n        public fadeFar?: number,\n        readonly tileOffset?: number\n    ) {\n        if (renderParams instanceof TextRenderStyle) {\n            this.renderStyle = renderParams;\n        }\n        if (layoutParams instanceof TextLayoutStyle) {\n            this.layoutStyle = layoutParams;\n        }\n\n        this.type =\n            points instanceof THREE.Vector3 ? TextElementType.PoiLabel : TextElementType.PathLabel;\n    }\n\n    /**\n     * The text element position or the first point of the path used to render a curved text, both\n     * in world space.\n     */\n    get position(): THREE.Vector3 {\n        if (this.points instanceof Array) {\n            const p = this.points[0];\n            return p;\n        }\n        return this.points as THREE.Vector3;\n    }\n\n    /**\n     * The list of points in world space used to render the text along a path or `undefined`.\n     */\n    get path(): THREE.Vector3[] | undefined {\n        if (this.points instanceof Array) {\n            return this.points;\n        }\n        return undefined;\n    }\n\n    /**\n     * If `true`, `TextElement` is allowed to overlap other labels or icons of lower priority.\n     *\n     * @default `false`\n     */\n    get textMayOverlap(): boolean {\n        return this.mayOverlap === true;\n    }\n\n    set textMayOverlap(mayOverlap: boolean) {\n        this.mayOverlap = mayOverlap;\n    }\n\n    /**\n     * If `true`, `TextElement` will reserve screen space, other markers of lower priority will not\n     * be able to overlap.\n     *\n     * @default `true`\n     */\n    get textReservesSpace(): boolean {\n        return this.reserveSpace !== false;\n    }\n\n    set textReservesSpace(reserveSpace: boolean) {\n        this.reserveSpace = reserveSpace;\n    }\n\n    /**\n     * Contains additional information about icon to be rendered along with text.\n     */\n    get poiInfo(): PoiInfo | undefined {\n        return this.m_poiInfo;\n    }\n\n    set poiInfo(poiInfo: PoiInfo | undefined) {\n        this.m_poiInfo = poiInfo;\n        if (poiInfo !== undefined) {\n            if (this.path !== undefined) {\n                this.type = TextElementType.LineMarker;\n            }\n            const poiRenderOrder = this.renderOrder !== undefined ? this.renderOrder : 0;\n            poiInfo.renderOrder = poiRenderOrder;\n        }\n    }\n\n    /**\n     * @returns The style used to render this text element, undefined if not set yet.\n     */\n    get renderStyle(): TextRenderStyle | undefined {\n        return this.m_renderStyle;\n    }\n\n    /**\n     * Sets style used for text rendering.\n     * @param style The style to use.\n     */\n    set renderStyle(style: TextRenderStyle | undefined) {\n        this.m_renderStyle = style;\n    }\n\n    /**\n     * @returns The style used to layout this text element, undefined if not set yet.\n     */\n    get layoutStyle(): TextLayoutStyle | undefined {\n        return this.m_layoutStyle;\n    }\n\n    /**\n     * Sets the style used for text layout.\n     * @param style The style to use.\n     */\n    set layoutStyle(style: TextLayoutStyle | undefined) {\n        this.m_layoutStyle = style;\n    }\n\n    hasFeatureId(): boolean {\n        return this.featureId !== undefined && this.featureId !== 0;\n    }\n\n    /**\n     * Update the minZoomLevel and maxZoomLevel from the values set in [[PoiInfo]].\n     * Selects the smaller/larger one of the two min/max values for icon and text, because the\n     * TextElement is a container for both.\n     */\n    updateMinMaxZoomLevelsFromPoiInfo() {\n        if (this.poiInfo !== undefined) {\n            if (this.minZoomLevel === undefined) {\n                this.minZoomLevel = MathUtils.min2(\n                    this.poiInfo.iconMinZoomLevel,\n                    this.poiInfo.textMinZoomLevel\n                );\n            }\n            if (this.maxZoomLevel === undefined) {\n                this.maxZoomLevel = MathUtils.max2(\n                    this.poiInfo.iconMaxZoomLevel,\n                    this.poiInfo.textMaxZoomLevel\n                );\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoCoordinates } from \"./GeoCoordinates\";\n\nimport * as THREE from \"three\";\n\n/**\n * `GeoBox` is used to represent a bounding box in geo coordinates.\n */\nexport class GeoBox {\n    /**\n     * Returns a `GeoBox` with the given geo coordinates.\n     *\n     * @param southWest The south west position in geo coordinates.\n     * @param northEast The north east position in geo coordinates.\n     */\n    static fromCoordinates(southWest: GeoCoordinates, northEast: GeoCoordinates): GeoBox {\n        return new GeoBox(southWest, northEast);\n    }\n\n    /**\n     * Constructs a new `GeoBox` with the given geo coordinates.\n     *\n     * @param southWest The south west position in geo coordinates.\n     * @param northEast The north east position in geo coordinates.\n     */\n    constructor(readonly southWest: GeoCoordinates, readonly northEast: GeoCoordinates) {}\n\n    /**\n     * Returns the minimum altitude or `undefined`.\n     */\n    get minAltitude(): number | undefined {\n        if (this.southWest.altitude === undefined || this.northEast.altitude === undefined) {\n            return undefined;\n        }\n        return Math.min(this.southWest.altitude, this.northEast.altitude);\n    }\n\n    /**\n     * Returns the maximum altitude or `undefined`.\n     */\n    get maxAltitude(): number | undefined {\n        if (this.southWest.altitude === undefined || this.northEast.altitude === undefined) {\n            return undefined;\n        }\n        return Math.max(this.southWest.altitude, this.northEast.altitude);\n    }\n\n    /**\n     * Returns the south latitude in degrees of this `GeoBox`.\n     */\n    get south(): number {\n        return this.southWest.latitude;\n    }\n\n    /**\n     * Returns the north altitude in degrees of this `GeoBox`.\n     */\n    get north(): number {\n        return this.northEast.latitude;\n    }\n\n    /**\n     * Returns the west longitude in degrees of this `GeoBox`.\n     */\n    get west(): number {\n        return this.southWest.longitude;\n    }\n\n    /**\n     * Returns the east longitude in degrees of this `GeoBox`.\n     */\n    get east(): number {\n        return this.northEast.longitude;\n    }\n\n    /**\n     * Returns the center of this `GeoBox`.\n     */\n    get center(): GeoCoordinates {\n        const latitude = (this.south + this.north) * 0.5;\n        const { west, east } = this;\n        const { minAltitude, altitudeSpan } = this;\n\n        let altitude: number | undefined;\n\n        if (minAltitude !== undefined && altitudeSpan !== undefined) {\n            altitude = minAltitude + altitudeSpan * 0.5;\n        }\n\n        if (west < east) {\n            return new GeoCoordinates(latitude, (west + east) * 0.5, altitude);\n        }\n\n        let longitude = (360 + east + west) * 0.5;\n\n        if (longitude > 360) {\n            longitude -= 360;\n        }\n\n        return new GeoCoordinates(latitude, longitude, altitude);\n    }\n\n    /**\n     * Returns the latitude span in radians.\n     */\n    get latitudeSpanInRadians(): number {\n        return THREE.MathUtils.degToRad(this.latitudeSpan);\n    }\n\n    /**\n     * Returns the longitude span in radians.\n     */\n    get longitudeSpanInRadians(): number {\n        return THREE.MathUtils.degToRad(this.longitudeSpan);\n    }\n\n    /**\n     * Returns the latitude span in degrees.\n     */\n    get latitudeSpan(): number {\n        return this.north - this.south;\n    }\n\n    get altitudeSpan(): number | undefined {\n        if (this.maxAltitude === undefined || this.minAltitude === undefined) {\n            return undefined;\n        }\n        return this.maxAltitude - this.minAltitude;\n    }\n\n    /**\n     * Returns the longitude span in degrees.\n     */\n    get longitudeSpan(): number {\n        let width = this.northEast.longitude - this.southWest.longitude;\n\n        if (width < 0) {\n            width += 360;\n        }\n\n        return width;\n    }\n\n    /**\n     * Returns the latitude span in degrees.\n     * @deprecated Use [[latitudeSpan]] instead.\n     */\n    get latitudeSpanInDegrees(): number {\n        return this.latitudeSpan;\n    }\n\n    /**\n     * Returns the longitude span in degrees.\n     * @deprecated Use [[longitudeSpan]] instead.\n     */\n    get longitudeSpanInDegrees(): number {\n        return this.longitudeSpan;\n    }\n\n    /**\n     * Returns `true` if the given geo coordinates are contained in this `GeoBox`.\n     *\n     * @param point The geo coordinates.\n     */\n    contains(point: GeoCoordinates): boolean {\n        if (\n            point.altitude === undefined ||\n            this.minAltitude === undefined ||\n            this.maxAltitude === undefined\n        ) {\n            return this.containsHelper(point);\n        }\n\n        const isFlat = this.minAltitude === this.maxAltitude;\n        const isSameAltitude = this.minAltitude === point.altitude;\n        const isWithinAltitudeRange =\n            this.minAltitude <= point.altitude && this.maxAltitude > point.altitude;\n\n        // If box is flat, we should check the altitude and containment,\n        // otherwise we should check also altitude difference where we consider\n        // point to be inside if alt is from [m_minAltitude, m_maxAltitude) range!\n        if (isFlat ? isSameAltitude : isWithinAltitudeRange) {\n            return this.containsHelper(point);\n        }\n\n        return false;\n    }\n\n    /**\n     * Clones this `GeoBox` instance.\n     */\n    clone(): GeoBox {\n        return new GeoBox(this.southWest, this.northEast);\n    }\n\n    /**\n     * Update the bounding box by considering a given point.\n     *\n     * @param point The point that may expand the bounding box.\n     */\n    growToContain(point: GeoCoordinates) {\n        this.southWest.latitude = Math.min(this.southWest.latitude, point.latitude);\n        this.southWest.longitude = Math.min(this.southWest.longitude, point.longitude);\n        this.southWest.altitude =\n            this.southWest.altitude !== undefined && point.altitude !== undefined\n                ? Math.min(this.southWest.altitude, point.altitude)\n                : this.southWest.altitude !== undefined\n                ? this.southWest.altitude\n                : point.altitude !== undefined\n                ? point.altitude\n                : undefined;\n\n        this.northEast.latitude = Math.max(this.northEast.latitude, point.latitude);\n        this.northEast.longitude = Math.max(this.northEast.longitude, point.longitude);\n        this.northEast.altitude =\n            this.northEast.altitude !== undefined && point.altitude !== undefined\n                ? Math.max(this.northEast.altitude, point.altitude)\n                : this.northEast.altitude !== undefined\n                ? this.northEast.altitude\n                : point.altitude !== undefined\n                ? point.altitude\n                : undefined;\n    }\n\n    private containsHelper(point: GeoCoordinates): boolean {\n        if (point.latitude < this.southWest.latitude || point.latitude >= this.northEast.latitude) {\n            return false;\n        }\n\n        const { west, east } = this;\n\n        if (east > west) {\n            return point.longitude >= west && point.longitude < east;\n        }\n\n        return point.longitude > east || point.longitude <= west;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { Projection } from \"../projection/Projection\";\nimport { FlatTileBoundingBoxGenerator } from \"./FlatTileBoundingBoxGenerator\";\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { TileKey } from \"./TileKey\";\nimport { TileKeyUtils } from \"./TileKeyUtils\";\nimport { TileTreeTraverse } from \"./TileTreeTraverse\";\n\n/**\n * The `TilingScheme` represents how the data is tiled.\n */\nexport class TilingScheme {\n    readonly boundingBoxGenerator: FlatTileBoundingBoxGenerator;\n    readonly tileTreeTraverse: TileTreeTraverse;\n\n    /**\n     * Constructs a new `TilingScheme` with the given subdivision scheme and projection.\n     *\n     * @param subdivisionScheme The subdivision scheme used by this `TilingScheme`.\n     * @param projection The projection used by this `TilingScheme`.\n     */\n    constructor(readonly subdivisionScheme: SubdivisionScheme, readonly projection: Projection) {\n        this.boundingBoxGenerator = new FlatTileBoundingBoxGenerator(this);\n        this.tileTreeTraverse = new TileTreeTraverse(subdivisionScheme);\n    }\n\n    /**\n     * Returns the sub tile keys of the given tile.\n     *\n     * @param tileKey The [[TileKey]].\n     * @returns The list of the sub tile keys.\n     */\n    getSubTileKeys(tileKey: TileKey): Iterable<TileKey> {\n        return this.tileTreeTraverse.subTiles(tileKey);\n    }\n\n    /**\n     * Gets the [[TileKey]] from the given geo position and level.\n     *\n     * @param geoPoint The position in geo coordinates.\n     * @param level The level of the resulting `TileKey`.\n     */\n    getTileKey(geoPoint: GeoCoordinatesLike, level: number): TileKey | null {\n        return TileKeyUtils.geoCoordinatesToTileKey(this, geoPoint, level);\n    }\n\n    /**\n     * Gets the list of [[TileKey]]s contained in the given [[GeoBox]].\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     * @param level The level of the resulting `TileKey`.\n     */\n    getTileKeys(geoBox: GeoBox, level: number): TileKey[] {\n        return TileKeyUtils.geoRectangleToTileKeys(this, geoBox, level);\n    }\n\n    /**\n     * Returns the bounding box in geo coordinates for the given [[TileKey]].\n     *\n     * @param tileKey The `TileKey`.\n     */\n    getGeoBox(tileKey: TileKey): GeoBox {\n        return this.boundingBoxGenerator.getGeoBox(tileKey);\n    }\n\n    /**\n     * Returns the bounding box in world coordinates.\n     *\n     * @param tileKey The `TileKey`.\n     * @param result The optional object that will contain the resulting bounding box.\n     */\n    getWorldBox(tileKey: TileKey, result?: Box3Like): Box3Like {\n        return this.boundingBoxGenerator.getWorldBox(tileKey, result);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/AnimatedExtrusionHandler\";\nexport * from \"./lib/CameraMovementDetector\";\nexport * from \"./lib/ClipPlanesEvaluator\";\nexport * from \"./lib/ColorCache\";\nexport * from \"./lib/composing\";\nexport * from \"./lib/ConcurrentDecoderFacade\";\nexport * from \"./lib/ConcurrentDecoderFacade\";\nexport * from \"./lib/ConcurrentTilerFacade\";\nexport * from \"./lib/ConcurrentTilerFacade\";\nexport * from \"./lib/copyrights/CopyrightElementHandler\";\nexport * from \"./lib/copyrights/CopyrightInfo\";\nexport * from \"./lib/copyrights/CopyrightProvider\";\nexport * from \"./lib/copyrights/CopyrightCoverageProvider\";\nexport * from \"./lib/copyrights/UrlCopyrightProvider\";\nexport * from \"./lib/DataSource\";\nexport * from \"./lib/PolarTileDataSource\";\nexport * from \"./lib/DecodedTileHelpers\";\nexport * from \"./lib/DepthPrePass\";\nexport * from \"./lib/DisplacementMap\";\nexport * from \"./lib/ElevationProvider\";\nexport * from \"./lib/ElevationRangeSource\";\nexport * from \"./lib/image/Image\";\nexport * from \"./lib/image/ImageCache\";\nexport * from \"./lib/image/MapViewImageCache\";\nexport * from \"./lib/MapView\";\nexport * from \"./lib/MapViewFog\";\nexport * from \"./lib/MapViewPoints\";\nexport * from \"./lib/PickHandler\";\nexport * from \"./lib/poi/Poi\";\nexport * from \"./lib/poi/PoiManager\";\nexport * from \"./lib/poi/PoiTableManager\";\nexport * from \"./lib/RoadPicker\";\nexport * from \"./lib/Statistics\";\nexport * from \"./lib/text/TextElement\";\nexport * from \"./lib/text/TextElementsRenderer\";\nexport * from \"./lib/text/TextStyleCache\";\nexport * from \"./lib/TextureLoader\";\nexport * from \"./lib/ThemeLoader\";\nexport * from \"./lib/Tile\";\nexport * from \"./lib/geometry/TileDataAccessor\";\nexport * from \"./lib/geometry/TileGeometry\";\nexport * from \"./lib/Utils\";\nexport * from \"./lib/VisibleTileSet\";\nexport * from \"./lib/WorkerBasedDecoder\";\nexport * from \"./lib/WorkerBasedTiler\";\nexport * from \"./lib/workers/WorkerLoader\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n/**\n * Values for boolean shader defines\n */\nexport const DEFINE_BOOL_TRUE = \"\";\nexport const DEFINE_BOOL_FALSE = undefined;\n\n/**\n * Insert shader includes after another shader include.\n *\n * @param shaderContent Original string.\n * @param shaderName String to append to.\n * @param insertedShaderName String to append after string `shaderA`.\n * @param addTab If `true`, a tab character will be inserted before `shaderB`.\n */\nexport function insertShaderInclude(\n    shaderContent: string,\n    shaderName: string,\n    insertedShaderName: string,\n    addTab?: boolean\n): string {\n    const tabChar = addTab === true ? \"\\t\" : \"\";\n\n    const result = shaderContent.replace(\n        `#include <${shaderName}>`,\n        `#include <${shaderName}>\n${tabChar}#include <${insertedShaderName}>`\n    );\n    return result;\n}\n\nexport interface ForcedBlending {\n    /**\n     * This material has `blending` always enabled regardless of `opacity` setting.s\n     */\n    forcedBlending?: true;\n}\n\n/**\n * THREE.js is enabling blending only when transparent is `true` or when a blend mode\n * different than `NormalBlending` is set.\n * Since we don't want to set transparent to true and mess up the render order we set\n * `CustomBlending` with the same parameters as the `NormalBlending`.\n\n * @param material `Material` that should use blending\n * @note This function should not be used in frame update after material has been passed to WebGL.\n * In such cases use [[enableBlending]] instead.\n */\nexport function enforceBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent) {\n        // Nothing to do\n        return;\n    }\n\n    enableBlending(material);\n    material.forcedBlending = true;\n}\n\n/**\n * Enable alpha blending using THREE.CustomBlending setup.\n *\n * Function enables blending using one of predefined modes, for both color and alpha components:\n * - Src: [[THREE.SrcAlphaFactor]], Dst: [[THREE.OneMinusSrcAlphaFactor]]\n * - Src: [[THREE.OneFactor]], Dst: [[THREE.OneMinusSrcAlphaFactor]]\n * The second blending equation is used when [[THREE.Material.premultipliedAlpha]] is enabled\n * for this material.\n * @note Blending mode change does not require material update.\n * @see THREE.Material.needsUpdate.\n * @param material The material or material parameters to modify.\n */\nexport function enableBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent || material.forcedBlending) {\n        // Nothing to do\n        return;\n    }\n\n    material.blending = THREE.CustomBlending;\n    if (material.premultipliedAlpha === true) {\n        material.blendSrc = THREE.OneFactor;\n        material.blendDst = THREE.OneMinusSrcAlphaFactor;\n        material.blendSrcAlpha = THREE.OneFactor;\n        material.blendDstAlpha = THREE.OneMinusSrcAlphaFactor;\n    } else {\n        material.blendSrc = THREE.SrcAlphaFactor;\n        material.blendDst = THREE.OneMinusSrcAlphaFactor;\n        material.blendSrcAlpha = THREE.OneFactor;\n        material.blendDstAlpha = THREE.OneMinusSrcAlphaFactor;\n    }\n}\n\n/**\n * Disable alpha blending using THREE.CustomBlending mode, switches to [[THREE.NormalBlending]].\n *\n * @note Blending mode change does not require material update.\n * @see THREE.Material.needsUpdate.\n * @see enableBlending.\n * @param material The material or material parameters to modify.\n */\nexport function disableBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent || material.forcedBlending) {\n        // Nothing to do\n        return;\n    }\n\n    material.blending = THREE.NormalBlending;\n}\n\n/**\n * Setup material shader _define_ using two allowable semantics.\n *\n * Function accepts two types of values for shader preprocessor _define_:\n * - [[boolean]], simple [[true]] or [[false]] which causes _define_ to be set with empty string,\n * such defines may be handled in the shader using __#ifdef__ semantics:\n * ```\n * #ifdef SOME_DEFINE && !defined(OTHER_DEFINE)\n * // do something\n * #endif\n * ```\n *\n * - [[number]] which sets _define_ to explicit value. You may use it to enable/disable some\n * code or even set compile time constants affecting shaders math:\n * ```\n * #if SOME_DEFINE_SWITCH && OTHER_DEFINE_SWITCH == 0\n * gl_FragColor = vec4(1, 1, 1, DEFINE_ALPHA)\n * #endif\n * ```\n * @note Setting _define_ with `false` value is not the same as setting is with number value of `0`.\n *\n * @param material The [[THREE.ShaderMaterial]] which shader _define_ will be set.\n * @param key Name of shader _define_ as used in shader, i.e. `USE_FOG`, `COLOR_ALPHA`, etc.\n * @param value The value to be set as number or boolean specifying if preprocessor define\n * should be defined or not.\n * @returns [[true]] if material has been forced to update (re-compile) due to define changes,\n * return [[false]] whenever define has not been changed.\n */\nexport function setShaderMaterialDefine(\n    material: THREE.ShaderMaterial,\n    key: string,\n    value: boolean | number\n): boolean {\n    assert(\n        material.defines !== undefined,\n        \"Do not use this function in ShaderMaterial derived c-tor.\"\n    );\n    const semanticValue = getShaderMaterialDefine(material, key);\n    const needsUpdate = value !== semanticValue;\n    // Nothing to change - early exit\n    if (!needsUpdate) {\n        return false;\n    }\n    setShaderDefine(material.defines, key, value);\n    material.needsUpdate = needsUpdate;\n    return true;\n}\n\n/**\n * Acquire value of [[THREE.ShaderMaterial]] GPU shader preprocessor define.\n *\n * The semantic used in entire engine assumes that preprocessor defines may have only binary\n * (defined / not defined) or numerical values, this ensures consistency in the shaders and\n * materials code.\n * @note If _define_ with [[key]] is _undefined_ function returns [[false]], if defined but\n * not numerical value it returns [[true]], otherwise returns number.\n * @see setShaderMaterialDefine.\n *\n * @param material The material which shader defines are accessed.\n * @param key The _define_ name (identifier).\n * @param fallbackValue The value returned when material `defines` are not initialized yet,\n * specified by default as [[false]], provide your own default if you expect numeric value.\n */\nexport function getShaderMaterialDefine(\n    material: THREE.ShaderMaterial,\n    key: string,\n    fallbackValue: boolean | number = false\n): boolean | number {\n    if (material.defines === undefined) {\n        return fallbackValue;\n    }\n    return getShaderDefine(material.defines, key);\n}\n\n/**\n * Sets new value of 'define' regardless of current value set.\n *\n * Update `defines` map with new key and value, if key is already occupied it overrides its value.\n * Helper function that may be used to setup [[THREE.ShaderMaterialParameters]] before\n * material is create (i.e. in c-tor).\n *\n * @param defines Shader `defines` stored in key-value map.\n * @param key The key used to identify _define_.\n * @param value The value to be stored.\n * @returns [[true]] if define has actually changed, false is stayed the same.\n * @see setShaderMaterialDefine.\n */\nexport function setShaderDefine(\n    defines: { [key: string]: any },\n    key: string,\n    value: boolean | number\n): boolean {\n    let updated = false;\n    if (typeof value === \"number\") {\n        updated = defines[key] !== value;\n        defines[key] = value;\n    } else if (value === true) {\n        updated = defines[key] !== DEFINE_BOOL_TRUE;\n        defines[key] = DEFINE_BOOL_TRUE;\n    } else if (value === false && defines[key] !== undefined) {\n        // Sets to DEFINE_BOOL_FALSE === undefined\n        delete defines[key];\n        updated = true;\n    }\n    return updated;\n}\n\n/**\n * Acquire shader 'define' value from `defines` map.\n *\n * If there is no value under [[key]] specified, function returns false, otherwise result is\n * true or numeric value if there is a number stored.\n * @param defines The `defines` map.\n * @param key The identifier of the _define_.\n */\nexport function getShaderDefine(defines: { [key: string]: any }, key: string): boolean | number {\n    const currentValue = defines[key];\n    const semanticValue =\n        currentValue === DEFINE_BOOL_FALSE\n            ? false\n            : currentValue === DEFINE_BOOL_TRUE\n            ? true\n            : currentValue;\n    return semanticValue;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    Env,\n    Expr,\n    GeometryKind,\n    getFeatureId,\n    getPropertyValue,\n    GradientSky,\n    ImageTexture,\n    IndexedTechnique,\n    Light,\n    MapEnv,\n    PostEffects,\n    Sky,\n    Theme,\n    Value\n} from \"@here/harp-datasource-protocol\";\nimport {\n    EarthConstants,\n    GeoCoordinates,\n    GeoCoordLike,\n    isGeoCoordinatesLike,\n    mercatorProjection,\n    Projection,\n    ProjectionType,\n    TilingScheme,\n    Vector3Like\n} from \"@here/harp-geoutils\";\nimport {\n    assert,\n    getOptionValue,\n    LoggerManager,\n    LogLevel,\n    PerformanceTimer,\n    UriResolver\n} from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport { AnimatedExtrusionHandler } from \"./AnimatedExtrusionHandler\";\nimport { BackgroundDataSource } from \"./BackgroundDataSource\";\nimport { CameraMovementDetector } from \"./CameraMovementDetector\";\nimport { ClipPlanesEvaluator, createDefaultClipPlanesEvaluator } from \"./ClipPlanesEvaluator\";\nimport { IMapAntialiasSettings, IMapRenderingManager, MapRenderingManager } from \"./composing\";\nimport { ConcurrentDecoderFacade } from \"./ConcurrentDecoderFacade\";\nimport { CopyrightInfo } from \"./copyrights/CopyrightInfo\";\nimport { DataSource } from \"./DataSource\";\nimport { ElevationProvider } from \"./ElevationProvider\";\nimport { ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { FrustumIntersection } from \"./FrustumIntersection\";\nimport { overlayOnElevation } from \"./geometry/overlayOnElevation\";\nimport { TileGeometryManager } from \"./geometry/TileGeometryManager\";\nimport { MapViewImageCache } from \"./image/MapViewImageCache\";\nimport { MapViewFog } from \"./MapViewFog\";\nimport { PickHandler, PickResult } from \"./PickHandler\";\nimport { PickingRaycaster } from \"./PickingRaycaster\";\nimport { PoiManager } from \"./poi/PoiManager\";\nimport { PoiRendererFactory } from \"./poi/PoiRendererFactory\";\nimport { PoiTableManager } from \"./poi/PoiTableManager\";\nimport { PolarTileDataSource } from \"./PolarTileDataSource\";\nimport { ScreenCollisions, ScreenCollisionsDebug } from \"./ScreenCollisions\";\nimport { ScreenProjector } from \"./ScreenProjector\";\nimport { SkyBackground } from \"./SkyBackground\";\nimport { FrameStats, PerformanceStatistics } from \"./Statistics\";\nimport { FontCatalogLoader } from \"./text/FontCatalogLoader\";\nimport { MapViewState } from \"./text/MapViewState\";\nimport { TextCanvasFactory } from \"./text/TextCanvasFactory\";\nimport { TextElement } from \"./text/TextElement\";\nimport { TextElementsRenderer, ViewUpdateCallback } from \"./text/TextElementsRenderer\";\nimport { TextElementsRendererOptions } from \"./text/TextElementsRendererOptions\";\nimport { createLight } from \"./ThemeHelpers\";\nimport { ThemeLoader } from \"./ThemeLoader\";\nimport { Tile, TileFeatureData, TileObject } from \"./Tile\";\nimport { MapViewUtils } from \"./Utils\";\nimport { ResourceComputationType, VisibleTileSet, VisibleTileSetOptions } from \"./VisibleTileSet\";\n\ndeclare const process: any;\n\n// Cache value, because access to process.env.NODE_ENV is SLOW!\nconst isProduction = process.env.NODE_ENV === \"production\";\nif (isProduction) {\n    // In production: silence logging below error.\n    LoggerManager.instance.setLogLevelForAll(LogLevel.Error);\n} else {\n    // In dev: silence logging below log (silences \"debug\" and \"trace\" levels).\n    LoggerManager.instance.setLogLevelForAll(LogLevel.Log);\n}\n/**\n * An interface describing [[THREE.Object3D]]s anchored on given [[GeoCoordinates]].\n *\n * Example:\n * ```typescript\n * const mesh: MapObject<THREE.Mesh> = new THREE.Mesh(geometry, material);\n * mesh.geoPosition = new GeoCoordinates(latitude, longitude, altitude);\n * mapView.mapAnchors.add(mesh);\n * ```\n *\n */\nexport type MapAnchor<T extends THREE.Object3D = THREE.Object3D> = T & {\n    /**\n     * The position of this [[MapObject]] in [[GeoCoordinates]].\n     */\n    geoPosition?: GeoCoordinates;\n};\n\nexport enum MapViewEventNames {\n    /** Called before this `MapView` starts to render a new frame. */\n    Update = \"update\",\n    /** Called when the WebGL canvas is resized. */\n    Resize = \"resize\",\n    /** Called when the frame is about to be rendered. */\n    Render = \"render\",\n    /** Called after a frame has been rendered. */\n    AfterRender = \"didrender\",\n    /** Called after the first frame has been rendered. */\n    FirstFrame = \"first-render\",\n    /** Called when the first view has all the necessary tiles loaded and rendered. */\n    FrameComplete = \"frame-complete\",\n    /** Called when the theme has been loaded with the internal [[ThemeLoader]]. */\n    ThemeLoaded = \"theme-loaded\",\n    /** Called when the animation mode has started. */\n    AnimationStarted = \"animation-started\",\n    /** Called when the animation mode has stopped. */\n    AnimationFinished = \"animation-finished\",\n    /** Called when a camera interaction has been detected. */\n    MovementStarted = \"movement-started\",\n    /** Called when a camera interaction has been stopped. */\n    MovementFinished = \"movement-finished\",\n    /** Called when a data source has been connected or failed to connect. */\n    DataSourceConnect = \"datasource-connect\",\n    /** Emitted when copyright info of rendered map has been changed. */\n    CopyrightChanged = \"copyright-changed\",\n    /** Called when the WebGL context is lost. */\n    ContextLost = \"webglcontext-lost\",\n    /** Called when the WebGL context is restored. */\n    ContextRestored = \"webglcontext-restored\",\n    /** Called when camera position has been changed. */\n    CameraPositionChanged = \"camera-changed\"\n}\n\nconst logger = LoggerManager.instance.create(\"MapView\");\nconst DEFAULT_CLEAR_COLOR = 0xefe9e1;\nconst DEFAULT_FOV_CALCULATION: FovCalculation = { type: \"dynamic\", fov: 40 };\nconst DEFAULT_CAM_NEAR_PLANE = 0.1;\nconst DEFAULT_CAM_FAR_PLANE = 4000000;\nconst MAX_FIELD_OF_VIEW = 140;\nconst MIN_FIELD_OF_VIEW = 10;\nexport const MAX_TILT_ANGLE = 89;\n// All objects in fallback tiles are reduced by this amount.\nexport const FALLBACK_RENDER_ORDER_OFFSET = 20000;\n\nconst DEFAULT_MIN_ZOOM_LEVEL = 1;\n\n/**\n * Default maximum zoom level.\n */\nconst DEFAULT_MAX_ZOOM_LEVEL = 20;\n\n/**\n * Default minimum camera height.\n */\nconst DEFAULT_MIN_CAMERA_HEIGHT = 20;\n\n/**\n * Amount of framerate values to pick average from\n */\nconst FRAME_RATE_RING_SIZE = 12;\n\n/**\n * Default starting value for FPS computation.\n */\nconst FALLBACK_FRAME_RATE = 30;\n\n/**\n * Style set used by [[PolarTileDataSource]] by default.\n */\nconst DEFAULT_POLAR_STYLE_SET_NAME = \"polar\";\n\n/**\n * The type of `RenderEvent`.\n */\nexport interface RenderEvent extends THREE.Event {\n    type:\n        | MapViewEventNames.Render\n        | MapViewEventNames.FirstFrame\n        | MapViewEventNames.FrameComplete\n        | MapViewEventNames.ThemeLoaded\n        | MapViewEventNames.AnimationStarted\n        | MapViewEventNames.AnimationFinished\n        | MapViewEventNames.MovementStarted\n        | MapViewEventNames.MovementFinished\n        | MapViewEventNames.ContextLost\n        | MapViewEventNames.ContextRestored\n        | MapViewEventNames.CopyrightChanged;\n    time?: number;\n}\n\n// Event type: cast needed to workaround wrong THREE.js typings.\nconst UPDATE: RenderEvent = { type: MapViewEventNames.Update } as any;\nconst RENDER_EVENT: RenderEvent = { type: MapViewEventNames.Render } as any;\nconst DID_RENDER_EVENT: RenderEvent = { type: MapViewEventNames.AfterRender } as any;\nconst FIRST_FRAME_EVENT: RenderEvent = { type: MapViewEventNames.FirstFrame } as any;\nconst FRAME_COMPLETE_EVENT: RenderEvent = { type: MapViewEventNames.FrameComplete } as any;\nconst THEME_LOADED_EVENT: RenderEvent = { type: MapViewEventNames.ThemeLoaded } as any;\nconst ANIMATION_STARTED_EVENT: RenderEvent = { type: MapViewEventNames.AnimationStarted } as any;\nconst ANIMATION_FINISHED_EVENT: RenderEvent = { type: MapViewEventNames.AnimationFinished } as any;\nconst MOVEMENT_STARTED_EVENT: RenderEvent = { type: MapViewEventNames.MovementStarted } as any;\nconst MOVEMENT_FINISHED_EVENT: RenderEvent = { type: MapViewEventNames.MovementFinished } as any;\nconst CONTEXT_LOST_EVENT: RenderEvent = { type: MapViewEventNames.ContextLost } as any;\nconst CONTEXT_RESTORED_EVENT: RenderEvent = { type: MapViewEventNames.ContextRestored } as any;\nconst COPYRIGHT_CHANGED_EVENT: RenderEvent = { type: MapViewEventNames.CopyrightChanged } as any;\n\nconst cache = {\n    vector2: [new THREE.Vector2()],\n    vector3: [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()],\n    rayCaster: new THREE.Raycaster(),\n    groundPlane: new THREE.Plane(),\n    groundSphere: new THREE.Sphere(undefined, EarthConstants.EQUATORIAL_RADIUS),\n    frustumPoints: [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ],\n    matrix4: [new THREE.Matrix4(), new THREE.Matrix4()],\n    transform: [\n        {\n            position: new THREE.Vector3(),\n            xAxis: new THREE.Vector3(),\n            yAxis: new THREE.Vector3(),\n            zAxis: new THREE.Vector3()\n        }\n    ]\n};\n\n/**\n * Specifies how the FOV (Field of View) should be calculated.\n */\nexport interface FovCalculation {\n    /**\n     * How to interpret the [[fov]], can be either `fixed` or `dynamic`.\n     *\n     * `fixed` means that the FOV is fixed regardless of the [[viewportHeight]], such that shrinking\n     * the height causes the map to shrink to keep the content in view. The benefit is that,\n     * regardless of any resizes, the field of view is constant, which means there is no change in\n     * the distortion of buildings near the edges. However the trade off is that the zoom level\n     * changes, which means that the map will pull in new tiles, hence causing some flickering.\n     *\n     * `dynamic` means that the focal length is calculated based on the supplied [[fov]] and\n     * [[viewportHeight]], this means that the map doesn't scale (the image is essentially cropped\n     * but not shrunk) when the [[viewportHeight]] or [[viewportWidth]] is changed. The benefit is\n     * that the zoom level is (currently) stable during resize, because the focal length is used,\n     * however the tradeoff is that changing from a small to a big height will cause the fov to\n     * change a lot, and thus introduce distortion.\n     */\n    type: \"fixed\" | \"dynamic\";\n\n    /**\n     * If [[type]] is `fixed` then the supplied [[fov]] is fixed regardless of\n     * [[viewportHeight]] or [[viewportWidth]].\n     *\n     * If [[type]] is `dynamic` then the supplied [[fov]] is applied to the\n     * first frame, and the focal length calculated. Changes to the viewport\n     * height no longer shrink the content because the field of view is updated\n     * dynamically.\n     */\n    fov: number;\n}\n\n/**\n * Hint for the WebGL implementation on which power mode to prefer.\n *\n * @see https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.12\n */\nexport enum MapViewPowerPreference {\n    /** Default value. */\n    Default = \"default\",\n    /** Lower power mode, used to conserve energy. */\n    LowPower = \"low-power\",\n    /** Maximum performance. */\n    HighPerformance = \"high-performance\"\n}\n\n/**\n * User configuration for the [[MapView]].\n */\nexport interface MapViewOptions extends TextElementsRendererOptions, Partial<LookAtParams> {\n    /**\n     * The canvas element used to render the scene.\n     */\n    canvas: HTMLCanvasElement;\n\n    /**\n     * `true` if the canvas contains an alpha (transparency) buffer or not. Default is `false`.\n     */\n    alpha?: boolean;\n\n    /**\n     * Whether the native WebGL antialiasing should be enabled. It is better to disable it if the\n     * MapView's MSAA is enabled.\n     *\n     * @default `true` for `pixelRatio` < `2.0`, `false` otherwise.\n     */\n    enableNativeWebglAntialias?: boolean;\n\n    /**\n     * Antialias settings for the map rendering. It is better to disable the native antialising if\n     * the custom antialiasing is enabled.\n     */\n    customAntialiasSettings?: IMapAntialiasSettings;\n\n    /**\n     * `Projection` used by the `MapView`.\n     *\n     * The default value is [[mercatorProjection]].\n     */\n    projection?: Projection;\n\n    /**\n     * The URL of the script that the decoder worker runs. The default URL is\n     * `./decoder.bundle.js`.\n     *\n     * Relative URIs are resolved to full URL using the document's base URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     */\n    decoderUrl?: string;\n\n    /**\n     * The number of Web Workers used to decode data. The default is\n     * CLAMP(`navigator.hardwareConcurrency` - 1, 1, 2).\n     */\n    decoderCount?: number;\n\n    /**\n     * The [[Theme]] used by Mapview.\n     *\n     * This Theme can be one of the following:\n     *  - `string` : the URI of the theme file used to style this map\n     *  - `Theme` : the `Theme` object already loaded\n     *  - `Promise<Theme>` : the future `Theme` object\n     *  - `undefined` : the theme is not yet set up, but can be set later. Rendering waits until\n     *     the theme is set.\n     *\n     * **Note:** Layers that use a theme do not render any content until that theme is available.\n     *\n     * Relative URIs are resolved to full URL using the document's base URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     *\n     * Custom URIs (of theme itself and of resources referenced by theme) may be resolved with help\n     * of [[uriResolver]].\n     *\n     * @see [[ThemeLoader.load]] for details how theme is loaded\n     */\n    theme?: string | Theme | Promise<Theme>;\n\n    /**\n     * Resolve `URI` referenced in `MapView` assets using this resolver.\n     *\n     * Use, to support application/deployment specific `URI`s into actual `URLs` that can be loaded\n     * with `fetch`.\n     *\n     * Example:\n     * ```\n     * uriResolver: new PrefixMapUriResolver({\n     *     \"local://poiMasterList\": \"/assets/poiMasterList.json\",\n     *        // will match only 'local//:poiMasterList' and\n     *        // resolve to `/assets/poiMasterList.json`\n     *     \"local://icons/\": \"/assets/icons/\"\n     *        // will match only 'local//:icons/ANYPATH' (and similar) and\n     *        // resolve to `/assets/icons/ANYPATH`\n     * })\n     * ```\n     *\n     * @see [[UriResolver]]\n     * @See [[PrefixMapUriResolver]]\n     */\n    uriResolver?: UriResolver;\n\n    /**\n     * The minimum zoom level; default is `1`.\n     */\n    minZoomLevel?: number;\n\n    /**\n     * Determines the minimum camera height, in meters.\n     */\n    minCameraHeight?: number;\n\n    /**\n     * The maximum zoom level. The default is `14`.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * User-defined camera clipping planes distance evaluator.\n     * If not defined, [[TiltViewClipPlanesEvaluator]] will be used by [[MapView]].\n     *\n     * @default [[TiltViewClipPlanesEvaluator]]\n     */\n    clipPlanesEvaluator?: ClipPlanesEvaluator;\n\n    /**\n     * Set to true to extend the frustum culling. This improves the rejection of some tiles, which\n     * normal frustum culling cannot detect. You can disable this property to measure performance.\n     *\n     * @default true\n     */\n    extendedFrustumCulling?: boolean;\n\n    /**\n     * The maximum number of tiles rendered from one data source at a time.\n     *\n     * @default See [[MapViewDefaults.maxVisibleDataSourceTiles]].\n     */\n    maxVisibleDataSourceTiles?: number;\n\n    /**\n     * Size of a tile cache for one data source.\n     *\n     * @default See [[MapViewDefaults.tileCacheSize]].\n     */\n    tileCacheSize?: number;\n\n    /**\n     * Specify if the cache should be counted in tiles or in megabytes.\n     *\n     * @see [[MapViewDefaults.resourceComputationType]].\n     */\n    resourceComputationType?: ResourceComputationType;\n\n    /**\n     * Limits the number of reduced zoom levels (lower detail) to be searched for fallback tiles.\n     *\n     * When zooming in, newly elected tiles may have not yet loaded. [[MapView]] searches through\n     * the tile cache for tiles ready to be displayed in lower zoom levels. The tiles may be\n     * located shallower in the quadtree.\n     *\n     * To disable a cache search, set the value to `0`.\n     *\n     * @default [[MapViewDefaults.quadTreeSearchDistanceUp]]\n     */\n    quadTreeSearchDistanceUp?: number;\n\n    /**\n     * Limits the number of higher zoom levels (more detailed) to be searched for fallback tiles.\n     *\n     * When zooming out, newly elected tiles may have not yet loaded. [[MapView]] searches through\n     * the tile cache for tiles ready to be displayed in higher zoom levels. These tiles may be\n     * located deeper in the quadtree.\n     *\n     * To disable a cache search, set the value to `0`.\n     *\n     * @default [[MapViewDefaults.quadTreeSearchDistanceDown]]\n     */\n    quadTreeSearchDistanceDown?: number;\n\n    /**\n     * Set to `true` to measure performance statistics.\n     */\n    enableStatistics?: boolean;\n\n    /**\n     * Preserve the buffers until they are cleared manually or overwritten.\n     *\n     * Set to `true` in order to copy [[MapView]] canvas contents to an image or another canvas.\n     *\n     * @default `false`.\n     * @see https://threejs.org/docs/#api/renderers/WebGLRenderer.preserveDrawingBuffer\n     */\n    preserveDrawingBuffer?: boolean;\n\n    /**\n     * Set to `true` to allow picking of roads. If set to `true`, additional memory is used to\n     * store road data.\n     */\n    enableRoadPicking?: boolean;\n\n    /**\n     * Set to `true` to allow picking of technique information associated with objects.\n     */\n    enablePickTechnique?: boolean;\n\n    /**\n     * An optional canvas element that renders 2D collision debug information.\n     */\n    collisionDebugCanvas?: HTMLCanvasElement;\n\n    /**\n     * Maximum timeout, in milliseconds, before a [[MOVEMENT_FINISHED_EVENT]] is sent after the\n     * latest frame with a camera movement. The default is 300ms.\n     */\n    movementThrottleTimeout?: number;\n\n    /**\n     * How to calculate the Field of View, if not specified, then\n     * [[DEFAULT_FOV_CALCULATION]] is used.\n     */\n    fovCalculation?: FovCalculation;\n\n    /*\n     * An array of ISO 639-1 language codes for data sources.\n     */\n    languages?: string[];\n\n    /**\n     * Set fixed pixel ratio for rendering. Useful when rendering on high resolution displays with\n     * low performance GPUs that may be fill-rate limited.\n     * @default `window.devicePixelRatio`\n     */\n    pixelRatio?: number;\n\n    /**\n     * Set fixed pixel ratio for rendering when the camera is moving or an animation is running.\n     * Useful when rendering on high resolution displays with low performance GPUs that may be\n     * fill-rate limited.\n     *\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. Values between 0.5 and\n     * `window.devicePixelRatio` can be tried to give  good results. The value should not be larger\n     * than `window.devicePixelRatio`.\n     *\n     * @note Since no anti-aliasing is applied during dynamic rendering with `dynamicPixelRatio`\n     * defined, visual artifacts may occur, especially with thin lines..\n     *\n     * @note The resolution of icons and text labels is not affected.\n     *\n     * @default `undefined`\n     */\n    dynamicPixelRatio?: number;\n\n    /**\n     * Set maximum FPS (Frames Per Second). If VSync in enabled, the specified number may not be\n     * reached, but instead the next smaller number than `maxFps` that is equal to the refresh rate\n     * divided by an integer number.\n     *\n     * E.g.: If the monitors refresh rate is set to 60hz, and if `maxFps` is set to a value of `40`\n     * (60hz/1.5), the actual used FPS may be 30 (60hz/2). For displays that have a refresh rate of\n     * 60hz, good values for `maxFps` are 30, 20, 15, 12, 10, 6, 3 and 1. A value of `0` is ignored.\n     */\n    maxFps?: number;\n\n    /**\n     * Enable map repeat for planar projections.\n     * If `true`, map will be repeated in longitudinal direction continuously.\n     * If `false`, map will end on lon -180 & 180 deg.\n     *\n     * @default `true`\n     */\n    tileWrappingEnabled?: boolean;\n\n    /**\n     * Set tiling scheme for [[BackgroundDataSource]]\n     */\n    backgroundTilingScheme?: TilingScheme;\n\n    /**\n     * Should be the [[PolarTileDataSource]] used on spherical projection.\n     * Default is `true`.\n     */\n    enablePolarDataSource?: boolean;\n\n    /**\n     * The name of the [[StyleSet]] used by [[PolarTileDataSource]] to evaluate for the decoding.\n     * Default is `\"polar\"`.\n     */\n    polarStyleSetName?: string;\n\n    /**\n     * Storage level offset of regular tiles from reference datasource to align\n     * [[PolarTileDataSource]] tiles to.\n     * Default is `-1`.\n     */\n    polarGeometryLevelOffset?: number;\n\n    /**\n     * Hint for the WebGL implementation on which power mode to prefer.\n     */\n    powerPreference?: MapViewPowerPreference;\n\n    /**\n     * Set to `true` to allow rendering scene synchronously.\n     *\n     * By calling `renderSync()` scene draws immediately, opposite to default case when\n     * `update` method requests redraw and waits for the next animation frame.\n     *\n     * You need to set up your own render loop controller.\n     * Event `MapViewEventNames.Update` fired when [[MapView]] requests for an redraw.\n     * E.g.: When tiles loaded asynchronously and ready for rendering.\n     *\n     * @note Internal `maxFps` will be overridden and may not work properly as `renderSync`\n     * intended to be called from external render loop.\n     *\n     * @default false.\n     */\n    synchronousRendering?: boolean;\n\n    /**\n     * Set true to enable rendering mixed levels of detail (increases rendering performance).\n     * If not set will enable mixed levels of detail for spherical projection\n     * and disable for other projections.\n     *\n     * @default undefined\n     */\n    enableMixedLod?: boolean;\n\n    /**\n     * Enable shadows in the map. Shadows will only be casted on features that use the \"standard\"\n     * or \"extruded-polygon\" technique in the map theme.\n     * @default false\n     */\n    enableShadows?: boolean;\n}\n\n/**\n * Default settings used by [[MapView]] collected in one place.\n * @internal\n */\nconst MapViewDefaults = {\n    projection: mercatorProjection,\n\n    maxVisibleDataSourceTiles: 100,\n    extendedFrustumCulling: true,\n\n    tileCacheSize: 200,\n    resourceComputationType: ResourceComputationType.EstimationInMb,\n    quadTreeSearchDistanceUp: 3,\n    quadTreeSearchDistanceDown: 2,\n\n    pixelRatio:\n        typeof window !== \"undefined\" && window.devicePixelRatio !== undefined\n            ? window.devicePixelRatio\n            : 1.0,\n    target: new GeoCoordinates(25, 0),\n    zoomLevel: 5,\n    tilt: 0,\n    heading: 0,\n    theme: {}\n};\n\n/**\n * Parameters for MapView.lookAt\n */\nexport interface LookAtParams {\n    /**\n     * Target/look at point of the MapView.\n     * @note If the given point is not on the ground (altitude != 0) [[MapView]] will do a\n     * raycasting internally to find a target on the ground.\n     * As a consequence [[MapView.target]] and [[MapView.zoomLevel]] will not match the values\n     * that were passed into the [[MapView.lookAt]] method.\n     * @default `new GeoCoordinates(25, 0)` in [[MapView.constructor]] context.\n     * @default [[MapView.target]] in [[MapView.lookAt]] context.\n     */\n    target: GeoCoordLike;\n\n    /**\n     * Camera distance to the target point in world units.\n     * @default zoomLevel defaults will be used if not set.\n     */\n    distance: number;\n\n    /**\n     * Zoomlevel of the MapView.\n     * @note Takes precedence over distance.\n     * @default 5 in [[MapView.constructor]] context.\n     * @default [[MapView.zoomLevel]] in [[MapView.lookAt]] context.\n     */\n    zoomLevel: number;\n\n    /**\n     * Tilt angle in degrees. 0 is top down view.\n     * @default 0 in [[MapView.constructor]] context.\n     * @default [[MapView.tilt]] in [[MapView.lookAt]] context.\n     * @note Maximum supported tilt is 89°\n     */\n    tilt: number;\n\n    /**\n     * Heading angle in degrees and clockwise. 0 is north-up.\n     * @default 0 in [[MapView.constructor]] context.\n     * @default [[MapView.heading]] in [[MapView.lookAt]] context.\n     */\n    heading: number;\n}\n\n/**\n * The core class of the library to call in order to create a map visualization. It needs to be\n * linked to datasources.\n */\nexport class MapView extends THREE.EventDispatcher {\n    dumpNext = false;\n\n    /**\n     * The instance of [[MapRenderingManager]] managing the rendering of the map. It is a public\n     * property to allow access and modification of some parameters of the rendering process at\n     * runtime.\n     */\n    readonly mapRenderingManager: IMapRenderingManager;\n\n    private m_renderLabels: boolean = true;\n\n    private m_movementFinishedUpdateTimerId?: any;\n    private m_postEffects?: PostEffects;\n\n    private m_skyBackground?: SkyBackground;\n    private m_createdLights?: THREE.Light[];\n\n    private readonly m_screenProjector: ScreenProjector;\n    private readonly m_screenCollisions:\n        | ScreenCollisions\n        | ScreenCollisionsDebug = new ScreenCollisions();\n\n    private m_visibleTiles: VisibleTileSet;\n\n    private m_elevationSource?: DataSource;\n    private m_elevationRangeSource?: ElevationRangeSource;\n    private m_elevationProvider?: ElevationProvider;\n    private m_visibleTileSetLock: boolean = false;\n    private m_tileGeometryManager: TileGeometryManager;\n\n    private m_tileWrappingEnabled: boolean = true;\n\n    private m_zoomLevel: number = DEFAULT_MIN_ZOOM_LEVEL;\n    private m_minZoomLevel: number = DEFAULT_MIN_ZOOM_LEVEL;\n    private m_maxZoomLevel: number = DEFAULT_MAX_ZOOM_LEVEL;\n    private m_minCameraHeight: number = DEFAULT_MIN_CAMERA_HEIGHT;\n\n    private readonly m_screenCamera = new THREE.OrthographicCamera(-1, 1, 1, -1);\n\n    private readonly m_camera: THREE.PerspectiveCamera;\n\n    /**\n     * Relative to eye camera.\n     *\n     * This camera is internal camera used to improve precision\n     * when rendering geometries.\n     */\n    private readonly m_rteCamera = new THREE.PerspectiveCamera();\n\n    private m_yaw = 0;\n    private m_pitch = 0;\n    private m_roll = 0;\n    private m_focalLength = 0;\n    private m_targetDistance = 0;\n    private m_targetGeoPos = GeoCoordinates.fromObject(MapViewDefaults.target!);\n    // Focus point world coords may be calculated after setting projection, use dummy value here.\n    private m_targetWorldPos = new THREE.Vector3();\n    private readonly m_viewRanges: ViewRanges = {\n        near: DEFAULT_CAM_NEAR_PLANE,\n        far: DEFAULT_CAM_FAR_PLANE,\n        minimum: DEFAULT_CAM_NEAR_PLANE,\n        maximum: DEFAULT_CAM_FAR_PLANE\n    };\n    private m_pointOfView?: THREE.PerspectiveCamera;\n\n    private m_pixelToWorld?: number;\n    private m_pixelRatio?: number;\n\n    private readonly m_scene: THREE.Scene = new THREE.Scene();\n    private readonly m_fog: MapViewFog = new MapViewFog(this.m_scene);\n    private readonly m_mapTilesRoot = new THREE.Object3D();\n    private readonly m_mapAnchors = new THREE.Object3D();\n\n    private m_animationCount: number = 0;\n    private m_animationFrameHandle: number | undefined;\n    private m_drawing: boolean = false;\n    private m_updatePending: boolean = false;\n    private m_renderer: THREE.WebGLRenderer;\n    private m_frameNumber = 0;\n    private m_maxFps = 0;\n    private m_detectedFps: number = FALLBACK_FRAME_RATE;\n\n    private m_textElementsRenderer: TextElementsRenderer;\n\n    private m_forceCameraAspect: number | undefined = undefined;\n\n    //\n    // sources\n    //\n    private readonly m_tileDataSources: DataSource[] = [];\n    private readonly m_connectedDataSources = new Set<string>();\n    private readonly m_failedDataSources = new Set<string>();\n    private m_backgroundDataSource?: BackgroundDataSource;\n    private m_polarDataSource?: PolarTileDataSource;\n    private m_enablePolarDataSource: boolean = true;\n\n    // gestures\n    private readonly m_raycaster: PickingRaycaster;\n    private readonly m_plane = new THREE.Plane(new THREE.Vector3(0, 0, 1));\n    private readonly m_sphere = new THREE.Sphere(undefined, EarthConstants.EQUATORIAL_RADIUS);\n\n    private readonly m_options: MapViewOptions;\n    private readonly m_visibleTileSetOptions: VisibleTileSetOptions;\n\n    private m_theme: Theme = {};\n    private m_uriResolver?: UriResolver;\n    private m_themeIsLoading: boolean = false;\n\n    private m_previousFrameTimeStamp?: number;\n    private m_firstFrameRendered = false;\n    private m_firstFrameComplete = false;\n    private m_initialTextPlacementDone = false;\n    private m_previousRequestAnimationTime?: number;\n    private m_targetRequestAnimationTime?: number;\n    private m_frameTimeIndex: number = 0;\n    private readonly m_frameTimeRing: number[] = [];\n\n    private handleRequestAnimationFrame: any;\n    private handlePostponedAnimationFrame: any;\n\n    private m_pickHandler: PickHandler;\n\n    private m_imageCache: MapViewImageCache = new MapViewImageCache(this);\n\n    private m_poiManager: PoiManager = new PoiManager(this);\n\n    private m_poiTableManager: PoiTableManager = new PoiTableManager(this);\n\n    private m_collisionDebugCanvas: HTMLCanvasElement | undefined;\n\n    // Detection of camera movement and scene change:\n    private m_movementDetector: CameraMovementDetector;\n\n    private m_thisFrameTilesChanged: boolean | undefined;\n    private m_lastTileIds: string = \"\";\n    private m_languages: string[] | undefined;\n    private m_copyrightInfo: CopyrightInfo[] = [];\n    private m_animatedExtrusionHandler: AnimatedExtrusionHandler;\n\n    private m_env: MapEnv = new MapEnv({});\n\n    private m_enableMixedLod: boolean | undefined;\n    /**\n     * Constructs a new `MapView` with the given options or canvas element.\n     *\n     * @param options The `MapView` options or the HTML canvas element used to display the map.\n     */\n    constructor(options: MapViewOptions) {\n        super();\n\n        // make a copy to avoid unwanted changes to the original options.\n        this.m_options = { ...options };\n\n        this.m_uriResolver = this.m_options.uriResolver;\n\n        if (this.m_options.minZoomLevel !== undefined) {\n            this.m_minZoomLevel = this.m_options.minZoomLevel;\n        }\n\n        if (this.m_options.maxZoomLevel !== undefined) {\n            this.m_maxZoomLevel = this.m_options.maxZoomLevel;\n        }\n\n        if (this.m_options.minCameraHeight !== undefined) {\n            this.m_minCameraHeight = this.m_options.minCameraHeight;\n        }\n\n        if (this.m_options.decoderUrl !== undefined) {\n            ConcurrentDecoderFacade.defaultScriptUrl = this.m_uriResolver\n                ? this.m_uriResolver.resolveUri(this.m_options.decoderUrl)\n                : this.m_options.decoderUrl;\n        }\n\n        if (this.m_options.decoderCount !== undefined) {\n            ConcurrentDecoderFacade.defaultWorkerCount = this.m_options.decoderCount;\n        }\n\n        this.m_visibleTileSetOptions = {\n            ...MapViewDefaults,\n            clipPlanesEvaluator:\n                options.clipPlanesEvaluator !== undefined\n                    ? options.clipPlanesEvaluator\n                    : createDefaultClipPlanesEvaluator()\n        };\n\n        if (options.projection !== undefined) {\n            this.m_visibleTileSetOptions.projection = options.projection;\n        }\n\n        if (options.extendedFrustumCulling !== undefined) {\n            this.m_visibleTileSetOptions.extendedFrustumCulling = options.extendedFrustumCulling;\n        }\n\n        if (options.maxVisibleDataSourceTiles !== undefined) {\n            this.m_visibleTileSetOptions.maxVisibleDataSourceTiles =\n                options.maxVisibleDataSourceTiles;\n        }\n\n        if (options.tileCacheSize !== undefined) {\n            this.m_visibleTileSetOptions.tileCacheSize = options.tileCacheSize;\n        }\n\n        if (options.resourceComputationType !== undefined) {\n            this.m_visibleTileSetOptions.resourceComputationType = options.resourceComputationType;\n        }\n\n        if (options.quadTreeSearchDistanceUp !== undefined) {\n            this.m_visibleTileSetOptions.quadTreeSearchDistanceUp =\n                options.quadTreeSearchDistanceUp;\n        }\n\n        if (options.quadTreeSearchDistanceDown !== undefined) {\n            this.m_visibleTileSetOptions.quadTreeSearchDistanceDown =\n                options.quadTreeSearchDistanceDown;\n        }\n\n        if (options.enablePolarDataSource !== undefined) {\n            this.m_enablePolarDataSource = options.enablePolarDataSource;\n        }\n\n        this.m_pixelRatio = options.pixelRatio;\n\n        if (options.maxFps !== undefined) {\n            this.m_maxFps = Math.max(0, options.maxFps);\n        }\n\n        this.m_options.enableStatistics = this.m_options.enableStatistics === true;\n\n        this.m_languages = this.m_options.languages;\n\n        if (\n            !isProduction &&\n            this.m_options.collisionDebugCanvas !== undefined &&\n            this.m_options.collisionDebugCanvas !== null\n        ) {\n            this.m_collisionDebugCanvas = this.m_options.collisionDebugCanvas;\n            this.m_screenCollisions = new ScreenCollisionsDebug(this.m_collisionDebugCanvas);\n        }\n\n        this.handleRequestAnimationFrame = this.renderFunc.bind(this);\n        this.handlePostponedAnimationFrame = this.postponedAnimationFrame.bind(this);\n        this.m_pickHandler = new PickHandler(\n            this,\n            this.m_rteCamera,\n            this.m_options.enableRoadPicking === true,\n            this.m_options.enablePickTechnique === true\n        );\n\n        if (this.m_options.tileWrappingEnabled !== undefined) {\n            this.m_tileWrappingEnabled = this.m_options.tileWrappingEnabled;\n        }\n\n        // Initialization of the stats\n        this.setupStats(this.m_options.enableStatistics);\n\n        this.canvas.addEventListener(\"webglcontextlost\", this.onWebGLContextLost);\n        this.canvas.addEventListener(\"webglcontextrestored\", this.onWebGLContextRestored);\n\n        // Initialization of the renderer\n        this.m_renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            antialias: this.nativeWebglAntialiasEnabled,\n            alpha: this.m_options.alpha,\n            preserveDrawingBuffer: this.m_options.preserveDrawingBuffer === true,\n            powerPreference:\n                this.m_options.powerPreference === undefined\n                    ? MapViewPowerPreference.Default\n                    : this.m_options.powerPreference\n        });\n        this.m_renderer.autoClear = false;\n        this.m_renderer.debug.checkShaderErrors = !isProduction;\n\n        // This is detailed at https://threejs.org/docs/#api/renderers/WebGLRenderer.info\n        // When using several WebGLRenderer#render calls per frame, it is the only way to get\n        // correct rendering data from ThreeJS.\n        this.m_renderer.info.autoReset = false;\n\n        this.setupRenderer();\n\n        this.m_options.fovCalculation =\n            this.m_options.fovCalculation === undefined\n                ? DEFAULT_FOV_CALCULATION\n                : this.m_options.fovCalculation;\n        this.m_options.fovCalculation.fov = THREE.MathUtils.clamp(\n            this.m_options.fovCalculation!.fov,\n            MIN_FIELD_OF_VIEW,\n            MAX_FIELD_OF_VIEW\n        );\n        // Initialization of mCamera and mVisibleTiles\n        const { width, height } = this.getCanvasClientSize();\n        const aspect = width / height;\n        this.m_camera = new THREE.PerspectiveCamera(\n            this.m_options.fovCalculation.fov,\n            aspect,\n            DEFAULT_CAM_NEAR_PLANE,\n            DEFAULT_CAM_FAR_PLANE\n        );\n        this.m_camera.up.set(0, 0, 1);\n        this.projection.projectPoint(this.m_targetGeoPos, this.m_targetWorldPos);\n        this.m_scene.add(this.m_camera); // ensure the camera is added to the scene.\n        this.m_screenProjector = new ScreenProjector(this.m_camera);\n        // setup camera with initial position\n\n        this.setupCamera();\n\n        this.m_raycaster = new PickingRaycaster(width, height);\n\n        this.m_movementDetector = new CameraMovementDetector(\n            this.m_options.movementThrottleTimeout,\n            () => this.movementStarted(),\n            () => this.movementFinished()\n        );\n\n        const mapPassAntialiasSettings = this.m_options.customAntialiasSettings;\n        this.mapRenderingManager = new MapRenderingManager(\n            width,\n            height,\n            this.m_options.dynamicPixelRatio,\n            mapPassAntialiasSettings\n        );\n\n        this.m_tileGeometryManager = new TileGeometryManager(this);\n\n        if (options.enableMixedLod !== undefined) {\n            this.m_enableMixedLod = options.enableMixedLod;\n        }\n        this.m_visibleTiles = this.createVisibleTileSet();\n\n        this.m_animatedExtrusionHandler = new AnimatedExtrusionHandler(this);\n\n        this.m_backgroundDataSource = new BackgroundDataSource();\n        this.addDataSource(this.m_backgroundDataSource);\n\n        if (this.m_enablePolarDataSource) {\n            const styleSetName =\n                options.polarStyleSetName !== undefined\n                    ? options.polarStyleSetName\n                    : DEFAULT_POLAR_STYLE_SET_NAME;\n\n            this.m_polarDataSource = new PolarTileDataSource({\n                styleSetName,\n                geometryLevelOffset: options.polarGeometryLevelOffset\n            });\n\n            this.updatePolarDataSource();\n        }\n\n        if (options.backgroundTilingScheme !== undefined) {\n            this.m_backgroundDataSource.setTilingScheme(options.backgroundTilingScheme);\n        }\n\n        this.initTheme();\n\n        this.m_textElementsRenderer = this.createTextRenderer();\n\n        this.drawFrame();\n    }\n\n    /**\n     * @returns Whether label rendering is enabled.\n     */\n    get renderLabels() {\n        return this.m_renderLabels;\n    }\n\n    /**\n     * Enables or disables rendering of labels.\n     * @param value `true` to enable labels `false` to disable them.\n     */\n    set renderLabels(value: boolean) {\n        this.m_renderLabels = value;\n    }\n\n    /**\n     * @hidden\n     * The [[TextElementsRenderer]] select the visible [[TextElement]]s and renders them.\n     */\n    get textElementsRenderer(): TextElementsRenderer {\n        return this.m_textElementsRenderer;\n    }\n\n    /**\n     * @hidden\n     * The [[CameraMovementDetector]] detects camera movements. Made available for performance\n     * measurements.\n     */\n    get cameraMovementDetector(): CameraMovementDetector {\n        return this.m_movementDetector;\n    }\n\n    /**\n     * The [[AnimatedExtrusionHandler]] controls animated extrusion effect\n     * of the extruded objects in the [[Tile]]\n     */\n    get animatedExtrusionHandler(): AnimatedExtrusionHandler {\n        return this.m_animatedExtrusionHandler;\n    }\n\n    /**\n     * The [[TileGeometryManager]] manages geometry during loading and handles hiding geometry of\n     * specified [[GeometryKind]]s.\n     */\n    get tileGeometryManager(): TileGeometryManager | undefined {\n        return this.m_tileGeometryManager;\n    }\n\n    get enableMixedLod(): boolean | undefined {\n        return this.m_enableMixedLod;\n    }\n\n    set enableMixedLod(enableMixedLod: boolean | undefined) {\n        // Skip unnecessary update\n        if (this.m_enableMixedLod === enableMixedLod) {\n            return;\n        }\n\n        this.m_enableMixedLod = enableMixedLod;\n        this.m_visibleTiles = this.createVisibleTileSet();\n        this.resetTextRenderer();\n        this.update();\n    }\n\n    /**\n     * Disposes this `MapView`.\n     *\n     * This function cleans the resources that are managed manually including those that exist in\n     * shared caches.\n     *\n     * Note: This function does not try to clean objects that can be disposed off easily by\n     * TypeScript's garbage collecting mechanism. Consequently, if you need to perform a full\n     * cleanup, you must ensure that all references to this `MapView` are removed.\n     */\n    dispose() {\n        if (this.m_movementFinishedUpdateTimerId) {\n            clearTimeout(this.m_movementFinishedUpdateTimerId);\n            this.m_movementFinishedUpdateTimerId = undefined;\n        }\n\n        if (this.m_animationFrameHandle !== undefined) {\n            cancelAnimationFrame(this.m_animationFrameHandle);\n            this.m_animationFrameHandle = undefined;\n        }\n\n        this.canvas.removeEventListener(\"webglcontextlost\", this.onWebGLContextLost);\n        this.canvas.removeEventListener(\"webglcontextrestored\", this.onWebGLContextRestored);\n\n        for (const dataSource of this.m_tileDataSources) {\n            dataSource.dispose();\n        }\n        this.m_visibleTiles.clearTileCache();\n        this.m_textElementsRenderer.clearRenderStates();\n        this.m_renderer.dispose();\n        this.m_imageCache.clear();\n\n        this.m_movementDetector.dispose();\n    }\n\n    /**\n     * The way the cache usage is computed, either based on size in MB (mega bytes) or in number of\n     * tiles.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_visibleTiles.resourceComputationType;\n    }\n\n    set resourceComputationType(value: ResourceComputationType) {\n        this.m_visibleTiles.resourceComputationType = value;\n    }\n\n    /**\n     * Returns the cache size.\n     */\n    getCacheSize(): number {\n        return this.m_visibleTiles.getDataSourceCacheSize();\n    }\n\n    /**\n     * Sets the cache size in number of tiles.\n     *\n     * @param size The cache size in tiles.\n     * @param numVisibleTiles The number of tiles visible, which is size/2 by default.\n     */\n    setCacheSize(size: number, numVisibleTiles?: number): void {\n        this.m_visibleTiles.setDataSourceCacheSize(size);\n        numVisibleTiles = numVisibleTiles !== undefined ? numVisibleTiles : size / 2;\n        this.m_visibleTiles.setNumberOfVisibleTiles(Math.floor(numVisibleTiles));\n        this.updateImages();\n        this.updateLighting();\n\n        this.m_textElementsRenderer.invalidateCache();\n\n        this.updateSkyBackground();\n        this.update();\n    }\n\n    /**\n     * Specfies whether extended frustum culling is enabled or disabled.\n     */\n    get extendedFrustumCulling(): boolean {\n        return this.m_options.extendedFrustumCulling !== undefined\n            ? this.m_visibleTileSetOptions.extendedFrustumCulling\n            : true;\n    }\n\n    /**\n     * Enable of disable extended frustum culling.\n     */\n    set extendedFrustumCulling(value: boolean) {\n        this.m_visibleTileSetOptions.extendedFrustumCulling = value;\n    }\n\n    /**\n     * Returns the status of frustum culling after each update.\n     */\n    get lockVisibleTileSet(): boolean {\n        return this.m_visibleTileSetLock;\n    }\n\n    /**\n     * Enable of disable frustum culling after each update.\n     */\n    set lockVisibleTileSet(value: boolean) {\n        this.m_visibleTileSetLock = value;\n    }\n\n    /**\n     * Gets the optional camera used to render the scene.\n     */\n    get pointOfView(): THREE.PerspectiveCamera | undefined {\n        return this.m_pointOfView;\n    }\n\n    /**\n     * Sets the optional camera used to render the scene.\n     */\n    set pointOfView(pointOfView: THREE.PerspectiveCamera | undefined) {\n        this.m_pointOfView = pointOfView;\n        this.update();\n    }\n\n    /**\n     * Loads a post effects definition file.\n     *\n     * @param postEffectsFile File URL describing the post effects.\n     */\n    loadPostEffects(postEffectsFile: string) {\n        fetch(postEffectsFile)\n            .then(response => response.json())\n            .then((postEffects: PostEffects) => {\n                this.m_postEffects = postEffects;\n                this.setPostEffects();\n            });\n    }\n\n    /**\n     * The abstraction of the [[MapRenderingManager]] API for post effects.\n     */\n    get postEffects(): PostEffects | undefined {\n        return this.m_postEffects;\n    }\n\n    set postEffects(postEffects: PostEffects | undefined) {\n        this.m_postEffects = postEffects;\n        this.setPostEffects();\n    }\n\n    /**\n     * Gets the current `Theme` used by this `MapView` to style map elements.\n     */\n    get theme(): Theme {\n        return this.m_theme;\n    }\n\n    /**\n     * Changes the `Theme` used by this `MapView` to style map elements.\n     */\n    set theme(theme: Theme) {\n        if (!ThemeLoader.isThemeLoaded(theme)) {\n            this.m_themeIsLoading = true;\n            // If theme is not yet loaded, let's set theme asynchronously\n            ThemeLoader.load(theme, { uriResolver: this.m_uriResolver })\n                .then(loadedTheme => {\n                    this.m_themeIsLoading = false;\n                    this.theme = loadedTheme;\n                })\n                .catch(error => {\n                    this.m_themeIsLoading = false;\n                    logger.error(`failed to set theme: ${error}`, error);\n                });\n            return;\n        }\n\n        // Fog and sky.\n        this.m_theme.fog = theme.fog;\n        this.m_theme.sky = theme.sky;\n        this.updateSkyBackground();\n        this.m_fog.reset(this.m_theme);\n\n        this.m_theme.lights = theme.lights;\n        this.updateLighting();\n\n        // Clear color.\n        this.m_theme.clearColor = theme.clearColor;\n        this.renderer.setClearColor(new THREE.Color(theme.clearColor));\n        // Images.\n        this.m_theme.images = theme.images;\n        this.m_theme.imageTextures = theme.imageTextures;\n        this.updateImages();\n\n        // POI tables.\n        this.m_theme.poiTables = theme.poiTables;\n        this.loadPoiTables();\n\n        // Text.\n        this.m_theme.textStyles = theme.textStyles;\n        this.m_theme.defaultTextStyle = theme.defaultTextStyle;\n        this.m_theme.fontCatalogs = theme.fontCatalogs;\n\n        this.resetTextRenderer();\n\n        if (Array.isArray(theme.priorities)) {\n            this.m_theme.priorities = theme.priorities;\n        }\n\n        if (Array.isArray(theme.labelPriorities)) {\n            this.m_theme.labelPriorities = theme.labelPriorities;\n        }\n\n        if (this.m_theme.styles === undefined) {\n            this.m_theme.styles = {};\n        }\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.setTheme(this.m_theme);\n        }\n        this.m_theme.styles = theme.styles || {};\n        this.m_theme.definitions = theme.definitions;\n\n        for (const dataSource of this.m_tileDataSources) {\n            dataSource.setTheme(this.m_theme);\n        }\n        THEME_LOADED_EVENT.time = Date.now();\n        this.dispatchEvent(THEME_LOADED_EVENT);\n        this.update();\n    }\n\n    /**\n     * [[UriResolver]] used to resolve application/deployment specific `URI`s into actual `URLs`\n     * that can be loaded with `fetch`.\n     */\n    get uriResolver(): UriResolver | undefined {\n        return this.m_uriResolver;\n    }\n\n    /**\n     * Gets the value of the forced custom camera aspect.\n     * Every time a frame is rendered, `MapView` resets the camera aspect.\n     *\n     * You can disable this behavior by setting the value to `undefined`.\n     */\n    get forceCameraAspect(): number | undefined {\n        return this.m_forceCameraAspect;\n    }\n\n    /**\n     * Sets the custom forced camera aspect ratio to use while rendering.\n     */\n    set forceCameraAspect(aspect: number | undefined) {\n        this.m_forceCameraAspect = aspect;\n    }\n\n    /**\n     * Maximum FPS. If defined (and > 0) it is the maximum FPS that is used.\n     */\n    set maxFps(fps: number) {\n        this.m_maxFps = Math.max(0, fps);\n    }\n\n    get maxFps(): number {\n        return Math.max(0, this.m_maxFps);\n    }\n\n    /**\n     * Lists the ISO 639-1 language codes for DataSources to use.\n     */\n    get languages(): string[] | undefined {\n        return this.m_languages;\n    }\n\n    /**\n     * Sets the list of ISO 639-1 language codes for DataSources to use.\n     */\n    set languages(languages: string[] | undefined) {\n        this.m_languages = languages;\n        this.m_tileDataSources.forEach((dataSource: DataSource) => {\n            dataSource.setLanguages(this.m_languages);\n        });\n        this.update();\n    }\n\n    get copyrightInfo(): CopyrightInfo[] {\n        return this.m_copyrightInfo;\n    }\n\n    /**\n     * @hidden\n     * Disable all fading animations (for debugging and performance measurement). Defaults to\n     * `false`.\n     */\n    set disableFading(disable: boolean) {\n        this.m_textElementsRenderer.disableFading = disable;\n    }\n\n    get disableFading(): boolean {\n        return this.m_textElementsRenderer.disableFading;\n    }\n\n    /**\n     * @hidden\n     * Return current frame number.\n     */\n    get frameNumber(): number {\n        return this.m_frameNumber;\n    }\n\n    /**\n     * @hidden\n     * Reset the frame number to 0.\n     */\n    resetFrameNumber() {\n        this.m_frameNumber = 0;\n        this.m_previousFrameTimeStamp = undefined;\n    }\n\n    /**\n     * Adds an event listener. There are various events that are sent before or after a new frame\n     * is rendered.\n     *\n     * @see [[MapViewEventNames]].\n     *\n     * @example\n     * ```TypeScript\n     * let frameCount = 0;\n     * mapView.addEventListener(MapViewEventNames.Render, () => {\n     *     ++frameCount;\n     * });\n     * ```\n     *\n     * @param type One of the [[MapViewEventNames]] strings.\n     * @param listener The callback invoked when the `MapView` needs to render a new frame.\n     */\n    addEventListener(type: MapViewEventNames, listener: (event: RenderEvent) => void): void;\n\n    addEventListener(type: string, listener: any): void {\n        super.addEventListener(type, listener);\n    }\n\n    /**\n     * Removes an event listener. There are various events that are sent before or after a new frame\n     * is rendered.\n     *\n     * @see [[MapViewEventNames]].\n     *\n     * @example\n     * ```TypeScript\n     * mapView.removeEventListener(MapViewEventNames.Render, listener);\n     * ```\n     *\n     * @param type One of the [[MapViewEventNames]] strings.\n     * @param listener The callback invoked when the `MapView` needs to render a new frame.\n     */\n    removeEventListener(type: MapViewEventNames, listener: (event: RenderEvent) => void): void;\n\n    removeEventListener(type: string, listener: any): void {\n        super.removeEventListener(type, listener);\n    }\n\n    /**\n     * The HTML canvas element used by this `MapView`.\n     */\n    get canvas(): HTMLCanvasElement {\n        return this.m_options.canvas;\n    }\n\n    /**\n     * The HTML canvas element used by this `MapView`.\n     */\n    get collisionDebugCanvas(): HTMLCanvasElement | undefined {\n        return this.m_collisionDebugCanvas;\n    }\n\n    /**\n     * The THREE.js scene used by this `MapView`.\n     */\n    get scene(): THREE.Scene {\n        return this.m_scene;\n    }\n\n    /**\n     * The THREE.js camera used by this `MapView` to render the main scene.\n     * @note When modifying the camera all derived properties like:\n     * - [[MapView.target]]\n     * - [[MapView.zoomLevel]]\n     * - [[MapView.tilt]]\n     * - [[MapView.heading]]\n     * could change.\n     * These properties are cached internaly and will only be updated in the next animation frame.\n     * FIXME: Unfortunatley THREE.js is not dispatching any events when camera properties change\n     * so we should have an API for enforcing update of cached values.\n     */\n    get camera(): THREE.PerspectiveCamera {\n        return this.m_camera;\n    }\n\n    /**\n     * The THREE.js `WebGLRenderer` used by this scene.\n     */\n    get renderer(): THREE.WebGLRenderer {\n        return this.m_renderer;\n    }\n\n    /**\n     * The color used to clear the view.\n     */\n    get clearColor() {\n        const rendererClearColor = this.m_renderer.getClearColor();\n        return rendererClearColor !== undefined ? rendererClearColor.getHex() : 0;\n    }\n\n    /**\n     * The color used to clear the view.\n     */\n    set clearColor(color: number) {\n        this.m_renderer.setClearColor(color);\n    }\n\n    /**\n     * The projection used to project geo coordinates to world coordinates.\n     */\n    get projection(): Projection {\n        return this.m_visibleTileSetOptions.projection;\n    }\n\n    /**\n     * Changes the projection at run time.\n     *\n     * @param projection The [[Projection]] instance to use.\n     */\n    set projection(projection: Projection) {\n        // Remember tilt and heading before setting the projection.\n        const tilt = this.tilt;\n        const heading = this.heading;\n\n        this.m_visibleTileSetOptions.projection = projection;\n        this.updatePolarDataSource();\n        this.clearTileCache();\n        this.textElementsRenderer.clearRenderStates();\n        this.m_visibleTiles = this.createVisibleTileSet();\n\n        this.lookAtImpl({ tilt, heading });\n    }\n\n    /**\n     * Get camera clipping planes evaluator used.\n     */\n    get clipPlanesEvaluator(): ClipPlanesEvaluator {\n        return this.m_visibleTileSetOptions.clipPlanesEvaluator;\n    }\n\n    /**\n     * Changes the clip planes evaluator at run time.\n     */\n    set clipPlanesEvaluator(clipPlanesEvaluator: ClipPlanesEvaluator) {\n        this.m_visibleTileSetOptions.clipPlanesEvaluator = clipPlanesEvaluator;\n    }\n\n    /**\n     * The distance (in pixels) between the screen and the camera.\n     */\n    get focalLength(): number {\n        return this.m_focalLength;\n    }\n\n    /**\n     * Get geo coordinates of camera focus (target) point.\n     * This point is not necessarily on the ground, i.e.:\n     *  - if the tilt is high and projection is [[sphereProjection]]\n     *  - if the camera was modified directly and is not pointing to the ground.\n     * In any case the projection of the target point will be in the center of the screen.\n     *\n     * @returns geo coordinates of the camera focus point.\n     */\n    get target(): GeoCoordinates {\n        return this.m_targetGeoPos;\n    }\n\n    /** @internal\n     * Get world coordinates of camera focus point.\n     *\n     * @note The focus point coordinates are updated with each camera update so you don't need\n     * to re-calculate it, although if the camera started looking to the void, the last focus\n     * point is stored.\n     *\n     * @returns world coordinates of the camera focus point.\n     */\n    get worldTarget(): THREE.Vector3 {\n        return this.m_targetWorldPos;\n    }\n\n    /** @internal\n     * Get distance from camera to the point of focus in world units.\n     *\n     * @note If camera does not point to any ground anymore the last focus point distance is\n     * then returned.\n     *\n     * @returns Last known focus point distance.\n     */\n    get targetDistance(): number {\n        return this.m_targetDistance;\n    }\n\n    /**\n     * Get object describing frustum planes distances and min/max visibility range for actual\n     * camera setup.\n     * Near and far plane distance are self explanatory while minimum and maximum visibility range\n     * describes the extreme near/far planes distances that may be achieved with current camera\n     * settings, meaning at current zoom level (ground distance) and any possible orientation.\n     * @note Visibility is directly related to camera [[ClipPlaneEvaluator]] used and determines\n     * the maximum possible distance of camera far clipping plane regardless of tilt, but may change\n     * whenever zoom level changes. Distance is measured in world units which may be approximately\n     * equal to meters, but this depends on the distortion related to projection type used.\n     * @internal\n     */\n    get viewRanges(): ViewRanges {\n        return this.m_viewRanges;\n    }\n\n    /**\n     * The position in geo coordinates of the center of the scene.\n     * @internal\n     */\n    get geoCenter(): GeoCoordinates {\n        return this.projection.unprojectPoint(this.m_camera.position).normalized();\n    }\n\n    /**\n     * The position in geo coordinates of the center of the scene.\n     * Longitude values outside of -180 and +180 are acceptable.\n     */\n    set geoCenter(geoCenter: GeoCoordinates) {\n        if (geoCenter.altitude !== undefined) {\n            this.projection.projectPoint(geoCenter, this.m_camera.position);\n        } else {\n            // Preserve the current altitude\n            const altitude = this.geoCenter.altitude;\n\n            this.projection.projectPoint(\n                new GeoCoordinates(geoCenter.latitude, geoCenter.longitude, altitude),\n                this.m_camera.position\n            );\n        }\n\n        this.update();\n    }\n\n    /**\n     * The node in this MapView's scene containing the user [[MapAnchor]]s.\n     * All (first level) children of this node will be positioned in world space according to the\n     * [[MapAnchor.geoPosition]].\n     * Deeper level children can be used to position custom objects relative to the anchor node.\n     */\n    get mapAnchors(): THREE.Object3D {\n        return this.m_mapAnchors;\n    }\n\n    /**\n     * The position in world coordinates of the center of the scene.\n     */\n    get worldCenter(): THREE.Vector3 {\n        return this.m_camera.position;\n    }\n\n    /**\n     * Get the [[PickHandler]] for this `mapView`.\n     */\n    get pickHandler(): PickHandler {\n        return this.m_pickHandler;\n    }\n\n    /**\n     * Get the [[ImageCache]] that belongs to this `MapView`.\n     */\n    get imageCache(): MapViewImageCache {\n        return this.m_imageCache;\n    }\n\n    /**\n     * @hidden\n     * Get the [[PoiManager]] that belongs to this `MapView`.\n     */\n    get poiManager(): PoiManager {\n        return this.m_poiManager;\n    }\n\n    /**\n     * @hidden\n     * Get the array of [[PoiTableManager]] that belongs to this `MapView`.\n     */\n    get poiTableManager(): PoiTableManager {\n        return this.m_poiTableManager;\n    }\n\n    /**\n     * The minimum camera height in meters.\n     */\n    get minCameraHeight(): number {\n        return this.m_minCameraHeight;\n    }\n\n    /**\n     * The minimum zoom level.\n     */\n    get minZoomLevel(): number {\n        return this.m_minZoomLevel;\n    }\n\n    /**\n     * The minimum zoom level.\n     */\n    set minZoomLevel(zoomLevel: number) {\n        this.m_minZoomLevel = zoomLevel;\n        this.update();\n    }\n\n    /**\n     * The maximum zoom level. Default is 14.\n     */\n    get maxZoomLevel(): number {\n        return this.m_maxZoomLevel;\n    }\n\n    /**\n     * The maximum zoom level.\n     */\n    set maxZoomLevel(zoomLevel: number) {\n        this.m_maxZoomLevel = zoomLevel;\n        this.update();\n    }\n\n    /**\n     * Returns the zoom level for the given camera setup.\n     */\n    get zoomLevel(): number {\n        return this.m_zoomLevel;\n    }\n\n    set zoomLevel(zoomLevel: number) {\n        this.lookAtImpl({ zoomLevel });\n    }\n\n    /**\n     * Returns tilt angle in degrees.\n     */\n    get tilt(): number {\n        return THREE.MathUtils.radToDeg(this.m_pitch);\n    }\n\n    /**\n     * Set the tilt angle of the map.\n     * @param tilt: New tilt angle in degrees.\n     */\n    set tilt(tilt: number) {\n        this.lookAtImpl({ tilt });\n    }\n\n    /**\n     * Returns heading angle in degrees.\n     */\n    get heading(): number {\n        return -THREE.MathUtils.radToDeg(this.m_yaw);\n    }\n\n    /**\n     * Set the heading angle of the map.\n     * @param heading: New heading angle in degrees.\n     */\n    set heading(heading: number) {\n        this.lookAtImpl({ heading });\n    }\n\n    /**\n     * Environment used to evaluate dynamic scene expressions.\n     */\n    get env(): Env {\n        return this.m_env;\n    }\n\n    /**\n     * Returns the storage level for the given camera setup.\n     * Actual storage level of the rendered data also depends on [[DataSource.storageLevelOffset]].\n     */\n    get storageLevel(): number {\n        return THREE.MathUtils.clamp(\n            Math.floor(this.m_zoomLevel),\n            this.m_minZoomLevel,\n            this.m_maxZoomLevel\n        );\n    }\n\n    /**\n     * Returns height of the viewport in pixels.\n     */\n    get viewportHeight(): number {\n        return this.canvas.height;\n    }\n\n    /**\n     * Returns `true` if the native WebGL antialiasing is enabled.\n     *\n     * @default `true` for `pixelRatio` < `2.0`, `false` otherwise.\n     */\n    get nativeWebglAntialiasEnabled(): boolean {\n        return this.m_options.enableNativeWebglAntialias === undefined\n            ? this.pixelRatio < 2.0\n            : this.m_options.enableNativeWebglAntialias;\n    }\n\n    /**\n     * Returns [[DataSource]]s displayed by this `MapView`.\n     */\n    get dataSources(): DataSource[] {\n        return this.m_tileDataSources;\n    }\n\n    /**\n     * Set's the way in which the fov is calculated on the map view. Note, for\n     * this to take visual effect, the map should be rendered after calling this\n     * function.\n     * @param fovCalculation How the FOV is calculated.\n     */\n    setFovCalculation(fovCalculation: FovCalculation) {\n        this.m_options.fovCalculation = fovCalculation;\n        this.calculateFocalLength(this.m_renderer.getSize(cache.vector2[0]).height);\n        this.updateCameras();\n    }\n\n    /**\n     * Returns the unique [[DataSource]] matching the given name.\n     */\n    getDataSourceByName(dataSourceName: string): DataSource | undefined {\n        return this.m_tileDataSources.find(ds => ds.name === dataSourceName);\n    }\n\n    /**\n     * Returns the array of [[DataSource]]s referring to the same [[StyleSet]].\n     */\n    getDataSourcesByStyleSetName(styleSetName: string): DataSource[] {\n        return this.m_tileDataSources.filter(ds => ds.styleSetName === styleSetName);\n    }\n\n    /**\n     * Returns true if the specified [[DataSource]] is enabled.\n     */\n    isDataSourceEnabled(dataSource: DataSource): boolean {\n        return (\n            dataSource.enabled &&\n            dataSource.ready() &&\n            this.m_connectedDataSources.has(dataSource.name) &&\n            dataSource.isVisible(this.zoomLevel)\n        );\n    }\n\n    /**\n     * Adds a new [[DataSource]] to this `MapView`. `MapView` needs at least one [[DataSource]] to\n     * display something.\n     *\n     * @param dataSource The data source.\n     */\n    addDataSource(dataSource: DataSource): Promise<void> {\n        const twinDataSource = this.getDataSourceByName(dataSource.name);\n        if (twinDataSource !== undefined) {\n            throw new Error(\n                `A DataSource with the name \"${dataSource.name}\" already exists in this MapView.`\n            );\n        }\n\n        dataSource.attach(this);\n        dataSource.setEnableElevationOverlay(this.m_elevationProvider !== undefined);\n        this.m_tileDataSources.push(dataSource);\n\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.updateStorageLevelOffset();\n        }\n\n        return dataSource\n            .connect()\n            .then(() => {\n                return new Promise(resolve => {\n                    if (this.theme !== undefined && this.theme.styles !== undefined) {\n                        resolve();\n                        return;\n                    }\n\n                    const resolveOnce = () => {\n                        this.removeEventListener(MapViewEventNames.ThemeLoaded, resolveOnce);\n                        resolve();\n                    };\n\n                    this.addEventListener(MapViewEventNames.ThemeLoaded, resolveOnce);\n                });\n            })\n            .then(() => {\n                const alreadyRemoved = this.m_tileDataSources.indexOf(dataSource) === -1;\n                if (alreadyRemoved) {\n                    return;\n                }\n                dataSource.addEventListener(MapViewEventNames.Update, () => {\n                    this.update();\n                });\n\n                dataSource.setTheme(this.m_theme);\n\n                this.m_connectedDataSources.add(dataSource.name);\n\n                this.dispatchEvent({\n                    type: MapViewEventNames.DataSourceConnect,\n                    dataSourceName: dataSource.name\n                });\n\n                this.update();\n            })\n            .catch(error => {\n                logger.error(\n                    `Failed to connect to datasource ${dataSource.name}: ${error.message}`\n                );\n\n                this.m_failedDataSources.add(dataSource.name);\n                this.dispatchEvent({\n                    type: MapViewEventNames.DataSourceConnect,\n                    dataSourceName: dataSource.name,\n                    error\n                });\n            });\n    }\n\n    /**\n     * Removes [[DataSource]] from this `MapView`.\n     *\n     * @param dataSource The data source to be removed\n     */\n    removeDataSource(dataSource: DataSource) {\n        const dsIndex = this.m_tileDataSources.indexOf(dataSource);\n        if (dsIndex === -1) {\n            return;\n        }\n        dataSource.detach(this);\n\n        this.m_visibleTiles.removeDataSource(dataSource);\n        this.m_tileDataSources.splice(dsIndex, 1);\n        this.m_connectedDataSources.delete(dataSource.name);\n        this.m_failedDataSources.delete(dataSource.name);\n\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.updateStorageLevelOffset();\n        }\n\n        this.update();\n    }\n\n    /**\n     * Access the `VisibleTileSet` to get access to all current datasources and their visible tiles.\n     */\n    get visibleTileSet(): VisibleTileSet {\n        return this.m_visibleTiles;\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    addOverlayText(textElements: TextElement[]): void {\n        this.m_textElementsRenderer.addOverlayText(textElements);\n        this.update();\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    clearOverlayText(): void {\n        this.m_textElementsRenderer.clearOverlayText();\n    }\n\n    /**\n     * The method that sets the camera to the desired angle (`tiltDeg`) and `distance` (in meters)\n     * to the `target` location, from a certain heading (`headingAngle`).\n     *\n     * @param target The location to look at.\n     * @param distance The distance of the camera to the target in meters.\n     * @param tiltDeg The camera tilt angle in degrees (0 is vertical), curbed below 89deg\n     *                @default 0\n     * @param headingDeg The camera heading angle in degrees and clockwise (as opposed to yaw)\n     *                   @default 0\n     * starting north.\n     * @deprecated Use lookAt version with [[LookAtParams]] object parameter.\n     */\n    lookAt(target: GeoCoordLike, distance: number, tiltDeg?: number, headingDeg?: number): void;\n\n    /**\n     * Adjusts the camera to look at a given geo coordinate with tilt and heading angles.\n     * @param params LookAtParams\n     */\n    lookAt(params: Partial<LookAtParams>): void;\n\n    lookAt(\n        targetOrParams: GeoCoordLike | Partial<LookAtParams>,\n        distance?: number,\n        tiltDeg?: number,\n        headingDeg?: number\n    ): void {\n        if (isGeoCoordinatesLike(targetOrParams)) {\n            const zoomLevel =\n                distance !== undefined\n                    ? MapViewUtils.calculateZoomLevelFromDistance(this, distance)\n                    : undefined;\n\n            const params: Partial<LookAtParams> = {\n                target: targetOrParams,\n                zoomLevel,\n                tilt: tiltDeg,\n                heading: headingDeg\n            };\n            this.lookAtImpl(params);\n        } else if (typeof targetOrParams === \"object\") {\n            this.lookAtImpl(targetOrParams as Partial<LookAtParams>);\n        }\n    }\n\n    /**\n     * Moves the camera to the specified [[GeoCoordinates]], sets the desired `zoomLevel` and\n     * adjusts the yaw and pitch. The pitch of the camera is always curbed so that the camera cannot\n     * look above the horizon. This paradigm is necessary in [[MapControls]], where the center of \\\n     * the screen is used for the orbiting interaction (3 fingers / right mouse button).\n     *\n     * @param geoPos Geolocation to move the camera to.\n     * @param zoomLevel Desired zoom level.\n     * @param yawDeg Camera yaw in degrees, counter-clockwise (as opposed to heading), starting\n     * north.\n     * @param pitchDeg Camera pitch in degrees.\n     * @deprecated Use [[MapView.lookAt]] instead.\n     */\n    setCameraGeolocationAndZoom(\n        geoPos: GeoCoordinates,\n        zoomLevel: number,\n        yawDeg: number = 0,\n        pitchDeg: number = 0\n    ): void {\n        this.geoCenter = geoPos;\n        let limitedPitch = Math.min(MapViewUtils.MAX_TILT_DEG, pitchDeg);\n        if (this.projection.type === ProjectionType.Spherical) {\n            const maxPitchRadWithCurvature = Math.asin(\n                EarthConstants.EQUATORIAL_RADIUS /\n                    (MapViewUtils.calculateDistanceToGroundFromZoomLevel(this, zoomLevel) +\n                        EarthConstants.EQUATORIAL_RADIUS)\n            );\n            const maxPitchDegWithCurvature = THREE.MathUtils.radToDeg(maxPitchRadWithCurvature);\n            limitedPitch = Math.min(limitedPitch, maxPitchDegWithCurvature);\n        }\n        MapViewUtils.zoomOnTargetPosition(this, 0, 0, zoomLevel);\n        MapViewUtils.setRotation(this, yawDeg, limitedPitch);\n        this.update();\n    }\n\n    /**\n     * Updates the value of a dynamic property.\n     *\n     * Property names starting with a `$`-sign are reserved and any attempt to change their value\n     * will result in an error.\n     *\n     * Themes can access dynamic properties using the `Expr` operator `[\"dynamic-properties\"]`,\n     * for example:\n     *\n     *   `[\"get\", \"property name\", [\"dynamic-properties\"]]`\n     *\n     * @param name The name of the property.\n     * @param value The value of the property.\n     */\n    setDynamicProperty(name: string, value: Value) {\n        if (name.startsWith(\"$\")) {\n            throw new Error(`failed to update the value of the dynamic property '${name}'`);\n        }\n        this.m_env.entries[name] = value;\n        this.update();\n    }\n\n    /**\n     * Removes the given dynamic property from this [[MapView]].\n     *\n     * Property names starting with a `$`-sign are reserved and any attempt to change their value\n     * will result in an error.\n     *\n     * @param name The name of the property to remove.\n     */\n    removeDynamicProperty(name: string) {\n        if (name.startsWith(\"$\")) {\n            throw new Error(`failed to remove the dynamic property '${name}'`);\n        }\n        delete this.m_env.entries[name];\n        this.update();\n    }\n\n    /**\n     * Returns `true` if this `MapView` is constantly redrawing the scene.\n     */\n    get animating(): boolean {\n        return this.m_animationCount > 0;\n    }\n\n    /**\n     * Begin animating the scene.\n     */\n    beginAnimation() {\n        if (this.m_animationCount++ === 0) {\n            if (!this.m_updatePending) {\n                this.m_updatePending = true;\n                this.drawFrame();\n            }\n            ANIMATION_STARTED_EVENT.time = Date.now();\n            this.dispatchEvent(ANIMATION_STARTED_EVENT);\n        }\n    }\n\n    /**\n     * Stop animating the scene.\n     */\n    endAnimation() {\n        if (this.m_animationCount > 0) {\n            --this.m_animationCount;\n        }\n\n        if (this.m_animationCount === 0) {\n            ANIMATION_FINISHED_EVENT.time = Date.now();\n            this.dispatchEvent(ANIMATION_FINISHED_EVENT);\n        }\n    }\n\n    /**\n     * Returns `true` if the camera moved in the last frame.\n     */\n    get cameraIsMoving() {\n        return this.m_movementDetector.cameraIsMoving;\n    }\n\n    /**\n     * Returns `true` if the current frame will immediately be followed by another frame.\n     */\n    get isDynamicFrame(): boolean {\n        return (\n            this.cameraIsMoving ||\n            this.animating ||\n            this.m_updatePending ||\n            this.m_animatedExtrusionHandler.isAnimating\n        );\n    }\n\n    /**\n     * Returns the ratio between a pixel and a world unit for the current camera (in the center of\n     * the camera projection).\n     */\n    get pixelToWorld(): number {\n        if (this.m_pixelToWorld === undefined) {\n            // At this point fov calculation should be always defined.\n            assert(this.m_options.fovCalculation !== undefined);\n            // NOTE: Look at distance is the distance to camera focus (and pivot) point.\n            // In screen space this point is located in the center of canvas.\n            // Given that zoom level is not modified (clamped by camera pitch), the following\n            // formulas are all equivalent:\n            // lookAtDistance = (EQUATORIAL_CIRCUMFERENCE * focalLength) / (256 * zoomLevel^2);\n            // lookAtDistance = abs(cameraPos.z) / cos(cameraPitch);\n            // Here we may use precalculated target distance (once pre frame):\n            const lookAtDistance = this.m_targetDistance;\n\n            // Find world space object size that corresponds to one pixel on screen.\n            this.m_pixelToWorld = MapViewUtils.calculateWorldSizeByFocalLength(\n                this.m_focalLength,\n                lookAtDistance,\n                1\n            );\n        }\n        return this.m_pixelToWorld;\n    }\n\n    /**\n     * Returns the ratio between a world and a pixel unit for the current camera (in the center of\n     * the camera projection).\n     */\n    get worldToPixel() {\n        return 1.0 / this.pixelToWorld;\n    }\n\n    get pixelRatio(): number {\n        if (this.m_pixelRatio !== undefined) {\n            return this.m_pixelRatio;\n        }\n        return typeof window !== \"undefined\" && window.devicePixelRatio !== undefined\n            ? window.devicePixelRatio\n            : 1.0;\n    }\n\n    /**\n     * PixelRatio in the WebGlRenderer. May contain values > 1.0 for high resolution screens\n     * (HiDPI).\n     *\n     * A value of `undefined` will make the getter return `window.devicePixelRatio`, setting a value\n     * of `1.0` will disable the use of HiDPI on all devices.\n     *\n     * @note Since the current pixelRatio may have been used in some calculations (e.g. the icons)\n     * they may appear in the wrong size now. To ensure proper display of data, a call to\n     * `clearTileCache()` is required if the pixelRatio is changed after tiles have been loaded.\n     *\n     * @memberof MapView\n     */\n    set pixelRatio(pixelRatio: number) {\n        this.m_pixelRatio = pixelRatio;\n        if (this.renderer.getPixelRatio() !== this.pixelRatio) {\n            this.renderer.setPixelRatio(this.pixelRatio);\n        }\n    }\n\n    /**\n     * PixelRatio ratio for rendering when the camera is moving or an animation is running. Useful\n     * when rendering on high resolution displays with low performance GPUs that may be\n     * fill-rate-limited.\n     *\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. Values between 0.5 and\n     * `window.devicePixelRatio` can be tried to give  good results. The value should not be larger\n     * than `window.devicePixelRatio`.\n     *\n     * @note Since no anti-aliasing is applied during dynamic rendering with `dynamicPixelRatio`\n     * defined, visual artifacts may occur, especially with thin lines..\n     *\n     * @note The resolution of icons and text labels is not affected.\n     *\n     * @default `undefined`\n     */\n    set dynamicPixelRatio(ratio: number | undefined) {\n        this.mapRenderingManager.lowResPixelRatio = ratio;\n    }\n\n    get dynamicPixelRatio(): number | undefined {\n        return this.mapRenderingManager.lowResPixelRatio;\n    }\n\n    /**\n     * Returns the screen position of the given geo coordinates.\n     *\n     * @param geoPos The geo coordinates.\n     * @returns The screen position in CSS/client coordinates (no pixel ratio applied) or\n     * `undefined`.\n     */\n    getScreenPosition(geoPos: GeoCoordinates): THREE.Vector2 | undefined {\n        this.projection.projectPoint(geoPos, cache.vector3[0]);\n        const p = this.m_screenProjector.project(cache.vector3[0]);\n        if (p !== undefined) {\n            const { width, height } = this.getCanvasClientSize();\n            p.x = p.x + width / 2;\n            p.y = height - (p.y + height / 2);\n        }\n        return p;\n    }\n\n    /**\n     * Returns a ray caster using the supplied screen positions.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     *\n     * @alpha\n     *\n     * @return Raycaster with origin at the camera and direction based on the supplied x / y screen\n     * points.\n     */\n    raycasterFromScreenPoint(x: number, y: number): THREE.Raycaster {\n        this.m_raycaster.setFromCamera(this.getNormalizedScreenCoordinates(x, y), this.m_rteCamera);\n        return this.m_raycaster;\n    }\n\n    /**\n     * Returns the world space position from the given screen position. The return value can be\n     * `null`, in case the camera is facing the horizon and the given `(x, y)` value is not\n     * intersecting the ground plane.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getWorldPositionAt(x: number, y: number): THREE.Vector3 | null {\n        this.m_raycaster.setFromCamera(this.getNormalizedScreenCoordinates(x, y), this.m_camera);\n        return this.projection.type === ProjectionType.Spherical\n            ? this.m_raycaster.ray.intersectSphere(this.m_sphere, cache.vector3[0])\n            : this.m_raycaster.ray.intersectPlane(this.m_plane, cache.vector3[0]);\n    }\n\n    /**\n     * Returns the [[GeoCoordinates]] from the given screen position. The return value can be\n     * `null`, in case the camera is facing the horizon and the given `(x, y)` value is not\n     * intersecting the ground plane.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getGeoCoordinatesAt(x: number, y: number): GeoCoordinates | null {\n        const worldPosition = this.getWorldPositionAt(x, y);\n        if (!worldPosition) {\n            return null;\n        }\n        return this.projection.unprojectPoint(worldPosition);\n    }\n\n    /**\n     * Returns the normalized screen coordinates from the given pixel position.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getNormalizedScreenCoordinates(x: number, y: number): THREE.Vector3 {\n        // use clientWidth and clientHeight as it does not apply the pixelRatio and\n        // therefore supports also HiDPI devices\n        const { width, height } = this.getCanvasClientSize();\n        return new THREE.Vector3((x / width) * 2 - 1, -((y / height) * 2) + 1, 0);\n    }\n\n    /**\n     * Do a raycast on all objects in the scene. Useful for picking. Limited to objects that\n     * THREE.js can raycast, the solid lines that get their geometry in the shader cannot be tested\n     * for intersection.\n     *\n     * Note, if a [[DataSource]] adds an [[Object3D]] to a [[Tile]], it will be only pickable once\n     * [[MapView.render]] has been called, this is because [[MapView.render]] method creates the\n     * internal three.js root [[Object3D]] which is used in the [[PickHandler]] internally.\n     * This method will not test for intersection custom objects added to the scene by for\n     * example calling directly the [[scene.add]] method from THREE.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     * @returns The list of intersection results.\n     */\n    intersectMapObjects(x: number, y: number): PickResult[] {\n        return this.m_pickHandler.intersectMapObjects(x, y);\n    }\n\n    /**\n     * Resize the HTML canvas element and the THREE.js `WebGLRenderer`.\n     *\n     * @param width The new width.\n     * @param height The new height.\n     */\n    resize(width: number, height: number) {\n        this.m_renderer.setSize(width, height, false);\n        if (this.m_renderer.getPixelRatio() !== this.pixelRatio) {\n            this.m_renderer.setPixelRatio(this.pixelRatio);\n        }\n\n        if (this.mapRenderingManager !== undefined) {\n            this.mapRenderingManager.setSize(width, height);\n        }\n\n        if (this.collisionDebugCanvas !== undefined) {\n            this.collisionDebugCanvas.width = width;\n            this.collisionDebugCanvas.height = height;\n        }\n\n        this.updateCameras();\n        this.update();\n\n        this.dispatchEvent({\n            type: MapViewEventNames.Resize,\n            size: {\n                width,\n                height\n            }\n        });\n    }\n\n    /**\n     * Redraws scene immediately\n     *\n     * @note Before using this method, set `synchronousRendering` to `true`\n     * in the [[MapViewOptions]]\n     */\n    renderSync() {\n        this.renderFunc(PerformanceTimer.now());\n    }\n\n    /**\n     * Requests a redraw of the scene.\n     */\n    update() {\n        this.dispatchEvent(UPDATE);\n\n        if (this.m_updatePending) {\n            return;\n        } // compress the update request\n\n        this.m_updatePending = true;\n\n        if (this.animating) {\n            return;\n        } // nothing to do\n\n        this.drawFrame();\n    }\n\n    /**\n     * Returns `true` if an update has already been requested, such that after a currently rendering\n     * frame, the next frame will be rendered immediately.\n     */\n    get updatePending(): boolean {\n        return this.m_updatePending;\n    }\n\n    /**\n     * Requests a redraw of the scene.\n     * @deprecated Use the [[update]] method instead.\n     */\n    requestUpdateIfNeeded() {\n        this.update();\n    }\n\n    /**\n     * Clear the tile cache.\n     *\n     * Remove the [[Tile]] objects created by cacheable [[DataSource]]s. If a [[DataSource]] name is\n     * provided, this method restricts the eviction the [[DataSource]] with the given name.\n     *\n     * @param dataSourceName The name of the [[DataSource]].\n     */\n    clearTileCache(dataSourceName?: string) {\n        if (this.m_visibleTiles === undefined) {\n            // This method is called in the shadowsEnabled function, which is initialized in the\n            // setupRenderer function,\n            return;\n        }\n        if (dataSourceName !== undefined) {\n            const dataSource = this.getDataSourceByName(dataSourceName);\n            if (dataSource) {\n                this.m_visibleTiles.clearTileCache(dataSource);\n                dataSource.clearCache();\n            }\n        } else {\n            this.m_visibleTiles.clearTileCache();\n            this.m_tileDataSources.forEach(dataSource => dataSource.clearCache());\n        }\n\n        if (this.m_elevationProvider !== undefined) {\n            this.m_elevationProvider.clearCache();\n        }\n    }\n\n    /**\n     * Apply visitor to all visible tiles.\n     *\n     * @param fun Visitor function\n     */\n    forEachVisibleTile(fun: (tile: Tile) => void) {\n        this.m_visibleTiles.forEachVisibleTile(fun);\n    }\n\n    /**\n     * Apply a visitor function to all tiles in the cache.\n     *\n     * @param visitor Visitor function\n     */\n    forEachCachedTile(visitor: (tile: Tile) => void) {\n        this.m_visibleTiles.forEachCachedTile(visitor);\n    }\n\n    /**\n     * Visit each tile in visible, rendered, and cached sets.\n     *\n     *  * Visible and temporarily rendered tiles will be marked for update and retained.\n     *  * Cached but not rendered/visible will be evicted.\n     *\n     * @param dataSource If passed, only the tiles from this [[DataSource]] instance are processed.\n     * If `undefined`, tiles from all [[DataSource]]s are processed.\n     */\n    markTilesDirty(dataSource?: DataSource) {\n        this.m_visibleTiles.markTilesDirty(dataSource);\n    }\n\n    /**\n     * Sets the DataSource which contains the elevations, the elevation range source, and the\n     * elevation provider. Only a single elevation source is possible per [[MapView]]\n     *\n     * If the terrain-datasource is merged with this repository, we could internally construct\n     * the [[ElevationRangeSource]] and the [[ElevationProvider]] and access would be granted to\n     * the application when it asks for it, to simplify the API.\n     *\n     * @param elevationSource The datasource containing the terrain tiles.\n     * @param elevationRangeSource Allows access to the elevation min / max per tile.\n     * @param elevationProvider Allows access to the elevation at a given location or a ray\n     *      from the camera.\n     */\n    async setElevationSource(\n        elevationSource: DataSource,\n        elevationRangeSource: ElevationRangeSource,\n        elevationProvider: ElevationProvider\n    ) {\n        // Remove previous elevation source if present\n        if (this.m_elevationSource && this.m_elevationSource !== elevationSource) {\n            this.removeDataSource(this.m_elevationSource);\n        }\n\n        // Add as datasource if it was not added before\n        const isPresent = this.m_tileDataSources.indexOf(elevationSource) !== -1;\n        if (!isPresent) {\n            await this.addDataSource(elevationSource);\n        }\n        this.m_elevationSource = elevationSource;\n        this.m_elevationRangeSource = elevationRangeSource;\n        if (!this.m_elevationRangeSource.ready()) {\n            await this.m_elevationRangeSource.connect();\n        }\n        this.m_elevationProvider = elevationProvider;\n        this.dataSources.forEach(dataSource => {\n            dataSource.setEnableElevationOverlay(true);\n        });\n        this.m_tileGeometryManager.setTileUpdateCallback((tile: Tile) => {\n            overlayOnElevation(tile);\n        });\n        this.clearTileCache();\n    }\n\n    /**\n     * Clears any elevation sources and provider previously set.\n     * @param elevationSource The datasource to be cleared.\n     */\n    clearElevationSource(elevationSource: DataSource) {\n        this.removeDataSource(elevationSource);\n        this.m_elevationSource = undefined;\n        this.m_elevationRangeSource = undefined;\n        this.m_elevationProvider = undefined;\n        this.dataSources.forEach(dataSource => {\n            dataSource.setEnableElevationOverlay(false);\n        });\n        this.m_tileGeometryManager.setTileUpdateCallback(undefined);\n        this.clearTileCache();\n    }\n\n    /**\n     * Public access to [[MapViewFog]] allowing to toggle it by setting its `enabled` property.\n     */\n    get fog(): MapViewFog {\n        return this.m_fog;\n    }\n\n    private setPostEffects() {\n        // First clear all the effects, then enable them from what is specified.\n        this.mapRenderingManager.bloom.enabled = false;\n        this.mapRenderingManager.outline.enabled = false;\n        this.mapRenderingManager.vignette.enabled = false;\n        this.mapRenderingManager.sepia.enabled = false;\n\n        if (this.m_postEffects !== undefined) {\n            if (this.m_postEffects.bloom !== undefined) {\n                this.mapRenderingManager.bloom = this.m_postEffects.bloom;\n            }\n            if (this.m_postEffects.outline !== undefined) {\n                this.mapRenderingManager.outline.enabled = this.m_postEffects.outline.enabled;\n                this.mapRenderingManager.updateOutline(this.m_postEffects.outline);\n            }\n            if (this.m_postEffects.vignette !== undefined) {\n                this.mapRenderingManager.vignette = this.m_postEffects.vignette;\n            }\n            if (this.m_postEffects.sepia !== undefined) {\n                this.mapRenderingManager.sepia = this.m_postEffects.sepia;\n            }\n        }\n    }\n\n    /**\n     * Returns the elevation provider.\n     */\n    get elevationProvider(): ElevationProvider | undefined {\n        return this.m_elevationProvider;\n    }\n\n    get shadowsEnabled(): boolean {\n        return this.m_options.enableShadows === true;\n    }\n\n    set shadowsEnabled(enabled: boolean) {\n        // shadowMap is undefined if we are testing (three.js always set it to be defined).\n        if (\n            this.m_renderer.shadowMap === undefined ||\n            enabled === this.m_renderer.shadowMap.enabled\n        ) {\n            return;\n        }\n        this.m_options.enableShadows = enabled;\n        // There is a bug in three.js where this doesn't currently work once enabled.\n        this.m_renderer.shadowMap.enabled = enabled;\n        // TODO: Make this configurable. Note, there is currently issues when using the\n        // VSMShadowMap type, this should be investigated if this type is requested.\n        this.m_renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        this.clearTileCache();\n    }\n\n    private extractAttitude() {\n        const camera = this.m_camera;\n        const projection = this.projection;\n\n        const cameraPos = cache.vector3[1];\n        const transform = cache.transform[0];\n        const tangentSpaceMatrix = cache.matrix4[1];\n        // 1. Build the matrix of the tangent space of the camera.\n        cameraPos.setFromMatrixPosition(camera.matrixWorld); // Ensure using world position.\n        projection.localTangentSpace(projection.unprojectPoint(cameraPos), transform);\n        tangentSpaceMatrix.makeBasis(transform.xAxis, transform.yAxis, transform.zAxis);\n\n        // 2. Change the basis of matrixWorld to the tangent space to get the new base axes.\n        cache.matrix4[0].getInverse(tangentSpaceMatrix).multiply(camera.matrixWorld);\n        transform.xAxis.setFromMatrixColumn(cache.matrix4[0], 0);\n        transform.yAxis.setFromMatrixColumn(cache.matrix4[0], 1);\n        transform.zAxis.setFromMatrixColumn(cache.matrix4[0], 2);\n\n        // 3. Deduce orientation from the base axes.\n        let yaw = 0;\n        let pitch = 0;\n        let roll = 0;\n\n        // Decompose rotation matrix into Z0 X Z1 Euler angles.\n        const epsilon = 1e-10;\n        const d = transform.zAxis.dot(cameraPos.set(0, 0, 1));\n        if (d < 1.0 - epsilon) {\n            if (d > -1.0 + epsilon) {\n                yaw = Math.atan2(transform.zAxis.x, -transform.zAxis.y);\n                pitch = Math.acos(transform.zAxis.z);\n                roll = Math.atan2(transform.xAxis.x, transform.yAxis.z);\n            } else {\n                // Looking bottom-up with space.z.z == -1.0\n                yaw = -Math.atan2(-transform.yAxis.x, transform.xAxis.x);\n                pitch = 180;\n                roll = 0;\n            }\n        } else {\n            // Looking top-down with space.z.z == 1.0\n            yaw = Math.atan2(-transform.yAxis.x, transform.xAxis.x);\n            pitch = 0.0;\n            roll = 0.0;\n        }\n\n        return {\n            yaw,\n            pitch,\n            roll\n        };\n    }\n\n    private lookAtImpl(params: Partial<LookAtParams>): void {\n        const tilt = Math.min(getOptionValue(params.tilt, this.tilt), MapViewUtils.MAX_TILT_DEG);\n        const target = GeoCoordinates.fromObject(getOptionValue(params.target, this.target));\n        const heading = getOptionValue(params.heading, this.heading);\n\n        const distance =\n            params.zoomLevel !== undefined\n                ? MapViewUtils.calculateDistanceFromZoomLevel(\n                      this,\n                      THREE.MathUtils.clamp(\n                          params.zoomLevel,\n                          this.m_minZoomLevel,\n                          this.m_maxZoomLevel\n                      )\n                  )\n                : params.distance !== undefined\n                ? params.distance\n                : this.m_targetDistance;\n\n        // MapViewUtils#setRotation uses pitch, not tilt, which is different in sphere projection.\n        // But in sphere, in the tangent space of the target of the camera, pitch = tilt. So, put\n        // the camera on the target, so the tilt can be passed to getRotation as a pitch.\n        MapViewUtils.getCameraRotationAtTarget(\n            this.projection,\n            target,\n            -heading,\n            tilt,\n            this.camera.quaternion\n        );\n        MapViewUtils.getCameraPositionFromTargetCoordinates(\n            target,\n            distance,\n            -heading,\n            tilt,\n            this.projection,\n            this.camera.position\n        );\n        this.camera.updateMatrixWorld(true);\n\n        // Make sure to update all properties that are accessable via API (e.g. zoomlevel) b/c\n        // otherwise they would be updated as recently as in the next animation frame.\n        this.updateLookAtSettings();\n        this.update();\n    }\n\n    /**\n     * Plug-in PolarTileDataSource for spherical projection and plug-out otherwise\n     */\n    private updatePolarDataSource() {\n        const dataSource = this.m_polarDataSource;\n        if (this.m_enablePolarDataSource === true && dataSource !== undefined) {\n            const twinDataSource = this.getDataSourceByName(dataSource.name);\n\n            if (this.projection.type === ProjectionType.Spherical) {\n                if (twinDataSource === undefined) {\n                    this.addDataSource(dataSource);\n                }\n            } else {\n                if (twinDataSource !== undefined) {\n                    this.removeDataSource(dataSource);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates the camera and the projections and resets the screen collisions,\n     * note, setupCamera must be called before this is called.\n     * @param viewRanges optional parameter that supplies new view ranges, most importantly\n     * near/far clipping planes distance. If parameter is not provided view ranges will be\n     * calculated from [[ClipPlaneEvaluator]] used in [[VisibleTileSet]].\n     */\n    private updateCameras(viewRanges?: ViewRanges) {\n        // Update look at settings first, so that other components (e.g. ClipPlanesEvaluator) get\n        // the up to date tilt, targetDistance, ...\n        this.m_camera.updateMatrixWorld(false);\n        this.updateLookAtSettings();\n\n        const { width, height } = this.m_renderer.getSize(cache.vector2[0]);\n        this.m_camera.aspect =\n            this.m_forceCameraAspect !== undefined ? this.m_forceCameraAspect : width / height;\n        this.setFovOnCamera(this.m_options.fovCalculation!, height);\n\n        // When calculating clip planes account for the highest building on the earth,\n        // multiplying its height by projection scaling factor. This approach assumes\n        // constantHeight property of extruded polygon technique is set as default false,\n        // otherwise the near plane margins will be bigger then required, but still correct.\n        const projectionScale = this.projection.getScaleFactor(this.camera.position);\n        const maxGeometryHeightScaled =\n            projectionScale *\n            this.m_tileDataSources.reduce((r, ds) => Math.max(r, ds.maxGeometryHeight), 0);\n\n        // Copy all properties from new view ranges to our readonly object.\n        // This allows to keep all view ranges references valid and keeps up-to-date\n        // information within them. Works the same as copping all properties one-by-one.\n        Object.assign(\n            this.m_viewRanges,\n            viewRanges === undefined\n                ? this.m_visibleTiles.updateClipPlanes(maxGeometryHeightScaled)\n                : viewRanges\n        );\n        this.m_camera.near = this.m_viewRanges.near;\n        this.m_camera.far = this.m_viewRanges.far;\n\n        this.m_camera.updateProjectionMatrix();\n\n        // Update the \"relative to eye\" camera. Copy the public camera parameters\n        // and place the \"relative to eye\" at the world's origin.\n        this.m_rteCamera.copy(this.m_camera);\n        this.m_rteCamera.position.setScalar(0);\n        this.m_rteCamera.updateMatrixWorld(true);\n\n        this.m_screenCamera.left = width / -2;\n        this.m_screenCamera.right = width / 2;\n        this.m_screenCamera.bottom = height / -2;\n        this.m_screenCamera.top = height / 2;\n        this.m_screenCamera.updateProjectionMatrix();\n        this.m_screenCamera.updateMatrixWorld(false);\n\n        this.m_screenProjector.update(this.camera, width, height);\n        this.m_screenCollisions.update(width, height);\n\n        this.m_pixelToWorld = undefined;\n        this.m_fog.update(this, this.m_viewRanges.maximum);\n    }\n\n    /**\n     * Derive the look at settings (i.e. target, zoom, ...) from the current camera.\n     */\n    private updateLookAtSettings() {\n        const { yaw, pitch, roll } = this.extractAttitude();\n        this.m_yaw = yaw;\n        this.m_pitch = pitch;\n        this.m_roll = roll;\n\n        // tslint:disable-next-line: deprecation\n        const { target, distance } = MapViewUtils.getTargetAndDistance(\n            this.projection,\n            this.camera,\n            this.elevationProvider\n        );\n\n        this.m_targetWorldPos.copy(target);\n        this.m_targetGeoPos = this.projection.unprojectPoint(this.m_targetWorldPos);\n        this.m_targetDistance = distance;\n        this.m_zoomLevel = MapViewUtils.calculateZoomLevelFromDistance(this, this.m_targetDistance);\n    }\n\n    /**\n     * Update `Env` instance used for style `Expr` evaluations.\n     */\n    private updateEnv() {\n        this.m_env.entries.$zoom = this.m_zoomLevel;\n\n        // This one introduces unnecessary calculation of pixelToWorld, even if it's barely\n        // used in our styles.\n        this.m_env.entries.$pixelToMeters = this.pixelToWorld;\n\n        this.m_env.entries.$frameNumber = this.m_frameNumber;\n    }\n\n    /**\n     * Transfer the NDC point to view space.\n     * @param vector Vector to transform.\n     * @param result Result to place calculation.\n     */\n    private ndcToView(vector: Vector3Like, result: THREE.Vector3): THREE.Vector3 {\n        result\n            .set(vector.x, vector.y, vector.z)\n            .applyMatrix4(this.camera.projectionMatrixInverse)\n            // Make sure to apply rotation, hence use the rte camera\n            .applyMatrix4(this.m_rteCamera.matrixWorld);\n        return result;\n    }\n\n    /**\n     * Transfer from view space to camera space.\n     * @param viewPos position in view space, result is stored here.\n     */\n    private viewToLightSpace(viewPos: THREE.Vector3, camera: THREE.Camera): THREE.Vector3 {\n        return viewPos.applyMatrix4(camera.matrixWorldInverse);\n    }\n\n    /**\n     * Update the directional light camera. Note, this requires the cameras to first be updated.\n     */\n    private updateLights() {\n        // TODO: HARP-9479 Globe doesn't support shadows.\n        if (\n            !this.shadowsEnabled ||\n            this.projection.type === ProjectionType.Spherical ||\n            this.m_createdLights === undefined ||\n            this.m_createdLights.length === 0\n        ) {\n            return;\n        }\n\n        const points: Vector3Like[] = [\n            // near plane points\n            { x: -1, y: -1, z: -1 },\n            { x: 1, y: -1, z: -1 },\n            { x: -1, y: 1, z: -1 },\n            { x: 1, y: 1, z: -1 },\n\n            // far planes points\n            { x: -1, y: -1, z: 1 },\n            { x: 1, y: -1, z: 1 },\n            { x: -1, y: 1, z: 1 },\n            { x: 1, y: 1, z: 1 }\n        ];\n        const transformedPoints = points.map((p, i) => this.ndcToView(p, cache.frustumPoints[i]));\n\n        this.m_createdLights.forEach(element => {\n            const directionalLight = element as THREE.DirectionalLight;\n            if (directionalLight.isDirectionalLight === true) {\n                const pointsInLightSpace = transformedPoints.map(p =>\n                    this.viewToLightSpace(p, directionalLight.shadow.camera)\n                );\n\n                const box = new THREE.Box3();\n                pointsInLightSpace.forEach(point => {\n                    box.expandByPoint(point);\n                });\n                const camera = directionalLight.shadow.camera;\n                camera.left = box.min.x;\n                camera.right = box.max.x;\n                camera.top = box.max.y;\n                camera.bottom = box.min.y;\n                camera.near = -box.max.z;\n                camera.far = -box.min.z;\n                camera.updateProjectionMatrix();\n\n                const lightDirection = cache.vector3[0];\n                lightDirection.copy(directionalLight.target.position);\n                lightDirection.sub(directionalLight.position);\n                lightDirection.normalize();\n\n                const normal = cache.vector3[1];\n                if (this.projection.type === ProjectionType.Planar) {\n                    // -Z points to the camera, we can't use Projection.surfaceNormal, because\n                    // webmercator and mercator give different results.\n                    normal.set(0, 0, -1);\n                } else {\n                    // Enable shadows for globe...\n                    //this.projection.surfaceNormal(target, normal);\n                }\n\n                // The camera of the shadow has the same height as the map camera, and the target is\n                // also the same. The position is then calculated based on the light direction and\n                // the height\n                // using basic trigonometry.\n                const tilt = this.m_pitch;\n                const cameraHeight = this.targetDistance * Math.cos(tilt);\n                const lightPosHyp = cameraHeight / normal.dot(lightDirection);\n\n                directionalLight.target.position.copy(this.worldTarget).sub(this.camera.position);\n                directionalLight.position.copy(this.worldTarget);\n                directionalLight.position.addScaledVector(lightDirection, -lightPosHyp);\n                directionalLight.position.sub(this.camera.position);\n            }\n        });\n    }\n\n    private detectCurrentFps(now: number) {\n        // Skip the first frames, they are from not originated from requestAnimationFrame()\n        if (this.m_previousRequestAnimationTime !== undefined && this.m_frameNumber > 5) {\n            const currentFps = 1000 / (now - this.m_previousRequestAnimationTime);\n            this.m_frameTimeRing[this.m_frameTimeIndex % FRAME_RATE_RING_SIZE] = currentFps;\n            this.m_frameTimeIndex++;\n\n            const capturedFrames = Math.min(this.m_frameTimeIndex, FRAME_RATE_RING_SIZE);\n\n            let sum = 0;\n            for (let i = 0; i < capturedFrames; i++) {\n                sum += this.m_frameTimeRing[i];\n            }\n\n            this.m_detectedFps = sum / capturedFrames;\n        }\n        this.m_previousRequestAnimationTime = now;\n    }\n\n    /**\n     * Draw a new frame.\n     */\n    private drawFrame() {\n        if (this.m_drawing || this.m_options.synchronousRendering) {\n            return;\n        }\n        // Cancel an active requestAnimationFrame() cycle. Failure to do this may end up in\n        // rendering multiple times during a single frame.\n        if (this.m_animationFrameHandle !== undefined) {\n            cancelAnimationFrame(this.m_animationFrameHandle);\n            this.m_animationFrameHandle = undefined;\n        }\n\n        if (this.m_maxFps <= 0) {\n            // Render at maximum FPS.\n            this.m_animationFrameHandle = requestAnimationFrame(this.handleRequestAnimationFrame);\n            return;\n        }\n\n        // Magic ingredient to compensate time flux.\n        const fudgeTimeInMs = 3;\n        const vSyncFrameTime = 1000 / this.m_detectedFps;\n        const frameInterval = 1000 / this.m_maxFps;\n\n        const previousFrameTime =\n            this.m_previousFrameTimeStamp === undefined ? 0 : this.m_previousFrameTimeStamp;\n\n        // Compute a practical value to compare against.\n        const targetTime = previousFrameTime + frameInterval - vSyncFrameTime - fudgeTimeInMs;\n\n        this.m_targetRequestAnimationTime = targetTime;\n        this.postponedAnimationFrame(previousFrameTime);\n    }\n\n    private postponedAnimationFrame(now: number) {\n        if (this.m_targetRequestAnimationTime === undefined) {\n            return;\n        }\n\n        if (this.m_animationFrameHandle !== undefined) {\n            cancelAnimationFrame(this.m_animationFrameHandle);\n            this.m_animationFrameHandle = undefined;\n        }\n\n        this.detectCurrentFps(now);\n\n        this.m_animationFrameHandle = requestAnimationFrame(\n            now > this.m_targetRequestAnimationTime\n                ? this.handleRequestAnimationFrame\n                : this.handlePostponedAnimationFrame\n        );\n    }\n\n    /**\n     * Draw a new frame.\n     */\n    private renderFunc(time: number) {\n        this.render(time);\n    }\n\n    /**\n     * Returns the list of the enabled data sources.\n     */\n    private getEnabledTileDataSources(): DataSource[] {\n        // ### build this list once decoders && datasources are ready\n\n        const enabledDataSources: DataSource[] = [];\n\n        for (const dataSource of this.m_tileDataSources) {\n            if (this.isDataSourceEnabled(dataSource)) {\n                enabledDataSources.push(dataSource);\n            }\n        }\n\n        return enabledDataSources;\n    }\n\n    /**\n     * Renders the current frame.\n     */\n    private render(frameStartTime: number): void {\n        if (this.m_drawing) {\n            return;\n        }\n\n        RENDER_EVENT.time = frameStartTime;\n        this.dispatchEvent(RENDER_EVENT);\n\n        ++this.m_frameNumber;\n\n        let currentFrameEvent: FrameStats | undefined;\n        const stats = PerformanceStatistics.instance;\n        const gatherStatistics: boolean = stats.enabled;\n        if (gatherStatistics) {\n            currentFrameEvent = stats.currentFrame;\n\n            if (this.m_previousFrameTimeStamp !== undefined) {\n                // In contrast to fullFrameTime we also measure the application code\n                // for the FPS. This means FPS != 1000 / fullFrameTime.\n                const timeSincePreviousFrame = frameStartTime - this.m_previousFrameTimeStamp;\n                currentFrameEvent.setValue(\"render.fps\", 1000 / timeSincePreviousFrame);\n            }\n\n            // We store the last frame statistics at the beginning of the next frame b/c additional\n            // work (i.e. geometry creation) is done outside of the animation frame but still needs\n            // to be added to the `fullFrameTime` (see [[TileGeometryLoader]]).\n            stats.storeAndClearFrameInfo();\n\n            currentFrameEvent = currentFrameEvent as FrameStats;\n            currentFrameEvent.setValue(\"renderCount.frameNumber\", this.m_frameNumber);\n        }\n\n        this.m_previousFrameTimeStamp = frameStartTime;\n\n        let setupTime: number | undefined;\n        let cullTime: number | undefined;\n        let textPlacementTime: number | undefined;\n        let drawTime: number | undefined;\n        let textDrawTime: number | undefined;\n        let endTime: number | undefined;\n\n        this.m_renderer.info.reset();\n\n        this.m_updatePending = false;\n        this.m_thisFrameTilesChanged = undefined;\n\n        this.m_drawing = true;\n\n        if (this.m_renderer.getPixelRatio() !== this.pixelRatio) {\n            this.m_renderer.setPixelRatio(this.pixelRatio);\n        }\n\n        this.updateCameras();\n        this.updateEnv();\n        this.updateLights();\n\n        this.m_renderer.clear();\n\n        // clear the scene\n        this.m_mapTilesRoot.children.length = 0;\n\n        if (gatherStatistics) {\n            setupTime = PerformanceTimer.now();\n        }\n\n        // TBD: Update renderList only any of its params (camera, etc...) has changed.\n        if (!this.lockVisibleTileSet) {\n            const viewRangesStatus = this.m_visibleTiles.updateRenderList(\n                this.storageLevel,\n                Math.floor(this.zoomLevel),\n                this.getEnabledTileDataSources(),\n                this.m_elevationRangeSource\n            );\n            // View ranges has changed due to features (with elevation) that affects clip planes\n            // positioning, update cameras with new clip planes positions.\n            if (viewRangesStatus.viewRangesChanged) {\n                this.updateCameras(viewRangesStatus.viewRanges);\n            }\n        }\n\n        if (gatherStatistics) {\n            cullTime = PerformanceTimer.now();\n        }\n\n        const renderList = this.m_visibleTiles.dataSourceTileList;\n\n        // no need to check everything if we're not going to create text renderer.\n        renderList.forEach(({ zoomLevel, renderedTiles }) => {\n            renderedTiles.forEach(tile => {\n                this.renderTileObjects(tile, zoomLevel);\n\n                //We know that rendered tiles are visible (in the view frustum), so we update the\n                //frame number, note we don't do this for the visibleTiles because some may still be\n                //loading (and therefore aren't visible in the sense of being seen on the screen).\n                //Note also, this number isn't currently used anywhere so should be considered to be\n                //removed in the future (though could be good for debugging purposes).\n                tile.frameNumLastVisible = this.m_frameNumber;\n            });\n        });\n\n        // Check if this is the time to place the labels for the first time. Pretty much everything\n        // should have been loaded, and no animation should be running.\n        if (\n            !this.m_initialTextPlacementDone &&\n            !this.m_firstFrameComplete &&\n            !this.isDynamicFrame &&\n            !this.m_themeIsLoading &&\n            this.m_poiTableManager.finishedLoading &&\n            this.m_visibleTiles.allVisibleTilesLoaded &&\n            this.m_connectedDataSources.size + this.m_failedDataSources.size ===\n                this.m_tileDataSources.length &&\n            !this.m_textElementsRenderer.initializing &&\n            !this.m_textElementsRenderer.loading\n        ) {\n            this.m_initialTextPlacementDone = true;\n        }\n\n        this.m_mapAnchors.children.forEach((childObject: MapAnchor) => {\n            if (childObject.geoPosition === undefined) {\n                return;\n            }\n            this.projection.projectPoint(childObject.geoPosition, childObject.position);\n            childObject.position.sub(this.camera.position);\n        });\n\n        this.m_animatedExtrusionHandler.zoom = this.m_zoomLevel;\n\n        if (currentFrameEvent !== undefined) {\n            // Make sure the counters all have a value.\n            currentFrameEvent.addValue(\"renderCount.numTilesRendered\", 0);\n            currentFrameEvent.addValue(\"renderCount.numTilesVisible\", 0);\n            currentFrameEvent.addValue(\"renderCount.numTilesLoading\", 0);\n\n            // Increment the counters for all data sources.\n            renderList.forEach(({ zoomLevel, renderedTiles, visibleTiles, numTilesLoading }) => {\n                currentFrameEvent!.addValue(\"renderCount.numTilesRendered\", renderedTiles.size);\n                currentFrameEvent!.addValue(\"renderCount.numTilesVisible\", visibleTiles.length);\n                currentFrameEvent!.addValue(\"renderCount.numTilesLoading\", numTilesLoading);\n            });\n        }\n\n        if (this.m_movementDetector.checkCameraMoved(this, frameStartTime)) {\n            //FIXME: Shouldn't we use target here?\n            const { latitude, longitude, altitude } = this.geoCenter;\n            this.dispatchEvent({\n                type: MapViewEventNames.CameraPositionChanged,\n                latitude,\n                longitude,\n                altitude,\n                // FIXME: Can we remove yaw, pitch and roll\n                yaw: this.m_yaw,\n                pitch: this.m_pitch,\n                roll: this.m_roll,\n                tilt: this.tilt,\n                heading: this.heading,\n                zoom: this.zoomLevel\n            });\n        }\n\n        // The camera used to render the scene.\n        const camera = this.m_pointOfView !== undefined ? this.m_pointOfView : this.m_rteCamera;\n\n        if (this.renderLabels) {\n            this.prepareRenderTextElements(frameStartTime);\n        }\n\n        if (gatherStatistics) {\n            textPlacementTime = PerformanceTimer.now();\n        }\n        if (this.m_skyBackground !== undefined && this.projection.type === ProjectionType.Planar) {\n            this.m_skyBackground.updateCamera(this.m_camera);\n        }\n\n        this.mapRenderingManager.render(\n            this.m_renderer,\n            this.m_scene,\n            camera,\n            !this.isDynamicFrame\n        );\n\n        if (gatherStatistics) {\n            drawTime = PerformanceTimer.now();\n        }\n\n        if (this.renderLabels) {\n            this.finishRenderTextElements();\n        }\n\n        if (gatherStatistics) {\n            textDrawTime = PerformanceTimer.now();\n        }\n\n        if (!this.m_firstFrameRendered) {\n            this.m_firstFrameRendered = true;\n\n            if (gatherStatistics) {\n                stats.appResults.set(\"firstFrame\", frameStartTime);\n            }\n\n            FIRST_FRAME_EVENT.time = frameStartTime;\n            this.dispatchEvent(FIRST_FRAME_EVENT);\n        }\n\n        this.m_visibleTiles.disposePendingTiles();\n\n        this.m_drawing = false;\n\n        if (this.animating || this.m_updatePending) {\n            this.drawFrame();\n        }\n\n        this.checkCopyrightUpdates();\n\n        if (currentFrameEvent !== undefined) {\n            endTime = PerformanceTimer.now();\n\n            const frameRenderTime = endTime - frameStartTime;\n\n            currentFrameEvent.setValue(\"render.setupTime\", setupTime! - frameStartTime);\n            currentFrameEvent.setValue(\"render.cullTime\", cullTime! - setupTime!);\n            currentFrameEvent.setValue(\"render.textPlacementTime\", textPlacementTime! - cullTime!);\n            currentFrameEvent.setValue(\"render.drawTime\", drawTime! - textPlacementTime!);\n            currentFrameEvent.setValue(\"render.textDrawTime\", textDrawTime! - drawTime!);\n            currentFrameEvent.setValue(\"render.cleanupTime\", endTime - textDrawTime!);\n            currentFrameEvent.setValue(\"render.frameRenderTime\", frameRenderTime);\n\n            // Initialize the fullFrameTime with the frameRenderTime If we also create geometry in\n            // this frame, this number will be increased in the TileGeometryLoader.\n            currentFrameEvent.setValue(\"render.fullFrameTime\", frameRenderTime);\n            currentFrameEvent.setValue(\"render.geometryCreationTime\", 0);\n\n            // Add THREE.js statistics\n            stats.addWebGLInfo(this.m_renderer.info);\n\n            // Add memory statistics\n            // FIXME:\n            // This will only measure the memory of the rendering and not of the geometry creation.\n            // Assuming the garbage collector is not kicking in immediately we will at least see\n            // the geometry creation memory consumption acounted in the next frame.\n            stats.addMemoryInfo();\n        }\n\n        DID_RENDER_EVENT.time = frameStartTime;\n        this.dispatchEvent(DID_RENDER_EVENT);\n\n        // After completely rendering this frame, it is checked if this frame was the first complete\n        // frame, with no more tiles, geometry and labels waiting to be added, and no animation\n        // running. The initial placement of text in this render call may have changed the loading\n        // state of the TextElementsRenderer, so this has to be checked again.\n        if (\n            !this.m_firstFrameComplete &&\n            this.m_initialTextPlacementDone &&\n            !this.isDynamicFrame &&\n            !this.textElementsRenderer.loading\n        ) {\n            this.m_firstFrameComplete = true;\n\n            if (gatherStatistics) {\n                stats.appResults.set(\"firstFrameComplete\", frameStartTime);\n            }\n\n            FRAME_COMPLETE_EVENT.time = frameStartTime;\n            this.dispatchEvent(FRAME_COMPLETE_EVENT);\n        }\n    }\n\n    private renderTileObjects(tile: Tile, zoomLevel: number) {\n        const worldOffsetX = tile.computeWorldOffsetX();\n        if (tile.willRender(zoomLevel)) {\n            for (const object of tile.objects) {\n                if (!this.processTileObjectFeatures(tile, object)) {\n                    continue;\n                }\n                object.position.copy(tile.center);\n                if (object.displacement !== undefined) {\n                    object.position.add(object.displacement);\n                }\n                object.position.x += worldOffsetX;\n                object.position.sub(this.m_camera.position);\n                if (tile.localTangentSpace) {\n                    object.setRotationFromMatrix(tile.boundingBox.getRotationMatrix());\n                }\n                object.frustumCulled = false;\n                if (object._backupRenderOrder === undefined) {\n                    object._backupRenderOrder = object.renderOrder;\n                }\n\n                const isBuilding =\n                    object.userData !== undefined &&\n                    object.userData.kind !== undefined &&\n                    (object.userData.kind as GeometryKind[]).includes(GeometryKind.Building);\n\n                // When falling back to a parent tile (i.e. tile.levelOffset < 0) there will\n                // be overlaps with the already loaded tiles. Therefore all (flat) objects\n                // in a fallback tile must be shifted, such that their renderOrder is less\n                // than the groundPlane that each neighbouring Tile has (it has a renderOrder\n                // of -10000, see addGroundPlane in TileGeometryCreator), only then can we be\n                // sure that nothing of the parent will be rendered on top of the children,\n                // as such, we shift using the FALLBACK_RENDER_ORDER_OFFSET.\n                // This does not apply to buildings b/c they are 3d and the overlaps\n                // are resolved with a depth prepass. Note we set this always to ensure that if\n                // the Tile is used as a fallback, and then used normally, that we have the correct\n                // renderOrder.\n                object.renderOrder =\n                    object._backupRenderOrder +\n                    (!isBuilding && tile.levelOffset < 0\n                        ? FALLBACK_RENDER_ORDER_OFFSET * tile.levelOffset\n                        : 0);\n\n                this.m_mapTilesRoot.add(object);\n            }\n            tile.didRender();\n        }\n    }\n\n    /**\n     * Process the features owned by the given [[TileObject]].\n     *\n     * @param tile The [[Tile]] owning the [[TileObject]]'s features.\n     * @param object The [[TileObject]] to process.\n     * @returns `false` if the given [[TileObject]] should not be added to the scene.\n     */\n    private processTileObjectFeatures(tile: Tile, object: TileObject): boolean {\n        const technique: IndexedTechnique = object.userData.technique;\n\n        if (!technique || technique.enabled === undefined) {\n            // Nothing to do, there's no technique.\n            return true;\n        }\n\n        const feature: TileFeatureData = object.userData.feature;\n\n        if (!feature || !Expr.isExpr(technique.enabled)) {\n            return Boolean(getPropertyValue(technique.enabled, this.m_env));\n        }\n\n        const { starts, objInfos } = feature;\n\n        if (!Array.isArray(objInfos) || !Array.isArray(starts)) {\n            // Nothing to do, the object is missing feature ids and their position\n            // in the index buffer.\n            return true;\n        }\n\n        const geometry: THREE.BufferGeometry | undefined = (object as any).geometry;\n\n        if (!geometry || !geometry.isBufferGeometry) {\n            // Nothing to do, the geometry is not a [[THREE.BufferGeometry]]\n            // and we can't generate groups.\n            return true;\n        }\n\n        const index = geometry.getIndex()!;\n\n        // clear the groups.\n        geometry.clearGroups();\n\n        // The offset in the index buffer of the end of the last\n        // pushed group.\n        let endOfLastGroup: number | undefined;\n\n        objInfos.forEach((properties, featureIndex) => {\n            // the id of the current feature.\n            const featureId = getFeatureId(properties);\n\n            let enabled = true;\n\n            if (Expr.isExpr(technique.enabled)) {\n                // the state of current feature.\n                const featureState = tile.dataSource.getFeatureState(featureId);\n\n                // create a new [[Env]] that can be used\n                // to evaluate expressions that access the feature state.\n                const $state = featureState ? new MapEnv(featureState) : null;\n\n                const parentEnv =\n                    typeof properties === \"object\"\n                        ? new MapEnv(properties, this.m_env)\n                        : this.m_env;\n\n                const env = new MapEnv({ $state }, parentEnv);\n\n                enabled = Boolean(getPropertyValue(technique.enabled, env));\n            }\n\n            if (!enabled) {\n                // skip this feature, it was disabled.\n                return;\n            }\n\n            const start = starts[featureIndex];\n            const end = starts[featureIndex + 1] ?? index.count;\n            const count = end - start;\n\n            if (start === endOfLastGroup) {\n                // extend the last group\n                geometry.groups[geometry.groups.length - 1].count += count;\n            } else {\n                geometry.addGroup(start, count);\n            }\n\n            endOfLastGroup = start + count;\n        });\n\n        return geometry.groups.length > 0;\n    }\n\n    private prepareRenderTextElements(time: number) {\n        // Disable rendering of text elements for debug camera. TextElements are rendered using an\n        // orthographic camera that covers the entire available screen space. Unfortunately, this\n        // particular camera set up is not compatible with the debug camera.\n        const debugCameraActive = this.m_pointOfView !== undefined;\n\n        if (debugCameraActive) {\n            return;\n        }\n\n        this.m_textElementsRenderer.placeText(this.m_visibleTiles.dataSourceTileList, time);\n    }\n\n    private finishRenderTextElements() {\n        const canRenderTextElements = this.m_pointOfView === undefined;\n\n        if (canRenderTextElements) {\n            // copy far value from scene camera, as the distance to the POIs matter now.\n            this.m_screenCamera.far = this.m_viewRanges.maximum;\n            this.m_textElementsRenderer.renderText(this.m_screenCamera);\n        }\n    }\n\n    private initTheme() {\n        const theme = getOptionValue(this.m_options.theme, MapViewDefaults.theme);\n\n        this.m_themeIsLoading = true;\n        Promise.resolve<string | Theme>(theme)\n            // tslint:disable-next-line: no-shadowed-variable\n            .then(theme => ThemeLoader.load(theme, { uriResolver: this.m_uriResolver }))\n            // tslint:disable-next-line: no-shadowed-variable\n            .then(theme => {\n                this.m_themeIsLoading = false;\n                this.theme = theme;\n            })\n            .catch(error => {\n                this.m_themeIsLoading = false;\n                const themeName =\n                    typeof this.m_options.theme === \"string\" ? ` from ${this.m_options.theme}` : \"\";\n                logger.error(`Failed to load theme${themeName}: ${error}`, error);\n            });\n    }\n\n    private setupCamera() {\n        const { width, height } = this.getCanvasClientSize();\n\n        this.calculateFocalLength(height);\n        this.m_visibleTiles = this.createVisibleTileSet();\n\n        this.m_options.target = GeoCoordinates.fromObject(\n            getOptionValue(this.m_options.target, MapViewDefaults.target)\n        );\n        // ensure that look at target has height of 0\n        (this.m_options.target as GeoCoordinates).altitude = 0;\n        this.m_options.tilt = getOptionValue(this.m_options.tilt, MapViewDefaults.tilt);\n\n        this.m_options.heading = getOptionValue(this.m_options.heading, MapViewDefaults.heading);\n\n        this.m_options.zoomLevel = getOptionValue(\n            this.m_options.zoomLevel,\n            MapViewDefaults.zoomLevel\n        );\n\n        this.lookAtImpl(this.m_options);\n\n        // ### move & customize\n        this.resize(width, height);\n\n        this.m_screenCamera.position.z = 1;\n        this.m_screenCamera.near = 0;\n    }\n\n    private createVisibleTileSet(): VisibleTileSet {\n        const enableMixedLod =\n            this.m_enableMixedLod === undefined\n                ? this.projection.type === ProjectionType.Spherical\n                : this.m_enableMixedLod;\n\n        return new VisibleTileSet(\n            new FrustumIntersection(\n                this.m_camera,\n                this,\n                this.m_visibleTileSetOptions.extendedFrustumCulling,\n                this.m_tileWrappingEnabled,\n                enableMixedLod\n            ),\n            this.m_tileGeometryManager,\n            this.m_visibleTileSetOptions\n        );\n    }\n\n    private updateSkyBackground() {\n        if (this.m_theme === undefined) {\n            return;\n        }\n        const theme = this.m_theme;\n        if (this.m_skyBackground instanceof SkyBackground && theme.sky !== undefined) {\n            // there is a sky in the view and there is a sky option in the theme. Update the colors\n            this.updateSkyBackgroundColors(theme.sky, theme.clearColor);\n        } else if (this.m_skyBackground === undefined && theme.sky !== undefined) {\n            // there is no sky in the view but there is a sky option in the theme\n            this.addNewSkyBackground(theme.sky, theme.clearColor);\n            return;\n        } else if (this.m_skyBackground instanceof SkyBackground && theme.sky === undefined) {\n            // there is a sky in the view, but not in the theme\n            this.removeSkyBackGround();\n        }\n    }\n\n    private addNewSkyBackground(sky: Sky, clearColor: string | undefined) {\n        if (sky.type === \"gradient\" && (sky as GradientSky).groundColor === undefined) {\n            sky.groundColor = getOptionValue(clearColor, \"#000000\");\n        }\n        this.m_skyBackground = new SkyBackground(sky, this.projection.type, this.m_camera);\n        this.m_scene.background = this.m_skyBackground.texture;\n    }\n\n    private removeSkyBackGround() {\n        this.m_scene.background = null;\n        if (this.m_skyBackground !== undefined) {\n            this.m_skyBackground.dispose();\n            this.m_skyBackground = undefined;\n        }\n    }\n\n    private updateSkyBackgroundColors(sky: Sky, clearColor: string | undefined) {\n        if (sky.type === \"gradient\" && (sky as GradientSky).groundColor === undefined) {\n            sky.groundColor = getOptionValue(clearColor, \"#000000\");\n        }\n        if (this.m_skyBackground !== undefined) {\n            this.m_skyBackground.updateTexture(sky, this.projection.type);\n        }\n    }\n\n    private updateLighting() {\n        if (!this.m_theme) {\n            return;\n        }\n\n        const theme = this.m_theme as Theme;\n        if (theme.clearColor !== undefined) {\n            this.m_renderer.setClearColor(new THREE.Color(theme.clearColor));\n        }\n\n        if (this.m_createdLights) {\n            this.m_createdLights.forEach((light: THREE.Light) => {\n                this.m_scene.remove(light);\n            });\n        }\n        if (theme.lights !== undefined) {\n            this.m_createdLights = [];\n            theme.lights.forEach((lightDescription: Light) => {\n                const light = createLight(lightDescription);\n                if (!light) {\n                    logger.warn(\n                        // tslint:disable-next-line: max-line-length\n                        `MapView: failed to create light ${lightDescription.name} of type ${lightDescription.type}`\n                    );\n                    return;\n                }\n                this.m_scene.add(light);\n                if ((light as any).isDirectionalLight) {\n                    const directionalLight = light as THREE.DirectionalLight;\n                    // This is needed so that the target is updated automatically, see:\n                    // https://threejs.org/docs/#api/en/lights/DirectionalLight.target\n                    this.m_scene.add(directionalLight.target);\n                }\n                this.m_createdLights!.push(light);\n            });\n        }\n    }\n\n    private movementStarted() {\n        this.m_textElementsRenderer.movementStarted();\n\n        MOVEMENT_STARTED_EVENT.time = Date.now();\n        this.dispatchEvent(MOVEMENT_STARTED_EVENT);\n    }\n\n    private movementFinished() {\n        this.m_textElementsRenderer.movementFinished();\n\n        MOVEMENT_FINISHED_EVENT.time = Date.now();\n        this.dispatchEvent(MOVEMENT_FINISHED_EVENT);\n\n        // render at the next possible time.\n        if (!this.animating) {\n            if (this.m_movementFinishedUpdateTimerId !== undefined) {\n                clearTimeout(this.m_movementFinishedUpdateTimerId);\n            }\n            this.m_movementFinishedUpdateTimerId = setTimeout(() => {\n                this.m_movementFinishedUpdateTimerId = undefined;\n                this.update();\n            }, 0);\n        }\n    }\n\n    /**\n     * Check if the set of visible tiles changed since the last frame.\n     *\n     * May be called multiple times per frame.\n     *\n     * Equality is computed by creating a string containing the IDs of the tiles.\n     */\n    private checkIfTilesChanged() {\n        if (this.m_thisFrameTilesChanged !== undefined) {\n            return this.m_thisFrameTilesChanged;\n        }\n        const renderList = this.m_visibleTiles.dataSourceTileList;\n\n        const tileIdList: string[] = [];\n\n        tileIdList.length = 0;\n\n        renderList.forEach(({ dataSource, renderedTiles }) => {\n            renderedTiles.forEach(tile => {\n                tileIdList.push(dataSource.name + \"-\" + tile.tileKey.mortonCode());\n            });\n        });\n\n        tileIdList.sort();\n\n        const newTileIds = tileIdList.join(\"#\");\n\n        if (newTileIds !== this.m_lastTileIds) {\n            this.m_lastTileIds = newTileIds;\n            this.m_thisFrameTilesChanged = true;\n        } else {\n            this.m_thisFrameTilesChanged = false;\n        }\n\n        return this.m_thisFrameTilesChanged;\n    }\n\n    private checkCopyrightUpdates() {\n        if (!this.checkIfTilesChanged()) {\n            return;\n        }\n\n        const newCopyrightInfo = this.getRenderedTilesCopyrightInfo();\n        if (newCopyrightInfo === this.m_copyrightInfo) {\n            return;\n        }\n        if (newCopyrightInfo.length === this.m_copyrightInfo.length) {\n            let allEqual = true;\n            for (let i = 0; i < newCopyrightInfo.length; i++) {\n                const a = newCopyrightInfo[i];\n                const b = this.m_copyrightInfo[i];\n                if (a.label !== b.label) {\n                    allEqual = false;\n                    break;\n                }\n            }\n            if (allEqual) {\n                return;\n            }\n        }\n        this.m_copyrightInfo = newCopyrightInfo;\n        this.dispatchEvent(COPYRIGHT_CHANGED_EVENT);\n    }\n\n    private getRenderedTilesCopyrightInfo(): CopyrightInfo[] {\n        let result: CopyrightInfo[] = [];\n        for (const tileList of this.m_visibleTiles.dataSourceTileList) {\n            for (const tile of tileList.renderedTiles.values()) {\n                const tileCopyrightInfo = tile.copyrightInfo;\n                if (tileCopyrightInfo === undefined || tileCopyrightInfo.length === 0) {\n                    continue;\n                }\n                result = CopyrightInfo.mergeArrays(result, tileCopyrightInfo);\n            }\n        }\n        return result;\n    }\n\n    private updateImages() {\n        if (!this.m_theme) {\n            return;\n        }\n\n        const theme = this.m_theme as Theme;\n\n        this.m_imageCache.clear();\n        this.poiManager.clear();\n\n        if (theme.images !== undefined) {\n            for (const name of Object.keys(theme.images)) {\n                const image = theme.images[name];\n                this.m_imageCache.addImage(name, image.url, image.preload === true);\n                if (typeof image.atlas === \"string\") {\n                    this.poiManager.addTextureAtlas(name, image.atlas);\n                }\n            }\n        }\n\n        if (theme.imageTextures !== undefined) {\n            theme.imageTextures.forEach((imageTexture: ImageTexture) => {\n                this.poiManager.addImageTexture(imageTexture);\n            });\n        }\n    }\n\n    private loadPoiTables() {\n        if (this.m_theme === undefined) {\n            return;\n        }\n\n        this.poiTableManager.clear();\n\n        // Add the POI tables defined in the theme.\n        this.poiTableManager\n            .loadPoiTables(this.m_theme as Theme)\n            .then(() => this.update())\n            .catch(() => this.update());\n    }\n\n    private setupStats(enable: boolean) {\n        // tslint:disable-next-line:no-unused-expression\n        new PerformanceStatistics(enable, 1000);\n    }\n\n    private setupRenderer() {\n        this.m_renderer.setClearColor(DEFAULT_CLEAR_COLOR);\n\n        this.m_scene.add(this.m_mapTilesRoot);\n        this.m_scene.add(this.m_mapAnchors);\n\n        this.shadowsEnabled = this.m_options.enableShadows ?? false;\n    }\n\n    private createTextRenderer(): TextElementsRenderer {\n        const updateCallback: ViewUpdateCallback = () => {\n            this.update();\n        };\n\n        return new TextElementsRenderer(\n            new MapViewState(this, this.checkIfTilesChanged.bind(this)),\n            this.m_camera,\n            updateCallback,\n            this.m_screenCollisions,\n            this.m_screenProjector,\n            new TextCanvasFactory(this.m_renderer),\n            this.m_poiManager,\n            new PoiRendererFactory(this),\n            new FontCatalogLoader(this.m_theme),\n            this.m_theme,\n            this.m_options\n        );\n    }\n\n    private resetTextRenderer(): void {\n        const overlayText = this.m_textElementsRenderer.overlayText;\n        this.m_textElementsRenderer = this.createTextRenderer();\n        if (overlayText !== undefined) {\n            this.m_textElementsRenderer.addOverlayText(overlayText);\n        }\n    }\n\n    /**\n     * Default handler for webglcontextlost event.\n     *\n     * Note: The renderer `this.m_renderer` may not be initialized when this function is called.\n     */\n    private onWebGLContextLost = (event: Event) => {\n        this.dispatchEvent(CONTEXT_LOST_EVENT);\n        logger.warn(\"WebGL context lost\", event);\n    };\n\n    /**\n     * Default handler for webglcontextrestored event.\n     *\n     * Note: The renderer `this.m_renderer` may not be initialized when this function is called.\n     */\n    private onWebGLContextRestored = (event: Event) => {\n        this.dispatchEvent(CONTEXT_RESTORED_EVENT);\n        if (this.m_renderer !== undefined) {\n            if (this.m_theme !== undefined && this.m_theme.clearColor !== undefined) {\n                this.m_renderer.setClearColor(new THREE.Color(this.m_theme.clearColor));\n            } else {\n                this.m_renderer.setClearColor(DEFAULT_CLEAR_COLOR);\n            }\n            this.update();\n        }\n        logger.warn(\"WebGL context restored\", event);\n    };\n\n    private limitFov(fov: number, aspect: number): number {\n        fov = THREE.MathUtils.clamp(fov, MIN_FIELD_OF_VIEW, MAX_FIELD_OF_VIEW);\n\n        let hFov = THREE.MathUtils.radToDeg(\n            MapViewUtils.calculateHorizontalFovByVerticalFov(THREE.MathUtils.degToRad(fov), aspect)\n        );\n\n        if (hFov > MAX_FIELD_OF_VIEW || hFov < MIN_FIELD_OF_VIEW) {\n            hFov = THREE.MathUtils.clamp(hFov, MIN_FIELD_OF_VIEW, MAX_FIELD_OF_VIEW);\n            fov = THREE.MathUtils.radToDeg(\n                MapViewUtils.calculateVerticalFovByHorizontalFov(\n                    THREE.MathUtils.degToRad(hFov),\n                    aspect\n                )\n            );\n        }\n        return fov as number;\n    }\n\n    /**\n     * Sets the field of view calculation, and applies it immediately to the camera.\n     *\n     * @param type How to calculate the FOV\n     */\n    private setFovOnCamera(fovCalculation: FovCalculation, height: number) {\n        let fov = 0;\n        if (fovCalculation.type === \"fixed\") {\n            this.calculateFocalLength(height);\n            fov = fovCalculation.fov;\n        } else {\n            assert(this.m_focalLength !== 0);\n            fov = MapViewUtils.calculateFovByFocalLength(this.m_focalLength, height);\n        }\n        this.m_camera.fov = this.limitFov(fov, this.m_camera.aspect);\n    }\n\n    /**\n     * Sets the focal length based on the supplied fov and the height of the canvas. This must be\n     * called at least once. This is necessary to be recalled when the [[FovCalculation]]'s type is\n     * fixed. In such cases, when the height changes, the focal length must be readjusted whereas\n     * the FOV stays the same. The opposite is true for the dynamic case, where the focal length is\n     * fixed but the FOV changes.\n     * @param height Height of the canvas in css / client pixels.\n     */\n    private calculateFocalLength(height: number) {\n        assert(this.m_options.fovCalculation !== undefined);\n        this.m_focalLength = MapViewUtils.calculateFocalLengthByVerticalFov(\n            THREE.MathUtils.degToRad(this.m_options.fovCalculation!.fov),\n            height\n        );\n    }\n\n    /**\n     * Get canvas client size in css/client pixels.\n     *\n     * Supports canvases not attached to DOM, which have 0 as `clientWidth` and `clientHeight` by\n     * calculating it from actual canvas size and current pixel ratio.\n     */\n    private getCanvasClientSize(): { width: number; height: number } {\n        const { clientWidth, clientHeight } = this.canvas;\n        if (\n            clientWidth === 0 ||\n            clientHeight === 0 ||\n            typeof clientWidth !== \"number\" ||\n            typeof clientHeight !== \"number\"\n        ) {\n            const pixelRatio = this.m_renderer.getPixelRatio();\n            return {\n                width: Math.round(this.canvas.width / pixelRatio),\n                height: Math.round(this.canvas.height / pixelRatio)\n            };\n        } else {\n            return { width: clientWidth, height: clientHeight };\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nconst SHIFT_TRANSPARENCY: number = 24;\nconst SHIFT_RED: number = 16;\nconst SHIFT_GREEN: number = 8;\nconst SHIFT_BLUE: number = 0;\n\n// tslint:disable: no-bitwise\n//    Allow bitwise operations for colors decoding\n\n// tslint:disable-next-line: no-bitwise\nconst HEX_FULL_CHANNEL: number = 0xff;\nconst HEX_RGB_MASK: number = 0xffffff;\nconst HEX_TRGB_MASK: number = 0xffffffff;\n\nconst tmpColor = new THREE.Color();\n\n/**\n * Utilities to convert RGBA colors encoded in custom number (hex) format to THREE.Color objects.\n *\n * The functions provided allows for conversion from and to our custom number based color format,\n * which contains transparency, red, green and blue color channels in a way that each channel\n * occupies 8 bits of resulting number (color format 0xTTRRGGBB).\n * In order to preserve compatibility with THREE.Color class and its hexadecimal color\n * representation, we do not store __alpha__ channel in encoded color's number, but replace it\n * with __transparency__ channel, which is simply opposite to alpha:\n * ```transparency = 0xFF - alpha```\n * Such channel value is stored on the oldest bits (octet) in the integral color (numeric) value,\n * so it is fully compatible with THREE.Color numerical representation (@see [[THREE.Color.getHex]],\n * [[THREE.Color.setHex]]).\n * See also [[getHexFromRgba]] and [[getRgbaFromHex]] for more info about conversion.\n */\nexport namespace ColorUtils {\n    /**\n     * Encodes RGBA channels in custom number coded format (represented in hex as 0xTTRRGGBB).\n     *\n     * We do not use direct alpha channel mapping to hex in order to preserve compatibility\n     * with THREE.js color format (0xRRGGBB). This is done by encoding transparency\n     * (255 - alpha) instead of alpha on the oldest bits, shifted by [[SHIFT_TRANSPARENCY]].\n     * This way simple 0xRRGGBB color is equal to 0x00RRGGBB without transparency and\n     * color defining transparency (alpha < 255) is always recognizable by the oldest\n     * bit set:\n     * ```typescript\n     * (color >> SHIFT_TRANSPARENCY) !== 0.\n     * ```\n     * @note All input components are floating points in <0, 1> range (inclusively).\n     * @note Although method encodes transparency channel in single number value, it is still\n     * compatible with THREE.js number based color coding (0xRRGGBB), so you may pass this value to\n     * [[THREE.Color]] c-tor, but keep in mind that transparency will be silently ignored.\n     */\n    export function getHexFromRgba(r: number, g: number, b: number, a: number): number {\n        assert(a >= 0 && a <= 1);\n        const t = HEX_FULL_CHANNEL - Math.floor(a * HEX_FULL_CHANNEL);\n        return (\n            (t << SHIFT_TRANSPARENCY) ^\n            ((r * HEX_FULL_CHANNEL) << SHIFT_RED) ^\n            ((g * HEX_FULL_CHANNEL) << SHIFT_GREEN) ^\n            ((b * HEX_FULL_CHANNEL) << SHIFT_BLUE)\n        );\n    }\n\n    /**\n     * Encodes RGB all color channels in single number with format 0xRRGGBB.\n     *\n     * All input channels should be in <0, 1> range (inclusively).\n     * See also [[getHexFromRgba]] for more information about [[THREE.Color]] compatibility.\n     *\n     * @note This method is fully compatible with THREE.js color encoding, so\n     * you may pass this value directly to THREE.Color c-tor.\n     */\n    export function getHexFromRgb(r: number, g: number, b: number): number {\n        assert(r >= 0 && r <= 1);\n        assert(g >= 0 && g <= 1);\n        assert(b >= 0 && b <= 1);\n        return (\n            ((r * HEX_FULL_CHANNEL) << SHIFT_RED) ^\n            ((g * HEX_FULL_CHANNEL) << SHIFT_GREEN) ^\n            ((b * HEX_FULL_CHANNEL) << SHIFT_BLUE)\n        );\n    }\n\n    /**\n     * Encode and convert HSL value to number coded color format (0xRRGGBB).\n     *\n     * @see getHexFromRgb.\n     * @param h Hue component value between 0 and 1.\n     * @param s Saturation value between 0 and 1.\n     * @param l Lightness channel between 0 and 1.\n     */\n    export function getHexFromHsl(h: number, s: number, l: number): number {\n        assert(h >= 0 && h <= 1);\n        assert(s >= 0 && s <= 1);\n        assert(l >= 0 && l <= 1);\n        return tmpColor.setHSL(h, s, l).getHex();\n    }\n\n    /**\n     * Retrieve RGBA channels separately from number encoded custom color format.\n     *\n     * Provides an easy way for channels extraction (r, g, b, a) from custom number coded color\n     * format.\n     *\n     * @see getHexFromRgba.\n     * @param hex The number encoded color value (0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns r, g, b, a channels in simple object, where each channel value is saved as floating\n     * point from 0 to 1 inclusively.\n     */\n    export function getRgbaFromHex(hex: number): { r: number; g: number; b: number; a: number } {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return {\n            r: ((hex >> SHIFT_RED) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            g: ((hex >> SHIFT_GREEN) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            b: ((hex >> SHIFT_BLUE) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            a:\n                (HEX_FULL_CHANNEL - ((hex >> SHIFT_TRANSPARENCY) & HEX_FULL_CHANNEL)) /\n                HEX_FULL_CHANNEL\n        };\n    }\n\n    /**\n     * Determines if number encoded color contains alpha (opacity) defined and different then 255.\n     *\n     * @param hex The number encoded color (0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns True if color has transparency defined.\n     */\n    export function hasAlphaInHex(hex: number): boolean {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return hex >> SHIFT_TRANSPARENCY !== 0;\n    }\n\n    /**\n     * Retrieves alpha color channel from hex encoded color value.\n     *\n     * @see getHexFromRgba.\n     * @param hex The number encoded color value (representable as 0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns The floating point alpha component in <0, 1> range.\n     */\n    export function getAlphaFromHex(hex: number): number {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return (\n            ((HEX_FULL_CHANNEL - (hex >> SHIFT_TRANSPARENCY)) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL\n        );\n    }\n\n    /**\n     * Remove transparency info from the number coded color, makes it compatible with external libs.\n     *\n     * @see getAlphaFromHex.\n     * @param hex The number encoded color value (representable as 0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns number coded color value representable as 0xRRGGBB in hex.\n     */\n    export function removeAlphaFromHex(hex: number): number {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return hex & HEX_RGB_MASK;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { JsonExpr } from \"./Expr\";\n\n/**\n * Interpolation mode used when computing a [[InterpolatedProperty]] value for a given zoom level.\n */\nexport enum InterpolationMode {\n    Discrete,\n    Linear,\n    Cubic,\n    Exponential\n}\n\n/**\n * Interpolated property could have its value (some initial value should be provided) changed\n * according to an interpolation type.\n *\n * Here is an example of an interpolated property from a map style:\n * \"lineWidth\": {\n *  \"interpolation\": \"Linear\",\n *  \"zoomLevels\": [13, 14, 15],\n *  \"values\": [ 1.5, 1.2, 0.9]\n * }\n */\nexport interface InterpolatedPropertyDefinition<T> {\n    interpolation?: \"Discrete\" | \"Linear\" | \"Cubic\" | \"Exponential\";\n    zoomLevels: number[];\n    values: T[];\n    exponent?: number;\n}\n\n/**\n * Checks if a property is interpolated.\n * @param p property to be checked\n */\nexport function isInterpolatedPropertyDefinition<T>(\n    p: any\n): p is InterpolatedPropertyDefinition<T> {\n    if (\n        p &&\n        p.interpolationMode === undefined &&\n        Array.isArray(p.values) &&\n        p.values.length > 0 &&\n        p.values[0] !== undefined &&\n        Array.isArray(p.zoomLevels) &&\n        p.zoomLevels.length > 0 &&\n        p.zoomLevels[0] !== undefined &&\n        p.values.length === p.zoomLevels.length\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Converts an [[InterpolatedPropertyDefinition]] to a [[JsonExpr]].\n *\n * @param property A valid [[InterpolatedPropertyDefinition]]\n */\nexport function interpolatedPropertyDefinitionToJsonExpr(\n    property: InterpolatedPropertyDefinition<any>\n): JsonExpr {\n    if (property.interpolation === undefined || property.interpolation === \"Discrete\") {\n        const step: JsonExpr = [\"step\", [\"zoom\"], property.values[0]];\n        for (let i = 1; i < property.zoomLevels.length; ++i) {\n            step.push(property.zoomLevels[i], property.values[i]);\n        }\n        return step;\n    }\n    const interpolation: JsonExpr = [\"interpolate\"];\n    switch (property.interpolation) {\n        case \"Linear\":\n            interpolation.push([\"linear\"]);\n            break;\n        case \"Cubic\":\n            interpolation.push([\"cubic\"]);\n            break;\n        case \"Exponential\":\n            interpolation.push([\n                \"exponential\",\n                property.exponent !== undefined ? property.exponent : 2\n            ]);\n            break;\n        default:\n            throw new Error(`interpolation mode '${property.interpolation}' is not supported`);\n    } //switch\n    interpolation.push([\"zoom\"]);\n    for (let i = 0; i < property.zoomLevels.length; ++i) {\n        interpolation.push(property.zoomLevels[i], property.values[i]);\n    }\n    return interpolation;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Namespace containing useful information when dealing with Unicode's code points.\n */\nexport namespace UnicodeUtils {\n    /**\n     * Range of Unicode code points considered as white space.\n     * https://en.wikipedia.org/wiki/Whitespace_character\n     */\n    export const whiteSpaceRanges = [\n        [0x0009, 0x0009],\n        [0x0020, 0x0020],\n        [0x1680, 0x1680],\n        [0x2000, 0x2006],\n        [0x2008, 0x200a],\n        [0x205f, 0x3000],\n        [0x180e, 0x180e],\n        [0x200b, 0x200d]\n    ];\n\n    /**\n     * Checks if a character should be considered as a white space.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isWhiteSpace(codePoint: number) {\n        for (const range of whiteSpaceRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Range of Unicode code points considered as `NewLine`.\n     * https://en.wikipedia.org/wiki/Newline#Unicode\n     */\n    export const newLineRanges = [\n        [0x000a, 0x000d],\n        [0x0085, 0x0085],\n        [0x2028, 0x2029]\n    ];\n\n    /**\n     * Checks if a character should be considered as a new line.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isNewLine(codePoint: number) {\n        for (const range of newLineRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Range of Unicode code points considered as non-printable.\n     * https://en.wikipedia.org/wiki/Unicode_control_characters\n     */\n    export const nonPrintableRanges = [\n        [0x0000, 0x001f],\n        [0x007f, 0x009f]\n    ];\n\n    /**\n     * Checks if a character's can be printed (rendered).\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isPrintable(codePoint: number) {\n        for (const range of nonPrintableRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Unicode code point direction.\n     */\n    export enum Direction {\n        Neutral = 0.0,\n        Weak = 0.5,\n        LTR = 1.0,\n        RTL = -1.0\n    }\n\n    // TODO: Review/Remove/Add any additional needed blocks (HARP-3330).\n    /**\n     * Unicode Blocks which have inherent RTL direction.\n     * These blocks correspond to the scripts described here:\n     * https://en.wikipedia.org/wiki/Right-to-left#List_of_RTL_scripts\n     */\n    export const rtlBlocks: string[] = [\n        \"Hebrew\",\n        \"Alphabetic Presentation Forms\",\n        \"Arabic\",\n        \"Arabic Supplement\",\n        \"Arabic Extended-A\",\n        \"Arabic Presentation Forms-A\",\n        \"Arabic Presentation Forms-B\",\n        \"Arabic Mathematical Alphabetic Symbols\",\n        \"Indic Siyaq Numbers\",\n        \"Rumi Numeral Symbols\",\n        \"Syriac\",\n        \"Syriac Supplement\",\n        \"Samaritan\",\n        \"Mandaic\",\n        \"Thaana\",\n        \"Mende Kikakui\",\n        \"NKo\",\n        \"Adlam\",\n        \"Hanifi Rohingya\"\n    ];\n\n    /**\n     * ASCII punctuation is considered to have neutral direction:\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     */\n    export const neutralBidirectionalRanges = [\n        [0x0020, 0x002f],\n        [0x003a, 0x0040],\n        [0x005b, 0x0060],\n        [0x007b, 0x007e]\n    ];\n\n    /**\n     * Latin and arabic numerals are considered to have weak directionality:\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     * https://en.wikipedia.org/wiki/Arabic_(Unicode_block)#Block\n     */\n    export const weakBidirectionalRanges = [\n        [0x0030, 0x0039],\n        [0x0660, 0x0669],\n        [0x06f0, 0x06f9]\n    ];\n\n    /**\n     * Returns the Unicode's character direction.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param block Character's Unicode block.\n     *\n     * @returns Character's direction.\n     */\n    export function getDirection(codePoint: number, block: string): Direction {\n        // Test for neutral and weak code points first (they're inside LTR/RTL ranges).\n        for (const weakRange of weakBidirectionalRanges) {\n            if (codePoint >= weakRange[0] && codePoint <= weakRange[1]) {\n                return Direction.Weak;\n            }\n        }\n        for (const neutralRange of neutralBidirectionalRanges) {\n            if (codePoint >= neutralRange[0] && codePoint <= neutralRange[1]) {\n                return Direction.Neutral;\n            }\n        }\n\n        // Check for RTL/LTR.\n        const rtl = rtlBlocks.find(element => {\n            return element === block;\n        });\n        if (rtl !== undefined) {\n            return Direction.RTL;\n        } else {\n            return Direction.LTR;\n        }\n    }\n\n    /**\n     * Some punctuation characters (like: (, ), <, >, [,], {, }) need to be mirrored when rendering\n     * a RTL string to preserve their intrinsic meaning.\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     */\n    export const rtlMirroredCodePoints = [\n        0x0028,\n        0x0029,\n        0x003c,\n        0x003e,\n        0x005b,\n        0x005d,\n        0x007b,\n        0x007d\n    ];\n\n    /**\n     * Checks if a character should be mirrored on an RTL run.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isRtlMirrored(codePoint: number): boolean {\n        return (\n            rtlMirroredCodePoints.find(element => {\n                return element === codePoint;\n            }) !== undefined\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Types of text elements.\n */\nexport enum TextElementType {\n    PoiLabel,\n    PathLabel,\n    LineMarker\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * The interface for the [[Pass]] class.\n */\nexport interface IPass {\n    /**\n     * Whether the [[Pass]] instance is active or not.\n     * @default `true`.\n     */\n    enabled: boolean;\n\n    /**\n     * Whether the render method should target a WebGLRenderTarget instance, or the frame buffer.\n     * @default `false`.\n     */\n    renderToScreen: boolean;\n\n    /**\n     * The resize method to extend in [[Pass]] implementations. It resizes the render targets. Call\n     * on resize events.\n     *\n     * @param width Width to resize to.\n     * @param height Height to resize to.\n     */\n    setSize(width: number, height: number): void;\n\n    /**\n     * The render method to extend in [[Pass]] implementations. This is the place where the desired\n     * effects or render operations are executed.\n     *\n     * @param renderer The WebGLRenderer instance in use.\n     * @param scene The scene to render.\n     * @param camera The camera to render the scene through.\n     * @param writeBuffer The optional WebGLRenderTarget instance to write to.\n     * @param readBuffer The optional WebGLRenderTarget instance of a previous pass to write onto.\n     * @param delta The time argument from the requestAnimationFrame.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null,\n        delta?: number\n    ): void;\n}\n\n/**\n * The base class to extend for further passes in [[MapView]], like the [[MSAARenderPass]], possibly\n * a text pass, an AO effect etc. `Pass` provides the core logic for both :\n * - render passes (proper scene renders),\n * - and shader passes (quad renders, i.e. effects added on top of the render output as a\n * postprocess).\n *\n * Even some shader passes still actually fall within the render pass category as they need to\n * re-render the scene to then deduce an effect, such as masking, AO, DoF etc. Others just need the\n * previous input image to apply a shader on top of it, as for bloom or NVIDIA's FXAA for example.\n * These only are proper shader passes.\n */\nexport class Pass implements IPass {\n    enabled: boolean = false;\n    renderToScreen: boolean = false;\n    // tslint:disable-next-line:no-unused-variable\n    setSize(width: number, height: number) {\n        // Implemented in sub-classes.\n    }\n    // tslint:disable:no-unused-variable\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null,\n        delta?: number\n    ) {\n        // Implemented in sub-classes.\n    }\n    // tslint:enable:no-unused-variable\n}\n\n/**\n * The pass that does a default normal scene rendering for further post-effects.\n */\nexport class RenderPass extends Pass {\n    constructor() {\n        super();\n    }\n\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null\n    ) {\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        renderer.render(scene, camera);\n    }\n}\n\n/**\n * The base class to extend for post-effects on the final render (like Vignette, Sepia, color\n * correction...)\n */\nexport class ShaderPass extends Pass {\n    uniforms: { [uniform: string]: THREE.IUniform };\n    material: THREE.Material;\n    fsQuad: FullScreenQuad;\n    constructor(shader: THREE.Shader, private textureID: string = \"tDiffuse\") {\n        super();\n        if (shader instanceof THREE.ShaderMaterial) {\n            this.uniforms = shader.uniforms;\n            this.material = shader;\n        } else {\n            this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n            this.material = new THREE.ShaderMaterial({\n                defines: { ...(shader as any).defines },\n                uniforms: this.uniforms,\n                vertexShader: shader.vertexShader,\n                fragmentShader: shader.fragmentShader\n            });\n        }\n        this.fsQuad = new FullScreenQuad(this.material);\n    }\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget,\n        readBuffer: THREE.WebGLRenderTarget,\n        delta?: number\n    ) {\n        if (this.uniforms[this.textureID]) {\n            this.uniforms[this.textureID].value = readBuffer.texture;\n        }\n        this.fsQuad.material = this.material;\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        this.fsQuad.render(renderer);\n    }\n}\n\nclass FullScreenQuad {\n    private m_mesh: THREE.Mesh;\n    private m_camera: THREE.Camera;\n    constructor(material: THREE.Material) {\n        this.m_camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n        const geometry = new THREE.PlaneBufferGeometry(2, 2);\n        this.m_mesh = new THREE.Mesh(geometry, material);\n    }\n    get material(): THREE.Material {\n        return this.m_mesh.material as THREE.Material;\n    }\n    set material(value: THREE.Material) {\n        this.m_mesh.material = value;\n    }\n    render(renderer: THREE.WebGLRenderer) {\n        renderer.render((this.m_mesh as any) as THREE.Scene, this.m_camera);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\nclass MercatorProjection extends Projection {\n    protected static clamp(val: number, min: number, max: number): number {\n        return Math.min(Math.max(min, val), max);\n    }\n\n    protected static latitudeClamp(latitude: number): number {\n        return MercatorProjection.clamp(\n            latitude,\n            -MercatorConstants.MAXIMUM_LATITUDE,\n            MercatorConstants.MAXIMUM_LATITUDE\n        );\n    }\n\n    private static latitudeProject(latitude: number): number {\n        return Math.log(Math.tan(Math.PI * 0.25 + latitude * 0.5)) / Math.PI;\n    }\n\n    private static latitudeClampProject(latitude: number): number {\n        return MercatorProjection.latitudeProject(MercatorProjection.latitudeClamp(latitude));\n    }\n\n    private static unprojectLatitude(y: number): number {\n        return 2.0 * Math.atan(Math.exp(Math.PI * y)) - Math.PI * 0.5;\n    }\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(worldPoint: Vector3Like): number {\n        return Math.cosh(2 * Math.PI * (worldPoint.y / this.unitScale - 0.5));\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        result.min.x = 0;\n        result.min.y = 0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPointLike: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        let geoPoint: GeoCoordinates;\n\n        if (geoPointLike instanceof GeoCoordinates) {\n            geoPoint = geoPointLike;\n        } else {\n            geoPoint = new GeoCoordinates(\n                geoPointLike.latitude,\n                geoPointLike.longitude,\n                geoPointLike.altitude\n            );\n        }\n\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x = ((geoPoint.longitude + 180) / 360) * this.unitScale;\n        result.y =\n            (MercatorProjection.latitudeClampProject(geoPoint.latitudeInRadians) * 0.5 + 0.5) *\n            this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(\n            MercatorProjection.unprojectLatitude((worldPoint.y / this.unitScale - 0.5) * 2.0),\n            (worldPoint.x / this.unitScale) * 2 * Math.PI - Math.PI,\n            worldPoint.z\n        );\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const worldCenter = this.projectPoint(geoBox.center);\n        const worldNorth =\n            (MercatorProjection.latitudeClampProject(geoBox.northEast.latitudeInRadians) * 0.5 +\n                0.5) *\n            this.unitScale;\n        const worldSouth =\n            (MercatorProjection.latitudeClampProject(geoBox.southWest.latitudeInRadians) * 0.5 +\n                0.5) *\n            this.unitScale;\n        const worldYCenter = (worldNorth + worldSouth) * 0.5;\n\n        worldCenter.y = worldYCenter;\n\n        const latitudeSpan = worldNorth - worldSouth;\n        const longitudeSpan = (geoBox.longitudeSpan / 360) * this.unitScale;\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = worldCenter.x - longitudeSpan * 0.5;\n            result.min.y = worldCenter.y - latitudeSpan * 0.5;\n            result.max.x = worldCenter.x + longitudeSpan * 0.5;\n            result.max.y = worldCenter.y + latitudeSpan * 0.5;\n            const altitudeSpan = geoBox.altitudeSpan;\n            if (altitudeSpan !== undefined) {\n                result.min.z = worldCenter.z - altitudeSpan * 0.5;\n                result.max.z = worldCenter.z + altitudeSpan * 0.5;\n            } else {\n                result.min.z = 0;\n                result.max.z = 0;\n            }\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = worldCenter.x;\n            result.position.y = worldCenter.y;\n            result.position.z = worldCenter.z;\n            result.extents.x = longitudeSpan * 0.5;\n            result.extents.y = latitudeSpan * 0.5;\n            result.extents.z = Math.max(Number.EPSILON, (geoBox.altitudeSpan || 0) * 0.5);\n        } else {\n            throw new Error(\"invalid bounding box\");\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        const geoBox = GeoBox.fromCoordinates(minGeo, maxGeo);\n        return geoBox;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n\n    /** @override */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        // this implementation of [[reprojectPoint]] supports both\n        // [[WebMercatorProjection]] and [[MercatorProjection]]. The only\n        // difference betweeen these two variants of WEB Mercator\n        // is in the orientation of the Y axis, so we just flip Y coordinates\n        // when reprojecting between them.\n        if (\n            sourceProjection !== this &&\n            (sourceProjection === webMercatorProjection || sourceProjection === mercatorProjection)\n        ) {\n            if (result === undefined) {\n                // tslint:disable-next-line: no-object-literal-type-assertion\n                result = {} as Vector3Like;\n            }\n\n            result.x = worldPos.x;\n            result.y = this.unitScale - worldPos.y;\n            result.z = worldPos.z;\n\n            return result;\n        }\n\n        return super.reprojectPoint(sourceProjection, worldPos, result!);\n    }\n}\n\nclass WebMercatorProjection extends MercatorProjection {\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPointLike: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        let geoPoint: GeoCoordinates;\n\n        if (geoPointLike instanceof GeoCoordinates) {\n            geoPoint = geoPointLike;\n        } else {\n            geoPoint = new GeoCoordinates(\n                geoPointLike.latitude,\n                geoPointLike.longitude,\n                geoPointLike.altitude\n            );\n        }\n\n        /*\n         * The following tslint:disable is due to the fact that the [[WorldCoordinates]]\n         * might be a concrete class which is not available at runtime.\n         * Consider the following example:\n         *\n         *  const x: THREE.Vector3 = new THREE.Vector3(0,0,0);\n         *  const result = EquirectangularProjection.projectPoint<THREE.Vector3>(x);\n         *\n         * Note: type of `result` is Vector3Like and not as expected: THREE.Vector3!\n         */\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n\n        result.x = ((geoPoint.longitude + 180) / 360) * this.unitScale;\n        const sy = Math.sin(MercatorProjection.latitudeClamp(geoPoint.latitudeInRadians));\n        result.y = (0.5 - Math.log((1 + sy) / (1 - sy)) / (4 * Math.PI)) * this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const x = worldPoint.x / this.unitScale - 0.5;\n        const y = 0.5 - worldPoint.y / this.unitScale;\n\n        const longitude = 360 * x;\n        const latitude = 90 - (360 * Math.atan(Math.exp(-y * 2 * Math.PI))) / Math.PI;\n\n        return new GeoCoordinates(latitude, longitude, worldPoint.z);\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const r = super.projectBox(geoBox, result);\n        if (isBox3Like(r)) {\n            // Invert the y axis for web mercator, this means that max => min & min => max\n            const maxY = r.max.y;\n            r.max.y = this.unitScale - r.min.y;\n            r.min.y = this.unitScale - maxY;\n        } else if (isOrientedBox3Like(r)) {\n            MathUtils.newVector3(1, 0, 0, r.xAxis);\n            MathUtils.newVector3(0, -1, 0, r.yAxis);\n            MathUtils.newVector3(0, 0, -1, r.zAxis);\n            r.position.y = this.unitScale - r.position.y;\n        }\n        return r;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        const geoBox = new GeoBox(\n            new GeoCoordinates(maxGeo.latitude, minGeo.longitude, minGeo.altitude),\n            new GeoCoordinates(minGeo.latitude, maxGeo.longitude, maxGeo.altitude)\n        );\n        return geoBox;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: -1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = -1;\n        }\n        return normal;\n    }\n\n    /** @override */\n    localTangentSpace(geoPoint: GeoCoordinatesLike, result: TransformLike): TransformLike {\n        this.projectPoint(geoPoint, result.position);\n        MathUtils.newVector3(1, 0, 0, result.xAxis);\n        MathUtils.newVector3(0, -1, 0, result.yAxis);\n        MathUtils.newVector3(0, 0, -1, result.zAxis);\n        return result;\n    }\n}\n\nexport class MercatorConstants {\n    // Math.atan(Math.sinh(Math.PI))\n    static readonly MAXIMUM_LATITUDE: number = 1.4844222297453323;\n}\n\n/**\n * Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\nexport const mercatorProjection: Projection = new MercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n\n/**\n * Web Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\nexport const webMercatorProjection: Projection = new WebMercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\n\nclass QuadTreeSubdivisionScheme implements SubdivisionScheme {\n    getSubdivisionX(): number {\n        return 2;\n    }\n    getSubdivisionY(): number {\n        return 2;\n    }\n    getLevelDimensionX(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n    getLevelDimensionY(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n}\n\n/**\n * [[SubdivisionScheme]] representing a quadtree.\n */\nexport const quadTreeSubdivisionScheme: SubdivisionScheme = new QuadTreeSubdivisionScheme();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @hidden */\nconst powerOfTwo = [\n    0x1,\n    0x2,\n    0x4,\n    0x8,\n    0x10,\n    0x20,\n    0x40,\n    0x80,\n    0x100,\n    0x200,\n    0x400,\n    0x800,\n    0x1000,\n    0x2000,\n    0x4000,\n    0x8000,\n    0x10000,\n    0x20000,\n    0x40000,\n    0x80000,\n    0x100000,\n    0x200000,\n    0x400000,\n    0x800000,\n    0x1000000,\n    0x2000000,\n    0x4000000,\n    0x8000000,\n    0x10000000,\n    0x20000000,\n    0x40000000,\n    0x80000000,\n    0x100000000,\n    0x200000000,\n    0x400000000,\n    0x800000000,\n    0x1000000000,\n    0x2000000000,\n    0x4000000000,\n    0x8000000000,\n    0x10000000000,\n    0x20000000000,\n    0x40000000000,\n    0x80000000000,\n    0x100000000000,\n    0x200000000000,\n    0x400000000000,\n    0x800000000000,\n    0x1000000000000,\n    0x2000000000000,\n    0x4000000000000,\n    0x8000000000000,\n    0x10000000000000 // Math.pow(2, 52), highest bit that can be set correctly.\n];\n\n/**\n * The `TileKey` instances are used to address a tile in a quadtree.\n *\n * A tile key is defined by a row, a column, and a level. The tree has a root at level 0, with one\n * single tile. On every level, each tile is divided into four children (therefore the name\n * quadtree).\n *\n * Within each [[level]], any particular tile is addressed with [[row]] and [[column]]. The number\n * of rows and columns in each level is 2 to the power of the level. This means: On level 0, only\n * one tile exists, [[columnsAtLevel]]() and [[rowsAtLevel]]() are both 1. On level 1, 4 tiles\n * exist, in 2 rows and 2 columns. On level 2 we have 16 tiles, in 4 rows and 4 columns. And so on.\n *\n * A tile key is usually created using [[fromRowColumnLevel]]() method.\n *\n * `TileKey` instances are immutable, all members return new instances of `TileKey` and do not\n * modify the original object.\n *\n * Utility functions like [[parent]](), [[changedLevelBy]](), and [[changedLevelTo]]() allow for\n * easy vertical navigation of the tree. The number of available rows and columns in the tile's\n * level is given with [[rowCount]]() and [[columnCount]]().\n *\n * Tile keys can be created from and converted into various alternative formats:\n *\n *  - [[toQuadKey]]() / [[fromQuadKey]]() - string representation 4-based\n *  - [[toHereTile]]() / [[fromHereTile]]() - string representation 10-based\n *  - [[mortonCode]]() / [[fromMortonCode]]() - number representation\n *\n * Note - as JavaScript's number type can hold 53 bits in its mantissa, only levels up to 26 can be\n * represented in the number representation returned by [[mortonCode]]().\n */\nexport class TileKey {\n    /**\n     * Creates a tile key.\n     *\n     * @param row The requested row. Must be less than 2 to the power of level.\n     * @param column The requested column. Must be less than 2 to the power of level.\n     * @param level The requested level.\n     */\n    static fromRowColumnLevel(row: number, column: number, level: number): TileKey {\n        return new TileKey(row, column, level);\n    }\n\n    /**\n     * Creates a tile key from a quad string.\n     *\n     * The quad string can be created with [[toQuadKey]].\n     *\n     * @param quadkey The quadkey to convert.\n     * @returns A new instance of `TileKey`.\n     */\n    static fromQuadKey(quadkey: string): TileKey {\n        const level = quadkey.length;\n        let row = 0;\n        let column = 0;\n        // tslint:disable:no-bitwise\n        for (let i = 0; i < quadkey.length; ++i) {\n            const mask = 1 << i;\n            const d = parseInt(quadkey.charAt(level - i - 1), 10);\n            if (d & 0x1) {\n                column |= mask;\n            }\n            if (d & 0x2) {\n                row |= mask;\n            }\n        }\n        // tslint:enable:no-bitwise\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n    /**\n     * Creates a tile key from a numeric Morton code representation.\n     *\n     * You can convert a tile key into a numeric Morton code with [[mortonCode]].\n     *\n     * @param quadKey64 The Morton code to be converted.\n     * @returns A new instance of [[TileKey]].\n     */\n    static fromMortonCode(quadKey64: number): TileKey {\n        let level = 0;\n        let row = 0;\n        let column = 0;\n        let quadKey = quadKey64;\n        // tslint:disable:no-bitwise\n        while (quadKey > 1) {\n            const mask: number = 1 << level;\n\n            if (quadKey & 0x1) {\n                column |= mask;\n            }\n            if (quadKey & 0x2) {\n                row |= mask;\n            }\n\n            level++;\n            quadKey = (quadKey - (quadKey & 0x3)) / 4;\n        }\n        // tslint:enable:no-bitwise\n        const result = TileKey.fromRowColumnLevel(row, column, level);\n        result.m_mortonCode = quadKey64;\n        return result;\n    }\n\n    /**\n     * Creates a tile key from a heretile code string.\n     *\n     * The string can be created with [[toHereTile]].\n     *\n     * @param quadkey64 The string representation of the HERE tile key.\n     * @returns A new instance of `TileKey`.\n     */\n    static fromHereTile(quadkey64: string): TileKey {\n        const result = TileKey.fromMortonCode(parseInt(quadkey64, 10));\n        result.m_hereTile = quadkey64;\n        return result;\n    }\n\n    /**\n     * Returns the number of available columns at a given level.\n     *\n     * This is 2 to the power of the level.\n     *\n     * @param level The level for which to return the number of columns.\n     * @returns The available columns at the given level.\n     */\n    static columnsAtLevel(level: number): number {\n        return Math.pow(2, level);\n    }\n\n    /**\n     * Returns the number of available rows at a given level.\n     *\n     * This is 2 to the power of the level.\n     *\n     * @param level The level for which to return the number of rows.\n     * @returns The available rows at the given level.\n     */\n    static rowsAtLevel(level: number): number {\n        return Math.pow(2, level);\n    }\n\n    /**\n     * Returns the closest matching `TileKey` in a cartesian coordinate system.\n     *\n     * @param level The level for the tile key.\n     * @param coordX The X coordinate.\n     * @param coordY The Y coordinate.\n     * @param totalWidth The maximum X coordinate.\n     * @param totalHeight The maximum Y coordinate.\n     * @returns A new tile key at the given level that includes the given coordinates.\n     */\n    static atCoords(\n        level: number,\n        coordX: number,\n        coordY: number,\n        totalWidth: number,\n        totalHeight: number\n    ): TileKey {\n        return TileKey.fromRowColumnLevel(\n            Math.floor(coordY / (totalHeight / TileKey.rowsAtLevel(level))),\n            Math.floor(coordX / (totalWidth / TileKey.columnsAtLevel(level))),\n            level\n        );\n    }\n\n    /**\n     * Computes the Morton code of the parent tile key of the given Morton code.\n     *\n     * Note: The parent key of the root key is the root key itself.\n     *\n     * @param mortonCode A Morton code, for example, obtained from [[mortonCode]].\n     * @returns The Morton code of the parent tile.\n     */\n    static parentMortonCode(mortonCode: number): number {\n        return Math.floor(mortonCode / 4);\n    }\n\n    private m_mortonCode?: number;\n    private m_hereTile?: string;\n\n    /**\n     * Constructs a new immutable instance of a `TileKey`.\n     *\n     * For the better readability, [[TileKey.fromRowColumnLevel]] should be preferred.\n     *\n     * Note - row and column must not be greater than the maximum rows/columns for the given level.\n     *\n     * @param row Represents the row in the quadtree.\n     * @param column Represents the column in the quadtree.\n     * @param level Represents the level in the quadtree.\n     */\n    constructor(readonly row: number, readonly column: number, readonly level: number) {}\n\n    /**\n     * Returns a tile key representing the parent of the tile addressed by this tile key.\n     *\n     * Throws an exception is this tile is already the root.\n     */\n    parent(): TileKey {\n        if (this.level === 0) {\n            throw new Error(\"Cannot get the parent of the root tile key\");\n        }\n        // tslint:disable-next-line:no-bitwise\n        return TileKey.fromRowColumnLevel(this.row >>> 1, this.column >>> 1, this.level - 1);\n    }\n\n    /**\n     * Returns a new tile key at a level that differs from this tile's level by delta.\n     *\n     * Equivalent to `changedLevelTo(level() + delta)`.\n     *\n     * Note - root key is returned if `delta` is smaller than the level of this tile key.\n     *\n     * @param delta The numeric difference between the current level and the requested level.\n     */\n    changedLevelBy(delta: number): TileKey {\n        const level = Math.max(0, this.level + delta);\n        let row = this.row;\n        let column = this.column;\n\n        // tslint:disable:no-bitwise\n        if (delta >= 0) {\n            row <<= delta;\n            column <<= delta;\n        } else {\n            row >>>= -delta;\n            column >>>= -delta;\n        }\n        // tslint:enable:no-bitwise\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n\n    /**\n     * Returns a new tile key at the requested level.\n     *\n     * If the requested level is smaller than the tile's level, then the key of an ancestor of this\n     * tile is returned. If the requested level is larger than the tile's level, then the key of\n     * first child or grandchild of this tile is returned, for example, the child with the lowest\n     * row and column number. If the requested level equals this tile's level, then the tile key\n     * itself is returned. If the requested level is negative, the root tile key is returned.\n     *\n     * @param level The requested level.\n     */\n    changedLevelTo(level: number): TileKey {\n        return this.changedLevelBy(level - this.level);\n    }\n\n    /**\n     * Converts the tile key to a numeric code representation.\n     *\n     * You can create a tile key from a numeric Morton code with [[fromMortonCode]].\n     *\n     * Note - only levels <= 26 are supported.\n     */\n    mortonCode(): number {\n        if (this.m_mortonCode === undefined) {\n            let column = this.column;\n            let row = this.row;\n\n            // tslint:disable:no-bitwise\n            let result = powerOfTwo[this.level << 1];\n            for (let i = 0; i < this.level; ++i) {\n                if (column & 0x1) {\n                    result += powerOfTwo[2 * i];\n                }\n                if (row & 0x1) {\n                    result += powerOfTwo[2 * i + 1];\n                }\n                column >>>= 1;\n                row >>>= 1;\n            }\n            // tslint:enable:no-bitwise\n\n            this.m_mortonCode = result;\n        }\n        return this.m_mortonCode;\n    }\n\n    /**\n     * Converts the tile key into a string for using in REST API calls.\n     *\n     * The string is a quadkey Morton code representation as a string.\n     *\n     * You can convert back from a quadkey string with [[fromHereTile]].\n     */\n    toHereTile(): string {\n        if (this.m_hereTile === undefined) {\n            this.m_hereTile = this.mortonCode().toString();\n        }\n        return this.m_hereTile;\n    }\n\n    /**\n     * Converts the tile key into a string for using in REST API calls.\n     *\n     * If the tile is the root tile, the quadkey is '-'. Otherwise the string is a number to the\n     * base of 4, but without the leading 1, with the following properties:\n     *  1. the number of digits equals the level.\n     *  2. removing the last digit gives the parent tile's quadkey string, i.e. appending 0,1,2,3\n     *     to a quadkey string gives the tiles's children.\n     *\n     * You can convert back from a quadkey string with [[fromQuadKey]].\n     */\n    toQuadKey(): string {\n        let result: string = \"\";\n\n        // tslint:disable:no-bitwise\n        for (let i = this.level; i > 0; --i) {\n            const mask = 1 << (i - 1);\n\n            const col = (this.column & mask) !== 0;\n            const row = (this.row & mask) !== 0;\n\n            if (col && row) {\n                result += \"3\";\n            } else if (row) {\n                result += \"2\";\n            } else if (col) {\n                result += \"1\";\n            } else {\n                result += \"0\";\n            }\n        }\n        // tslint:enable:no-bitwise\n\n        return result;\n    }\n\n    /**\n     * Equality operator.\n     *\n     * @param qnr The tile key to compare to.\n     * @returns `true` if this tile key has identical row, column and level, `false` otherwise.\n     */\n    equals(qnr: TileKey): boolean {\n        return this.row === qnr.row && this.column === qnr.column && this.level === qnr.level;\n    }\n\n    /**\n     * Returns the absolute quadkey that is constructed from its sub quadkey.\n     *\n     * @param sub The sub key.\n     * @returns The absolute tile key in the quadtree.\n     */\n    addedSubKey(sub: string): TileKey {\n        const subQuad = TileKey.fromQuadKey(sub.length === 0 ? \"-\" : sub);\n        const child = this.changedLevelBy(subQuad.level);\n        return TileKey.fromRowColumnLevel(\n            child.row + subQuad.row,\n            child.column + subQuad.column,\n            child.level\n        );\n    }\n\n    /**\n     * Returns the absolute quadkey that is constructed from its sub HERE tile key.\n     *\n     * @param sub The sub HERE key.\n     * @returns The absolute tile key in the quadtree.\n     */\n    addedSubHereTile(sub: string): TileKey {\n        const subQuad = TileKey.fromHereTile(sub);\n        const child = this.changedLevelBy(subQuad.level);\n        return TileKey.fromRowColumnLevel(\n            child.row + subQuad.row,\n            child.column + subQuad.column,\n            child.level\n        );\n    }\n\n    /**\n     * Returns a sub quadkey that is relative to its parent.\n     *\n     * This function can be used to generate sub keys that are relative to a parent that is delta\n     * levels up in the quadtree.\n     *\n     * This function can be used to create shortened keys for quads on lower levels if the parent is\n     * known.\n     *\n     * Note - the sub quadkeys fit in a 16-bit unsigned integer if the `delta` is smaller than 8. If\n     * `delta` is smaller than 16, the sub quadkey fits into an unsigned 32-bit integer.\n     *\n     * Deltas larger than 16 are not supported.\n     *\n     * @param delta The number of levels relative to its parent quadkey. Must be greater or equal to\n     * 0 and smaller than 16.\n     * @returns The quadkey relative to its parent that is `delta` levels up the tree.\n     */\n    getSubHereTile(delta: number): string {\n        const key = this.mortonCode();\n        // tslint:disable-next-line:no-bitwise\n        const msb = 1 << (delta * 2);\n        const mask = msb - 1;\n        // tslint:disable-next-line:no-bitwise\n        const result = (key & mask) | msb;\n        return result.toString();\n    }\n\n    /**\n     * Returns the number of available rows in the tile's [[level]].\n     *\n     * This is 2 to the power of the level.\n     */\n    rowCount(): number {\n        return TileKey.rowsAtLevel(this.level);\n    }\n\n    /**\n     * Returns the number of available columns in the tile's [[level]].\n     *\n     * This is 2 to the power of the level.\n     */\n    columnCount(): number {\n        return TileKey.columnsAtLevel(this.level);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace ExtrusionFeatureDefs {\n    /**\n     * Minimum ratio value for extrusion effect\n     */\n    export const DEFAULT_RATIO_MIN: number = 0.0;\n    /**\n     * Maximum ratio value for extrusion effect\n     */\n    export const DEFAULT_RATIO_MAX: number = 1;\n\n    /**\n     * Buildings height used whenever no height-data is present or height is very small.\n     *\n     * Used to avoid z-fighting between ground plane and building.\n     */\n    export const MIN_BUILDING_HEIGHT = 0.01;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @hidden\n */\nexport type Value = null | boolean | number | string | object;\n\n/**\n * @hidden\n */\nexport interface ValueMap {\n    [name: string]: Value;\n}\n\n/**\n * @hidden\n */\nexport class Env {\n    /**\n     * Returns `true` if the given object is an instance of [[Env]].\n     *\n     * @param object The object to test.\n     */\n    static isEnv(object: any): object is Env {\n        return object instanceof Env;\n    }\n\n    /**\n     * Returns property in [[Env]] by name.\n     *\n     * @param name Name of property.\n     */\n    lookup(_name: string): Value | undefined {\n        return undefined;\n    }\n    /**\n     * Return an object containing all properties of this environment. (Here: empty object).\n     */\n    unmap(): ValueMap {\n        return {};\n    }\n}\n\n/**\n * Adds access to map specific environment properties.\n */\nexport class MapEnv extends Env {\n    constructor(readonly entries: ValueMap, private readonly parent?: Env) {\n        super();\n    }\n    /**\n     * Returns property in [[Env]] by name.\n     *\n     * @param name Name of property.\n     * @override\n     */\n    lookup(name: string): Value | undefined {\n        if (this.entries.hasOwnProperty(name)) {\n            const value = this.entries[name];\n            if (value !== undefined) {\n                return value;\n            }\n        }\n        return this.parent ? this.parent.lookup(name) : undefined;\n    }\n    /**\n     * Return an object containing all properties of this environment, takes care of the parent\n     * object.\n     * @override\n     */\n    unmap(): ValueMap {\n        const obj: any = this.parent ? this.parent.unmap() : {};\n        for (const key in this.entries) {\n            if (this.entries.hasOwnProperty(key)) {\n                obj[key] = this.entries[key];\n            }\n        }\n        return obj;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils/lib/math/Vector3Like\";\nimport { isJsonExpr, JsonExpr } from \"./Expr\";\nimport { isInterpolatedPropertyDefinition } from \"./InterpolatedPropertyDefs\";\nimport {\n    BaseTechniqueParams,\n    BasicExtrudedLineTechniqueParams,\n    DynamicProperty,\n    ExtrudedPolygonTechniqueParams,\n    FillTechniqueParams,\n    MarkerTechniqueParams,\n    PointTechniqueParams,\n    SegmentsTechniqueParams,\n    ShaderTechniqueParams,\n    SolidLineTechniqueParams,\n    StandardExtrudedLineTechniqueParams,\n    StandardTechniqueParams,\n    TerrainTechniqueParams,\n    TextTechniqueParams\n} from \"./TechniqueParams\";\n\n/**\n * Map theme is used to define what features are shown and how the map is styled, for example\n * which lightning is used or whether fog should be displayed.\n */\nexport interface Theme {\n    /**\n     * The URI of the JSON schema describing themes.\n     */\n    $schema?: string;\n\n    /**\n     * The base `Theme`s or `theme` URLs to extend.\n     *\n     * If used, base themes are loaded first, and then all the properties from inherited theme\n     * overwrite these defined in base theme.\n     */\n    extends?: string | Theme | Array<string | Theme>;\n\n    /**\n     * Actual URL the theme has been loaded from.\n     */\n    url?: string;\n\n    /**\n     * Color to be used as a clear background - no map objects.\n     * @format color-hex\n     */\n    clearColor?: string;\n\n    /**\n     * Define the default text style for styling labels and texts.\n     */\n    defaultTextStyle?: TextStyleDefinition;\n\n    /**\n     * Define the lightning available on the three.js scene.\n     */\n    lights?: Light[];\n\n    /**\n     * Define the style of the sky presented in the map scene.\n     */\n    sky?: Sky;\n\n    /**\n     * Define the fog used in the map scene.\n     */\n    fog?: Fog;\n\n    /**\n     * The definitions exported by these theme.\n     */\n    definitions?: Definitions;\n\n    /**\n     * Map styles available for datasources used to render the map.\n     */\n    styles?: Styles;\n\n    /**\n     * Define the style to render different types of text used on the map.\n     */\n    textStyles?: TextStyleDefinition[];\n\n    /**\n     * List available fonts to be used while rendering text.\n     */\n    fontCatalogs?: FontCatalogConfig[];\n\n    /**\n     * Optional images to be rendered on the map view.\n     */\n    images?: ImageDefinitions;\n\n    /**\n     * Image textures to be used while rendering geometries on the map view.\n     */\n    imageTextures?: ImageTexture[];\n\n    /**\n     * Optional list of [[ThemePoiTableDef]]s.\n     */\n    poiTables?: PoiTableRef[];\n\n    /**\n     * Optional list of symbolic priorities for the object\n     * created using this [[Theme]].\n     *\n     * The attribute `styleSet` and `category` of the [[Technique]]\n     * are used together with [[Theme.priorities]] to sort\n     * the objects created using this [[Theme]], for example:\n     *\n     * ```json\n     * {\n     *      \"priorities\": [\n     *          { \"group\": \"tilezen\", \"category\": \"outline-1\" }\n     *      ],\n     *      \"styles\": [\n     *          {\n     *              \"technique\": \"solid-line\",\n     *              \"styleSet\": \"tilezen\",\n     *              \"category\": \"outline-1\"\n     *          }\n     *      ]\n     * }\n     * ```\n     */\n    priorities?: StylePriority[];\n\n    /**\n     * Optional list of priorities for the screen-space\n     * objects created using this style.\n     *\n     * The name of the `category` attribute of the screen-space\n     * technique (e.g. `\"text\"`) must match on the strings\n     * defined by this [[Theme.labelPriorities]], for example:\n     *\n     * ```json\n     * {\n     *      \"labelPriorities\": [\n     *          \"continent-labels\",\n     *          \"country-labels\",\n     *          \"state-labels\"\n     *      ],\n     *      \"styles\": [\n     *          {\n     *              \"technique\": \"text\",\n     *              \"category\": \"state-labels\"\n     *          }\n     *      ]\n     * }\n     * ```\n     */\n    labelPriorities?: string[];\n}\n\n/**\n * A type representing symbolic render orders.\n */\nexport interface StylePriority {\n    /**\n     * The group of this [[StylePriority]].\n     */\n    group: string;\n\n    /**\n     * The category of this [[StylePriority]].\n     */\n    category?: string;\n}\n\n/**\n * A type representing HARP themes with all the styleset declarations\n * grouped in one [[Array]].\n *\n * @internal This type will merge with [[Theme]].\n */\nexport type FlatTheme = Omit<Theme, \"styles\"> & {\n    /**\n     * The style rules used to render the map.\n     */\n    styles?: StyleSet;\n};\n\n/**\n * Checks if the given definition implements the [[BoxedDefinition]] interface.\n */\nexport function isBoxedDefinition(def: Definition): def is BoxedDefinition {\n    const bdef = def as BoxedDefinition;\n    return (\n        typeof bdef === \"object\" &&\n        bdef !== null &&\n        (typeof bdef.type === \"string\" || typeof bdef.type === \"undefined\") &&\n        (typeof bdef.value === \"string\" ||\n            typeof bdef.value === \"number\" ||\n            typeof bdef.value === \"boolean\" ||\n            isInterpolatedPropertyDefinition(bdef.value) ||\n            isJsonExpr(bdef.value))\n    );\n}\n\nexport function isLiteralDefinition(def: Definition): def is LiteralValue {\n    return typeof def === \"string\" || typeof def === \"number\" || typeof def === \"boolean\";\n}\n\n/**\n * Value definition commons.\n */\nexport interface BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type?: string;\n\n    /**\n     * The description of the definition.\n     */\n    description?: string;\n}\n\n/**\n * Possible types of unboxed literal values carried by [[Definition]].\n */\nexport type LiteralValue = string | number | boolean;\n\n/**\n * Boxed definition without type.\n */\nexport interface BoxedAnyDefinition extends BaseValueDefinition {\n    /**\n     * The value of the definition.\n     */\n    value: LiteralValue | JsonExpr;\n}\n\n/**\n * A boxed boolean value definition.\n */\nexport interface BoxedBooleanDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"boolean\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<boolean>;\n}\n\n/**\n * A boxed numerical value definition.\n */\nexport interface BoxedNumericDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"number\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<number>;\n}\n\n/**\n * A boxed string value definition.\n */\nexport interface BoxedStringDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"string\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<string>;\n}\n\n/**\n * A boxed color value definition.\n */\nexport interface BoxedColorDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"color\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<string>;\n}\n\n/**\n * A boxed selector value definition.\n */\nexport interface BoxedSelectorDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"selector\";\n\n    /**\n     * The value of the definition.\n     *\n     * See [[BaseStyle.when]].\n     */\n    value: string | JsonExpr;\n}\n\n/**\n * A boxed value definition.\n */\nexport type BoxedDefinition =\n    | BoxedAnyDefinition\n    | BoxedBooleanDefinition\n    | BoxedNumericDefinition\n    | BoxedStringDefinition\n    | BoxedColorDefinition\n    | BoxedSelectorDefinition;\n\n/**\n * Possible values for `definitions` element of [Theme].\n */\nexport type Definition = LiteralValue | JsonExpr | BoxedDefinition | StyleDeclaration;\n\n/**\n * An array of [[Definition]]s.\n */\nexport interface Definitions {\n    [name: string]: Definition;\n}\n\n/**\n * Base [StyleSelector] attributes required to match [Style] object against given feature.\n *\n * Contains [Style]'s members related to feature matching in [[StyleSetEvaluator]].\n */\nexport interface StyleSelector {\n    /**\n     * Condition that is applied to feature properties to check if given [[Style]] this feature\n     * should emit geometry of this style.\n     *\n     * Conditions are defined using [[Array]]s describing literals, built-in symbols and function\n     * calls:\n     *  - `[\"has\", string]` returns `true` if the given property exists.\n     *  - `[\"get\", string]` returns the value of the given feature property with the given name.\n     *  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n     *  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n     *  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n     *    expression is included in the given `Array` of literals.\n     *  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n     *  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is less than the result of evaluating the second expression.\n     *  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is greater than the result of evaluating the second expression.\n     *  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is less than or equal the result of evaluating the second expression.\n     *  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is greater than or equal the result of evaluating the second expression.\n     *  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is equal the result of evaluating the second expression.\n     *  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is not equal to the result of evaluating the second expression.\n     *  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n     *    a `string` or an `Array`; otherwise, returns `undefined`.\n     *  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression contains the `string` obtained from the\n     *    second expression; otherwise, returns `undefined`.\n     *  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression starts with the `string` obtained from\n     *    the second expression; otherwise, returns `undefined`.\n     *  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression ends with the `string` obtained from\n     *    the second expression; otherwise, returns `undefined`.\n     */\n    when: string | JsonExpr;\n\n    /**\n     * The layer containing the carto features processed by this style rule.\n     */\n    layer?: string;\n\n    /**\n     * Optional. If `true`, no more matching styles will be evaluated.\n     */\n    final?: boolean;\n}\n\nexport type JsonExprReference = [\"ref\", string];\n\n/**\n * Checks if the given value is a reference to a definition.\n *\n * @param value The value of a technique property.\n */\nexport function isJsonExprReference(value: any): value is JsonExprReference {\n    return (\n        Array.isArray(value) &&\n        value.length === 2 &&\n        value[0] === \"ref\" &&\n        typeof value[1] === \"string\"\n    );\n}\n\n/**\n * Like [[StyleDeclaration]], but without [[Reference]] type.\n */\nexport type ResolvedStyleDeclaration = Style & StyleSelector;\n\n/**\n * Like [[StyleSet]], but without [[Reference]] type.\n */\nexport type ResolvedStyleSet = ResolvedStyleDeclaration[];\n\n/**\n * Compound type that merges all raw [Style] with selector arguments from [BaseSelector], optionally\n * a [[Reference]].\n */\nexport type StyleDeclaration = (Style & StyleSelector) | JsonExpr;\n\nexport function isActualSelectorDefinition(def: Definition): def is Style & StyleSelector {\n    const styleDef = def as StyleDeclaration;\n    return (\n        typeof styleDef === \"object\" &&\n        styleDef !== null &&\n        !Array.isArray(styleDef) &&\n        typeof styleDef.technique === \"string\"\n    );\n}\n\n/**\n * An array of [[StyleSelector]]s that are used together to define how a [[DataSource]] should be\n * rendered. `StyleSet`s are applied to sources providing vector tiles via their method\n * `setStyleSet`. This is also handle internally when a whole theme is passed to a [[MapView]] via\n * `mapview.theme`.\n */\nexport type StyleSet = StyleDeclaration[];\n\n/**\n * The object that defines what way an item of a [[DataSource]] should be decoded to assemble a\n * tile. [[Style]] is describing which features are shown on a map and in what way they are being\n * shown.\n */\nexport interface BaseStyle {\n    /**\n     * Human readable description.\n     */\n    description?: string;\n\n    /**\n     * The style set referenced by this styling rule.\n     */\n    styleSet?: string;\n\n    /**\n     * The category of this style.\n     */\n    category?: string | JsonExpr;\n\n    /**\n     * Technique name. See the classes extending from this class to determine what possible\n     * techniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"extruded-line\"`,\n     * `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.\n     */\n    technique?: string;\n\n    /**\n     * Specify `renderOrder` of value.\n     *\n     * @default If not specified in style file, `renderOrder` will be assigned with monotonically\n     * increasing values according to style position in file.\n     */\n    renderOrder?: number | JsonExpr;\n\n    /**\n     * Minimal zoom level. If the current zoom level is smaller, the technique will not be used.\n     */\n    minZoomLevel?: number | JsonExpr;\n\n    /**\n     * Maximum zoom level. If the current zoom level is larger, the technique will not be used.\n     */\n    maxZoomLevel?: number | JsonExpr;\n\n    /**\n     * Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n     * `false`.\n     */\n    transient?: boolean;\n\n    /**\n     * Optional: If `true`, the objects with matching `when` statement will be printed to the\n     * console.\n     */\n    debug?: boolean;\n\n    // TODO: Make pixel units default.\n    /**\n     * Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.\n     *\n     * @deprecated use \"string encoded numerals\" as documented in TODO, wher eis the doc ?\n     */\n    metricUnit?: \"Meter\" | \"Pixel\";\n\n    /**\n     * XYZ defines the property to display as text label of a feature in the styles.\n     */\n    labelProperty?: string;\n}\n\n/**\n *\n * @defaultSnippets [\n *     {\n *         \"label\": \"New solid-line\",\n *         \"description\": \"Add a new 'solid-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"solid-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\",\n *                 \"secondaryColor\": \"#$4ddd\",\n *                 \"secondaryWidth\": \"^${5:2}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New dashed-line\",\n *         \"description\": \"Add a new 'dashed-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"solid-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\",\n *                 \"gapSize\": \"^${4:10}\",\n *                 \"dashSize\": \"^${5:10}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New fill\",\n *         \"description\": \"Add a new 'fill' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"fill\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:0}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New text\",\n *         \"description\": \"Add a new 'text' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"text\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New labeled-icon\",\n *         \"description\": \"Add a new 'labeled-icon' marker styling\",\n *         \"body\": {\n *             \"technique\": \"labeled-icon\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"backgroundSize\": \"^${4:32}\",\n *                 \"backgroundColor\": \"#${5:aaa}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New line-marker\",\n *         \"description\": \"Add a new 'line-marker' marker styling\",\n *         \"body\": {\n *             \"technique\": \"line-marker\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"backgroundSize\": \"^${4:32}\",\n *                 \"backgroundColor\": \"#${5:aaa}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New line\",\n *         \"description\": \"Add a new 'line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New segments\",\n *         \"description\": \"Add a new 'segments' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"segments\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New standard\",\n *         \"description\": \"Add a new 'standard' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"standard\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"roughness\": \"^${3:0.5}\",\n *                 \"metalness\": \"^${4:0.5}\",\n *                 \"emissive\": \"#${5:c44}\",\n *                 \"emissiveIntensity\": \"^${6:0.8}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New extruded-line\",\n *         \"description\": \"Add a new 'extruded-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"extruded-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"shading\": \"${2:standard}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"lineWidth\": \"^${4:1}\",\n *                 \"caps\": \"${5:Circle}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New extruded-polygon\",\n *         \"description\": \"Add a new 'extruded-polygon' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"extruded-polygon\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"roughness\": \"^${3:0.5}\",\n *                 \"metalness\": \"^${4:0.5}\",\n *                 \"emissive\": \"#${5:c44}\",\n *                 \"emissiveIntensity\": \"^${6:0.8}\",\n *                 \"lineWidth\": \"^${7:1}\",\n *                 \"lineColor\": \"#${8:c0f}\",\n *                 \"defaultHeight\": \"^${9:20}\",\n *                 \"animateExtrusion\": \"^${10:true}\",\n *                 \"animateExtrusionDuration\": \"^${11:300}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New none\",\n *         \"description\": \"Add a new 'none' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"none\",\n *             \"when\": \"$1\",\n *             \"attr\": {}\n *         }\n *     },\n *     {\n *         \"label\": \"New shader\",\n *         \"description\": \"Add a new 'shader' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"shader\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"primitive\": \"${2:mesh}\",\n *                 \"params\": {}\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New squares\",\n *         \"description\": \"Add a new 'squares' point styling\",\n *         \"body\": {\n *             \"technique\": \"squares\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"size\": \"^${3:32}\",\n *                 \"texture\": \"${4:url}\",\n *                 \"enablePicking\": \"^${5:true}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New circles\",\n *         \"description\": \"Add a new 'circles' point styling\",\n *         \"body\": {\n *             \"technique\": \"circles\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"size\": \"^${3:32}\",\n *                 \"texture\": \"${4:url}\",\n *                 \"enablePicking\": \"^${5:true}\"\n *             }\n *         }\n *     }\n * ]\n *\n */\nexport type AllStyles =\n    | SquaresStyle\n    | CirclesStyle\n    | PoiStyle\n    | LineMarkerStyle\n    | LineStyle\n    | SegmentsStyle\n    | SolidLineStyle\n    | LabelRejectionLineStyle\n    | FillStyle\n    | StandardStyle\n    | BasicExtrudedLineStyle\n    | StandardExtrudedLineStyle\n    | ExtrudedPolygonStyle\n    | ShaderStyle\n    | TerrainStyle\n    | TextTechniqueStyle\n    | NoneStyle;\n\nexport type Style = AllStyles;\n/**\n * A dictionary of [[StyleSet]]s.\n */\nexport interface Styles {\n    [styleSetName: string]: StyleSet;\n}\n\n/**\n * A reference to a style definition.\n *\n * Use as value `attrs` to reference value from `definitions`.\n *\n * Example of usage:\n * ```json\n * {\n *   \"definitions\": {\n *     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n *   },\n *   \"styles\": { \"tilezen\": [\n *      {\n *       \"when\": \"kind == 'road\",\n *       \"technique\": \"solid-line\",\n *       \"attr\": {\n *         \"lineColor\": { \"$ref\": \"roadColor\" }\n *       }\n *     }\n *   ] }\n * }\n * ```\n */\n\n/**\n * The attributes of a technique.\n */\nexport type Attr<T> = { [P in keyof T]?: T[P] | JsonExpr };\n\n/**\n * Render feature as set of squares rendered in screen space.\n *\n * @see [[PointTechniqueParams]].\n */\nexport interface SquaresStyle extends BaseStyle {\n    technique: \"squares\";\n    attr?: Attr<PointTechniqueParams>;\n}\n\n/**\n * Render feature as set of circles rendered in screen space.\n *\n * @see [[PointTechniqueParams]].\n */\nexport interface CirclesStyle extends BaseStyle {\n    technique: \"circles\";\n    attr?: Attr<PointTechniqueParams>;\n}\n\n/**\n * Render feature as POIs (icons and text) rendered in screen space.\n *\n * @see [[MarkerTechniqueParams]].\n */\nexport interface PoiStyle extends BaseStyle {\n    technique: \"labeled-icon\";\n    attr?: Attr<MarkerTechniqueParams>;\n}\n\n/**\n * Render feature as line markers, which is a recurring marker along a line (usually road).\n *\n * @see [[MarkerTechniqueParams]].\n */\nexport interface LineMarkerStyle extends BaseStyle {\n    technique: \"line-marker\";\n    attr?: Attr<MarkerTechniqueParams>;\n}\n\n/**\n * Render feature as line.\n */\nexport interface LineStyle extends BaseStyle {\n    technique: \"line\";\n    secondaryRenderOrder?: number;\n    secondaryCategory?: string;\n    attr?: Attr<MarkerTechniqueParams>;\n}\n\n/**\n * Render feature as segments.\n */\nexport interface SegmentsStyle extends BaseStyle {\n    technique: \"segments\";\n    attr?: Attr<SegmentsTechniqueParams>;\n}\n\nexport interface SolidLineStyle extends BaseStyle {\n    technique: \"solid-line\" | \"dashed-line\";\n    secondaryRenderOrder?: number;\n    secondaryCategory?: string;\n    attr?: Attr<SolidLineTechniqueParams>;\n}\n\nexport interface LabelRejectionLineStyle extends BaseStyle {\n    technique: \"label-rejection-line\";\n    attr?: Attr<BaseTechniqueParams>;\n}\n\nexport interface FillStyle extends BaseStyle {\n    technique: \"fill\";\n    attr?: Attr<FillTechniqueParams>;\n}\n\nexport interface StandardStyle extends BaseStyle {\n    technique: \"standard\";\n    attr?: Attr<StandardTechniqueParams>;\n}\n\nexport interface TerrainStyle extends BaseStyle {\n    technique: \"terrain\";\n    attr?: Attr<TerrainTechniqueParams>;\n}\n\nexport interface BasicExtrudedLineStyle extends BaseStyle {\n    technique: \"extruded-line\";\n    shading?: \"basic\";\n    attr?: Attr<BasicExtrudedLineTechniqueParams>;\n}\n\nexport interface StandardExtrudedLineStyle extends BaseStyle {\n    technique: \"extruded-line\";\n    shading: \"standard\";\n    attr?: Attr<StandardExtrudedLineTechniqueParams>;\n}\n\n/**\n * Style used to draw a geometry as an extruded polygon, for example extruded buildings.\n */\nexport interface ExtrudedPolygonStyle extends BaseStyle {\n    technique: \"extruded-polygon\";\n    attr?: Attr<ExtrudedPolygonTechniqueParams>;\n}\n\nexport interface ShaderStyle extends BaseStyle {\n    technique: \"shader\";\n    attr?: Attr<ShaderTechniqueParams>;\n}\n\nexport interface TextTechniqueStyle extends BaseStyle {\n    technique: \"text\";\n    attr?: Attr<TextTechniqueParams>;\n}\n\nexport interface NoneStyle extends BaseStyle {\n    technique: \"none\";\n    attr?: {\n        [name: string]: any;\n    };\n}\n\n/**\n * Possible lights used for light the map.\n */\nexport type Light = AmbientLight | DirectionalLight;\n\nexport interface BaseLight {\n    type: string;\n    name: string;\n}\n\n/**\n * Light type: ambient.\n * @defaultSnippets [\n *     {\n *         \"label\": \"New Ambient Light\",\n *         \"description\": \"Adds a new Ambient Light\",\n *         \"body\": {\n *             \"type\": \"ambient\",\n *             \"name\": \"${1:ambient light}\",\n *             \"color\": \"#${2:fff}\",\n *             \"intensity\": \"^${3:1}\"\n *         }\n *     }\n * ]\n */\nexport interface AmbientLight extends BaseLight {\n    type: \"ambient\";\n    /**\n     * @format color-hex\n     */\n    color: string;\n    intensity?: number;\n}\n\n/**\n * Light type: directional.\n * @defaultSnippets [\n *     {\n *         \"label\": \"New Directional Light\",\n *         \"description\": \"Adds a new Directional Light\",\n *         \"body\": {\n *             \"type\": \"directional\",\n *             \"name\": \"${1:directional-light$:1}\",\n *             \"color\": \"#${2:fff}\",\n *             \"intensity\": \"^${3:1}\",\n *             \"direction\": {\n *                 \"x\": \"^${4:1}\",\n *                 \"y\": \"^${5:0}\",\n *                 \"z\": \"^${6:0}\"\n *             }\n *         }\n *     }\n * ]\n */\nexport interface DirectionalLight extends BaseLight {\n    type: \"directional\";\n    /**\n     * @format color-hex\n     */\n    color: string;\n    intensity: number;\n    direction: Vector3Like;\n    castShadow?: boolean;\n}\n\n/**\n * Various text styles used with labels and texts.\n */\nexport interface TextStyleDefinition {\n    name?: string;\n    fontCatalogName?: string;\n\n    fontName?: string;\n    size?: number;\n    backgroundSize?: number;\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    rotation?: number;\n    /**\n     * @format color-hex\n     */\n    color?: string;\n    /**\n     * @format color-hex\n     */\n    backgroundColor?: string;\n    opacity?: number;\n    backgroundOpacity?: number;\n\n    tracking?: number;\n    leading?: number;\n    maxLines?: number;\n    lineWidth?: number;\n    canvasRotation?: number;\n    lineRotation?: number;\n    wrappingMode?: \"None\" | \"Character\" | \"Word\";\n    hAlignment?: \"Left\" | \"Center\" | \"Right\";\n    vAlignment?: \"Above\" | \"Center\" | \"Below\";\n}\n\n/**\n * Interface that defines a procedural gradient sky.\n */\nexport interface GradientSky {\n    /** Sky type. */\n    type: \"gradient\";\n    /**\n     * Color of the upper part of the gradient.\n     * @format color-hex\n     */\n    topColor: string;\n    /**\n     * Color of bottom part of the gradient.\n     * @format color-hex\n     */\n    bottomColor: string;\n    /**\n     * Color of the ground plane.\n     * @format color-hex\n     */\n    groundColor: string;\n    /** Texture's gradient power. */\n    monomialPower?: number;\n}\n\n/**\n * Interface that defines a cubemap sky.\n */\nexport interface CubemapSky {\n    /** Sky type. */\n    type: \"cubemap\";\n    /** Positive X cube map face. */\n    positiveX: string;\n    /** Negative X cube map face. */\n    negativeX: string;\n    /** Positive Y cube map face. */\n    positiveY: string;\n    /** Negative Y cube map face. */\n    negativeY: string;\n    /** Positive Z cube map face. */\n    positiveZ: string;\n    /** Negative Z cube map face. */\n    negativeZ: string;\n}\n\n/**\n * Interface that defines the options to configure the sky.\n */\nexport type Sky = GradientSky | CubemapSky;\n\n/**\n * Interface that defines the options to configure fog.\n */\nexport interface Fog {\n    /** Fog's color. */\n    color: string;\n    /** Distance ratio to far plane at which the linear fog begins. */\n    startRatio: number;\n}\n\n/**\n * Define an image (e.g. icon).\n */\nexport interface ImageDefinition {\n    /** Url to load content from. */\n    url: string;\n    /** `true` to start loading at init tile, `false` to lazily wait until required. */\n    preload: boolean;\n    /** Url of JSON file containing the texture atlas */\n    atlas?: string;\n}\n\nexport interface ImageDefinitions {\n    /** Name of Image. */\n    [name: string]: ImageDefinition;\n}\n\n/**\n * Can be used to create a texture atlas.\n */\nexport interface ImageTexture {\n    /** Name of ImageTexture. Used to reference texture in the styles. */\n    name: string;\n    /** Name of ImageDefinition to use. */\n    image: string;\n    /** Origin of image, defaults to \"topleft\" */\n    origin?: string;\n    /** Specify sub-region: Defaults to 0. */\n    xOffset?: number;\n    /** Specify sub-region: Defaults to 0. */\n    yOffset?: number;\n    /** Specify sub-region:  Defaults to 0, meaning width is taken from loaded image. */\n    width?: number;\n    /** Specify sub-region:  Defaults to 0, meaning height is taken from loaded image. */\n    height?: number;\n    /** Defaults to false. */\n    flipH?: boolean;\n    /** Defaults to false. */\n    flipV?: boolean;\n    /** Defaults to 1. */\n    opacity?: number;\n}\n\n/**\n * Definition for a [[PoiTable]] reference as part of the [[Theme]] object.\n */\nexport interface PoiTableRef {\n    /** Required name of the [[PoiTable]] for later reference. */\n    name: string;\n    /**\n     * Required URL from where to load [[PoiTable]].\n     *\n     * Should refer to JSON that is matched [[PoiTableDef]] interface.\n     */\n    url: string;\n    /**\n     * If set to `true`, the list of values in the field \"altNames\" will be used as names for this\n     * POI.\n     */\n    useAltNamesForKey: boolean;\n}\n\n/**\n * Interface for the JSON description of the [[PoiTable]]. It is being implemented in [[PoiTable]].\n */\nexport interface PoiTableDef {\n    /** Name of the `PoiTable`. Must be unique. */\n    name?: string;\n    /**\n     * Stores the list of [[PoiTableEntry]]s.\n     */\n    poiList?: PoiTableEntryDef[];\n}\n\n/**\n * Interface for the JSON description of the [[PoiTableEntry]]. The interface is being implemented\n * as [[PoiTableEntry]].\n */\nexport interface PoiTableEntryDef {\n    /** Default name of the POI as the key for looking it up. */\n    name?: string;\n    /** Alternative names of the POI. */\n    altNames?: string[];\n    /** Visibility of the POI. If `false`, the POI will not be rendered. */\n    visible?: boolean;\n    /** Name of the icon, defined in the the texture atlases. */\n    iconName?: string;\n    /** Stacking mode of the POI. For future use. */\n    stackMode?: string;\n    /**\n     * Priority of the POI to select the visible set in case there are more POIs than can be\n     * handled.\n     */\n    priority?: number;\n    /** Minimum zoom level to render the icon on. */\n    iconMinLevel?: number;\n    /** Maximum zoom level to render the icon on. */\n    iconMaxLevel?: number;\n    /** Minimum zoom level to render the text label on. */\n    textMinLevel?: number;\n    /** Maximum zoom level to render the text label on. */\n    textMaxLevel?: number;\n}\n\n/**\n * Fonts used for all text related rendering.\n */\nexport interface FontCatalogConfig {\n    url: string;\n    name: string;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { LineMarkerTechnique, Theme } from \"@here/harp-datasource-protocol\";\nimport {\n    AdditionParameters,\n    DEFAULT_TEXT_CANVAS_LAYER,\n    FontCatalog,\n    TextBufferAdditionParameters,\n    TextBufferCreationParameters,\n    TextCanvas,\n    TextLayoutStyle,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport {\n    assert,\n    LoggerManager,\n    LogLevel,\n    Math2D,\n    MathUtils,\n    PerformanceTimer\n} from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { DataSource } from \"../DataSource\";\nimport { debugContext } from \"../DebugContext\";\nimport { overlayTextElement } from \"../geometry/overlayOnElevation\";\nimport { PickObjectType, PickResult } from \"../PickHandler\";\nimport { PoiManager } from \"../poi/PoiManager\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { PoiRendererFactory } from \"../poi/PoiRendererFactory\";\nimport { IBox, LineWithBound, ScreenCollisions } from \"../ScreenCollisions\";\nimport { ScreenProjector } from \"../ScreenProjector\";\nimport { Tile } from \"../Tile\";\nimport { MapViewUtils } from \"../Utils\";\nimport { DataSourceTileList } from \"../VisibleTileSet\";\nimport { FontCatalogLoader } from \"./FontCatalogLoader\";\nimport {\n    checkReadyForPlacement,\n    computeViewDistance,\n    getMaxViewDistance,\n    isPathLabelTooSmall,\n    placeIcon,\n    PlacementResult,\n    placePathLabel,\n    placePointLabel,\n    PrePlacementResult\n} from \"./Placement\";\nimport { PlacementStats } from \"./PlacementStats\";\nimport { RenderState } from \"./RenderState\";\nimport { SimpleLineCurve, SimplePath } from \"./SimplePath\";\nimport { TextCanvasFactory } from \"./TextCanvasFactory\";\nimport { TextCanvasRenderer } from \"./TextCanvasRenderer\";\nimport { LoadingState, TextElement, TextPickResult } from \"./TextElement\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementFilter, TextElementGroupState } from \"./TextElementGroupState\";\nimport {\n    initializeDefaultOptions,\n    TextElementsRendererOptions\n} from \"./TextElementsRendererOptions\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementStateCache } from \"./TextElementStateCache\";\nimport { TextElementType } from \"./TextElementType\";\nimport { TextElementStyle, TextStyleCache } from \"./TextStyleCache\";\nimport { UpdateStats } from \"./UpdateStats\";\nimport { ViewState } from \"./ViewState\";\n\ninterface RenderParams {\n    numRenderedTextElements: number;\n    // TODO: HARP-7373. Move to update() method at the end of the frame.\n    fadeAnimationRunning: boolean;\n    time: number;\n}\n\nenum Pass {\n    PersistentLabels,\n    NewLabels\n}\n\n/**\n * Default distance scale. Will be applied if distanceScale is not defined in the technique.\n * Defines the scale that will be applied to labeled icons (icon and text) in the distance.\n */\nexport const DEFAULT_TEXT_DISTANCE_SCALE = 0.5;\n\n/**\n * Maximum number of recommended labels. If more labels are encountered, the \"overloaded\" mode is\n * set, which modifies the behavior of label placement and rendering, trying to keep delivering an\n * interactive performance. The overloaded mode should not be activated if the [[MapView]] is\n * rendering a static image (camera not moving and no animation running).\n */\nconst OVERLOAD_LABEL_LIMIT = 20000;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Default number of labels/POIs updated in a frame. They are rendered only if they fit. If the\n * camera is not moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_UPDATED_LABEL_LIMIT = 100;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Maximum time in milliseconds available for placement. If value is <= 0, or if the camera is not\n * moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_UPDATE_TIME_LIMIT = 5;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Maximum time in milliseconds available for rendering. If value is <= 0, or if the camera is not\n * moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_PLACE_TIME_LIMIT = 10;\n\nconst logger = LoggerManager.instance.create(\"TextElementsRenderer\", { level: LogLevel.Log });\n\n// Development flag: Enable debug print.\nconst PRINT_LABEL_DEBUG_INFO: boolean = false;\nconst updateStats = PRINT_LABEL_DEBUG_INFO ? new UpdateStats(logger) : undefined;\nconst placementStats = PRINT_LABEL_DEBUG_INFO ? new PlacementStats(logger) : undefined;\n\nconst tempPosition = new THREE.Vector3();\nconst tempScreenPosition = new THREE.Vector2();\nconst tempScreenPoints: THREE.Vector2[] = [];\nconst tempPoiScreenPosition = new THREE.Vector2();\nconst tmpTextBufferCreationParams: TextBufferCreationParameters = {};\nconst tmpAdditionParams: AdditionParameters = {};\nconst tmpBufferAdditionParams: TextBufferAdditionParameters = {};\n\nclass TileTextElements {\n    constructor(readonly tile: Tile, readonly group: TextElementGroup) {}\n}\n\nclass TextElementLists {\n    constructor(readonly lists: TileTextElements[]) {}\n\n    get priority() {\n        assert(this.lists.length > 0);\n        // All text element lists here have the same priority.\n        return this.lists[0].group.priority;\n    }\n    /**\n     * Sum up the number of elements in all lists.\n     */\n    count(): number {\n        let n = 0;\n        for (const list of this.lists) {\n            n += list.group.elements.length;\n        }\n        return n;\n    }\n}\n\nfunction checkIfTextElementsChanged(dataSourceTileList: DataSourceTileList[]) {\n    let textElementsChanged = false;\n\n    dataSourceTileList.forEach(({ renderedTiles }) => {\n        renderedTiles.forEach(tile => {\n            if (tile.textElementsChanged) {\n                tile.textElementsChanged = false;\n                textElementsChanged = true;\n            }\n        });\n    });\n\n    return textElementsChanged;\n}\n\nfunction addTextToCanvas(\n    textElement: TextElement,\n    canvas: TextCanvas,\n    screenPosition: THREE.Vector3,\n    path?: THREE.Path,\n    pathOverflow?: boolean\n) {\n    tmpAdditionParams.path = path;\n    tmpAdditionParams.pathOverflow = pathOverflow;\n    tmpAdditionParams.layer = textElement.renderOrder;\n    tmpAdditionParams.letterCaseArray = textElement.glyphCaseArray;\n    tmpAdditionParams.pickingData = textElement.userData ? textElement : undefined;\n    canvas.addText(textElement.glyphs!, screenPosition, tmpAdditionParams);\n}\n\nfunction addTextBufferToCanvas(\n    textElementState: TextElementState,\n    canvas: TextCanvas,\n    screenPosition: THREE.Vector3,\n    fadeFactor: number,\n    scaleFactor: number\n): boolean {\n    const textElement = textElementState.element;\n    const textRenderState = textElementState.textRenderState;\n    const opacity = textRenderState!.opacity * fadeFactor * textElement.renderStyle!.opacity;\n\n    if (opacity === 0) {\n        return false;\n    }\n\n    // Compute the TextBufferObject when we know we're gonna render this label.\n    tmpTextBufferCreationParams.letterCaseArray = textElement.glyphCaseArray;\n    if (textElement.textBufferObject === undefined) {\n        textElement.textBufferObject = canvas.createTextBufferObject(\n            textElement.glyphs!,\n            tmpTextBufferCreationParams\n        );\n    }\n    const backgroundIsVisible =\n        textElement.renderStyle!.backgroundOpacity > 0 &&\n        canvas.textRenderStyle.fontSize.backgroundSize > 0;\n\n    tmpBufferAdditionParams.layer = textElement.renderOrder;\n    tmpBufferAdditionParams.position = screenPosition;\n    tmpBufferAdditionParams.scale = scaleFactor;\n    tmpBufferAdditionParams.opacity = opacity;\n    tmpBufferAdditionParams.backgroundOpacity = backgroundIsVisible\n        ? tmpBufferAdditionParams.opacity * textElement.renderStyle!.backgroundOpacity\n        : 0.0;\n    tmpBufferAdditionParams.pickingData = textElement.userData ? textElement : undefined;\n    canvas.addTextBufferObject(textElement.textBufferObject!, tmpBufferAdditionParams);\n    return true;\n}\n\nfunction shouldRenderPointText(\n    labelState: TextElementState,\n    viewState: ViewState,\n    options: TextElementsRendererOptions\n): boolean {\n    const textRenderState: RenderState | undefined = labelState.textRenderState;\n    const label = labelState.element;\n    const poiInfo = label.poiInfo;\n\n    assert(label.type !== TextElementType.PathLabel);\n\n    const hasText = textRenderState !== undefined && label.text !== \"\";\n    if (!hasText) {\n        return false;\n    }\n\n    const visibleInZoomLevel =\n        poiInfo === undefined ||\n        viewState.zoomLevel === undefined ||\n        MathUtils.isClamped(\n            viewState.zoomLevel,\n            poiInfo.iconMinZoomLevel,\n            poiInfo.iconMaxZoomLevel\n        );\n    if (!visibleInZoomLevel) {\n        return false;\n    }\n\n    const poiTextMaxDistance = getMaxViewDistance(viewState, options.maxDistanceRatioForPoiLabels!);\n    const visibleAtDistance =\n        label.ignoreDistance === true ||\n        labelState.viewDistance === undefined ||\n        labelState.viewDistance < poiTextMaxDistance;\n    if (!visibleAtDistance) {\n        return false;\n    }\n\n    // Do not render text if POI cannot be rendered and is not optional.\n    return poiInfo === undefined || poiInfo.isValid === true || poiInfo.iconIsOptional !== false;\n}\n\nfunction shouldRenderPoiText(labelState: TextElementState, viewState: ViewState) {\n    // Do not actually render (just allocate space) if camera is moving and\n    // renderTextDuringMovements is not true.\n    const poiInfo = labelState.element.poiInfo;\n\n    return (\n        !viewState.cameraIsMoving ||\n        poiInfo === undefined ||\n        poiInfo.renderTextDuringMovements === true\n    );\n}\n\nexport type ViewUpdateCallback = () => void;\n\nfunction isPlacementTimeExceeded(startTime: number | undefined): boolean {\n    // startTime is set in overload mode.\n    if (startTime === undefined || OVERLOAD_PLACE_TIME_LIMIT <= 0) {\n        return false;\n    }\n    const endTime = PerformanceTimer.now();\n    const elapsedTime = endTime - startTime;\n    if (elapsedTime > OVERLOAD_PLACE_TIME_LIMIT) {\n        logger.debug(\"Placement time limit exceeded.\");\n        return true;\n    }\n    return false;\n}\n\n/**\n *\n * Internal class to manage all text rendering.\n */\nexport class TextElementsRenderer {\n    private m_initialized: boolean = false;\n    private m_initPromise: Promise<void> | undefined;\n    private m_glyphLoadingCount: number = 0;\n    private m_loadPromise: Promise<any> | undefined;\n    private readonly m_options: TextElementsRendererOptions;\n\n    private readonly m_textStyleCache: TextStyleCache;\n    private m_textRenderers: TextCanvasRenderer[] = [];\n\n    private m_overlayTextElements?: TextElement[];\n\n    // TODO: Replace this for an array of textures when more fonts are in use.\n    private m_debugGlyphTextureCacheMesh?: THREE.Mesh;\n    private m_debugGlyphTextureCacheWireMesh?: THREE.LineSegments;\n\n    private m_tmpVector = new THREE.Vector2();\n    private m_overloaded: boolean = false;\n    private m_cacheInvalidated: boolean = false;\n    private m_forceNewLabelsPass: boolean = false;\n\n    private readonly m_textElementStateCache: TextElementStateCache = new TextElementStateCache();\n\n    /**\n     * Create the `TextElementsRenderer` which selects which labels should be placed on screen as\n     * a preprocessing step, which is not done every frame, and also renders the placed\n     * [[TextElement]]s every frame.\n     *\n     * @param m_viewState State of the view for which this renderer will draw text.\n     * @param m_viewCamera Camera used by the view for which this renderer will draw text.\n     * @param m_viewUpdateCallback To be called whenever the view needs to be updated.\n     * @param m_screenCollisions General 2D screen occlusion management, may be shared between\n     *     instances.\n     * @param m_screenProjector Projects 3D coordinates into screen space.\n     * @param m_textCanvasFactory To create TextCanvas instances.\n     * @param m_poiRendererFactory To create PoiRenderer instances.\n     * @param m_poiManager To prepare pois for rendering.\n     * @param m_fontCatalogLoader To load font catalogs.\n     * @param m_theme Theme defining  text styles.\n     * @param options Configuration options for the text renderer. See\n     * [[TextElementsRendererOptions]].\n     */\n    constructor(\n        private m_viewState: ViewState,\n        private m_viewCamera: THREE.Camera,\n        private m_viewUpdateCallback: ViewUpdateCallback,\n        private m_screenCollisions: ScreenCollisions,\n        private m_screenProjector: ScreenProjector,\n        private m_textCanvasFactory: TextCanvasFactory,\n        private m_poiManager: PoiManager,\n        private m_poiRendererFactory: PoiRendererFactory,\n        private m_fontCatalogLoader: FontCatalogLoader,\n        private m_theme: Theme,\n        options: TextElementsRendererOptions\n    ) {\n        this.m_textStyleCache = new TextStyleCache(this.m_theme);\n\n        this.m_options = { ...options };\n        initializeDefaultOptions(this.m_options);\n\n        this.m_textCanvasFactory.setGlyphCountLimits(\n            this.m_options.minNumGlyphs!,\n            this.m_options.maxNumGlyphs!\n        );\n    }\n\n    /**\n     * Disable all fading animations (for debugging and performance measurement). Defaults to\n     * `false`.\n     */\n    set disableFading(disable: boolean) {\n        this.m_options.disableFading = disable;\n    }\n\n    get disableFading(): boolean {\n        return this.m_options.disableFading === true;\n    }\n\n    get styleCache() {\n        return this.m_textStyleCache;\n    }\n\n    /**\n     * Render the text using the specified camera into the current canvas.\n     *\n     * @param camera Orthographic camera to use.\n     */\n    renderText(camera: THREE.OrthographicCamera) {\n        if (!this.initialized) {\n            return;\n        }\n\n        this.updateGlyphDebugMesh();\n\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.render(camera);\n        }\n    }\n\n    /**\n     * Forces update of text elements in the next call to [[placeText]].\n     */\n    invalidateCache() {\n        this.m_cacheInvalidated = true;\n    }\n\n    /**\n     * Notify `TextElementsRenderer` that the camera has started a movement.\n     */\n    movementStarted() {\n        // Nothing to do (yet)\n    }\n\n    /**\n     * Notify `TextElementsRenderer` that the camera has finished its movement.\n     */\n    movementFinished() {\n        this.invalidateCache();\n    }\n\n    /**\n     * Is `true` if number of [[TextElement]]s in visible tiles is larger than the recommended\n     * number `OVERLOAD_LABEL_LIMIT`.\n     */\n    get overloaded(): boolean {\n        return this.m_overloaded;\n    }\n\n    /**\n     * Places text elements for the current frame.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     * @param time Current frame time.\n     * @param elevationProvider\n     */\n    placeText(dataSourceTileList: DataSourceTileList[], time: number) {\n        const tileTextElementsChanged = checkIfTextElementsChanged(dataSourceTileList);\n\n        const textElementsAvailable = this.hasOverlayText() || tileTextElementsChanged;\n        if (!this.initialize(textElementsAvailable)) {\n            return;\n        }\n\n        const updateTextElements =\n            this.m_cacheInvalidated ||\n            tileTextElementsChanged ||\n            this.m_viewState.renderedTilesChanged;\n\n        logger.debug(\n            `FRAME: ${this.m_viewState.frameNumber}, ZOOM LEVEL: ${this.m_viewState.zoomLevel}`\n        );\n\n        if (updateTextElements) {\n            this.m_textElementStateCache.clearVisited();\n            this.updateTextElements(dataSourceTileList);\n        }\n        const findReplacements = updateTextElements;\n        const anyTextGroupEvicted = this.m_textElementStateCache.update(\n            time,\n            this.m_options.disableFading!,\n            findReplacements,\n            this.m_viewState.zoomLevel\n        );\n\n        this.reset();\n        this.prepopulateScreenWithBlockingElements(dataSourceTileList);\n\n        // New text elements must be placed either if text elements were updated in this frame\n        // or if any text element group was evicted. The second case happens when the group is not\n        // visited anymore and all it's elements just became invisible, which means there's newly\n        // available screen space where new text elements could be placed. A common scenario where\n        // this happens is zooming in/out: text groups from the old level may still be fading out\n        // after all groups in the new level were updated.\n        const placeNewTextElements = updateTextElements || anyTextGroupEvicted;\n        this.placeTextElements(time, placeNewTextElements);\n        this.placeOverlayTextElements();\n        this.updateTextRenderers();\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    addOverlayText(textElements: TextElement[]): void {\n        if (textElements.length === 0) {\n            return;\n        }\n        this.m_overlayTextElements =\n            this.m_overlayTextElements === undefined\n                ? textElements.slice()\n                : this.m_overlayTextElements.concat(textElements);\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    clearOverlayText(): void {\n        this.m_overlayTextElements = [];\n    }\n\n    /**\n     * @returns Whether there's overlay text to be rendered.\n     */\n    hasOverlayText(): boolean {\n        return this.m_overlayTextElements !== undefined && this.m_overlayTextElements.length > 0;\n    }\n\n    get overlayText(): TextElement[] | undefined {\n        return this.m_overlayTextElements;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[TextElement]]s are found, the order of the results is unspecified.\n     *\n     * Note: [[TextElement]]s with identical `featureId` or identical `userData` will only appear\n     * once in the list `pickResults`.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickResults Array filled with pick results.\n     */\n    pickTextElements(screenPosition: THREE.Vector2, pickResults: PickResult[]) {\n        const pickHandler = (pickData: any | undefined, pickObjectType: PickObjectType) => {\n            const textElement = pickData as TextElement;\n\n            if (textElement === undefined) {\n                return;\n            }\n\n            let isDuplicate = false;\n\n            if (textElement.featureId !== undefined) {\n                isDuplicate = pickResults.some(pickResult => {\n                    return (\n                        pickResult !== undefined &&\n                        pickObjectType === pickResult.type &&\n                        ((pickResult.featureId !== undefined &&\n                            pickResult.featureId === textElement.featureId) ||\n                            (pickResult.userData !== undefined &&\n                                pickResult.userData === textElement.userData))\n                    );\n                });\n\n                if (!isDuplicate) {\n                    const pickResult: TextPickResult = {\n                        type: pickObjectType,\n                        point: screenPosition,\n                        distance: 0,\n                        featureId: textElement.featureId,\n                        userData: textElement.userData,\n                        text: textElement.text\n                    };\n\n                    pickResults.push(pickResult);\n                }\n            }\n        };\n\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.pickText(screenPosition, (pickData: any | undefined) => {\n                pickHandler(pickData, PickObjectType.Text);\n            });\n            textRenderer.poiRenderer.pickTextElements(\n                screenPosition,\n                (pickData: any | undefined) => {\n                    pickHandler(pickData, PickObjectType.Icon);\n                }\n            );\n        }\n    }\n\n    /**\n     * `true` if any resource used by any `FontCatalog` is still loading.\n     */\n    get loading(): boolean {\n        return this.m_fontCatalogLoader.loading || this.m_glyphLoadingCount > 0;\n    }\n\n    /**\n     * Waits till all pending resources from any `FontCatalog` are loaded.\n     */\n    async waitLoaded(): Promise<boolean> {\n        const initialized = await this.waitInitialized();\n        if (!initialized) {\n            return false;\n        }\n        if (this.m_loadPromise === undefined) {\n            return false;\n        }\n        await this.m_loadPromise;\n        return true;\n    }\n\n    /**\n     * Reset the current text render states of all visible tiles. All [[TextElement]]s will fade in\n     * after that as if they have just been added.\n     */\n    clearRenderStates() {\n        this.m_textElementStateCache.clear();\n    }\n\n    /**\n     * Return memory used by all objects managed by `TextElementsRenderer`.\n     *\n     * @returns `MemoryUsage` Heap and GPU memory used by this `TextElementsRenderer`.\n     */\n    getMemoryUsage(): MapViewUtils.MemoryUsage {\n        const memoryUsage = {\n            heapSize: 0,\n            gpuSize: 0\n        };\n\n        for (const renderer of this.m_textRenderers) {\n            renderer.textCanvas.getMemoryUsage(memoryUsage);\n            renderer.poiRenderer.getMemoryUsage(memoryUsage);\n        }\n\n        return memoryUsage;\n    }\n\n    get initialized(): boolean {\n        return this.m_initialized;\n    }\n\n    get initializing(): boolean {\n        return this.m_initPromise !== undefined;\n    }\n\n    /**\n     * Waits until initialization is done.\n     * @returns Promise resolved to true if initialization was done, false otherwise.\n     */\n    async waitInitialized(): Promise<boolean> {\n        if (this.initialized) {\n            return true;\n        }\n\n        if (!this.initializing) {\n            return false;\n        }\n        await this.m_initPromise;\n        return true;\n    }\n\n    /**\n     * Initializes the text renderer once there's any text element available for rendering.\n     * @param textElementsAvailable Indicates whether there's any text element to be rendered.\n     * @returns Whether the text renderer is initialized.\n     */\n    private initialize(textElementsAvailable: boolean): boolean {\n        if (!this.initialized && !this.initializing && textElementsAvailable) {\n            this.initializeDefaultAssets();\n            this.m_initPromise = this.initializeTextCanvases().then(() => {\n                this.m_initialized = true;\n                this.m_initPromise = undefined;\n                this.invalidateCache(); // Force cache update after initialization.\n                this.m_viewUpdateCallback();\n            });\n        }\n        return this.initialized;\n    }\n\n    /**\n     * Reset internal state at the beginning of a frame.\n     */\n    private reset() {\n        this.m_screenCollisions.reset();\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.clear();\n            textRenderer.poiRenderer.reset();\n        }\n    }\n\n    /**\n     * Update state at the end of a frame.\n     */\n    private updateTextRenderers() {\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.poiRenderer.update();\n        }\n    }\n\n    /**\n     * Fills the screen with lines projected from world space, see [[Tile.blockingElements]].\n     * @note These boxes have highest priority, so will block all other labels.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     */\n    private prepopulateScreenWithBlockingElements(dataSourceTileList: DataSourceTileList[]) {\n        const boxes: IBox[] = [];\n        dataSourceTileList.forEach(renderListEntry => {\n            const startLinePointProj = new THREE.Vector3();\n            const endLinePointProj = new THREE.Vector3();\n            for (const tile of renderListEntry.renderedTiles.values()) {\n                for (const pathBlockingElement of tile.blockingElements) {\n                    if (pathBlockingElement.points.length < 2) {\n                        continue;\n                    }\n                    this.m_screenProjector.project3(\n                        pathBlockingElement.points[0],\n                        startLinePointProj\n                    );\n                    for (let i = 1; i < pathBlockingElement.points.length; i++) {\n                        this.m_screenProjector.project3(\n                            pathBlockingElement.points[i],\n                            endLinePointProj\n                        );\n                        const line = pathBlockingElement.screenSpaceLines[i - 1];\n                        line.start.copy(startLinePointProj);\n                        line.end.copy(endLinePointProj);\n                        const lineWithBound: LineWithBound = {\n                            minX: Math.min(startLinePointProj.x, endLinePointProj.x),\n                            maxX: Math.max(startLinePointProj.x, endLinePointProj.x),\n                            minY: Math.min(startLinePointProj.y, endLinePointProj.y),\n                            maxY: Math.max(startLinePointProj.y, endLinePointProj.y),\n                            line\n                        };\n                        boxes.push(lineWithBound);\n                        startLinePointProj.copy(endLinePointProj);\n                    }\n                }\n            }\n        });\n        this.m_screenCollisions.allocateIBoxes(boxes);\n    }\n\n    /**\n     * @returns True if whole group was processed for placement,\n     * false otherwise (e.g. placement limit reached).\n     */\n    private placeTextElementGroup(\n        groupState: TextElementGroupState,\n        renderParams: RenderParams,\n        maxNumPlacedLabels: number,\n        pass: Pass\n    ): boolean {\n        // Unvisited text elements are never placed.\n        assert(groupState.visited);\n\n        if (this.m_textRenderers.length === 0) {\n            logger.warn(\"No text renderers initialized.\");\n            return false;\n        }\n\n        const shieldGroups: number[][] = [];\n        const hiddenKinds = this.m_viewState.hiddenGeometryKinds;\n        const projection = this.m_viewState.projection;\n        const elevationProvider = this.m_viewState.elevationProvider;\n        const elevationMap = elevationProvider?.getDisplacementMap(groupState.tileKey);\n\n        for (const textElementState of groupState.textElementStates) {\n            if (pass === Pass.PersistentLabels) {\n                if (placementStats) {\n                    ++placementStats.total;\n                }\n            }\n            if (\n                maxNumPlacedLabels >= 0 &&\n                renderParams.numRenderedTextElements >= maxNumPlacedLabels\n            ) {\n                logger.debug(\"Placement label limit exceeded.\");\n                return false;\n            }\n\n            // Skip all labels that are not initialized (didn't pass early placement tests)\n            // or don't belong to this pass.\n            if (!textElementState.initialized) {\n                if (placementStats) {\n                    ++placementStats.uninitialized;\n                }\n                continue;\n            }\n            if (textElementState.viewDistance === undefined) {\n                if (placementStats) {\n                    ++placementStats.tooFar;\n                }\n                continue;\n            }\n\n            const elementVisible = textElementState.visible;\n            if (\n                (pass === Pass.PersistentLabels && !elementVisible) ||\n                (pass === Pass.NewLabels && elementVisible)\n            ) {\n                continue;\n            }\n\n            const textElement = textElementState.element;\n\n            // Get the TextElementStyle.\n            const textElementStyle = this.m_textStyleCache.getTextElementStyle(textElement.style);\n            const textCanvas = textElementStyle.textCanvas;\n            const poiRenderer = textElementStyle.poiRenderer;\n            if (textCanvas === undefined || poiRenderer === undefined) {\n                logger.warn(\"Text canvas or poi renderer not ready.\");\n                continue;\n            }\n\n            // TODO: HARP-7648. Discard hidden kinds sooner, before placement.\n            // Check if the label should be hidden.\n            if (\n                hiddenKinds !== undefined &&\n                textElement.kind !== undefined &&\n                hiddenKinds.hasOrIntersects(textElement.kind)\n            ) {\n                continue;\n            }\n\n            if (elevationProvider !== undefined && !textElement.elevated) {\n                if (!elevationMap) {\n                    this.m_viewUpdateCallback(); // Update view until elevation is loaded.\n                    this.m_forceNewLabelsPass = true;\n                    continue;\n                }\n                overlayTextElement(textElement, elevationProvider, elevationMap, projection);\n            }\n            const elementType = textElement.type;\n            const isPathLabel = elementType === TextElementType.PathLabel;\n\n            // For paths, check if the label may fit.\n            if (isPathLabel) {\n                if (isPathLabelTooSmall(textElement, this.m_screenProjector, tempScreenPoints)) {\n                    if (placementStats) {\n                        placementStats.numNotVisible++;\n                    }\n                    if (textElement.dbgPathTooSmall === true) {\n                        if (placementStats) {\n                            placementStats.numPathTooSmall++;\n                        }\n                    }\n                    textElementState.textRenderState!.reset();\n                    continue;\n                }\n            }\n\n            const forceNewPassOnLoaded = true;\n            if (!this.initializeGlyphs(textElement, textElementStyle, forceNewPassOnLoaded)) {\n                continue;\n            }\n\n            const layer = textCanvas.getLayer(textElement.renderOrder || DEFAULT_TEXT_CANVAS_LAYER);\n\n            // Move onto the next TextElement if we cannot continue adding glyphs to this layer.\n            if (layer !== undefined) {\n                if (layer.storage.drawCount + textElement.glyphs!.length > layer.storage.capacity) {\n                    if (placementStats) {\n                        ++placementStats.numCannotAdd;\n                    }\n                    logger.warn(\"layer glyph storage capacity exceeded.\");\n                    continue;\n                }\n            }\n\n            // Set the current style for the canvas.\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n\n            switch (elementType) {\n                case TextElementType.PoiLabel:\n                    this.addPoiLabel(textElementState, poiRenderer, textCanvas, renderParams);\n                    break;\n                case TextElementType.LineMarker:\n                    this.addLineMarkerLabel(\n                        textElementState,\n                        poiRenderer,\n                        shieldGroups,\n                        textCanvas,\n                        renderParams\n                    );\n                    break;\n                case TextElementType.PathLabel:\n                    this.addPathLabel(textElementState, tempScreenPoints, textCanvas, renderParams);\n            }\n        }\n        return true;\n    }\n\n    private initializeGlyphs(\n        textElement: TextElement,\n        textElementStyle: TextElementStyle,\n        forceNewPassOnLoaded: boolean\n    ): boolean {\n        // Trigger the glyph load if needed.\n        if (textElement.loadingState === LoadingState.Initialized) {\n            return true;\n        }\n\n        assert(textElementStyle.textCanvas !== undefined);\n        const textCanvas = textElementStyle.textCanvas!;\n\n        if (textElement.loadingState === undefined) {\n            textElement.loadingState = LoadingState.Requested;\n\n            if (textElement.renderStyle === undefined) {\n                textElement.renderStyle = new TextRenderStyle({\n                    ...textElementStyle.renderParams,\n                    ...textElement.renderParams\n                });\n            }\n            if (textElement.layoutStyle === undefined) {\n                textElement.layoutStyle = new TextLayoutStyle({\n                    ...textElementStyle.layoutParams,\n                    ...textElement.layoutParams\n                });\n            }\n\n            if (textElement.text === \"\") {\n                textElement.loadingState = LoadingState.Loaded;\n            } else {\n                const newLoadPromise = textCanvas.fontCatalog\n                    .loadCharset(textElement.text, textElement.renderStyle)\n                    .then(() => {\n                        --this.m_glyphLoadingCount;\n                        textElement.loadingState = LoadingState.Loaded;\n                        // Ensure that text elements still loading glyphs get a chance to\n                        // be rendered if there's no text element updates in the next frames.\n                        this.m_forceNewLabelsPass =\n                            this.m_forceNewLabelsPass || forceNewPassOnLoaded;\n                        this.m_viewUpdateCallback();\n                    });\n                if (this.m_glyphLoadingCount === 0) {\n                    this.m_loadPromise = undefined;\n                }\n                ++this.m_glyphLoadingCount;\n\n                this.m_loadPromise =\n                    this.m_loadPromise === undefined\n                        ? newLoadPromise\n                        : Promise.all([this.m_loadPromise, newLoadPromise]);\n            }\n        }\n        if (textElement.loadingState === LoadingState.Loaded) {\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n            textElement.glyphCaseArray = [];\n            textElement.bounds = undefined;\n            textElement.glyphs = textCanvas.fontCatalog.getGlyphs(\n                textElement.text,\n                textCanvas.textRenderStyle,\n                textElement.glyphCaseArray\n            );\n            textElement.loadingState = LoadingState.Initialized;\n        }\n        // Return true as soon as a text element has some glyphs assigned so that it's rendered.\n        // The glyphs may be either the final ones or some temporal glyphs inherited from a\n        // predecessor as part of the text element replacement process.\n        // See TextElementState.replace().\n        return textElement.glyphs !== undefined;\n    }\n\n    private initializeDefaultAssets(): void {\n        const defaultFontCatalogName = this.m_fontCatalogLoader.initialize(\n            this.m_options.fontCatalog!\n        );\n        this.m_textStyleCache.initializeDefaultTextElementStyle(defaultFontCatalogName);\n    }\n\n    private async initializeTextCanvases(): Promise<void> {\n        const catalogCallback = (name: string, catalog: FontCatalog) => {\n            const loadedTextCanvas = this.m_textCanvasFactory.createTextCanvas(catalog);\n\n            this.m_textRenderers.push({\n                fontCatalog: name,\n                textCanvas: loadedTextCanvas,\n                poiRenderer: this.m_poiRendererFactory.createPoiRenderer(loadedTextCanvas)\n            });\n        };\n\n        return this.m_fontCatalogLoader.loadCatalogs(catalogCallback).then(() => {\n            // Find the default TextCanvas and PoiRenderer.\n            let defaultTextCanvas: TextCanvas | undefined;\n            this.m_textRenderers.forEach(textRenderer => {\n                if (defaultTextCanvas === undefined) {\n                    defaultTextCanvas = textRenderer.textCanvas;\n                }\n            });\n            const defaultPoiRenderer = this.m_poiRendererFactory.createPoiRenderer(\n                defaultTextCanvas!\n            );\n\n            this.m_textStyleCache.initializeTextElementStyles(\n                defaultPoiRenderer,\n                defaultTextCanvas!,\n                this.m_textRenderers\n            );\n        });\n    }\n\n    private updateGlyphDebugMesh() {\n        const debugGlyphs = debugContext.getValue(\"DEBUG_GLYPHS\");\n        if (debugGlyphs === undefined) {\n            return;\n        }\n\n        if (debugGlyphs && this.m_debugGlyphTextureCacheMesh === undefined) {\n            this.initializeGlyphDebugMesh();\n        }\n        assert(this.m_debugGlyphTextureCacheMesh !== undefined);\n        assert(this.m_debugGlyphTextureCacheWireMesh !== undefined);\n\n        this.m_debugGlyphTextureCacheMesh!.visible = debugGlyphs;\n        this.m_debugGlyphTextureCacheWireMesh!.visible = debugGlyphs;\n    }\n\n    private initializeGlyphDebugMesh() {\n        const defaultFontCatalog = this.m_textRenderers[0].textCanvas.fontCatalog;\n\n        // Initialize glyph-debugging mesh.\n        const planeGeometry = new THREE.PlaneGeometry(\n            defaultFontCatalog.textureSize.width / 2.5,\n            defaultFontCatalog.textureSize.height / 2.5,\n            defaultFontCatalog.textureSize.width / defaultFontCatalog.maxWidth,\n            defaultFontCatalog.textureSize.height / defaultFontCatalog.maxHeight\n        );\n        const material = new THREE.MeshBasicMaterial({\n            transparent: true,\n            depthWrite: false,\n            depthTest: false,\n            map: defaultFontCatalog.texture\n        });\n        this.m_debugGlyphTextureCacheMesh = new THREE.Mesh(planeGeometry, material);\n        this.m_debugGlyphTextureCacheMesh.renderOrder = 10000;\n        this.m_debugGlyphTextureCacheMesh.visible = false;\n\n        this.m_debugGlyphTextureCacheMesh.name = \"glyphDebug\";\n\n        const wireframe = new THREE.WireframeGeometry(planeGeometry);\n        const wireframeMaterial = new THREE.LineBasicMaterial({\n            transparent: true,\n            color: 0x999999,\n            depthWrite: false,\n            depthTest: false\n        });\n        this.m_debugGlyphTextureCacheWireMesh = new THREE.LineSegments(\n            wireframe,\n            wireframeMaterial\n        );\n        this.m_debugGlyphTextureCacheWireMesh.renderOrder = 9999;\n        this.m_debugGlyphTextureCacheWireMesh.visible = false;\n\n        this.m_debugGlyphTextureCacheWireMesh.name = \"glyphDebug\";\n\n        this.m_textRenderers[0].textCanvas\n            .getLayer(DEFAULT_TEXT_CANVAS_LAYER)!\n            .storage.scene.add(\n                this.m_debugGlyphTextureCacheMesh,\n                this.m_debugGlyphTextureCacheWireMesh\n            );\n    }\n\n    /**\n     * Visit all visible tiles and add/ their text elements to cache. The update of\n     * [[TextElement]]s is a time consuming process, and cannot be done every frame, but should only\n     * be done when the camera moved (a lot) of whenever the set of visible tiles change.\n     *\n     * The actually rendered [[TextElement]]s are stored internally until the next update is done\n     * to speed up rendering when no camera movement was detected.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     */\n    private updateTextElements(dataSourceTileList: DataSourceTileList[]) {\n        logger.debug(\"updateTextElements\");\n\n        if (updateStats) {\n            updateStats.clear();\n        }\n\n        this.m_textElementStateCache.clearTextCache();\n        this.m_cacheInvalidated = false;\n\n        this.checkIfOverloaded(dataSourceTileList);\n\n        // Used with tile offset to compute the x coordinate offset for tiles.\n        const updateStartTime =\n            this.overloaded && this.m_viewState.isDynamic ? PerformanceTimer.now() : undefined;\n\n        // TODO: HARP-7648. Skip all data sources that won't contain text.\n        // TODO: HARP-7651. Higher priority labels should be updated before lower priority ones\n        // across all data sources.\n        // TODO: HARP-7373. Use rendered tiles (tiles currently rendered to cover the view,\n        // including fallbacks if necessary) instead of visible tiles (target tiles that might not\n        // be decoded yet).\n        // Otherwise labels persistent when crossing a zoom level boundary will flicker (fade out\n        // and back in) due to the delay in decoding the visible tiles.\n        dataSourceTileList.forEach(tileList => {\n            this.updateTextElementsFromSource(\n                tileList.dataSource,\n                tileList.storageLevel,\n                Array.from(tileList.renderedTiles.values()),\n                updateStartTime\n            );\n        });\n\n        if (updateStats) {\n            updateStats.log();\n        }\n    }\n\n    private updateTextElementsFromSource(\n        tileDataSource: DataSource,\n        storageLevel: number,\n        visibleTiles: Tile[],\n        updateStartTime: number | undefined\n    ) {\n        if (updateStats) {\n            updateStats.tiles += visibleTiles.length;\n        }\n        const sortedTiles = visibleTiles;\n\n        // TODO: HARP-7648. Really needed? Should it be done here or in VisibleTileSet?\n        sortedTiles.sort((a: Tile, b: Tile) => {\n            return a.tileKey.mortonCode() - b.tileKey.mortonCode();\n        });\n\n        const sortedGroups: TextElementLists[] = [];\n        this.createSortedGroupsForSorting(tileDataSource, storageLevel, sortedTiles, sortedGroups);\n\n        let numTextElementsUpdated = 0;\n\n        for (const textElementLists of sortedGroups) {\n            this.selectTextElementsToUpdateByDistance(textElementLists);\n\n            // The value of updateStartTime is set if this.overloaded is true.\n            if (updateStartTime !== undefined) {\n                // If overloaded and all time is used up, exit early.\n                if (OVERLOAD_UPDATE_TIME_LIMIT > 0) {\n                    const endTime = PerformanceTimer.now();\n                    const elapsedTime = endTime - updateStartTime;\n                    if (elapsedTime > OVERLOAD_UPDATE_TIME_LIMIT) {\n                        logger.debug(\"Update time limit exceeded.\");\n                        break;\n                    }\n                }\n\n                // Try not to update too many elements. They will be checked for visibility each\n                // frame.\n                numTextElementsUpdated += textElementLists.count();\n                if (numTextElementsUpdated >= OVERLOAD_UPDATED_LABEL_LIMIT) {\n                    logger.debug(\"Update label limit exceeded.\");\n                    break;\n                }\n            }\n        }\n    }\n\n    private prepareTextElementGroup(\n        textElementGroup: TextElementGroup,\n        tileKey: TileKey,\n        maxViewDistance?: number\n    ) {\n        if (textElementGroup.elements.length === 0) {\n            return;\n        }\n\n        const textElementSelection: TextElementFilter = (\n            textElementState: TextElementState\n        ): number | undefined => {\n            let { result, viewDistance } = checkReadyForPlacement(\n                textElementState.element,\n                this.m_viewState,\n                this.m_viewCamera,\n                this.m_poiManager,\n                maxViewDistance\n            );\n\n            if (\n                result === PrePlacementResult.Ok &&\n                !this.m_textElementStateCache.deduplicateElement(\n                    this.m_viewState.zoomLevel,\n                    textElementState\n                )\n            ) {\n                result = PrePlacementResult.Duplicate;\n                viewDistance = undefined;\n            }\n\n            if (updateStats) {\n                updateStats.totalLabels++;\n                updateStats.results[result]++;\n            }\n            return viewDistance;\n        };\n\n        const [, found] = this.m_textElementStateCache.getOrSet(\n            textElementGroup,\n            tileKey,\n            textElementSelection\n        );\n\n        if (updateStats) {\n            ++updateStats.totalGroups;\n            if (!found) {\n                ++updateStats.newGroups;\n            }\n        }\n    }\n\n    private createSortedGroupsForSorting(\n        tileDataSource: DataSource,\n        storageLevel: number,\n        sortedTiles: Tile[],\n        sortedGroups: TextElementLists[]\n    ) {\n        if (sortedTiles.length === 0) {\n            return;\n        }\n\n        const tilesToRender: Tile[] = [];\n\n        for (const tile of sortedTiles) {\n            if (tileDataSource.shouldRenderText(storageLevel, tile.tileKey)) {\n                tilesToRender.push(tile);\n            }\n        }\n\n        const groupedPriorityLists: Map<number, TextElementLists> = new Map();\n\n        for (const tile of tilesToRender) {\n            for (const group of tile.textElementGroups.groups.values()) {\n                if (group.elements.length === 0) {\n                    continue;\n                }\n\n                const foundGroup = groupedPriorityLists.get(group.priority);\n                if (foundGroup === undefined) {\n                    groupedPriorityLists.set(\n                        group.priority,\n                        new TextElementLists([new TileTextElements(tile, group)])\n                    );\n                } else {\n                    foundGroup.lists.push(new TileTextElements(tile, group));\n                }\n            }\n        }\n\n        if (groupedPriorityLists.size === 0) {\n            return;\n        }\n\n        for (const g of groupedPriorityLists) {\n            const lists = g[1];\n            sortedGroups.push(lists);\n        }\n\n        sortedGroups.sort((a: TextElementLists, b: TextElementLists) => {\n            return b.priority - a.priority;\n        });\n\n        const printTextInfo = false;\n\n        if (PRINT_LABEL_DEBUG_INFO && printTextInfo) {\n            let outString = \"\";\n            for (const textElementLists of sortedGroups) {\n                let size = 0;\n                for (const tileTextElements of textElementLists.lists) {\n                    size += tileTextElements.group.elements.length;\n                }\n                outString += `priority ${textElementLists.priority} size: ${size}\\n`;\n            }\n            logger.log(outString);\n        }\n    }\n\n    private selectTextElementsToUpdateByDistance(textElementLists: TextElementLists) {\n        const farDistanceLimitRatio = Math.max(\n            this.m_options.maxDistanceRatioForTextLabels!,\n            this.m_options.maxDistanceRatioForPoiLabels!\n        );\n        const maxViewDistance = getMaxViewDistance(this.m_viewState, farDistanceLimitRatio);\n\n        for (const tileTextElements of textElementLists.lists) {\n            this.prepareTextElementGroup(\n                tileTextElements.group,\n                tileTextElements.tile.tileKey,\n                maxViewDistance\n            );\n        }\n    }\n\n    private placeTextElements(time: number, placeNewTextElements: boolean) {\n        const renderParams: RenderParams = {\n            numRenderedTextElements: 0,\n            fadeAnimationRunning: false,\n            time\n        };\n\n        const placeStartTime =\n            this.overloaded && this.m_viewState.isDynamic ? PerformanceTimer.now() : undefined;\n\n        if (placementStats) {\n            placementStats.clear();\n        }\n\n        if (this.m_textElementStateCache.size === 0) {\n            logger.debug(\"Text element cache empty.\");\n            return;\n        }\n\n        const placeNew = this.m_forceNewLabelsPass || placeNewTextElements;\n        if (this.m_forceNewLabelsPass) {\n            if (!placeNewTextElements) {\n                logger.debug(\"Force new label pass\");\n            }\n            this.m_forceNewLabelsPass = false;\n        }\n        const maxNumPlacedTextElements = this.m_options.maxNumVisibleLabels!;\n\n        // TODO: HARP-7648. Potential performance improvement. Place persistent labels + rejected\n        // candidates from previous frame if there's been no placement in this one.\n        const groupStates = this.m_textElementStateCache.sortedGroupStates;\n        let currentPriority: number = groupStates[0].priority;\n        let currentPriorityBegin: number = 0;\n\n        for (let i = 0; i < groupStates.length; ++i) {\n            const textElementGroupState = groupStates[i];\n            if (placementStats) {\n                ++placementStats.totalGroups;\n            }\n\n            const newPriority = textElementGroupState.priority;\n            if (placeNew && currentPriority !== newPriority) {\n                // Place all new labels of the previous priority before placing the persistent\n                // labels of this priority.\n                this.placeNewTextElements(currentPriorityBegin, i, renderParams);\n                if (isPlacementTimeExceeded(placeStartTime)) {\n                    break;\n                }\n                currentPriority = newPriority;\n                currentPriorityBegin = i;\n            }\n            if (\n                !this.placeTextElementGroup(\n                    textElementGroupState,\n                    renderParams,\n                    maxNumPlacedTextElements,\n                    Pass.PersistentLabels\n                )\n            ) {\n                break;\n            }\n\n            if (isPlacementTimeExceeded(placeStartTime)) {\n                break;\n            }\n        }\n\n        if (placeNew) {\n            // Place new text elements of the last priority.\n            this.placeNewTextElements(currentPriorityBegin, groupStates.length, renderParams);\n        }\n\n        if (placementStats) {\n            placementStats.numRenderedTextElements = renderParams.numRenderedTextElements;\n            placementStats.log();\n        }\n\n        if (!this.m_options.disableFading && renderParams.fadeAnimationRunning) {\n            this.m_viewUpdateCallback();\n        }\n    }\n\n    private placeNewTextElements(\n        beginGroupIndex: number,\n        endGroupIndex: number,\n        renderParams: RenderParams\n    ) {\n        const groupStates = this.m_textElementStateCache.sortedGroupStates;\n        for (let i = beginGroupIndex; i < endGroupIndex; ++i) {\n            if (\n                !this.placeTextElementGroup(\n                    groupStates[i],\n                    renderParams,\n                    this.m_options.maxNumVisibleLabels!,\n                    Pass.NewLabels\n                )\n            ) {\n                break;\n            }\n        }\n    }\n\n    private placeOverlayTextElements() {\n        if (this.m_overlayTextElements === undefined || this.m_overlayTextElements.length === 0) {\n            return;\n        }\n\n        const screenSize = this.m_tmpVector.set(\n            this.m_screenProjector.width,\n            this.m_screenProjector.height\n        );\n        const screenXOrigin = -screenSize.width / 2.0;\n        const screenYOrigin = screenSize.height / 2.0;\n\n        // Place text elements one by one.\n        for (const textElement of this.m_overlayTextElements!) {\n            // Get the TextElementStyle.\n            const textElementStyle = this.m_textStyleCache.getTextElementStyle(textElement.style);\n            const textCanvas = textElementStyle.textCanvas;\n            if (textCanvas === undefined) {\n                continue;\n            }\n\n            const forceNewPassOnLoaded = false;\n            this.initializeGlyphs(textElement, textElementStyle, forceNewPassOnLoaded);\n\n            if (textElement.loadingState !== LoadingState.Initialized) {\n                continue;\n            }\n\n            const layer = textCanvas.getLayer(textElement.renderOrder || DEFAULT_TEXT_CANVAS_LAYER);\n\n            // Move onto the next TextElement if we cannot continue adding glyphs to this layer.\n            if (layer !== undefined) {\n                if (layer.storage.drawCount + textElement.glyphs!.length > layer.storage.capacity) {\n                    continue;\n                }\n            }\n\n            // Set the current style for the canvas.\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n\n            // Place text.\n            let textPath;\n            if (!(textElement.type === TextElementType.PathLabel)) {\n                // Adjust the label positioning.\n                tempScreenPosition.x = screenXOrigin + textElement.position.x * screenSize.width;\n                tempScreenPosition.y = screenYOrigin - textElement.position.y * screenSize.height;\n                if (textElement.xOffset !== undefined) {\n                    tempScreenPosition.x += textElement.xOffset;\n                }\n                if (textElement.yOffset !== undefined) {\n                    tempScreenPosition.y -= textElement.yOffset;\n                }\n\n                tempPosition.x = tempScreenPosition.x;\n                tempPosition.y = tempScreenPosition.y;\n                tempPosition.z = 0.0;\n                addTextToCanvas(textElement, textCanvas, tempPosition);\n            } else {\n                // Adjust the label positioning.\n                tempScreenPosition.x = screenXOrigin;\n                tempScreenPosition.y = screenYOrigin;\n                if (textElement.xOffset !== undefined) {\n                    tempScreenPosition.x += textElement.xOffset;\n                }\n                if (textElement.yOffset !== undefined) {\n                    tempScreenPosition.y -= textElement.yOffset;\n                }\n\n                // Get the screen points that define the label's segments and create a path with\n                // them.\n                // TODO: HARP-7648. Optimize array allocations.\n                const screenPoints: THREE.Vector2[] = [];\n                for (const pt of textElement.path!) {\n                    const pX = tempScreenPosition.x + pt.x * screenSize.width;\n                    const pY = tempScreenPosition.y - pt.y * screenSize.height;\n                    screenPoints.push(new THREE.Vector2(pX, pY));\n                }\n                textPath = new SimplePath();\n                for (let i = 0; i < screenPoints.length - 1; ++i) {\n                    textPath.add(new THREE.LineCurve(screenPoints[i], screenPoints[i + 1]));\n                }\n                addTextToCanvas(textElement, textCanvas, tempPosition, textPath, true);\n            }\n        }\n    }\n\n    private getDistanceScalingFactor(\n        label: TextElement,\n        distance: number,\n        lookAtDistance: number\n    ): number {\n        // Distance scale is based on relation between camera focus point distance and\n        // the actual label distance. For labels close to camera look at point the scale\n        // remains unchanged, the farther is label from that point the smaller size it is\n        // rendered in screen space. This method is unaffected by near and far clipping planes\n        // distances, but may be improved by taking FOV into equation or customizing the\n        // focus point screen position based on horizont, actual ground, tilt ets.\n        let factor = lookAtDistance / distance;\n        // The label.distanceScale property defines the influence ratio at which\n        // distance affects the final scaling of label.\n        factor = 1.0 + (factor - 1.0) * label.distanceScale;\n        // Preserve the constraints\n        factor = Math.max(factor, this.m_options.labelDistanceScaleMin!);\n        factor = Math.min(factor, this.m_options.labelDistanceScaleMax!);\n        return factor;\n    }\n\n    private getDistanceFadingFactor(\n        label: TextElement,\n        state: TextElementState,\n        maxVisibilityDist: number\n    ): number {\n        let distanceFadeValue = 1.0;\n        const textDistance = state.viewDistance;\n\n        if (textDistance !== undefined && label.fadeFar !== undefined && label.fadeFar > 0.0) {\n            const fadeNear = label.fadeNear === undefined ? 0.0 : label.fadeNear;\n            const fadeFar = label.fadeFar;\n            if (fadeFar > fadeNear) {\n                distanceFadeValue =\n                    1.0 -\n                    THREE.MathUtils.clamp(\n                        (textDistance / maxVisibilityDist - fadeNear) / (fadeFar - fadeNear),\n                        0.0,\n                        1.0\n                    );\n            }\n        }\n        return distanceFadeValue;\n    }\n\n    private addPointLabel(\n        labelState: TextElementState,\n        position: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        poiRenderer: PoiRenderer,\n        textCanvas: TextCanvas,\n        renderParams: RenderParams,\n        iconIndex?: number\n    ): boolean {\n        const pointLabel: TextElement = labelState.element;\n        const textRenderState: RenderState | undefined = labelState.textRenderState;\n\n        assert(iconIndex === undefined || labelState.iconRenderStates !== undefined);\n        const iconRenderState: RenderState =\n            iconIndex !== undefined\n                ? labelState.iconRenderStates![iconIndex]\n                : labelState.iconRenderState!;\n        assert(iconRenderState !== undefined);\n\n        // Find the label's original position.\n        tempScreenPosition.x = tempPoiScreenPosition.x = screenPosition.x;\n        tempScreenPosition.y = tempPoiScreenPosition.y = screenPosition.y;\n\n        // Scale the text depending on the label's distance to the camera.\n        const textDistance = this.m_viewState.worldCenter.distanceTo(position);\n        if (\n            pointLabel.fadeFar !== undefined &&\n            (pointLabel.fadeFar <= 0.0 ||\n                pointLabel.fadeFar * this.m_viewState.maxVisibilityDist < textDistance)\n        ) {\n            // The label is farther away than fadeFar value, which means it is totally\n            // transparent.\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            return false;\n        }\n        labelState.setViewDistance(textDistance);\n\n        // Check if there is need to check for screen space for the label's icon.\n        const poiInfo = pointLabel.poiInfo;\n        let iconRejected = false;\n\n        // Check if icon should be rendered at this zoomLevel\n        const renderIcon =\n            poiInfo !== undefined &&\n            MathUtils.isClamped(\n                this.m_viewState.zoomLevel,\n                poiInfo.iconMinZoomLevel,\n                poiInfo.iconMaxZoomLevel\n            ) &&\n            poiInfo!.isValid !== false;\n\n        const distanceScaleFactor = this.getDistanceScalingFactor(\n            pointLabel,\n            textDistance,\n            this.m_viewState.lookAtDistance\n        );\n        const iconReady = renderIcon && poiRenderer.prepareRender(pointLabel, this.m_viewState.env);\n\n        if (iconReady) {\n            const result = placeIcon(\n                iconRenderState,\n                poiInfo!,\n                tempPoiScreenPosition,\n                distanceScaleFactor,\n                this.m_viewState.env,\n                this.m_screenCollisions\n            );\n            if (result === PlacementResult.Invisible) {\n                iconRenderState.reset();\n\n                if (placementStats) {\n                    ++placementStats.numNotVisible;\n                }\n                return false;\n            }\n            iconRejected = result === PlacementResult.Rejected;\n        } else if (renderIcon && poiInfo!.isValid !== false) {\n            // Ensure that text elements still loading icons get a chance to be rendered if\n            // there's no text element updates in the next frames.\n            this.m_forceNewLabelsPass = true;\n        }\n\n        const distanceFadeFactor = this.getDistanceFadingFactor(\n            pointLabel,\n            labelState,\n            this.m_viewState.maxVisibilityDist\n        );\n        const renderText = shouldRenderPointText(labelState, this.m_viewState, this.m_options);\n\n        // Render the label's text...\n        // textRenderState is always defined at this point.\n        if (renderText) {\n            // Multi point (icons) features (line markers) will use single placement anchor, but\n            // single point labels (POIs, etc.) may use multi-placement algorithm.\n            const placeResult = placePointLabel(\n                labelState,\n                tempScreenPosition,\n                distanceScaleFactor,\n                textCanvas,\n                this.m_screenCollisions,\n                iconRejected,\n                tempPosition,\n                iconIndex === undefined\n            );\n            if (placeResult === PlacementResult.Invisible) {\n                if (placementStats) {\n                    placementStats.numPoiTextsInvisible++;\n                }\n                labelState.reset();\n                return false;\n            }\n\n            const textRejected = placeResult === PlacementResult.Rejected;\n            if (!iconRejected) {\n                const textIsOptional: boolean =\n                    pointLabel.poiInfo !== undefined && pointLabel.poiInfo.textIsOptional === true;\n                iconRejected = textRejected && !textIsOptional;\n            }\n\n            if (textRejected) {\n                textRenderState!.startFadeOut(renderParams.time);\n            }\n\n            const textNeedsDraw =\n                (!textRejected && shouldRenderPoiText(labelState, this.m_viewState)) ||\n                textRenderState!.isFading();\n\n            if (textNeedsDraw) {\n                if (!textRejected) {\n                    textRenderState!.startFadeIn(renderParams.time);\n                }\n                renderParams.fadeAnimationRunning =\n                    renderParams.fadeAnimationRunning || textRenderState!.isFading();\n                if (\n                    addTextBufferToCanvas(\n                        labelState,\n                        textCanvas,\n                        tempPosition,\n                        distanceFadeFactor,\n                        distanceScaleFactor\n                    ) &&\n                    placementStats\n                ) {\n                    placementStats.numRenderedPoiTexts++;\n                }\n            }\n        }\n        // ... and render the icon (if any).\n        if (iconReady) {\n            if (iconRejected) {\n                iconRenderState!.startFadeOut(renderParams.time);\n            } else {\n                iconRenderState!.startFadeIn(renderParams.time);\n            }\n\n            renderParams.fadeAnimationRunning =\n                renderParams.fadeAnimationRunning || iconRenderState!.isFading();\n\n            const opacity = iconRenderState.opacity * distanceFadeFactor;\n            if (opacity > 0) {\n                // Same as for text, don't allocate screen space for an icon that's fading out so\n                // that any label blocked by it gets a chance to be placed as soon as any other\n                // surrounding new labels.\n                const allocateSpace = poiInfo!.reserveSpace !== false && !iconRejected;\n                poiRenderer.renderPoi(\n                    poiInfo!,\n                    tempPoiScreenPosition,\n                    this.m_screenCollisions,\n                    labelState.renderDistance,\n                    distanceScaleFactor,\n                    allocateSpace,\n                    opacity,\n                    this.m_viewState.env\n                );\n\n                if (placementStats) {\n                    placementStats.numRenderedPoiIcons++;\n                }\n            }\n        }\n        renderParams.numRenderedTextElements++;\n        return true;\n    }\n\n    private addPoiLabel(\n        labelState: TextElementState,\n        poiRenderer: PoiRenderer,\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): boolean {\n        const poiLabel = labelState.element;\n        const worldPosition = poiLabel.points as THREE.Vector3;\n\n        // Only process labels frustum-clipped labels\n        if (this.m_screenProjector.project(worldPosition, tempScreenPosition) === undefined) {\n            return false;\n        }\n        // Add this POI as a point label.\n        return this.addPointLabel(\n            labelState,\n            worldPosition,\n            tempScreenPosition,\n            poiRenderer,\n            textCanvas,\n            renderParams\n        );\n    }\n\n    private addLineMarkerLabel(\n        labelState: TextElementState,\n        poiRenderer: PoiRenderer,\n        shieldGroups: number[][],\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): void {\n        const lineMarkerLabel = labelState.element;\n        const path = lineMarkerLabel.points as THREE.Vector3[];\n\n        // Early exit if the line marker doesn't have the necessary data.\n        const poiInfo = lineMarkerLabel.poiInfo!;\n        if (\n            path.length === 0 ||\n            !poiRenderer.prepareRender(lineMarkerLabel, this.m_viewState.env)\n        ) {\n            return;\n        }\n\n        // Initialize the shield group for this lineMarker.\n        let shieldGroup: number[] | undefined;\n        if (poiInfo.shieldGroupIndex !== undefined) {\n            shieldGroup = shieldGroups[poiInfo.shieldGroupIndex];\n            if (shieldGroup === undefined) {\n                shieldGroup = [];\n                shieldGroups[poiInfo.shieldGroupIndex] = shieldGroup;\n            }\n        }\n\n        const lineTechnique = poiInfo.technique as LineMarkerTechnique;\n        const minDistanceSqr =\n            lineTechnique.minDistance !== undefined\n                ? lineTechnique.minDistance * lineTechnique.minDistance\n                : 0;\n\n        // Process markers (with shield groups).\n        if (minDistanceSqr > 0 && shieldGroup !== undefined) {\n            for (let pointIndex = 0; pointIndex < path.length; ++pointIndex) {\n                const point = path[pointIndex];\n                // Only process labels frustum-clipped labels\n                if (this.m_screenProjector.project(point, tempScreenPosition) !== undefined) {\n                    // Find a suitable location for the lineMarker to be placed at.\n                    let tooClose = false;\n                    for (let j = 0; j < shieldGroup.length; j += 2) {\n                        const distanceSqr = Math2D.distSquared(\n                            shieldGroup[j],\n                            shieldGroup[j + 1],\n                            tempScreenPosition.x,\n                            tempScreenPosition.y\n                        );\n                        tooClose = distanceSqr < minDistanceSqr;\n                        if (tooClose) {\n                            break;\n                        }\n                    }\n\n                    // Place it as a point label if it's not to close to other marker in the\n                    // same shield group.\n                    if (!tooClose) {\n                        if (\n                            this.addPointLabel(\n                                labelState,\n                                point,\n                                tempScreenPosition,\n                                poiRenderer,\n                                textCanvas,\n                                renderParams,\n                                pointIndex\n                            )\n                        ) {\n                            shieldGroup.push(tempScreenPosition.x, tempScreenPosition.y);\n                        }\n                    }\n                }\n            }\n        }\n        // Process markers (without shield groups).\n        else {\n            for (let pointIndex = 0; pointIndex < path.length; ++pointIndex) {\n                const point = path[pointIndex];\n                // Only process labels frustum-clipped labels\n                if (this.m_screenProjector.project(point, tempScreenPosition) !== undefined) {\n                    this.addPointLabel(\n                        labelState,\n                        point,\n                        tempScreenPosition,\n                        poiRenderer,\n                        textCanvas,\n                        renderParams,\n                        pointIndex\n                    );\n                }\n            }\n        }\n    }\n\n    private addPathLabel(\n        labelState: TextElementState,\n        screenPoints: THREE.Vector2[],\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): boolean {\n        // TODO: HARP-7649. Add fade out transitions for path labels.\n        const textMaxDistance = getMaxViewDistance(\n            this.m_viewState,\n            this.m_options.maxDistanceRatioForTextLabels!\n        );\n        const pathLabel = labelState.element;\n\n        // Limit the text rendering of path labels in the far distance.\n        if (\n            !(\n                pathLabel.ignoreDistance === true ||\n                labelState.viewDistance === undefined ||\n                labelState.viewDistance < textMaxDistance\n            )\n        ) {\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        if (\n            pathLabel.fadeFar !== undefined &&\n            (pathLabel.fadeFar <= 0.0 ||\n                pathLabel.fadeFar * this.m_viewState.maxVisibilityDist < labelState.renderDistance)\n        ) {\n            // The label is farther away than fadeFar value, which means it is totally\n            // transparent\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        // Get the screen points that define the label's segments and create a path with\n        // them.\n        let textPath = new THREE.Path();\n        tempScreenPosition.copy(screenPoints[0]);\n        for (let i = 0; i < screenPoints.length - 1; ++i) {\n            textPath.add(new SimpleLineCurve(screenPoints[i], screenPoints[i + 1]));\n        }\n        // Flip the path if the label is gonna be rendered downwards.\n        if (textPath.getPoint(0.5).x - textPath.getPoint(0.51).x > 0) {\n            tempScreenPosition.copy(screenPoints[screenPoints.length - 1]);\n            textPath = new THREE.Path();\n            for (let i = screenPoints.length - 1; i > 0; --i) {\n                textPath.add(new SimpleLineCurve(screenPoints[i], screenPoints[i - 1]));\n            }\n        }\n\n        // Update the real rendering distance to have smooth fading and scaling\n        labelState.setViewDistance(computeViewDistance(this.m_viewState.worldCenter, pathLabel));\n        const textRenderDistance = -labelState.renderDistance;\n\n        // Scale the text depending on the label's distance to the camera.\n        const distanceScaleFactor = this.getDistanceScalingFactor(\n            pathLabel,\n            textRenderDistance,\n            this.m_viewState.lookAtDistance\n        );\n        const prevSize = textCanvas.textRenderStyle.fontSize.size;\n        textCanvas.textRenderStyle.fontSize.size *= distanceScaleFactor;\n\n        if (\n            placePathLabel(\n                labelState,\n                textPath,\n                tempScreenPosition,\n                textCanvas,\n                this.m_screenCollisions\n            ) !== PlacementResult.Ok\n        ) {\n            textCanvas.textRenderStyle.fontSize.size = prevSize;\n            if (placementStats) {\n                ++placementStats.numNotVisible;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        labelState.textRenderState!.startFadeIn(renderParams.time);\n\n        let opacity = pathLabel.renderStyle!.opacity;\n\n        if (labelState.textRenderState!.isFading()) {\n            opacity *= labelState.textRenderState!.opacity;\n            renderParams.fadeAnimationRunning = true;\n        }\n\n        if (labelState.textRenderState!.opacity === 0) {\n            textCanvas.textRenderStyle.fontSize.size = prevSize;\n            return false;\n        }\n\n        const prevOpacity = textCanvas.textRenderStyle.opacity;\n        const prevBgOpacity = textCanvas.textRenderStyle.backgroundOpacity;\n        const distanceFadeFactor = this.getDistanceFadingFactor(\n            pathLabel,\n            labelState,\n            this.m_viewState.maxVisibilityDist\n        );\n        textCanvas.textRenderStyle.opacity = opacity * distanceFadeFactor;\n        textCanvas.textRenderStyle.backgroundOpacity =\n            textCanvas.textRenderStyle.opacity * pathLabel.renderStyle!.backgroundOpacity;\n\n        tempPosition.z = labelState.renderDistance;\n\n        addTextToCanvas(pathLabel, textCanvas, tempPosition, textPath);\n        renderParams.numRenderedTextElements++;\n\n        // Restore previous style values for text elements using the same style.\n        textCanvas.textRenderStyle.fontSize.size = prevSize;\n        textCanvas.textRenderStyle.opacity = prevOpacity;\n        textCanvas.textRenderStyle.backgroundOpacity = prevBgOpacity;\n        return true;\n    }\n\n    private checkIfOverloaded(dataSourceTileList: DataSourceTileList[]): boolean {\n        // Count the number of TextElements in the scene to see if we have to switch to\n        // \"overloadMode\".\n        let numTextElementsInScene = 0;\n\n        dataSourceTileList.forEach(renderListEntry => {\n            for (const tile of renderListEntry.renderedTiles.values()) {\n                numTextElementsInScene += tile.textElementGroups.count();\n            }\n        });\n        const newOverloaded = numTextElementsInScene > OVERLOAD_LABEL_LIMIT;\n\n        if (newOverloaded && !this.m_overloaded) {\n            logger.debug(\"Overloaded Mode enabled.\");\n        }\n        this.m_overloaded = newOverloaded;\n        return this.m_overloaded;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryType, getFeatureId, Technique } from \"@here/harp-datasource-protocol\";\nimport * as THREE from \"three\";\n\nimport { OrientedBox3 } from \"@here/harp-geoutils\";\nimport { MapView } from \"./MapView\";\nimport { MapViewPoints } from \"./MapViewPoints\";\nimport { RoadPicker } from \"./RoadPicker\";\nimport { RoadIntersectionData, Tile, TileFeatureData } from \"./Tile\";\n\n/**\n * Describes the general type of a picked object.\n */\nexport enum PickObjectType {\n    /**\n     * Unspecified.\n     */\n    Unspecified = 0,\n\n    /**\n     * A point object.\n     */\n    Point,\n\n    /**\n     * A line object.\n     */\n    Line,\n\n    /**\n     * An area object.\n     */\n    Area,\n\n    /**\n     * The text part of a [[TextElement]]\n     */\n    Text,\n\n    /**\n     * The Icon of a [[TextElement]].\n     */\n    Icon,\n\n    /**\n     * Any general 3D object, for example, a landmark.\n     */\n    Object3D\n}\n\n/**\n * A general pick result. You can access the details of a picked geometry from the property\n * `intersection`, which is available if a geometry was hit. If a road was hit, a [[RoadPickResult]]\n * is returned, which has additional information, but no `intersection`.\n */\nexport interface PickResult {\n    /**\n     * General type of object.\n     */\n    type: PickObjectType;\n\n    /**\n     * A 2D point in screen coordinates, or a 3D point in world coordinates.\n     */\n    point: THREE.Vector2 | THREE.Vector3;\n\n    /**\n     * Distance from the camera to the picking point; used to determine the closest object.\n     */\n    distance: number;\n\n    /**\n     * An optional feature ID of the picked object; typically applies to the Optimized Map\n     * Vector (OMV) format.\n     */\n    featureId?: number;\n\n    /**\n     * Defined for geometry only.\n     */\n    intersection?: THREE.Intersection;\n\n    /**\n     * Defined for roads or if `enableTechniqueInfo` option is enabled.\n     */\n    technique?: Technique;\n\n    /**\n     * Optional user data that has been defined in the picked object. This object points directly to\n     * information contained in the original [[TileFeatureData]] stored in [[MapView]], and should\n     * not be modified.\n     */\n    userData?: any;\n}\n\nconst tmpOBB = new OrientedBox3();\n\n/**\n * Handles the picking of scene geometry and roads.\n */\nexport class PickHandler {\n    private readonly m_plane = new THREE.Plane(new THREE.Vector3(0, 0, 1));\n    private readonly m_roadPicker?: RoadPicker;\n\n    constructor(\n        readonly mapView: MapView,\n        readonly camera: THREE.Camera,\n        public enableRoadPicking = true,\n        public enablePickTechnique = false\n    ) {\n        if (enableRoadPicking) {\n            this.m_roadPicker = new RoadPicker(mapView);\n        }\n    }\n\n    /**\n     * The `RoadPicker` class manages picking of roads, which may not be pickable in THREE.js,\n     * since their geometry is generated in the vertex shader. The `RoadPicker` requires that\n     * all [[Tile]]s are registered before they can be picked successfully.\n     */\n    registerTile(tile: Tile): RoadIntersectionData | undefined {\n        return this.m_roadPicker !== undefined ? this.m_roadPicker.registerTile(tile) : undefined;\n    }\n\n    /**\n     * Does a raycast on all objects in the scene; useful for picking. This function is Limited to\n     * objects that THREE.js can raycast. However, any solid lines that have their geometry in the\n     * shader cannot be tested for intersection.\n     *\n     * @param x The X position in CSS/client coordinates, without the applied display ratio.\n     * @param y The Y position in CSS/client coordinates, without the applied display ratio.\n     * @returns the list of intersection results.\n     */\n    intersectMapObjects(x: number, y: number): PickResult[] {\n        const worldPos = this.mapView.getNormalizedScreenCoordinates(x, y);\n        const rayCaster = this.mapView.raycasterFromScreenPoint(x, y);\n        const pickResults: PickResult[] = [];\n\n        if (this.mapView.textElementsRenderer !== undefined) {\n            const { clientWidth, clientHeight } = this.mapView.canvas;\n            const screenX = worldPos.x * clientWidth * 0.5 * this.mapView.pixelRatio;\n            const screenY = worldPos.y * clientHeight * 0.5 * this.mapView.pixelRatio;\n            const scenePosition = new THREE.Vector2(screenX, screenY);\n            this.mapView.textElementsRenderer.pickTextElements(scenePosition, pickResults);\n        }\n\n        const intersects: THREE.Intersection[] = [];\n        const tileList = this.mapView.visibleTileSet.dataSourceTileList;\n        tileList.forEach(dataSourceTileList => {\n            dataSourceTileList.renderedTiles.forEach(tile => {\n                tmpOBB.copy(tile.boundingBox);\n                tmpOBB.position.sub(this.mapView.worldCenter);\n\n                if (tmpOBB.intersectsRay(rayCaster.ray) !== undefined) {\n                    rayCaster.intersectObjects(tile.objects, true, intersects);\n                }\n            });\n        });\n\n        for (const intersect of intersects) {\n            const pickResult: PickResult = {\n                type: PickObjectType.Unspecified,\n                point: intersect.point,\n                distance: intersect.distance,\n                intersection: intersect\n            };\n\n            if (\n                intersect.object.userData === undefined ||\n                intersect.object.userData.feature === undefined\n            ) {\n                pickResults.push(pickResult);\n                continue;\n            }\n\n            const featureData: TileFeatureData = intersect.object.userData.feature;\n            if (this.enablePickTechnique) {\n                pickResult.technique = intersect.object.userData.technique;\n            }\n\n            this.addObjInfo(featureData, intersect, pickResult);\n\n            if (featureData.objInfos !== undefined) {\n                const featureId =\n                    featureData.objInfos.length === 1\n                        ? getFeatureId(featureData.objInfos[0])\n                        : undefined;\n                pickResult.featureId = featureId;\n            }\n\n            let pickObjectType: PickObjectType;\n\n            switch (featureData.geometryType) {\n                case GeometryType.Point:\n                case GeometryType.Text:\n                    pickObjectType = PickObjectType.Point;\n                    break;\n                case GeometryType.Line:\n                case GeometryType.ExtrudedLine:\n                case GeometryType.SolidLine:\n                case GeometryType.TextPath:\n                    pickObjectType = PickObjectType.Line;\n                    break;\n                case GeometryType.Polygon:\n                case GeometryType.ExtrudedPolygon:\n                    pickObjectType = PickObjectType.Area;\n                    break;\n                case GeometryType.Object3D:\n                    pickObjectType = PickObjectType.Object3D;\n                    break;\n                default:\n                    pickObjectType = PickObjectType.Unspecified;\n            }\n\n            pickResult.type = pickObjectType;\n            pickResults.push(pickResult);\n        }\n\n        if (this.enableRoadPicking) {\n            const planeIntersectPosition = new THREE.Vector3();\n            const cameraPos = this.mapView.camera.position.clone();\n\n            rayCaster.setFromCamera(worldPos, this.mapView.camera);\n            rayCaster.ray.intersectPlane(this.m_plane, planeIntersectPosition);\n\n            this.mapView.forEachVisibleTile(tile => {\n                this.m_roadPicker!.intersectRoads(\n                    tile,\n                    cameraPos,\n                    planeIntersectPosition,\n                    pickResults\n                );\n            });\n        }\n\n        pickResults.sort((a: PickResult, b: PickResult) => {\n            return a.distance - b.distance;\n        });\n\n        return pickResults;\n    }\n\n    private addObjInfo(\n        featureData: TileFeatureData,\n        intersect: THREE.Intersection,\n        pickResult: PickResult\n    ) {\n        if (pickResult.intersection!.object instanceof MapViewPoints) {\n            pickResult.userData = featureData.objInfos![intersect.index!];\n            return;\n        } else if (\n            featureData.objInfos === undefined ||\n            featureData.starts === undefined ||\n            intersect.faceIndex === undefined\n        ) {\n            return;\n        }\n\n        if (featureData.starts.length > 1) {\n            let objInfosIndex = 0;\n            for (const polygonStartFace of featureData.starts) {\n                if (polygonStartFace > intersect.faceIndex * 3) {\n                    break;\n                }\n                objInfosIndex++;\n            }\n            pickResult.userData = featureData.objInfos[objInfosIndex - 1];\n        } else {\n            pickResult.userData = featureData.objInfos[0];\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    GeometryType,\n    Technique,\n    TextPathGeometry\n} from \"@here/harp-datasource-protocol\";\nimport { GeoBox, OrientedBox3, Projection, TileKey } from \"@here/harp-geoutils\";\nimport { assert, CachedResource, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { AnimatedExtrusionTileHandler } from \"./AnimatedExtrusionHandler\";\nimport { CopyrightInfo } from \"./copyrights/CopyrightInfo\";\nimport { DataSource } from \"./DataSource\";\nimport { ElevationRange } from \"./ElevationRangeSource\";\nimport { LodMesh } from \"./geometry/LodMesh\";\nimport { TileGeometryLoader } from \"./geometry/TileGeometryLoader\";\nimport { MapView } from \"./MapView\";\nimport { PathBlockingElement } from \"./PathBlockingElement\";\nimport { PerformanceStatistics } from \"./Statistics\";\nimport { TextElement } from \"./text/TextElement\";\nimport { TextElementGroup } from \"./text/TextElementGroup\";\nimport { TextElementGroupPriorityList } from \"./text/TextElementGroupPriorityList\";\nimport { TileTextStyleCache } from \"./text/TileTextStyleCache\";\nimport { MapViewUtils } from \"./Utils\";\n\nconst logger = LoggerManager.instance.create(\"Tile\");\n\nexport type TileObject = THREE.Object3D & {\n    /**\n     * Distance of this object from the [[Tile]]'s center.\n     */\n    displacement?: THREE.Vector3;\n\n    /**\n     * This stores the THREE.Object3D renderOrder property, we need to back it up because we need to\n     * reduce it if the tile is used as fall back. When it is used normally, the renderOrder needs\n     * to be reset.\n     * @hidden\n     */\n    _backupRenderOrder?: number;\n};\n\ninterface DisposableObject {\n    geometry?: THREE.BufferGeometry | THREE.Geometry;\n    geometries?: Array<THREE.BufferGeometry | THREE.Geometry>;\n    material?: THREE.Material[] | THREE.Material;\n}\n\n/**\n * An interface for optional feature data that is saved in a `THREE.Object3D`'s `userData`\n * property.\n */\nexport interface TileFeatureData {\n    /**\n     * The original type of geometry.\n     */\n    geometryType?: GeometryType;\n\n    /**\n     * An optional array of indices into geometry where the feature starts. The lists of IDs\n     * and starting indices (starts) must have the same size.\n     */\n    starts?: number[];\n\n    /**\n     * An optional object containing properties defined by the developer. It has the same size as\n     * the list of IDs and the starting indices (starts).\n     */\n    objInfos?: Array<{} | undefined>;\n}\n\n/**\n * Minimum estimated size of a JS object.\n */\nconst MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION = 16;\nconst MINIMUM_OBJECT_SIZE_ESTIMATION = 100;\n\n/**\n * Compute the memory footprint of `TileFeatureData`.\n */\nexport function getFeatureDataSize(featureData: TileFeatureData): number {\n    let numBytes = MINIMUM_OBJECT_SIZE_ESTIMATION;\n\n    if (featureData.starts !== undefined) {\n        numBytes += featureData.starts.length * 8;\n    }\n    if (featureData.objInfos !== undefined) {\n        // 16 (estimated) bytes per objInfos\n        numBytes += featureData.objInfos.length * MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION;\n    }\n\n    return numBytes;\n}\n\n/**\n * Contains data that describes the road on a `tile`. The `RoadIntersectionData` is generated by\n * the [[RoadPicker]] class.\n *\n * @see [[RoadPicker]]\n */\nexport interface RoadIntersectionData {\n    /**\n     * Optional array of feature IDs.\n     */\n    ids: Array<number | undefined>;\n\n    /**\n     * An array of indices into the technique catalog. The lists of `techniqueIndex` and `starts`\n     * have the same size.\n     */\n    techniqueIndex: number[];\n\n    /**\n     * An array of the indices into geometry where the feature starts. The lists of IDs and\n     * starting indices (starts) have the same size.\n     */\n    starts: number[];\n\n    /**\n     * An array of widths of the roads. The lists of IDs and widths have the same size.\n     */\n    widths: Array<number | (() => number)>;\n\n    /**\n     * An array of 2D numbers that make up the road geometry.\n     */\n    positions: number[];\n\n    /**\n     * A catalog of [[Technique]]s for road lines. Allows to reconstruct the visual appearance of\n     * the identified line.\n     */\n    techniques: Technique[];\n    /**\n     * An optional object that contains properties defined by the developer. This object has the\n     * same size as the list of IDs and the starts.\n     */\n    objInfos?: Array<{} | undefined>;\n}\n\n/**\n * Compute the memory footprint of `RoadIntersectionData`.\n */\nfunction getRoadIntersectionDataSize(intersectionData: RoadIntersectionData): number {\n    let numBytes = MINIMUM_OBJECT_SIZE_ESTIMATION;\n\n    // 8 bytes per techniqueIndex\n    // 8 bytes per start\n    // 8 bytes per width\n    // 8 bytes per position\n    // 100 (estimated) bytes per technique\n    const bytesPerEntry = 8 + 8 + 8 + 8 + MINIMUM_OBJECT_SIZE_ESTIMATION;\n    const numEntries = intersectionData.techniqueIndex.length;\n    numBytes += intersectionData.techniqueIndex.length * bytesPerEntry;\n\n    if (intersectionData.ids !== undefined) {\n        numBytes += numEntries * 8;\n    }\n\n    if (intersectionData.objInfos !== undefined) {\n        // 16 (estimated) bytes per objInfos\n        numBytes += numEntries * MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION;\n    }\n\n    return numBytes;\n}\n\n/**\n * Missing Typedoc\n */\nexport enum TileLoaderState {\n    Initialized,\n    Loading,\n    Loaded,\n    Decoding,\n    Ready,\n    Canceled,\n    Failed\n}\n\nexport interface ITileLoader {\n    state: TileLoaderState;\n    payload?: ArrayBufferLike | {};\n    decodedTile?: DecodedTile;\n\n    isFinished: boolean;\n\n    loadAndDecode(): Promise<TileLoaderState>;\n    waitSettled(): Promise<TileLoaderState>;\n\n    updatePriority(area: number): void;\n\n    cancel(): void;\n}\n\n/**\n * An object that contains information about resources used by a tile.\n */\nexport interface TileResourceUsage {\n    /**\n     * The estimated memory usage, in bytes.\n     */\n    estimatedMemoryUsage: number;\n    /**\n     * The amount of vertices used by a tile.\n     */\n    numVertices: number;\n    /**\n     * The amount of colors used by a tile.\n     */\n    numColors: number;\n    /**\n     * The amount of objects used by a tile.\n     */\n    numObjects: number;\n    /**\n     * The amount of geometries used by a tile.\n     */\n    numGeometries: number;\n    /**\n     * The amount of materials used by a tile.\n     */\n    numMaterials: number;\n}\n\n/**\n * Simple information about resource usage by the [[Tile]]. Heap and GPU information are\n * estimations.\n */\nexport interface TileResourceInfo {\n    /**\n     * Estimated number of bytes used on the heap.\n     */\n    heapSize: number;\n    /**\n     * Estimated number of bytes used on the GPU.\n     */\n    gpuSize: number;\n    /**\n     * Number of [[THREE.Object3D]] in this tile.\n     */\n    num3dObjects: number;\n    /**\n     * Number of [[TextElement]]s in this tile.\n     */\n    numTextElements: number;\n    /**\n     * @deprecated This counter has been merged with numTextElements.\n     * Number of user [[TextElement]]s in this tile.\n     */\n    numUserTextElements: number;\n}\n\nexport interface TextElementIndex {\n    groupIndex: number;\n    elementIndex: number;\n}\n\n/**\n * The class that holds the tiled data for a [[DataSource]].\n */\nexport class Tile implements CachedResource {\n    /**\n     * A list of the THREE.js objects stored in this `Tile`.\n     */\n    readonly objects: TileObject[] = [];\n\n    /**\n     * The optional list of HERE TileKeys of tiles with geometries that cross\n     * the boundaries of this `Tile`.\n     */\n    readonly dependencies: string[] = new Array<string>();\n\n    /**\n     * The bounding box of this `Tile` in geocoordinates.\n     */\n    readonly geoBox: GeoBox;\n\n    /**\n     * A record of road data that cannot be intersected with THREE.JS, because the geometry is\n     * created in the vertex shader.\n     */\n    roadIntersectionData?: RoadIntersectionData;\n\n    /**\n     * Copyright information of this `Tile`'s data.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Keeping some stats for the individual [[Tile]]s to analyze caching behavior.\n     *\n     * The frame the [[Tile]] was last requested. This is required to know when the given [[Tile]]\n     * can be removed from the cache.\n     */\n    frameNumLastRequested: number = -1;\n\n    /**\n     * The frame the `Tile` was first visible.\n     */\n    frameNumVisible: number = -1;\n\n    /**\n     * The last frame this `Tile` has been rendered (or was in the visible set). Used to determine\n     * visibility of `Tile` at the end of a frame, if the number is the current frame number, it is\n     * visible.\n     */\n    frameNumLastVisible: number = -1;\n\n    /**\n     * After removing from cache, this is the number of frames the `Tile` was visible.\n     */\n    numFramesVisible: number = 0;\n\n    /**\n     * Version stamp of the visibility set in the [[TileManager]]. If the counter is different, the\n     * visibility of the Tile's objects has to be calculated. Optimization to reduce overhead of\n     * computing visibility.\n     */\n    visibilityCounter: number = -1;\n\n    /**\n     * @hidden\n     *\n     * Used to tell if the Tile is used temporarily as a fallback tile.\n     *\n     * levelOffset is in in the range [-quadTreeSearchDistanceUp,\n     * quadTreeSearchDistanceDown], where these values come from the\n     * [[VisibleTileSetOptions]]\n     */\n    levelOffset: number = 0;\n\n    /**\n     * If the tile should not be rendered, this is used typically when the tile in question\n     * is completely covered by another tile and therefore can be skipped without any visual\n     * impact. Setting this value directly affects the [[willRender]] method, unless\n     * overriden by deriving classes.\n     */\n    skipRendering = false;\n\n    /**\n     * @hidden\n     *\n     * Prepared text geometries optimized for display.\n     */\n    protected preparedTextPaths: TextPathGeometry[] | undefined;\n\n    /**\n     * The bounding box of this `Tile` in world coordinates.\n     */\n    private readonly m_boundingBox = new OrientedBox3();\n\n    private m_disposed: boolean = false;\n    private m_localTangentSpace = false;\n\n    private m_forceHasGeometry: boolean | undefined = undefined;\n\n    private m_tileLoader?: ITileLoader;\n    private m_decodedTile?: DecodedTile;\n    private m_tileGeometryLoader?: TileGeometryLoader;\n\n    // Used for [[TextElement]]s that are stored in the data, and that are placed explicitly,\n    // fading in and out.\n    private m_textElementGroups = new TextElementGroupPriorityList();\n\n    // Blocks other labels from showing.\n    private readonly m_pathBlockingElements: PathBlockingElement[] = [];\n\n    // If `true`, the text content of the [[Tile]] changed after the last time it was rendered.\n    // It's `Undefined` when no text content has been added yet.\n    private m_textElementsChanged: boolean | undefined;\n\n    // Center of the tile's unelevated bounding box world coordinates.\n    private readonly m_worldCenter = new THREE.Vector3();\n    private m_visibleArea: number = 0;\n    // Tile elevation range in meters\n    private readonly m_elevationRange: ElevationRange = { minElevation: 0, maxElevation: 0 };\n    // Maximum height of geometry on this tile above ground level.\n    private m_maxGeometryHeight?: number;\n\n    private m_resourceInfo: TileResourceInfo | undefined;\n\n    // List of owned textures for disposal\n    private m_ownedTextures: WeakSet<THREE.Texture> = new WeakSet();\n\n    private m_animatedExtrusionTileHandler: AnimatedExtrusionTileHandler | undefined;\n\n    private m_textStyleCache: TileTextStyleCache;\n    /**\n     * Creates a new [[Tile]].\n     *\n     * @param dataSource The [[DataSource]] that created this [[Tile]].\n     * @param tileKey The unique identifier for this [[Tile]]. Currently only up to level 24 is\n     * supported, because of the use of the upper bits for the offset.\n     * @param offset The optional offset, this is an integer which represents what multiple of 360\n     * degrees to shift, only useful for flat projections, hence optional.\n     * @param localTangentSpace Whether the tile geometry is in local tangent space or not.\n     */\n    constructor(\n        readonly dataSource: DataSource,\n        readonly tileKey: TileKey,\n        public offset: number = 0,\n        localTangentSpace?: boolean\n    ) {\n        this.geoBox = this.dataSource.getTilingScheme().getGeoBox(this.tileKey);\n        this.updateBoundingBox();\n        this.m_localTangentSpace = localTangentSpace !== undefined ? localTangentSpace : false;\n        this.m_textStyleCache = new TileTextStyleCache(this);\n    }\n\n    /**\n     * The visibility status of the [[Tile]]. It is actually visible or planned to become visible.\n     */\n    get isVisible(): boolean {\n        // Tiles are not evaluated as invisible until the second frame they aren't requested.\n        // This happens in order to prevent that, during [[VisibleTileSet]] visibility evaluation,\n        // visible tiles that haven't yet been evaluated for the current frame are preemptively\n        // removed from [[DataSourceCache]].\n        return this.frameNumLastRequested >= this.dataSource.mapView.frameNumber - 1;\n    }\n\n    set isVisible(visible: boolean) {\n        this.frameNumLastRequested = visible ? this.dataSource.mapView.frameNumber : -1;\n    }\n\n    /**\n     * The [[Projection]] currently used by the [[MapView]].\n     */\n    get projection(): Projection {\n        return this.dataSource.projection;\n    }\n\n    /**\n     * The [[MapView]] this `Tile` belongs to.\n     */\n    get mapView(): MapView {\n        return this.dataSource.mapView;\n    }\n\n    /**\n     * Whether the data of this tile is in local tangent space or not.\n     * If the data is in local tangent space (i.e. up vector is (0,0,1) for high zoomlevels) then\n     * [[MapView]] will rotate the objects before rendering using the rotation matrix of the\n     * oriented [[boundingBox]].\n     */\n    get localTangentSpace(): boolean {\n        return this.m_localTangentSpace;\n    }\n\n    /*\n     * The size of this Tile in system memory.\n     */\n    get memoryUsage(): number {\n        if (this.m_resourceInfo === undefined) {\n            this.computeResourceInfo();\n        }\n        return this.m_resourceInfo!.heapSize;\n    }\n\n    /**\n     * The center of this `Tile` in world coordinates.\n     */\n    get center(): THREE.Vector3 {\n        return this.m_worldCenter;\n    }\n\n    /**\n     * Compute [[TileResourceInfo]] of this `Tile`. May be using a cached value. The method\n     * `invalidateResourceInfo` can be called beforehand to force a recalculation.\n     *\n     * @returns `TileResourceInfo` for this `Tile`.\n     */\n    getResourceInfo(): TileResourceInfo {\n        if (this.m_resourceInfo === undefined) {\n            this.computeResourceInfo();\n        }\n        return this.m_resourceInfo!;\n    }\n\n    /**\n     * Force invalidation of the cached [[TileResourceInfo]]. Useful after the `Tile` has been\n     * modified.\n     */\n    invalidateResourceInfo(): void {\n        this.m_resourceInfo = undefined;\n    }\n\n    /**\n     * Add ownership of a texture to this tile. The texture will be disposed if the `Tile` is\n     * disposed.\n     * @param texture Texture to be owned by the `Tile`\n     */\n    addOwnedTexture(texture: THREE.Texture): void {\n        this.m_ownedTextures.add(texture);\n    }\n\n    /**\n     * @internal\n     * @deprecated\n     *\n     * Gets the list of developer-defined [[TextElement]] in this `Tile`. This list is always\n     * rendered first.\n     */\n    get userTextElements(): TextElementGroup {\n        let group = this.m_textElementGroups.groups.get(TextElement.HIGHEST_PRIORITY);\n        if (group === undefined) {\n            group = new TextElementGroup(TextElement.HIGHEST_PRIORITY);\n            this.m_textElementGroups.groups.set(group.priority, group);\n        }\n        return group;\n    }\n\n    /**\n     * Adds a developer-defined [[TextElement]] to this `Tile`. The [[TextElement]] is always\n     * visible, if it's in the map's currently visible area.\n     *\n     * @deprecated use [[addTextElement]].\n     *\n     * @param textElement The Text element to add.\n     */\n    addUserTextElement(textElement: TextElement) {\n        textElement.priority = TextElement.HIGHEST_PRIORITY;\n        this.addTextElement(textElement);\n    }\n\n    /**\n     * Removes a developer-defined [[TextElement]] from this `Tile`.\n     *\n     * @deprecated use [[removeTextElement]].\n     *\n     * @param textElement A developer-defined TextElement to remove.\n     * @returns `true` if the element has been removed successfully; `false` otherwise.\n     */\n    removeUserTextElement(textElement: TextElement): boolean {\n        textElement.priority = TextElement.HIGHEST_PRIORITY;\n        return this.removeTextElement(textElement);\n    }\n\n    /**\n     * Adds a [[TextElement]] to this `Tile`, which is added to the visible set of\n     * [[TextElement]]s based on the capacity and visibility. The [[TextElement]]'s priority\n     * controls if or when it becomes visible.\n     *\n     * To ensure that a TextElement is visible, use a high value for its priority, such as\n     * `TextElement.HIGHEST_PRIORITY`. Since the number of visible TextElements is limited by the\n     * screen space, not all TextElements are visible at all times.\n     *\n     * @param textElement The TextElement to add.\n     */\n    addTextElement(textElement: TextElement) {\n        this.textElementGroups.add(textElement);\n\n        if (this.m_textElementsChanged === false) {\n            // HARP-8733: Clone all groups so that they are handled as new element groups\n            // by TextElementsRenderer and it doesn't try to reuse the same state stored\n            // for the old groups.\n            this.m_textElementGroups = this.textElementGroups.clone();\n        }\n        this.textElementsChanged = true;\n    }\n\n    /**\n     * Adds a [[PathBlockingElement]] to this `Tile`. This path has the highest priority and blocks\n     * all other labels. There maybe in future a use case to give it a priority, but as that isn't\n     * yet required, it is left to be implemented later if required.\n     * @param blockingElement Element which should block all other labels.\n     */\n    addBlockingElement(blockingElement: PathBlockingElement) {\n        this.m_pathBlockingElements.push(blockingElement);\n    }\n\n    /**\n     * Removes a [[TextElement]] from this `Tile`. For the element to be removed successfully, the\n     * priority of the [[TextElement]] has to be equal to its priority when it was added.\n     *\n     * @param textElement The TextElement to remove.\n     * @returns `true` if the TextElement has been removed successfully; `false` otherwise.\n     */\n    removeTextElement(textElement: TextElement): boolean {\n        const groups = this.textElementGroups;\n        if (!groups.remove(textElement)) {\n            return false;\n        }\n        if (this.m_textElementsChanged === false) {\n            // HARP-8733: Clone all groups so that they are handled as new element groups\n            // by TextElementsRenderer and it doesn't try to reuse the same state stored\n            // for the old groups.\n            this.m_textElementGroups = groups.clone();\n        }\n        this.textElementsChanged = true;\n        return true;\n    }\n\n    /**\n     * @internal\n     *\n     * Gets the current [[GroupedPriorityList]] which contains a list of all [[TextElement]]s to be\n     * selected and placed for rendering.\n     */\n    get textElementGroups(): TextElementGroupPriorityList {\n        return this.m_textElementGroups;\n    }\n\n    /**\n     * Gets the current modification state for the list of [[TextElement]]s in the `Tile`. If the\n     * value is `true` the TextElement is placed for rendering during the next frame.\n     */\n    get textElementsChanged(): boolean {\n        return this.m_textElementsChanged ?? false;\n    }\n\n    set textElementsChanged(changed: boolean) {\n        this.m_textElementsChanged = changed;\n    }\n\n    /**\n     * Returns true if the `Tile` has any text elements to render.\n     */\n    hasTextElements(): boolean {\n        return this.m_textElementGroups.count() > 0;\n    }\n\n    /**\n     * Get the current blocking elements.\n     */\n    get blockingElements(): PathBlockingElement[] {\n        return this.m_pathBlockingElements;\n    }\n\n    /**\n     * Called by [[VisibleTileSet]] to mark that [[Tile]] is visible and it should prepare its road\n     * geometry for picking.\n     */\n    prepareTileInfo() {\n        // If the tile is not ready for display, or if it has become invisible while being loaded,\n        // for example by moving the camera, the tile is not finished and its geometry is not\n        // created. This is an optimization for fast camera movements and zooms.\n        if (this.m_decodedTile === undefined || this.m_disposed || !this.isVisible) {\n            return;\n        }\n\n        if (this.m_decodedTile.tileInfo !== undefined) {\n            this.roadIntersectionData = this.dataSource.mapView.pickHandler.registerTile(this);\n        }\n    }\n\n    /**\n     * Called before [[MapView]] starts rendering this `Tile`.\n     *\n     * @param zoomLevel The current zoom level.\n     * @returns Returns `true` if this `Tile` should be rendered. Influenced directly by the\n     * [[skipRendering]] property unless specifically overriden in deriving classes.\n     */\n    willRender(_zoomLevel: number): boolean {\n        return !this.skipRendering;\n    }\n\n    /**\n     * Called after [[MapView]] has rendered this `Tile`.\n     */\n    didRender(): void {\n        // to be overridden by subclasses\n    }\n\n    /**\n     * Estimated visible area of tile used for sorting the priorities during loading.\n     */\n    get visibleArea(): number {\n        return this.m_visibleArea;\n    }\n\n    set visibleArea(area: number) {\n        this.m_visibleArea = area;\n        if (this.tileLoader !== undefined) {\n            this.tileLoader.updatePriority(area);\n        }\n    }\n\n    /**\n     * @internal\n     * Gets the tile's ground elevation range in meters.\n     */\n    get elevationRange(): ElevationRange {\n        return this.m_elevationRange;\n    }\n\n    /**\n     * @internal\n     * Sets the tile's ground elevation range in meters.\n     *\n     * @param elevationRange The elevation range.\n     */\n    set elevationRange(elevationRange: ElevationRange) {\n        if (\n            elevationRange.minElevation === this.m_elevationRange.minElevation &&\n            elevationRange.maxElevation === this.m_elevationRange.maxElevation &&\n            elevationRange.calculationStatus === this.m_elevationRange.calculationStatus\n        ) {\n            return;\n        }\n\n        this.m_elevationRange.minElevation = elevationRange.minElevation;\n        this.m_elevationRange.maxElevation = elevationRange.maxElevation;\n        this.m_elevationRange.calculationStatus = elevationRange.calculationStatus;\n\n        // Only elevate bounding box if tile has already been decoded and a maximum geometry height\n        // is provided by the data source.\n        if (this.m_maxGeometryHeight !== undefined) {\n            this.elevateBoundingBox();\n        }\n    }\n\n    /**\n     * Gets the decoded tile; it is removed after geometry handling.\n     */\n    get decodedTile(): DecodedTile | undefined {\n        return this.m_decodedTile;\n    }\n\n    /**\n     * Applies the decoded tile to the tile.\n     * If the geometry is empty, then the tile's forceHasGeometry flag is set.\n     * Map is updated.\n     * @param decodedTile The decoded tile to set.\n     */\n    set decodedTile(decodedTile: DecodedTile | undefined) {\n        this.m_decodedTile = decodedTile;\n        this.invalidateResourceInfo();\n\n        if (decodedTile === undefined) {\n            return;\n        }\n\n        if (decodedTile.geometries.length === 0) {\n            this.forceHasGeometry(true);\n        }\n\n        if (decodedTile.boundingBox !== undefined) {\n            // If the decoder provides a more accurate bounding box than the one we computed from\n            // the flat geo box we take it instead.\n            this.m_maxGeometryHeight = undefined;\n            this.updateBoundingBox(decodedTile.boundingBox);\n        } else {\n            // Otherwise, if an elevation range was set, elevate bounding box to match\n            // the elevated geometry.\n            this.m_maxGeometryHeight = decodedTile.maxGeometryHeight ?? 0;\n            this.elevateBoundingBox();\n        }\n\n        const stats = PerformanceStatistics.instance;\n        if (stats.enabled && decodedTile.decodeTime !== undefined) {\n            stats.currentFrame.addValue(\"decode.decodingTime\", decodedTile.decodeTime);\n            stats.currentFrame.addValue(\"decode.decodedTiles\", 1);\n        }\n\n        if (decodedTile.copyrightHolderIds !== undefined) {\n            this.copyrightInfo = decodedTile.copyrightHolderIds.map(id => ({ id }));\n        }\n\n        this.dataSource.requestUpdate();\n    }\n\n    /**\n     * Remove the decodedTile when no longer needed.\n     */\n    removeDecodedTile() {\n        this.m_decodedTile = undefined;\n        this.invalidateResourceInfo();\n    }\n\n    /**\n     * Called by the [[TileLoader]] after the `Tile` has finished loading its map data. Can be used\n     * to add content to the `Tile`. The [[DecodedTile]] should still be available.\n     */\n    loadingFinished() {\n        // To be used in subclasses.\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free the geometry of a `Tile` object.\n     *\n     * @param object The object that references the geometry.\n     * @returns `true` if the geometry can be disposed.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldDisposeObjectGeometry(object: TileObject): boolean {\n        return true;\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free a `Tile` object's material.\n     *\n     * @param object The object referencing the geometry.\n     * @returns `true` if the material can be disposed.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldDisposeObjectMaterial(object: TileObject): boolean {\n        return true;\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free a Texture that is part of a `Tile` object's material.\n     *\n     * @param texture The texture about to be disposed.\n     * @returns `true` if the texture can be disposed.\n     */\n    shouldDisposeTexture(texture: THREE.Texture): boolean {\n        return this.m_ownedTextures.has(texture);\n    }\n\n    /**\n     * Returns `true` if this `Tile` has been disposed.\n     */\n    get disposed(): boolean {\n        return this.m_disposed;\n    }\n\n    /**\n     * Gets the [[TileGeometryLoader]] that manages this tile.\n     */\n    get tileGeometryLoader(): TileGeometryLoader | undefined {\n        return this.m_tileGeometryLoader;\n    }\n\n    /**\n     * Sets the [[TileGeometryLoader]] to manage this tile.\n     *\n     * @param tileGeometryLoader A [[TileGeometryLoader]] instance to manage the geometry creation\n     *      for this tile.\n     */\n    set tileGeometryLoader(tileGeometryLoader: TileGeometryLoader | undefined) {\n        this.m_tileGeometryLoader = tileGeometryLoader;\n    }\n\n    /**\n     * `True` if the basic geometry has been loaded, and the `Tile` is ready  for display.\n     */\n    get basicGeometryLoaded(): boolean {\n        return this.m_tileGeometryLoader === undefined\n            ? this.hasGeometry\n            : this.m_tileGeometryLoader.basicGeometryLoaded || this.m_tileGeometryLoader.isFinished;\n    }\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded.\n     */\n    get allGeometryLoaded(): boolean {\n        return this.m_tileGeometryLoader === undefined\n            ? this.hasGeometry\n            : this.m_tileGeometryLoader.allGeometryLoaded || this.m_tileGeometryLoader.isFinished;\n    }\n\n    /**\n     * MapView checks if this `Tile` is ready to be rendered while culling.\n     *\n     * By default, MapView checks if the [[objects]] list is not empty. However, you can override\n     * this check by manually setting this property.\n     */\n    get hasGeometry(): boolean {\n        if (this.m_forceHasGeometry === undefined) {\n            return this.objects.length !== 0;\n        } else {\n            return this.m_forceHasGeometry;\n        }\n    }\n\n    /**\n     * Overrides the default value for [[hasGeometry]] if value is not `undefined`.\n     *\n     * @param value A new value for the [[hasGeometry]] flag.\n     */\n    forceHasGeometry(value: boolean | undefined) {\n        this.m_forceHasGeometry = value;\n    }\n\n    /**\n     * Reset the visibility counter. This will force the visibility check to be rerun on all objects\n     * in this `Tile`.\n     */\n    resetVisibilityCounter(): void {\n        this.visibilityCounter = -1;\n    }\n\n    /**\n     * Gets the [[ITileLoader]] that manages this tile.\n     */\n    get tileLoader(): ITileLoader | undefined {\n        return this.m_tileLoader;\n    }\n\n    /**\n     * Sets the [[ITileLoader]] to manage this tile.\n     *\n     * @param tileLoader A [[ITileLoader]] instance to manage the loading process for this tile.\n     */\n    set tileLoader(tileLoader: ITileLoader | undefined) {\n        this.m_tileLoader = tileLoader;\n    }\n\n    /**\n     * Loads this `Tile` geometry.\n     */\n    load() {\n        const tileLoader = this.tileLoader;\n        if (tileLoader === undefined) {\n            return;\n        }\n\n        tileLoader\n            .loadAndDecode()\n            .then(tileLoaderState => {\n                assert(tileLoaderState === TileLoaderState.Ready);\n                const decodedTile = tileLoader.decodedTile;\n                this.decodedTile = decodedTile;\n            })\n            .catch(tileLoaderState => {\n                if (\n                    tileLoaderState !== TileLoaderState.Canceled &&\n                    tileLoaderState !== TileLoaderState.Failed\n                ) {\n                    logger.error(\"Unknown error\" + tileLoaderState);\n                }\n            });\n    }\n\n    /**\n     * Handler for animation of `Tile` geometries.\n     */\n    get animatedExtrusionTileHandler(): AnimatedExtrusionTileHandler | undefined {\n        return this.m_animatedExtrusionTileHandler;\n    }\n\n    set animatedExtrusionTileHandler(handler: AnimatedExtrusionTileHandler | undefined) {\n        this.m_animatedExtrusionTileHandler = handler;\n    }\n\n    /**\n     * Text style cache for this tile.\n     * @hidden\n     */\n    get textStyleCache(): TileTextStyleCache {\n        return this.m_textStyleCache;\n    }\n\n    /**\n     * Frees the rendering resources allocated by this `Tile`.\n     *\n     * The default implementation of this method frees the geometries and the materials for all the\n     * reachable objects.\n     * Textures are freed if they are owned by this `Tile` (i.e. if they where created by this\n     * `Tile`or if the ownership was explicitely set to this `Tile` by [[addOwnedTexture]]).\n     */\n    clear() {\n        const disposeMaterial = (material: THREE.Material) => {\n            Object.getOwnPropertyNames(material).forEach((property: string) => {\n                const materialProperty = (material as any)[property];\n                if (materialProperty !== undefined && materialProperty instanceof THREE.Texture) {\n                    const texture = materialProperty;\n                    if (this.shouldDisposeTexture(texture)) {\n                        texture.dispose();\n                    }\n                }\n            });\n            material.dispose();\n        };\n\n        const disposeObject = (object: TileObject & DisposableObject) => {\n            if (this.shouldDisposeObjectGeometry(object)) {\n                if (object.geometry !== undefined) {\n                    object.geometry.dispose();\n                }\n\n                if (object.geometries !== undefined) {\n                    for (const geometry of object.geometries) {\n                        geometry.dispose();\n                    }\n                }\n            }\n\n            if (object.material !== undefined && this.shouldDisposeObjectMaterial(object)) {\n                if (object.material instanceof Array) {\n                    object.material.forEach((material: THREE.Material | undefined) => {\n                        if (material !== undefined) {\n                            disposeMaterial(material);\n                        }\n                    });\n                } else {\n                    disposeMaterial(object.material);\n                }\n            }\n        };\n\n        this.objects.forEach((rootObject: TileObject & DisposableObject) => {\n            rootObject.traverse((object: TileObject & DisposableObject) => {\n                disposeObject(object);\n            });\n\n            disposeObject(rootObject);\n        });\n        this.objects.length = 0;\n\n        if (this.preparedTextPaths) {\n            this.preparedTextPaths = [];\n        }\n\n        if (this.m_animatedExtrusionTileHandler !== undefined) {\n            this.m_animatedExtrusionTileHandler.dispose();\n        }\n\n        this.m_textStyleCache.clear();\n        this.clearTextElements();\n        this.invalidateResourceInfo();\n    }\n\n    /**\n     * Removes all [[TextElement]] from the tile.\n     */\n    clearTextElements() {\n        if (!this.hasTextElements()) {\n            return;\n        }\n        this.textElementsChanged = true;\n        this.m_pathBlockingElements.splice(0);\n        this.textElementGroups.clear();\n    }\n\n    /**\n     * Disposes this `Tile`, freeing all geometries and materials for the reachable objects.\n     */\n    dispose() {\n        if (this.m_disposed) {\n            return;\n        }\n        if (this.m_tileLoader) {\n            this.m_tileLoader.cancel();\n            this.m_tileLoader = undefined;\n        }\n        if (this.m_tileGeometryLoader !== undefined) {\n            this.m_tileGeometryLoader.dispose();\n            this.m_tileGeometryLoader = undefined;\n        }\n        this.clear();\n        this.m_disposed = true;\n        // Ensure that tile is removable from tile cache.\n        this.frameNumLastRequested = 0;\n    }\n\n    /**\n     * Computes the offset in the x world coordinates corresponding to this tile, based on\n     * its [[offset]].\n     * @returns The x offset.\n     */\n    computeWorldOffsetX(): number {\n        return this.projection.worldExtent(0, 0).max.x * this.offset;\n    }\n\n    /**\n     * Update tile for current map view zoom level\n     * @param zoomLevel Zoom level of the map view\n     */\n    update(zoomLevel: number): void {\n        for (const object of this.objects) {\n            if (object instanceof LodMesh) {\n                object.setLevelOfDetail(zoomLevel - this.tileKey.level);\n            }\n        }\n    }\n\n    /**\n     * Gets the tile's bounding box.\n     */\n    get boundingBox(): OrientedBox3 {\n        return this.m_boundingBox;\n    }\n\n    /**\n     * Updates the tile's world bounding box.\n     * @param [newBoundingBox] The new bounding box to set. If undefined, the bounding box will be\n     * computed by projecting the tile's geoBox.\n     */\n    private updateBoundingBox(newBoundingBox?: OrientedBox3) {\n        if (newBoundingBox) {\n            this.m_boundingBox.copy(newBoundingBox);\n\n            // Update geo box to match the given bounding box.\n            const tmpPos = this.m_boundingBox.position.clone().add(this.m_boundingBox.extents);\n            this.geoBox.northEast.copy(this.mapView.projection.unprojectPoint(tmpPos));\n            tmpPos.copy(this.m_boundingBox.position).sub(this.m_boundingBox.extents);\n            this.geoBox.southWest.copy(this.mapView.projection.unprojectPoint(tmpPos));\n        } else {\n            this.projection.projectBox(this.geoBox, this.boundingBox);\n        }\n        this.m_worldCenter.copy(this.boundingBox.position);\n    }\n\n    private elevateBoundingBox() {\n        // Update geo/world bboxes once elevation and maximum geometry height have been set.\n        // Tile center remains unchanged.\n        assert(this.m_maxGeometryHeight !== undefined);\n\n        this.geoBox.southWest.altitude = this.m_elevationRange.minElevation;\n        this.geoBox.northEast.altitude =\n            this.m_elevationRange.maxElevation + this.m_maxGeometryHeight!;\n        this.mapView.projection.projectBox(this.geoBox, this.boundingBox);\n    }\n\n    private computeResourceInfo(): void {\n        let heapSize = 0;\n        let num3dObjects = 0;\n        let numTextElements = 0;\n\n        const aggregatedObjSize = {\n            heapSize: 0,\n            gpuSize: 0\n        };\n\n        // Keep a map of the uuids of the larger objects, like Geometries, Materials and Attributes.\n        // They should be counted only once even if they are shared.\n        const visitedObjects: Map<string, boolean> = new Map();\n\n        for (const object of this.objects) {\n            if (object.visible) {\n                num3dObjects++;\n            }\n            MapViewUtils.estimateObject3dSize(object, aggregatedObjSize, visitedObjects);\n        }\n\n        for (const group of this.textElementGroups.groups) {\n            numTextElements += group[1].elements.length;\n        }\n        // 216 was the shallow size of a single TextElement last time it has been checked, 312 bytes\n        // was the minimum retained size of a TextElement that was not being rendered. If a\n        // TextElement is actually rendered, the size may be _much_ bigger.\n        heapSize += numTextElements * 312;\n\n        if (this.m_decodedTile !== undefined && this.m_decodedTile.tileInfo !== undefined) {\n            aggregatedObjSize.heapSize += this.m_decodedTile.tileInfo.numBytes;\n        }\n\n        if (this.roadIntersectionData !== undefined) {\n            heapSize += getRoadIntersectionDataSize(this.roadIntersectionData);\n        }\n\n        this.m_resourceInfo = {\n            heapSize: aggregatedObjSize.heapSize + heapSize,\n            gpuSize: aggregatedObjSize.gpuSize,\n            num3dObjects,\n            numTextElements,\n            numUserTextElements: 0\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { LoggerManager, PerformanceTimer } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nconst logger = LoggerManager.instance.create(\"Statistics\");\n\n/**\n * A simple ring buffer to store the last `n` values of the timer. The buffer works on\n * a First-In-First-Out (FIFO) basis.\n */\nexport class RingBuffer<T> {\n    buffer: T[];\n    size: number;\n    head: number;\n    tail: number;\n\n    /**\n     * Sets up the ring buffer.\n     *\n     * @param capacity The buffer's capacity.\n     */\n    constructor(readonly capacity: number) {\n        this.buffer = new Array(capacity);\n        this.capacity = capacity;\n        this.head = this.tail = this.size = 0;\n    }\n\n    /**\n     * Clears the contents, removes all elements.\n     */\n    clear(): void {\n        this.head = this.tail = this.size = 0;\n    }\n\n    /**\n     * Adds a single element to the ring buffer.\n     *\n     * @param data Data element.\n     */\n    enqOne(data: T): void {\n        let next = this.head + 1;\n        if (next >= this.capacity) {\n            next = 0;\n        }\n        if (this.size < this.capacity) {\n            this.size++;\n        }\n\n        this.buffer[this.head] = data;\n        this.head = next;\n\n        if (this.size === this.capacity) {\n            this.tail = this.head;\n        }\n    }\n\n    /**\n     * Adds one or more elements.\n     *\n     * @param data The elements to add.\n     */\n    enq(...data: T[]): void {\n        for (const v of data) {\n            this.enqOne(v);\n        }\n    }\n\n    /**\n     * Obtains the oldest element (FIFO). May throw an exception if a buffer underrun occurs.\n     * Before calling this method, make sure that `size > 0`.\n     */\n    deq(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        const data = this.buffer[this.tail];\n        let next = this.tail + 1;\n        if (next >= this.capacity) {\n            next = 0;\n        }\n        if (this.size > 0) {\n            this.size--;\n        }\n\n        this.tail = next;\n        return data;\n    }\n\n    /**\n     * Obtains the oldest element (FIFO) without removing it. Throws an exception if a buffer is\n     * empty. Before calling this method, make sure that `size > 0`.\n     */\n    get top(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        return this.buffer[this.tail];\n    }\n\n    /**\n     * Obtains the latest element (LIFO) without removing it. Throws an exception if a buffer is\n     * empty. Before calling this method, make sure that `size > 0`.\n     */\n    get bottom(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        let previous = this.head - 1;\n        if (previous < 0) {\n            previous = this.capacity - 1;\n        }\n        return this.buffer[previous];\n    }\n\n    /**\n     * Creates an iterator for the buffer.\n     */\n    iterator(): RingBuffer.Iterator<T> {\n        return new RingBuffer.Iterator<T>(this);\n    }\n\n    /**\n     * Returns a copy of the buffer, where the elements are properly sorted from oldest to newest.\n     */\n    asArray(): T[] {\n        const array = new Array<T>();\n        for (let i = 0; i < this.size; i++) {\n            array.push(this.buffer[(this.tail + i) % this.capacity]);\n        }\n        return array;\n    }\n}\n\nexport namespace RingBuffer {\n    /**\n     * A local class for RingBuffer<T>\n     */\n    export class Iterator<T> {\n        /**\n         * Creates an iterator for the ring buffer.\n         *\n         * @param m_buffer `Ringbuffer` to iterate over.\n         * @param m_index Start index.\n         */\n        constructor(private m_buffer: RingBuffer<T>, private m_index: number = 0) {}\n\n        /**\n         * Gets the iterator's current value. This function does not fail even if an overrun occurs.\n         * To detect an overrun, watch the result for [[next]].\n         */\n        get value(): T {\n            return this.m_buffer.buffer[\n                (this.m_buffer.tail + this.m_index) % this.m_buffer.capacity\n            ];\n        }\n\n        /**\n         * Advances the iterator to the next element.\n         *\n         * @returns `true` if the iterator is still valid; `false` if an overrun occurs.\n         */\n        next(): boolean {\n            this.m_index++;\n            return this.m_index < this.m_buffer.size;\n        }\n    }\n}\n\n/**\n * An interface for a Timer class, that abstracts the basic functions of a Timer. Implemented\n * by SimpleTimer, SampledTimer, and MultiStageTimer.\n */\nexport interface Timer {\n    readonly name: string;\n    readonly value?: number;\n\n    /**\n     * Resets value to be able to start again.\n     */\n    reset(): void;\n\n    /**\n     * Starts the timer. Returns the current time, based on `Performance.now()`.\n     */\n    start(): number;\n\n    /**\n     * Stops the timer. Requires that the timer has started.\n     */\n    stop(): number;\n\n    /**\n     * Samples the timer. Requires that the timer has started. This function does not modify\n     * the timer's internal state.\n     *\n     * @returns Current timer value. `-1` if statistics are disabled.\n     */\n    now(): number;\n\n    /**\n     * Sets the measurement value for the amount of time that has elapsed from start() to stop().\n     * Use this function to override the timer's duration.\n     *\n     * @param val The timer's duration.\n     */\n    setValue(val: number | undefined): void;\n}\n\n/**\n * A simple timer that stores only the latest measurement.\n */\nexport class SimpleTimer implements Timer {\n    /** `true` if timer has been started. */\n    running = false;\n\n    private m_currentValue?: number;\n\n    constructor(public statistics: Statistics, readonly name: string) {}\n\n    /**\n     * Gets the latest measurement. This function may return `undefined` if no measurement\n     * was done.\n     */\n    get value(): number | undefined {\n        return this.m_currentValue;\n    }\n\n    /**\n     * Sets the measurement value for the amount of time that has elapsed from start() to stop().\n     * Use this function to override the timer's duration.\n     *\n     * @param val The timer's duration.\n     */\n    setValue(val: number | undefined) {\n        this.m_currentValue = val;\n    }\n\n    /**\n     * Resets the value to be able to start again.\n     */\n    reset() {\n        this.m_currentValue = undefined;\n    }\n\n    /**\n     * Starts the timer. Returns the current time, based on `Performance.now()`.\n     */\n    start(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' is already running\");\n        }\n        this.running = true;\n        return (this.m_currentValue = PerformanceTimer.now());\n    }\n\n    /**\n     * Stops the timer. Requires that the timer has started.\n     */\n    stop(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (!this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' has not been started\");\n        } else {\n            // this.currentValue is a number now!\n            const t = PerformanceTimer.now() - (this.m_currentValue || 0);\n            this.m_currentValue = t;\n            this.setValue(t);\n            this.running = false;\n            return t;\n        }\n    }\n\n    /**\n     * Samples the timer. Requires that the timer has started.\n     *\n     * @returns the current timer value; `-1` if statistics are disabled.\n     */\n    now(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (!this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' has not been started\");\n        } else {\n            const t = PerformanceTimer.now() - (this.m_currentValue || 0);\n            return t;\n        }\n    }\n}\n\n/**\n * Simple statistics about the values in an array.\n */\nexport interface Stats {\n    /**\n     * The lowest value in the array.\n     */\n    min: number;\n\n    /**\n     * The highest value in the array.\n     */\n    max: number;\n\n    /**\n     * The average duration of all values in the array.\n     */\n    avg: number;\n\n    /**\n     * The median duration of all values in the array.\n     */\n    median: number;\n\n    /**\n     * The 75th percentile median of all values in the array.\n     */\n    median75: number;\n\n    /**\n     * The 90th percentile median of all values in the array.\n     */\n    median90: number;\n\n    /**\n     * The 95th percentile median of all values in the array.\n     */\n    median95: number;\n\n    /**\n     * The 97th percentile median of all values in the array.\n     */\n    median97: number;\n\n    /**\n     * The 99th percentile median of all values in the array.\n     */\n    median99: number;\n\n    /**\n     * The 99.9th percentile median of all values in the array.\n     */\n    median999: number;\n\n    /**\n     * The number of values in the array.\n     */\n    numSamples: number;\n}\n\n/**\n * A timer that stores the last `n` samples in a ring buffer.\n */\nexport class SampledTimer extends SimpleTimer {\n    /**\n     * The number of times the timer has reset.\n     */\n    numResets = 0;\n\n    /**\n     * Maximum samples until the statistics are reset and updated, which may destroy a median\n     * computation.\n     */\n    maxNumSamples = 1000;\n\n    /**\n     * The array of sampled values, its length cannot exceed `maxNumSamples`.\n     */\n    samples = new RingBuffer<number>(this.maxNumSamples);\n\n    /**\n     * Creates a `SampledTimer` instance. Must still be added to statistics if it should be logged!\n     *\n     * @param statistics Statistics to use for management.\n     * @param name Name of the timer. Use colons to build a hierarchy.\n     */\n    constructor(public statistics: Statistics, readonly name: string) {\n        super(statistics, name);\n    }\n\n    /**\n     * Resets the timer and clears all of its historical values.\n     * @override\n     */\n    reset() {\n        super.reset();\n        this.getStats();\n        this.samples.clear();\n        this.numResets++;\n    }\n\n    /**\n     * Add a single measurement to the sample.\n     *\n     * @param val A measurement to add.\n     * @override\n     */\n    setValue(val: number | undefined) {\n        super.setValue(val);\n\n        if (val !== undefined) {\n            this.samples.enqOne(val);\n        }\n    }\n\n    /**\n     * Updates the `min`, `max`, `avg`, and `median` values. Currently, this function is expensive,\n     * as it requires a copy of the sampled values.\n     */\n    getStats(): Stats | undefined {\n        return computeArrayStats(this.samples.asArray());\n    }\n}\n\n/**\n * Only exported for testing\n * @ignore\n *\n * Compute the [[ArrayStats]] for the passed in array of numbers.\n *\n * @param {number[]} samples Array containing sampled values. Will be modified (!) by sorting the\n *      entries.\n * @returns {(Stats | undefined)}\n */\nexport function computeArrayStats(samples: number[]): Stats | undefined {\n    if (samples.length === 0) {\n        return undefined;\n    }\n\n    samples.sort((a: number, b: number) => {\n        return a - b;\n    });\n\n    const min: number = samples[0];\n    const max: number = samples[samples.length - 1];\n    let median: number;\n    let median75: number;\n    let median90: number;\n    let median95: number;\n    let median97: number;\n    let median99: number;\n    let median999: number;\n\n    if (samples.length === 1) {\n        median75 = median90 = median95 = median97 = median99 = median999 = median = samples[0];\n    } else if (samples.length === 2) {\n        median = samples[0] * 0.5 + samples[1] * 0.5;\n        median75 = median90 = median95 = median97 = median99 = median999 = samples[1];\n    } else {\n        const mid = Math.floor(samples.length / 2);\n        median =\n            samples.length % 2 === 0 ? samples[mid - 1] * 0.5 + samples[mid] * 0.5 : samples[mid];\n\n        const mid75 = Math.round(samples.length * 0.75) - 1;\n        median75 = samples[mid75];\n        const mid90 = Math.round(samples.length * 0.9) - 1;\n        median90 = samples[mid90];\n        const mid95 = Math.round(samples.length * 0.95) - 1;\n        median95 = samples[mid95];\n        const mid97 = Math.round(samples.length * 0.97) - 1;\n        median97 = samples[mid97];\n        const mid99 = Math.round(samples.length * 0.99) - 1;\n        median99 = samples[mid99];\n        const mid999 = Math.round(samples.length * 0.999) - 1;\n        median999 = samples[mid999];\n    }\n\n    let sum = 0;\n\n    for (let i = 0, l = samples.length; i < l; i++) {\n        sum += samples[i];\n    }\n\n    const avg = sum / samples.length;\n\n    return {\n        min,\n        max,\n        avg,\n        median,\n        median75,\n        median90,\n        median95,\n        median97,\n        median99,\n        median999,\n        numSamples: samples.length\n    };\n}\n\n/**\n * Only exported for testing\n * @ignore\n *\n * Compute the averages for the passed in array of numbers.\n *\n * @param {number[]} samples Array containing sampled values.\n * @returns {(Stats | undefined)}\n */\nexport function computeArrayAverage(samples: number[]): number | undefined {\n    if (samples.length === 0) {\n        return undefined;\n    }\n\n    let sum = 0;\n\n    for (let i = 0, l = samples.length; i < l; i++) {\n        sum += samples[i];\n    }\n\n    const avg = sum / samples.length;\n\n    return avg;\n}\n\n/**\n * Measures a sequence of connected events, such as multiple processing stages in a function.\n * Each stage is identified with a timer name, that must be a valid timer in the statistics\n * object. Additionally, all timers within a `MultiStageTimer` must be unique.\n *\n * Internally, the `MultiStageTimer` manages a list of timers where at the end of each stage,\n * one timer stops and the next timer starts.\n */\nexport class MultiStageTimer {\n    private currentStage: string | undefined;\n\n    /**\n     * Defines the `MultiStageTimer` with a list of timer names that represent its stages.\n     *\n     * @param statistics The statistics object that manages the timers.\n     * @param name Name of this `MultiStageTimer`.\n     * @param stages List of timer names.\n     */\n    constructor(private statistics: Statistics, readonly name: string, public stages: string[]) {\n        if (stages.length < 1) {\n            throw new Error(\"MultiStageTimer needs stages\");\n        }\n\n        stages.forEach(stage => {\n            if (!statistics.hasTimer(stage)) {\n                throw new Error(\"Unknown timer: \" + stage);\n            }\n        });\n    }\n\n    /**\n     * Gets the timer value for the last stage. If the `MultiStageTimer` did not finish its\n     * last stage, the value is `undefined`.\n     */\n    get value(): number | undefined {\n        return this.statistics.getTimer(this.stages[this.stages.length - 1]).value;\n    }\n\n    /**\n     * Resets the timers across all stages.\n     */\n    reset(): void {\n        if (!this.statistics.enabled) {\n            return;\n        }\n        this.stages.forEach(stage => {\n            this.statistics.getTimer(stage).reset();\n        });\n    }\n\n    /**\n     * Starts the `MultiStageTimer` at its first stage.\n     */\n    start(): number {\n        this.stage = this.stages[0];\n\n        return this.statistics.getTimer(this.stages[0]).value || -1;\n    }\n\n    /**\n     * Stops the `MultiStageTimer`. Returns the measurement of the last stage, which may be\n     * `undefined` if not all stages started.\n     */\n    stop(): number {\n        this.stage = undefined;\n        return this.value !== undefined ? this.value : -1;\n    }\n\n    /**\n     * Gets the current stage.\n     */\n    get stage(): string | undefined {\n        return this.currentStage;\n    }\n\n    /**\n     * Sets the current stage. If a new stage is provided, the current timer (if available) is\n     * stopped, and the next timer is started. If the timer in the next stage is `undefined`,\n     * this is equivalent to calling `stop` on the `MultiStageTimer`.\n     *\n     * @param stage The next stage to start.\n     */\n    set stage(stage: string | undefined) {\n        if (this.currentStage === stage) {\n            return;\n        }\n\n        if (this.statistics.enabled && this.currentStage !== undefined) {\n            this.statistics.getTimer(this.currentStage).stop();\n        }\n\n        this.currentStage = stage;\n\n        if (this.statistics.enabled && this.currentStage !== undefined) {\n            this.statistics.getTimer(this.currentStage).start();\n        }\n    }\n}\n\n/**\n * Manages a set of timers. The main objective of `Statistics` is to log these timers. You can\n * disable statistics to minimize their impact on performance.\n */\nexport class Statistics {\n    private timers: Map<string, Timer>;\n\n    private nullTimer: Timer;\n\n    /**\n     * Sets up a group of timers.\n     *\n     * @param name The statistics name, for logging purposes.\n     * @param enabled If `false`, the timers do not measure the performance.\n     */\n    constructor(public name?: string, public enabled = false) {\n        this.timers = new Map<string, Timer>();\n        this.nullTimer = new SimpleTimer(this, \"<null>\");\n    }\n\n    /**\n     * Adds a timer, based on the name specified.\n     *\n     * @param name The timer's name; must be unique.\n     */\n    createTimer(name: string, keepSamples = true): Timer {\n        const timer = keepSamples ? new SampledTimer(this, name) : new SimpleTimer(this, name);\n\n        return this.addTimer(timer);\n    }\n\n    /**\n     * Adds the timer specified.\n     *\n     * @param timer The timer's name, which must be unique within this statistics object.\n     */\n    addTimer(timer: Timer): Timer {\n        if (this.timers.get(timer.name) !== undefined) {\n            throw new Error(\"Duplicate timer name: '\" + timer.name + \"'\");\n        }\n\n        this.timers.set(timer.name, timer);\n\n        return timer;\n    }\n\n    /**\n     * Gets a timer by name.\n     *\n     * @param name The timer's name.\n     */\n    getTimer(name: string): Timer {\n        if (!this.enabled) {\n            return this.nullTimer;\n        }\n\n        const t = this.timers.get(name);\n        return t === undefined ? this.nullTimer : t;\n    }\n\n    /**\n     * Checks if a timer with the specified name already exists.\n     *\n     * @param name The timer's name.\n     * @returns `true` if a timer with `name` already exists; `false` otherwise.\n     */\n    hasTimer(name: string): boolean {\n        const t = this.timers.get(name);\n        return t !== undefined;\n    }\n\n    /**\n     * Resets all timers.\n     */\n    reset() {\n        this.timers.forEach((timer: Timer) => {\n            timer.reset();\n        });\n    }\n\n    /**\n     * Prints all values to the console.\n     *\n     * @param header Optional header line.\n     * @param footer Optional footer line.\n     */\n    log(header?: string, footer?: string) {\n        if (header !== undefined || this.name !== undefined) {\n            logger.log(header !== undefined ? header : this.name);\n        }\n\n        let maxNameLength = 0;\n\n        this.timers.forEach((timer: Timer) => {\n            maxNameLength = Math.max(maxNameLength, timer.name.length);\n        });\n\n        // simple printing function for number limits the number of decimal points.\n        const print = (v: number | undefined) => {\n            return v !== undefined ? v.toFixed(5) : \"?\";\n        };\n\n        this.timers.forEach((timer: Timer) => {\n            let s = timer.name + \": \" + \" \".repeat(maxNameLength - timer.name.length);\n            s += print(timer.value);\n\n            // sampled timers also update their stats and log them\n            if (timer instanceof SampledTimer) {\n                const simpleStats = timer.getStats();\n                if (simpleStats !== undefined) {\n                    s +=\n                        `  [ min=${print(simpleStats.min)}, max=${print(simpleStats.max)}, ` +\n                        `avg=${print(simpleStats.avg)}, med=${print(simpleStats.median)}, ` +\n                        `med95=${print(simpleStats.median95)}, med99=${print(\n                            simpleStats.median99\n                        )}, ` +\n                        `N=${print(simpleStats.numSamples)} ]`;\n                }\n            }\n            logger.log(s);\n        });\n\n        if (footer !== undefined) {\n            logger.log(footer);\n        }\n    }\n}\n\n/**\n * Class containing all counters, timers and events of the current frame.\n */\nexport class FrameStats {\n    readonly entries: Map<string, number> = new Map();\n    messages?: string[] = undefined;\n\n    /**\n     * Retrieve the value of the performance number.\n     *\n     * @param name Name of the performance number.\n     * @returns The value of the performance number or `undefined` if it has not been declared by\n     *      `setValue` before.\n     */\n    getValue(name: string): number | undefined {\n        return this.entries.get(name);\n    }\n\n    /**\n     * Set the value of the performance number.\n     *\n     * @param name Name of the performance number.\n     * @param name New value of the performance number.\n     */\n    setValue(name: string, value: number) {\n        this.entries.set(name, value);\n    }\n\n    /**\n     * Add a value to the current value of the performance number. If the performance is not known,\n     * it will be initialized with `value`.\n     *\n     * @param name Name of the performance number.\n     * @param name Value to be added to the performance number.\n     */\n    addValue(name: string, value: number) {\n        const oldValue = this.entries.get(name);\n        this.entries.set(name, value + (oldValue === undefined ? 0 : oldValue));\n    }\n\n    /**\n     * Add a text message to the frame, like \"Font XYZ has been loaded\"\n     *\n     * @param message The message to add.\n     */\n    addMessage(message: string) {\n        if (this.messages === undefined) {\n            this.messages = [];\n        }\n        this.messages.push(message);\n    }\n\n    /**\n     * Reset all known performance values to `0` and the messages to `undefined`.\n     */\n    reset() {\n        this.entries.forEach((value: number, name: string) => {\n            this.entries.set(name, 0);\n        });\n\n        this.messages = undefined;\n    }\n}\n\n/**\n * @ignore\n * Only exported for testing.\n *\n * Instead of passing around an array of objects, we store the frame statistics as an object of\n * arrays. This allows convenient computations from [[RingBuffer]],\n */\nexport class FrameStatsArray {\n    readonly frameEntries: Map<string, RingBuffer<number>> = new Map();\n    readonly messages: RingBuffer<string[] | undefined>;\n\n    constructor(readonly capacity: number = 0) {\n        this.messages = new RingBuffer<string[] | undefined>(capacity);\n    }\n\n    get length(): number {\n        return this.messages.size;\n    }\n\n    reset() {\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            buffer.clear();\n        });\n        this.messages.clear();\n    }\n\n    addFrame(frameStats: FrameStats) {\n        const currentSize = this.length;\n        const frameEntries = this.frameEntries;\n\n        frameStats.entries.forEach((value: number, name: string) => {\n            let buffer = frameEntries.get(name);\n\n            if (buffer === undefined) {\n                // If there is a buffer that has not been known before, add it to the known buffers,\n                // fill it up with with 0 to the size of all the other buffers to make them of equal\n                // size to make PerfViz happy.\n                buffer = new RingBuffer<number>(this.capacity);\n                for (let i = 0; i < currentSize; i++) {\n                    buffer.enqOne(0);\n                }\n                this.frameEntries.set(name, buffer);\n            }\n            buffer.enqOne(value);\n        });\n\n        this.messages.enq(frameStats.messages);\n    }\n\n    /**\n     * Prints all values to the console.\n     */\n    log() {\n        let maxNameLength = 0;\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            maxNameLength = Math.max(maxNameLength, name.length);\n        });\n\n        // simple printing function for number limits the number of decimal points.\n        const print = (v: number | undefined) => {\n            return v !== undefined ? v.toFixed(5) : \"?\";\n        };\n\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            let s = name + \": \" + \" \".repeat(maxNameLength - name.length);\n\n            const simpleStats = computeArrayStats(buffer.asArray());\n            if (simpleStats !== undefined) {\n                s +=\n                    `  [ min=${print(simpleStats.min)}, max=${print(simpleStats.max)}, ` +\n                    `avg=${print(simpleStats.avg)}, med=${print(simpleStats.median)}, ` +\n                    `med95=${print(simpleStats.median95)}, med99=${print(simpleStats.median99)}, ` +\n                    `N=${print(simpleStats.numSamples)} ]`;\n            }\n            logger.log(s);\n        });\n    }\n}\n\n/**\n * Chrome's MemoryInfo interface.\n */\ninterface ChromeMemoryInfo {\n    totalJSHeapSize: number;\n    usedJSHeapSize: number;\n    jsHeapSizeLimit: number;\n}\n\nexport interface SimpleFrameStatistics {\n    configs: Map<string, string>;\n    appResults: Map<string, number>;\n    frames: Map<string, number | number[]>;\n    messages: Array<string[] | undefined>;\n    frameStats?: Map<string, Stats | undefined>;\n    zoomLevelLabels?: string[];\n    zoomLevelData?: Map<string, number | number[]>;\n}\n\n/**\n * Performance measurement central. Maintains the current [[FrameStats]], which holds all individual\n * performance numbers.\n *\n * Implemented as an instance for easy access.\n */\nexport class PerformanceStatistics {\n    /**\n     * Returns `true` when the maximum number of storable frames is reached.\n     *\n     * @readonly\n     * @type {boolean}\n     * @memberof PerformanceStatistics\n     */\n    get isFull(): boolean {\n        return this.m_frameEvents.length >= this.maxNumFrames;\n    }\n    /**\n     * Global instance to the instance. The current instance can be overridden by creating a new\n     * `PerformanceStatistics`.\n     */\n    static get instance(): PerformanceStatistics {\n        if (PerformanceStatistics.m_instance === undefined) {\n            PerformanceStatistics.m_instance = new PerformanceStatistics(false, 0);\n        }\n        return PerformanceStatistics.m_instance;\n    }\n\n    private static m_instance?: PerformanceStatistics = undefined;\n\n    /**\n     * Current frame statistics. Contains all values for the current frame. Will be cleared when\n     * [[PerformanceStatistics#storeFrameInfo]] is called.\n     *\n     * @type {FrameStats}\n     * @memberof PerformanceStatistics\n     */\n    readonly currentFrame: FrameStats = new FrameStats();\n\n    /**\n     * @ignore\n     * Only exported for testing.\n     *\n     * Return the array of frame events.\n     */\n    get frameEvents(): FrameStatsArray {\n        return this.m_frameEvents;\n    }\n\n    /**\n     * Additional results stored for the current application run, not per frame. Only the last value\n     * is stored.\n     *\n     * @type {(Map<string, number>)}\n     */\n    readonly appResults: Map<string, number> = new Map();\n\n    /**\n     * Additional configuration values stored for the current application run, not per frame. Only\n     * the last value is stored.\n     *\n     * @type {(Map<string, string>)}\n     * @memberof PerformanceStatistics\n     */\n    readonly configs: Map<string, string> = new Map();\n\n    // Current array of frame events.\n    private m_frameEvents: FrameStatsArray;\n\n    /**\n     * Creates an instance of PerformanceStatistics. Overrides the current `instance`.\n     *\n     * @param {boolean} [enabled=true] If `false` the performance values will not be stored.\n     * @param {number} [maxNumFrames=1000] The maximum number of frames that are to be stored.\n     * @memberof PerformanceStatistics\n     */\n    constructor(public enabled = true, public maxNumFrames = 1000) {\n        PerformanceStatistics.m_instance = this;\n        this.m_frameEvents = new FrameStatsArray(maxNumFrames);\n    }\n\n    /**\n     * Clears all settings, all stored frame events as well as the current frame values.\n     *\n     * @memberof PerformanceStatistics\n     */\n    clear() {\n        this.clearFrames();\n        this.configs.clear();\n        this.appResults.clear();\n    }\n\n    /**\n     * Clears only all stored frame events as well as the current frame values.\n     *\n     * @memberof PerformanceStatistics\n     */\n    clearFrames() {\n        this.m_frameEvents.reset();\n        this.currentFrame.reset();\n    }\n\n    /**\n     * Add the render state information from [[THREE.WebGLInfo]] to the current frame.\n     * @param {THREE.WebGLInfo} webGlInfo\n     */\n    addWebGLInfo(webGlInfo: THREE.WebGLInfo) {\n        if (webGlInfo.render !== undefined) {\n            this.currentFrame.setValue(\n                \"gl.numCalls\",\n                webGlInfo.render.calls === null ? 0 : webGlInfo.render.calls\n            );\n            this.currentFrame.setValue(\n                \"gl.numPoints\",\n                webGlInfo.render.points === null ? 0 : webGlInfo.render.points\n            );\n            this.currentFrame.setValue(\n                \"gl.numLines\",\n                webGlInfo.render.lines === null ? 0 : webGlInfo.render.lines\n            );\n            this.currentFrame.setValue(\n                \"gl.numTriangles\",\n                webGlInfo.render.triangles === null ? 0 : webGlInfo.render.triangles\n            );\n        }\n        if (webGlInfo.memory !== undefined) {\n            this.currentFrame.setValue(\n                \"gl.numGeometries\",\n                webGlInfo.memory.geometries === null ? 0 : webGlInfo.memory.geometries\n            );\n            this.currentFrame.setValue(\n                \"gl.numTextures\",\n                webGlInfo.memory.textures === null ? 0 : webGlInfo.memory.textures\n            );\n        }\n        if (webGlInfo.programs !== undefined) {\n            this.currentFrame.setValue(\n                \"gl.numPrograms\",\n                webGlInfo.programs === null ? 0 : webGlInfo.programs.length\n            );\n        }\n    }\n\n    /**\n     * Add memory statistics to the current frame if available.\n     * @note Currently only supported on Chrome\n     */\n    addMemoryInfo() {\n        if (window !== undefined && window.performance !== undefined) {\n            const memory = (window.performance as any).memory as ChromeMemoryInfo;\n            if (memory !== undefined) {\n                this.currentFrame.setValue(\"memory.totalJSHeapSize\", memory.totalJSHeapSize);\n                this.currentFrame.setValue(\"memory.usedJSHeapSize\", memory.usedJSHeapSize);\n                this.currentFrame.setValue(\"memory.jsHeapSizeLimit\", memory.jsHeapSizeLimit);\n            }\n        }\n    }\n\n    /**\n     * Stores the current frame events into the array of events and clears all values.\n     *\n     * @returns {boolean} Returns `false` if the maximum number of storable frames has been reached.\n     * @memberof PerformanceStatistics\n     */\n    storeAndClearFrameInfo(): boolean {\n        if (this.m_frameEvents.length >= this.maxNumFrames) {\n            return false;\n        }\n\n        this.m_frameEvents.addFrame(this.currentFrame);\n\n        this.currentFrame.reset();\n        return true;\n    }\n\n    /**\n     * Logs all values to the logger.\n     *\n     * @param header Optional header line.\n     * @param footer Optional footer line.\n     */\n    log(header?: string, footer?: string) {\n        logger.log(header !== undefined ? header : \"PerformanceStatistics\");\n\n        const appResults = this.appResults;\n        appResults.forEach((value: number, name: string) => {\n            logger.log(name, value);\n        });\n        const configs = this.configs;\n        configs.forEach((value: string, name: string) => {\n            logger.log(name, value);\n        });\n        this.m_frameEvents.log();\n\n        if (footer !== undefined) {\n            logger.log(footer);\n        }\n    }\n\n    /**\n     * Convert to a plain object that can be serialized. Required to copy the test results over to\n     * nightwatch.\n     */\n    getAsPlainObject(onlyLastFrame: boolean = false): any {\n        const appResults: any = {};\n        const configs: any = {};\n        const frames: any = {};\n        const plainObject: any = {\n            configs,\n            appResults,\n            frames\n        };\n\n        const appResultValues = this.appResults;\n        appResultValues.forEach((value: number, name: string) => {\n            appResults[name] = value;\n        });\n\n        const configValues = this.configs;\n        configValues.forEach((value: string, name: string) => {\n            configs[name] = value;\n        });\n\n        if (onlyLastFrame) {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames[name] = buffer.bottom;\n            }\n        } else {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames[name] = buffer.asArray();\n            }\n        }\n        plainObject.messages = this.m_frameEvents.messages.asArray();\n        return plainObject;\n    }\n\n    /**\n     * Convert the last frame values to a plain object that can be serialized. Required to copy the\n     * test results over to nightwatch.\n     */\n    getLastFrameStatistics(): any {\n        return this.getAsPlainObject(true);\n    }\n\n    /**\n     * Convert to a plain object that can be serialized. Required to copy the test results over to\n     * nightwatch.\n     */\n    getAsSimpleFrameStatistics(onlyLastFrame: boolean = false): SimpleFrameStatistics {\n        const configs: Map<string, string> = new Map();\n        const appResults: Map<string, number> = new Map();\n        const frames: Map<string, number | number[]> = new Map();\n\n        const simpleStatistics: SimpleFrameStatistics = {\n            configs,\n            appResults,\n            frames,\n            messages: this.m_frameEvents.messages.asArray()\n        };\n\n        const appResultValues = this.appResults;\n        appResultValues.forEach((value: number, name: string) => {\n            appResults.set(name, value);\n        });\n\n        const configValues = this.configs;\n        configValues.forEach((value: string, name: string) => {\n            configs.set(name, value);\n        });\n\n        if (onlyLastFrame) {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames.set(name, buffer.bottom);\n            }\n        } else {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames.set(name, buffer.asArray());\n            }\n        }\n        return simpleStatistics;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { ExtrusionFeature, ExtrusionFeatureDefs } from \"@here/harp-materials\";\nimport { MathUtils } from \"@here/harp-utils\";\nimport { MapView, MapViewEventNames, RenderEvent } from \"./MapView\";\nimport { Tile } from \"./Tile\";\n\nimport * as THREE from \"three\";\n\n/**\n * Animation states for extrusion effect\n */\nexport enum AnimatedExtrusionState {\n    None,\n    Started,\n    Playing,\n    Finished\n}\n\n/**\n * Handles animated extrusion effect of the buildings in [[MapView]].\n */\nexport class AnimatedExtrusionHandler {\n    /**\n     * Animate the extrusion of the buildings if set to `true`.\n     */\n    enabled: boolean = true;\n    /**\n     * Duration of the building's extrusion in milliseconds\n     */\n    duration: number = 750;\n    /**\n     * If `forceEnabled` is set to `true` then `animateExtrusion` and `animateExtrusionDuration`\n     * values from [[extrudedPolygonTechnique]] will be ignored in [[Tile]] and\n     * `AnimatedExtrusionHandler.enabled` with `AnimatedExtrusionHandler.duration` will be used\n     */\n    forceEnabled: boolean = false;\n\n    private m_zoomLevelPrevious: number;\n    private m_tileHandlerMap: Map<Tile, AnimatedExtrusionTileHandler> = new Map();\n    private m_zoomDirection: number = 0;\n    private m_forceAnimatedExtrusion: boolean | undefined;\n    private m_forceAnimatedExtrusionDuration: number | undefined;\n\n    /**\n     * Creates an [[AnimatedExtrusionHandler]] in [[MapView]].\n     *\n     * @param m_mapView Instance of [[MapView]] that passes `zoomLevel`\n     * through the `zoom` property update\n     */\n    constructor(private m_mapView: MapView) {\n        this.m_zoomLevelPrevious = this.m_mapView.zoomLevel;\n    }\n\n    /**\n     * Returns direction of the last zoom event.\n     * Zoom in - positive value, zoom out - negative value\n     */\n    get zoomDirection(): number {\n        return this.m_zoomDirection;\n    }\n\n    /**\n     * [[MapView]] updates zoom level. Then [[AnimatedExtrusionTileHandler]] calculates actual\n     * extrusion ratio and trigger animation\n     */\n    set zoom(zoomLevel: number) {\n        // if zoomLevel has been changed since last render\n        if (this.m_zoomLevelPrevious !== zoomLevel) {\n            this.m_tileHandlerMap.forEach(tileHandler => {\n                if (\n                    this.m_mapView.getDataSourceByName(tileHandler.tile.dataSource.name) !==\n                    undefined\n                ) {\n                    this.m_zoomDirection = zoomLevel > this.m_zoomLevelPrevious ? 1 : -1;\n                    tileHandler.zoomLevelChanged(this.m_zoomDirection);\n                }\n            });\n            this.m_zoomLevelPrevious = zoomLevel;\n        }\n    }\n\n    /**\n     * Checks whether animated extrusion effect was forcibly turned off/on in [[MapView]]\n     */\n    get forceAnimatedExtrusion(): boolean | undefined {\n        return this.m_forceAnimatedExtrusion;\n    }\n\n    /**\n     * If set to `true` it will force the animation extrusion effect to run.\n     * In case it was set to `false` animation extrusion effect will be switched off.\n     */\n    set forceAnimatedExtrusion(animatedExtrusion: boolean | undefined) {\n        this.m_forceAnimatedExtrusion = animatedExtrusion;\n    }\n\n    /**\n     * Returns `animatedExtrusionDuration` value that was set in [[MapView]].\n     */\n    get forceAnimatedExtrusionDuration(): number | undefined {\n        return this.m_forceAnimatedExtrusionDuration;\n    }\n\n    /**\n     * If value is set, it will overlap in [[Tile]] with\n     * `animatedExtrusionDuration` property from [[ExtrudedPolygonTechnique]]\n     * and `DEFAULT_DURATION` from [[AnimatedExtrusionTileHandler]].\n     */\n    set forceAnimatedExtrusionDuration(extrusionDuration: number | undefined) {\n        this.m_forceAnimatedExtrusionDuration = extrusionDuration;\n    }\n\n    /**\n     * Adds an [[AnimatedExtrusionTileHandler]] to [[AnimatedExtrusionHandler]]\n     */\n    add(tileHandler: AnimatedExtrusionTileHandler): void {\n        this.m_tileHandlerMap.set(tileHandler.tile, tileHandler);\n    }\n\n    /**\n     * Removes tile from the list subscribed for extrusion ratio updates\n     */\n    removeTile(tile: Tile): void {\n        this.m_tileHandlerMap.delete(tile);\n    }\n\n    /**\n     * Returns first [[AnimatedExtrusionTileHandler]] existed from the list of [[Tile]]s\n     */\n    find(tileKeys: Array<TileKey | undefined>): AnimatedExtrusionTileHandler | undefined {\n        for (const tileHandler of this.m_tileHandlerMap) {\n            for (const tileKey of tileKeys) {\n                if (\n                    tileKey !== undefined &&\n                    tileHandler[0].tileKey.mortonCode() === tileKey.mortonCode()\n                ) {\n                    return tileHandler[1];\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Is `true` if any extrusion handlers are currently animating.\n     */\n    get isAnimating(): boolean {\n        for (const tileHandler of this.m_tileHandlerMap) {\n            if (tileHandler[1].isAnimating) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Implements animated extrusion effect for the extruded objects in the [[Tile]]\n */\nexport class AnimatedExtrusionTileHandler {\n    private m_extrudedObjects: THREE.Object3D[] = [];\n    private m_animatedExtrusionState: AnimatedExtrusionState = AnimatedExtrusionState.None;\n    private m_animatedExtrusionStartTime: number | undefined = undefined;\n    private m_mapView: MapView;\n    private m_animatedExtrusionHandler: AnimatedExtrusionHandler;\n\n    constructor(\n        private m_tile: Tile,\n        extrudedObjects: Array<{ object: THREE.Object3D; materialFeature: boolean }>,\n        private m_animatedExtrusionDuration: number\n    ) {\n        this.m_mapView = m_tile.mapView;\n        this.m_animatedExtrusionHandler = this.m_mapView.animatedExtrusionHandler;\n\n        extrudedObjects.forEach(extrudedObject => {\n            this.m_extrudedObjects.push(extrudedObject.object);\n        });\n\n        this.startExtrusionAnimationIfNeeded(this.m_animatedExtrusionHandler.zoomDirection);\n    }\n\n    /**\n     * Set an extrusion ratio value for the materials [[MapMeshBasicMaterial]]\n     * and [[EdgeMaterial]]. Controlled by [[AnimatedExtrusionHandler]]\n     * for extrusion animation effect.\n     */\n    set extrusionRatio(value: number) {\n        this.m_extrudedObjects.forEach(object => {\n            if (object instanceof THREE.Mesh || object instanceof THREE.LineSegments) {\n                if (Array.isArray(object.material)) {\n                    object.material.forEach((material: ExtrusionFeature) => {\n                        material.extrusionRatio = value;\n                    });\n                } else if (object.material) {\n                    (object.material as ExtrusionFeature).extrusionRatio = value;\n                    if (object.customDepthMaterial !== undefined) {\n                        (object.customDepthMaterial as ExtrusionFeature).extrusionRatio = value;\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns the [[Tile]] related to [[AnimatedExtrusionTileHandler]]\n     */\n    get tile(): Tile {\n        return this.m_tile;\n    }\n\n    /**\n     * Return the current state of animated extrusion effect\n     */\n    get animationState(): AnimatedExtrusionState {\n        return this.m_animatedExtrusionState;\n    }\n\n    /**\n     * Is `true` if this handler is currently animating.\n     */\n    get isAnimating(): boolean {\n        return this.m_animatedExtrusionState !== AnimatedExtrusionState.Finished;\n    }\n\n    /**\n     * Cancel animation and remove from [[AnimatedExtrusionHandler]]\n     */\n    dispose() {\n        this.stopExtrusionAnimation();\n        this.m_animatedExtrusionHandler.removeTile(this.m_tile);\n    }\n\n    /**\n     * Start / Stop extrusion animation if zoom level was changed\n     */\n    zoomLevelChanged(zoomDirection: number) {\n        if (\n            this.m_tile.isVisible === false &&\n            this.m_animatedExtrusionState !== AnimatedExtrusionState.None\n        ) {\n            this.m_animatedExtrusionState = AnimatedExtrusionState.None;\n            this.stopExtrusionAnimation();\n        }\n\n        if (\n            this.m_tile.isVisible === true &&\n            this.m_animatedExtrusionState === AnimatedExtrusionState.None\n        ) {\n            this.startExtrusionAnimationIfNeeded(zoomDirection);\n        }\n    }\n\n    private getChildTiles(tileKeys: TileKey[]) {\n        const result: TileKey[] = [];\n\n        tileKeys.forEach(tileKey => {\n            const childTileKeys = this.tile.dataSource.getTilingScheme().getSubTileKeys(tileKey);\n\n            for (const childTileKey of childTileKeys) {\n                result.push(childTileKey);\n            }\n        });\n        return result;\n    }\n\n    // search for the [[Tile]] with extrusion animation started\n    private startExtrusionAnimationIfNeeded(zoomDirection?: number) {\n        const {\n            quadTreeSearchDistanceUp,\n            quadTreeSearchDistanceDown\n        } = this.tile.mapView.visibleTileSet.options;\n        const tile = this.m_tile;\n        let extrusionStartTime: number | undefined;\n\n        if (zoomDirection !== undefined) {\n            let tileHandler;\n\n            // if zoom out, go down and look for a child tile\n            if (zoomDirection < 0) {\n                let nextLevelDiff = 0;\n                let tileKeys = [tile.tileKey];\n                while (\n                    quadTreeSearchDistanceDown > nextLevelDiff &&\n                    extrusionStartTime === undefined\n                ) {\n                    const childTileKeys = this.getChildTiles(tileKeys);\n                    if (childTileKeys !== undefined) {\n                        tileHandler = this.m_animatedExtrusionHandler.find(childTileKeys);\n                        if (tileHandler !== undefined) {\n                            extrusionStartTime = tileHandler.m_animatedExtrusionStartTime;\n                            break;\n                        }\n                        tileKeys = childTileKeys;\n                    }\n                    nextLevelDiff++;\n                }\n            }\n            // if zoom in, go up and get the parent tile\n            if (zoomDirection > 0) {\n                let nextLevelDiff = 0;\n                let tileKey = tile.tileKey;\n                while (\n                    quadTreeSearchDistanceUp > nextLevelDiff &&\n                    extrusionStartTime === undefined &&\n                    tileKey.level !== 0\n                ) {\n                    const parentTileKey = tileKey.parent();\n                    tileHandler = this.m_animatedExtrusionHandler.find([parentTileKey]);\n                    if (tileHandler !== undefined) {\n                        extrusionStartTime = tileHandler.m_animatedExtrusionStartTime;\n                        break;\n                    }\n                    tileKey = parentTileKey;\n                    nextLevelDiff++;\n                }\n            }\n        }\n        this.startExtrusionAnimation(extrusionStartTime);\n    }\n\n    private startExtrusionAnimation(startTime?: number): void {\n        this.m_animatedExtrusionState = AnimatedExtrusionState.Started;\n        this.m_animatedExtrusionStartTime = startTime;\n        this.animateExtrusion();\n        this.m_mapView.addEventListener(MapViewEventNames.AfterRender, this.animateExtrusion);\n    }\n\n    private stopExtrusionAnimation(): void {\n        this.m_mapView.removeEventListener(MapViewEventNames.AfterRender, this.animateExtrusion);\n    }\n\n    private animateExtrusion = (event?: RenderEvent) => {\n        if (this.m_animatedExtrusionState !== AnimatedExtrusionState.Playing) {\n            if (this.m_animatedExtrusionState === AnimatedExtrusionState.Started) {\n                this.m_animatedExtrusionState = AnimatedExtrusionState.Playing;\n            } else {\n                return;\n            }\n        }\n\n        const currentTime = Date.now();\n        if (\n            this.m_animatedExtrusionStartTime === undefined ||\n            this.m_animatedExtrusionStartTime <= 0\n        ) {\n            this.m_animatedExtrusionStartTime = currentTime;\n        }\n\n        const timeProgress = Math.min(\n            currentTime - this.m_animatedExtrusionStartTime,\n            this.m_animatedExtrusionDuration\n        );\n\n        this.extrusionRatio = MathUtils.easeInOutCubic(\n            ExtrusionFeatureDefs.DEFAULT_RATIO_MIN,\n            ExtrusionFeatureDefs.DEFAULT_RATIO_MAX,\n            timeProgress / this.m_animatedExtrusionDuration\n        );\n\n        if (timeProgress >= this.m_animatedExtrusionDuration) {\n            this.m_animatedExtrusionState = AnimatedExtrusionState.Finished;\n            this.stopExtrusionAnimation();\n        }\n\n        this.m_tile.dataSource.requestUpdate();\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Enum log levels\n */\nexport enum LogLevel {\n    Trace,\n    Debug,\n    Log,\n    Info,\n    Warn,\n    Error\n}\n\n/**\n * Logger options to configure logger\n */\nexport class LoggerOptions {\n    enabled?: boolean;\n    level?: LogLevel;\n}\n\n/**\n * Public interface for Logger class.\n */\nexport interface ILogger extends IChannel {\n    readonly name: string;\n\n    enabled: boolean;\n\n    level: LogLevel;\n\n    /**\n     * Update logger options\n     *\n     * @param  {LoggerOptions} options Set logger options and configure internal logger.\n     */\n    update(options: LoggerOptions): void;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Resolve URI of referenced object w.r.t parent URI.\n *\n * Resolves `childUri` as it would be loaded from location specified by `parentUri`.\n *\n * If `childUri` is absolute, then it is returned unchanged.\n * If `childUri` is origin-absolute path, then only origin path is taken from `parentUri`.\n *\n * See [[baseUri]] for reference how base URL of `parentUri` is determined.\n *\n * Supports `http:`, `https:`, `file:`, `data:` schemes.\n *\n * Examples:\n *\n *     // normal case, child is sibling\n *     https://foo.com/themes/day.json + images/foo.png -> https://foo.com/themes/images/foo.png\n *\n *     // parent is \"folder\", so child is just located in this folder\n *     https://foo.com/themes/ + images/foo.png -> https://foo.com/themes/images/foo.png\n *\n *     // parent looks like leaf, so last component is stripped\n *     https://foo.com/themes + images/foo.png -> https://foo.com/images/foo.png\n *\n *     // origin-absolute URL, takes only origin from parent\n *     https://foo.com/themes/day.json + /fonts/foo.json -> https://foo.com/fonts/foo.json\n *\n * @param parentUri URI of parent resource\n * @param childUri URI of child as referenced from parent resource\n * @return `childUrl` as if anchored in location of `parentUrl`\n */\nexport function resolveReferenceUri(parentUri: string | undefined, childUri: string): string {\n    if (absoluteUrlWithOriginRe.test(childUri)) {\n        return childUri;\n    } else if (childUri.startsWith(\"/\")) {\n        const origin = getUrlOrigin(parentUri);\n        return origin + childUri;\n    } else {\n        if (childUri.startsWith(\"./\")) {\n            childUri = childUri.substr(2);\n        }\n        const parentBaseUrl = baseUrl(parentUri);\n        return parentBaseUrl + childUri;\n    }\n}\n\nconst absoluteUrlWithOriginRe = new RegExp(\"^(((?:[a-z]+:)?//)|(file:/)|(data:))\", \"i\");\n\n/**\n * Returns base URL of given resource URL.\n *\n * `Url` with trailing slash are considered genuine 'locations', they are returned as is, however if\n * `url` ends with name component it is treated as \"leaf\", so last path component is removed.\n *\n * Standalone files (without any folder structure) are considered relative to `./`.\n *\n * Examples:\n * ```\n *     https://foo.com/themes/a.json -> https://foo.com/themes/\n *     https://foo.com/themes/ -> https://foo.com/themes/\n *     https://foo.com/themes -> https://foo.com/ // note, themes is treated as leaf\n *     themes/day.json -> themes/\n *     themes -> ./\n * ```\n */\nexport function baseUrl(url: string | undefined) {\n    if (url === undefined) {\n        return \"./\";\n    }\n    let idx = url.indexOf(\"#\");\n    if (idx !== -1) {\n        url = url.slice(0, idx);\n    }\n    idx = url.indexOf(\"?\");\n    if (idx !== -1) {\n        url = url.slice(0, idx);\n    }\n    idx = url.lastIndexOf(\"/\");\n    if (idx === -1) {\n        return \"./\";\n    } else {\n        return url.substring(0, idx + 1);\n    }\n}\n\n/**\n * Get `origin` part of URL.\n *\n * @example\n *    https://example.com/foo -> https://example.com\n *    //example.com:8080/ -> //example.com:8080\n *    file:///etc/hosts ->\n *\n * @param url input URL\n * @return origin of given URL\n */\nexport function getUrlOrigin(url: string | undefined): string {\n    if (url === undefined) {\n        return \"\";\n    }\n    const parsed = getUrlHostAndProtocol(url);\n    if (parsed.protocol === \"file:\") {\n        return \"file://\";\n    } else if (parsed.host && parsed.protocol) {\n        return parsed.protocol + \"//\" + parsed.host;\n    } else if (parsed.host) {\n        return \"//\" + parsed.host;\n    } else if (parsed.protocol) {\n        return parsed.protocol + \"//\";\n    } else {\n        return \"\";\n    }\n}\n\n/**\n * Parse `host` and `protocol` part from URL.\n */\nexport function getUrlHostAndProtocol(\n    url: string\n): {\n    protocol: string;\n    host: string;\n} {\n    const urlOriginRe = new RegExp(/^(?:([a-z]+:))?\\/\\/([^\\/]*)/, \"i\");\n\n    const match = url.match(urlOriginRe);\n    if (!match) {\n        throw new Error(`getUrlHostAndProtocol: unable to parse URL '${url}'`);\n    }\n    return {\n        protocol: match[1],\n        host: match[2]\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport { applyMixinsWithoutProperties, assert, chainCallbacks } from \"@here/harp-utils\";\nimport { disableBlending, enableBlending, insertShaderInclude, setShaderDefine } from \"./Utils\";\n\nimport * as THREE from \"three\";\n\nimport { DisplacementFeature, DisplacementFeatureParameters } from \"./DisplacementFeature\";\nimport { ExtrusionFeatureDefs } from \"./MapMeshMaterialsDefs\";\nimport extrusionShaderChunk from \"./ShaderChunks/ExtrusionChunks\";\nimport fadingShaderChunk from \"./ShaderChunks/FadingChunks\";\n\nconst emptyTexture = new THREE.Texture();\n\n/**\n * The MapMeshMaterials [[MapMeshBasicMaterial]] and [[MapMeshStandardMaterial]] are the standard\n * [[THREE.MeshBasicMaterial]] and [[THREE.MeshStandardMaterial]], with the addition functionality\n * of fading out the geometry between a fadeNear and fadeFar value.\n *\n * The implementation is designed around a mixin class [[FadingFeatureMixin]], which requires\n * a bit of care when adding the FadingFeature to the existing mesh classes, but it is safe to use\n * and also reduces code duplication.\n */\n\n/**\n * Parameters used when constructing a new implementor of [[FadingFeature]].\n */\nexport interface FadingFeatureParameters {\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects start fading out.\n     */\n    fadeNear?: number;\n\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects are transparent.\n     */\n    fadeFar?: number;\n}\n\n/**\n * Parameters used when constructing a new implementor of [[ExtrusionFeature]].\n */\nexport interface ExtrusionFeatureParameters {\n    /**\n     * Ratio of the extruded objects, where `1.0` is the default value\n     */\n    extrusionRatio?: number;\n\n    /**\n     * Enable z-fighting workaround that doesn't animate buildings with `height <\n     * [[ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT]]`.\n     *\n     * Should be applied to `polygon` materials using this feature.\n     */\n    zFightingWorkaround?: boolean;\n}\n\n/**\n * Used internally.\n *\n * @hidden\n */\ninterface UniformsType {\n    [index: string]: THREE.IUniform;\n}\n\n/**\n * Type of callback used internally by THREE.js for shader creation.\n *\n * @hidden\n */\ntype CompileCallback = (shader: THREE.Shader, renderer: any) => void;\n\n/**\n * Material properties used from THREE, which may not be defined in the type.\n */\nexport interface HiddenThreeJSMaterialProperties {\n    /**\n     * Informs THREE.js to re-compile material shader (due to change in code or defines).\n     */\n    needsUpdate?: boolean;\n\n    /**\n     * Hidden ThreeJS value that is made public here. Required to add new uniforms to subclasses of\n     * [[THREE.MeshBasicMaterial]]/[[THREE.MeshStandardMaterial]], basically all materials that are\n     * not THREE.ShaderMaterial.\n     * @deprecated\n     */\n    uniformsNeedUpdate?: boolean;\n\n    /**\n     * Available in all materials in ThreeJS.\n     */\n    transparent?: boolean;\n\n    /**\n     * Used internally for material shader defines.\n     */\n    defines?: any;\n\n    /**\n     * Defines callback available in THREE.js materials.\n     *\n     * Called before shader program compilation to generate vertex & fragment shader output code.\n     */\n    onBeforeCompile?: CompileCallback;\n}\n\ninterface MixinShaderProperties {\n    /**\n     * Used internally for material shader defines.\n     */\n    shaderDefines?: any;\n\n    /**\n     * Used internally for shader uniforms, holds references to material internal shader.uniforms.\n     *\n     * Holds a reference to material's internal shader uniforms map. New custom feature based\n     * uniforms are injected using this reference, but also internal THREE.js shader uniforms\n     * will be available via this map after [[Material#onBeforeCompile]] callback is run with\n     * feature enabled.\n     * @see needsUpdate\n     */\n    shaderUniforms?: UniformsType;\n}\n\n/**\n * Translates a linear distance value [0..1], where 1 is the distance to the far plane, into\n * [0..maxVisibilityRange].\n *\n * Copy from MapViewUtils, since it cannot be accessed here because of circular dependencies.\n *\n * @param distance Distance from the camera (range: [0, 1]).\n * @param visibilityRange object describing maximum and minimum visibility range - distances\n * from camera at which objects won't be rendered anymore.\n */\nfunction cameraToWorldDistance(distance: number, visibilityRange: ViewRanges): number {\n    return distance * visibilityRange.maximum;\n}\n\n/**\n * Provides common interface from mixin to internal material defines and shader uniforms.\n *\n * Call this function just after [THREE.Material] is constructed, so in derived classes after\n * super c-tor call.\n * @param mixin The mixin that will add features to [[THREE.Material]].\n * @param material The material that mixin feature is being applied.\n */\nfunction linkMixinWithMaterial(\n    mixin: MixinShaderProperties,\n    material: HiddenThreeJSMaterialProperties\n) {\n    // Some materials (MeshBasicMaterial) have no defines property created in c-tor.\n    // In such case create it manually, such defines will be also injected to the shader\n    // via generic THREE.js code - see THREE/WebGLProgram.js.\n    if (material.defines === undefined) {\n        material.defines = {};\n    }\n    // Link internal THREE.js material defines with mixin reference.\n    // Those defines are usually created in Material c-tor, if not we have fallback above.\n    mixin.shaderDefines = material.defines;\n\n    // Prepare map for holding uniforms references from the actual shader, but check if\n    // it was not already created with other mixin feature.\n    if (mixin.shaderUniforms === undefined) {\n        mixin.shaderUniforms = {};\n    }\n    // Shader uniforms may not be linked at this stage, they are injected available via Shader\n    // object in onBeforeCompile callback, see: linkMixinWithShader().\n}\n\n/**\n * Links mixin [[MixinShaderProperties.shaderUniforms]] with actual material shader uniforms.\n *\n * Function injects features (mixin) specific shader uniforms to material's shader, it also\n * updates uniforms references so [[MixinShaderProperties.shaderUniforms]] will contain full\n * uniforms map (both feature specific and internal ones).\n * This function should be called before material's shader is pre-compiled, so the new uniforms\n * from the mixin feature are known to shader processor. The best place to use is\n * [[Material.onBeforeCompile]].\n * @param mixin The mixin feature being applied to the material.\n * @param shader The actual shader linked to the [[THREE.Material]].\n */\nfunction linkMixinWithShader(mixin: MixinShaderProperties, shader: THREE.Shader) {\n    Object.assign(shader.uniforms, mixin.shaderUniforms);\n    mixin.shaderUniforms = shader.uniforms;\n}\n\n/**\n * Base interface for all objects that should fade in the distance. The implementation of the actual\n * FadingFeature is done with the help of the mixin class [[FadingFeatureMixin]] and a set of\n * supporting functions in the namespace of the same name.\n */\nexport interface FadingFeature extends HiddenThreeJSMaterialProperties, MixinShaderProperties {\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects start fading out.\n     */\n    fadeNear?: number;\n\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects are transparent. A value\n     * of <= 0.0 disables fading.\n     */\n    fadeFar?: number;\n}\n\n/**\n * Base interface for all objects that should have animated extrusion effect. The implementation of\n * the actual ExtrusionFeature is done with the help of the mixin class [[ExtrusionFeatureMixin]]\n * and a set of supporting functions in the namespace of the same name.\n */\nexport interface ExtrusionFeature extends HiddenThreeJSMaterialProperties, MixinShaderProperties {\n    /**\n     * Ratio of the extruded objects, where `1.0` is the default value. Minimum suggested value\n     * is `0.01`\n     */\n    extrusionRatio?: number;\n}\n\nnamespace DisplacementFeature {\n    /**\n     * Checks if feature is enabled (displacement map defined).\n     *\n     * @param displacementMaterial\n     */\n    export function isEnabled(displacementMaterial: DisplacementFeature) {\n        return displacementMaterial.displacementMap !== null;\n    }\n\n    /**\n     * Update the internals of the `DisplacementFeature` depending on the value of\n     * [[displacementMap]].\n     *\n     * @param displacementMaterial DisplacementFeature\n     */\n    export function updateDisplacementFeature(\n        displacementMaterial: DisplacementFeature & MixinShaderProperties\n    ): void {\n        assert(displacementMaterial.shaderDefines !== undefined);\n        assert(displacementMaterial.shaderUniforms !== undefined);\n\n        const useDisplacementMap = isEnabled(displacementMaterial);\n        // Whenever displacement feature state changes (between enabled/disabled) material will be\n        // re-compiled, forcing new shader chunks to be added (or removed).\n        const needsUpdate = setShaderDefine(\n            displacementMaterial.shaderDefines,\n            \"USE_DISPLACEMENTMAP\",\n            useDisplacementMap\n        );\n        displacementMaterial.needsUpdate = needsUpdate;\n\n        // Update texture after change.\n        if (useDisplacementMap) {\n            const texture = displacementMaterial.displacementMap!;\n            texture.needsUpdate = true;\n            displacementMaterial.shaderUniforms!.displacementMap.value = texture;\n        } else if (needsUpdate) {\n            displacementMaterial.shaderUniforms!.displacementMap.value = emptyTexture;\n        }\n    }\n\n    /**\n     * This function should be called on implementors of DisplacementFeature in the\n     * `onBeforeCompile` callback of that material. It adds the required code to the shaders to\n     * apply displacement maps.\n     *\n     * @param displacementMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(\n        displacementMaterial: DisplacementFeature & MixinShaderProperties,\n        shader: THREE.Shader\n    ) {\n        if (!isEnabled(displacementMaterial)) {\n            return;\n        }\n        assert(displacementMaterial.shaderUniforms !== undefined);\n\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them.\n        //\n        // The object \"defines\" are required for this material, we use one define working as a flag,\n        // which enables/disables some chunks of shader code.\n        linkMixinWithShader(displacementMaterial, shader);\n\n        // Append the displacement map chunk to the vertex shader.\n        shader.vertexShader = shader.vertexShader.replace(\n            \"#include <skinbase_vertex>\",\n            `#include <skinbase_vertex>\n#ifndef USE_ENVMAP\n    vec3 objectNormal = vec3( normal );\n#endif`\n        );\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"uv2_pars_vertex\",\n            \"displacementmap_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"skinning_vertex\",\n            \"displacementmap_vertex\",\n            true\n        );\n    }\n}\n\nexport class DisplacementFeatureMixin implements DisplacementFeature, MixinShaderProperties {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    defines?: any;\n    shaderDefines?: any;\n    shaderUniforms?: UniformsType;\n    onBeforeCompile?: CompileCallback;\n    private m_displacementMap: THREE.Texture | null = null;\n\n    // This is here to keep tslint from reporting a missing property, the getter that's actually\n    // used by materials is added in [[addDisplacementProperties]].\n    get displacementMap(): THREE.Texture | null {\n        return this.m_displacementMap;\n    }\n\n    // This is here to keep tslint from reporting a missing property, the setter that's actually\n    // used by materials is added in [[addDisplacementProperties]].\n    set displacementMap(map: THREE.Texture | null) {\n        this.setDisplacementMap(map);\n    }\n\n    protected getDisplacementMap(): THREE.Texture | null {\n        return this.m_displacementMap;\n    }\n\n    protected setDisplacementMap(map: THREE.Texture | null): void {\n        if (map !== this.m_displacementMap) {\n            this.m_displacementMap = map;\n            DisplacementFeature.updateDisplacementFeature(this);\n        }\n    }\n    /**\n     * The mixin class should call this method to register the property [[displacementMap]]\n     */\n    protected addDisplacementProperties(): void {\n        Object.defineProperty(this, \"displacementMap\", {\n            get: () => {\n                return this.getDisplacementMap();\n            },\n            set: val => {\n                this.setDisplacementMap(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the displacementMap value from the parameters to the respective properties.\n     */\n    protected applyDisplacementParameters(params?: DisplacementFeatureParameters) {\n        linkMixinWithMaterial(this, this);\n\n        assert(this.shaderDefines !== undefined);\n        assert(this.shaderUniforms !== undefined);\n\n        // Create uniforms with default values, this ensures they are always set created,\n        // so no need for checks in setters.\n        const uniforms = this.shaderUniforms!;\n        uniforms.displacementMap = new THREE.Uniform(emptyTexture);\n        uniforms.displacementScale = new THREE.Uniform(1);\n        uniforms.displacementBias = new THREE.Uniform(0);\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.displacementMap !== undefined) {\n                this.setDisplacementMap(params.displacementMap);\n            }\n        }\n\n        this.onBeforeCompile = chainCallbacks(this.onBeforeCompile, (shader: THREE.Shader) => {\n            DisplacementFeature.onBeforeCompile(this, shader);\n        });\n\n        // Require material update at least once, because of new shader chunks added.\n        this.needsUpdate = DisplacementFeature.isEnabled(this);\n    }\n\n    /**\n     * Copy displacementMap from other DisplacementFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyDisplacementParameters(source: DisplacementFeature) {\n        this.setDisplacementMap(source.displacementMap);\n        return this;\n    }\n}\n\n/**\n * Namespace with support functions for implementors of `FadingFeature`.\n */\nexport namespace FadingFeature {\n    export const DEFAULT_FADE_NEAR: number = -1.0;\n    export const DEFAULT_FADE_FAR: number = -1.0;\n\n    /**\n     * Checks if feature is enabled based on feature params.\n     *\n     * Fading feature will be disabled if fadeFar is undefined or fadeFar <= 0.0.\n     * This function is crucial for shader switching (chunks injection), whenever feature state\n     * changes between enabled/disabled. Current approach is to keep feature on (once enabled)\n     * whenever fading params are reasonable, even if it causes full fade in, no transparency.\n     *\n     * @param fadingMaterial FadingFeature.\n     */\n    export function isEnabled(fadingMaterial: FadingFeature) {\n        // NOTE: We could also check if full fade is not achieved, then feature could be\n        // disabled, but causing material re-compile.\n        return (\n            fadingMaterial.fadeNear !== undefined &&\n            fadingMaterial.fadeFar !== undefined &&\n            fadingMaterial.fadeFar > 0\n        );\n    }\n\n    /**\n     * Patch the THREE.ShaderChunk on first call with some extra shader chunks.\n     */\n    export function patchGlobalShaderChunks() {\n        if (THREE.ShaderChunk.fading_pars_vertex === undefined) {\n            Object.assign(THREE.ShaderChunk, fadingShaderChunk);\n        }\n    }\n\n    /**\n     * Update the internals of the `FadingFeature` depending on the value of [[fadeNear]]. The\n     * fading feature will be disabled if fadeFar <= 0.0.\n     *\n     * @param fadingMaterial FadingFeature\n     */\n    export function updateFadingFeature(fadingMaterial: FadingFeature): void {\n        assert(fadingMaterial.shaderDefines !== undefined);\n        assert(fadingMaterial.shaderUniforms !== undefined);\n\n        // Update entire material to add/remove shader fading chunks, this happens when we\n        // enable/disable fading after material creation. Feature is marked via dummy define, which\n        // informs about fading feature state, even if such define is not required to control\n        // feature state, it makes it easy to check for shader changes.\n        const useFading = isEnabled(fadingMaterial);\n        const needsUpdate = setShaderDefine(\n            fadingMaterial.shaderDefines,\n            \"FADING_MATERIAL\",\n            useFading\n        );\n        // Enable/disable entire feature with material re-compile, this will also cause\n        // new uniforms injection.\n        fadingMaterial.needsUpdate = needsUpdate;\n\n        // Check if shader uniforms references are already set in onBeforeCompile callback.\n        assert(\n            fadingMaterial.shaderUniforms!.fadeNear !== undefined &&\n                fadingMaterial.shaderUniforms!.fadeFar !== undefined\n        );\n\n        // Update shader internal uniforms only if fading is enabled.\n        if (useFading) {\n            fadingMaterial.shaderUniforms!.fadeNear.value = fadingMaterial.fadeNear;\n            fadingMaterial.shaderUniforms!.fadeFar.value = fadingMaterial.fadeFar;\n            if (needsUpdate) {\n                enableBlending(fadingMaterial as THREE.Material);\n            }\n        }\n        // Perform one time update of uniforms to defaults when feature disabled (for clarity).\n        else if (needsUpdate) {\n            fadingMaterial.shaderUniforms!.fadeNear.value = FadingFeature.DEFAULT_FADE_NEAR;\n            fadingMaterial.shaderUniforms!.fadeFar.value = FadingFeature.DEFAULT_FADE_FAR;\n            disableBlending(fadingMaterial as THREE.Material);\n        }\n    }\n\n    /**\n     * This function should be called on implementors of FadingFeature in the `onBeforeCompile`\n     * callback of that material. It adds the required code to the shaders and declares the new\n     * uniforms that control fading based on view distance.\n     *\n     * @param fadingMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(fadingMaterial: FadingFeature, shader: THREE.Shader) {\n        if (!isEnabled(fadingMaterial)) {\n            return;\n        }\n        assert(fadingMaterial.shaderUniforms !== undefined);\n\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them.\n        //\n        // The object \"defines\" are not required for this material, so the fading shader chunks\n        // have no #ifdef preprocessed chunks. Feature utilized one define just to denote feature\n        // attached and easy control its state, but this define may be stripped out if needed.\n        linkMixinWithShader(fadingMaterial, shader);\n\n        // Append the new fading shader cod directly after the fog code. This is done by adding an\n        // include directive for the fading code.\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"fog_pars_vertex\",\n            \"fading_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"fog_vertex\",\n            \"fading_vertex\",\n            true\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_pars_fragment\",\n            \"fading_pars_fragment\"\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_fragment\",\n            \"fading_fragment\",\n            true\n        );\n    }\n\n    /**\n     * As three.js is rendering the transparent objects last (internally), regardless of their\n     * renderOrder value, we set the transparent value to false in the [[onAfterRenderCall]]. In\n     * [[onBeforeRender]], the function [[calculateDepthFromCameraDistance]] sets it to true if the\n     * fade distance value is less than 1.\n     *\n     * @param object [[THREE.Object3D]] to prepare for rendering.\n     * @param viewRanges The visibility ranges (clip planes and maximum visible distance) for\n     * actual camera setup.\n     * @param fadeNear The fadeNear value to set in the material.\n     * @param fadeFar The fadeFar value to set in the material.\n     * @param updateUniforms If `true`, the fading uniforms are set. Not required if material is\n     *          handling the uniforms already, like in a [[THREE.ShaderMaterial]].\n     * @param additionalCallback If defined, this function will be called before the function will\n     *          return.\n     */\n    export function addRenderHelper(\n        object: THREE.Object3D,\n        viewRanges: ViewRanges,\n        fadeNear: number | undefined,\n        fadeFar: number | undefined,\n        updateUniforms: boolean,\n        additionalCallback?: (\n            renderer: THREE.WebGLRenderer,\n            material: THREE.Material & FadingFeature\n        ) => void\n    ) {\n        // tslint:disable-next-line:no-unused-variable\n        object.onBeforeRender = chainCallbacks(\n            object.onBeforeRender,\n            (\n                renderer: THREE.WebGLRenderer,\n                scene: THREE.Scene,\n                camera: THREE.Camera,\n                geometry: THREE.Geometry | THREE.BufferGeometry,\n                material: THREE.Material & FadingFeature,\n                group: THREE.Group\n            ) => {\n                const fadingMaterial = material as FadingFeature;\n\n                fadingMaterial.fadeNear =\n                    fadeNear === undefined || fadeNear === FadingFeature.DEFAULT_FADE_NEAR\n                        ? FadingFeature.DEFAULT_FADE_NEAR\n                        : cameraToWorldDistance(fadeNear, viewRanges);\n\n                fadingMaterial.fadeFar =\n                    fadeFar === undefined || fadeFar === FadingFeature.DEFAULT_FADE_FAR\n                        ? FadingFeature.DEFAULT_FADE_FAR\n                        : cameraToWorldDistance(fadeFar, viewRanges);\n\n                if (additionalCallback !== undefined) {\n                    additionalCallback(renderer, material);\n                }\n            }\n        );\n    }\n}\n\n/**\n * Mixin class for extended THREE materials. Adds new properties required for `fadeNear` and\n * `fadeFar`. There is some special handling for the fadeNear/fadeFar properties, which get some\n * setters and getters in a way that works well with the mixin.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class FadingFeatureMixin implements FadingFeature {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    defines?: any;\n    shaderDefines?: any;\n    shaderUniforms?: UniformsType;\n    onBeforeCompile?: CompileCallback;\n    private m_fadeNear: number = FadingFeature.DEFAULT_FADE_NEAR;\n    private m_fadeFar: number = FadingFeature.DEFAULT_FADE_FAR;\n\n    /**\n     * @see [[FadingFeature#fadeNear]]\n     */\n    protected getFadeNear(): number {\n        return this.m_fadeNear;\n    }\n    /**\n     * @see [[FadingFeature#fadeNear]]\n     */\n    protected setFadeNear(value: number) {\n        const needsUpdate = value !== this.m_fadeNear;\n        if (needsUpdate) {\n            this.m_fadeNear = value;\n            FadingFeature.updateFadingFeature(this);\n        }\n    }\n\n    /**\n     * @see [[FadingFeature#fadeFar]]\n     */\n    protected getFadeFar(): number {\n        return this.m_fadeFar;\n    }\n    /**\n     * @see [[FadingFeature#fadeFar]]\n     */\n    protected setFadeFar(value: number) {\n        const needsUpdate = value !== this.m_fadeFar;\n        if (needsUpdate) {\n            this.m_fadeFar = value;\n            FadingFeature.updateFadingFeature(this);\n        }\n    }\n\n    /**\n     * The mixin classes should call this method to register the properties [[fadeNear]] and\n     * [[fadeFar]].\n     */\n    protected addFadingProperties(): void {\n        Object.defineProperty(this, \"fadeNear\", {\n            get: () => {\n                return this.getFadeNear();\n            },\n            set: val => {\n                this.setFadeNear(val);\n            }\n        });\n        Object.defineProperty(this, \"fadeFar\", {\n            get: () => {\n                return this.getFadeFar();\n            },\n            set: val => {\n                this.setFadeFar(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the fadeNear/fadeFar values from the parameters to the respective properties.\n     *\n     * @param params `FadingMeshBasicMaterial` parameters.\n     */\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // Prepare maps for holding uniforms and defines references from the actual material.\n        linkMixinWithMaterial(this, this);\n\n        assert(this.shaderDefines !== undefined);\n        assert(this.shaderUniforms !== undefined);\n\n        // Create uniforms with default values, this ensures they are always set created,\n        // so no need for checks in setters.\n        this.shaderUniforms!.fadeNear = new THREE.Uniform(FadingFeature.DEFAULT_FADE_NEAR);\n        this.shaderUniforms!.fadeFar = new THREE.Uniform(FadingFeature.DEFAULT_FADE_FAR);\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.fadeNear !== undefined) {\n                this.setFadeNear(params.fadeNear);\n            }\n            if (params.fadeFar !== undefined) {\n                this.setFadeFar(params.fadeFar);\n            }\n        }\n\n        this.onBeforeCompile = chainCallbacks(this.onBeforeCompile, (shader: THREE.Shader) => {\n            FadingFeature.onBeforeCompile(this, shader);\n        });\n        // Update (re-compile) shader code to include new shader chunks only if feature is enabled.\n        this.needsUpdate = FadingFeature.isEnabled(this);\n    }\n\n    /**\n     * Copy fadeNear/fadeFar values from other FadingFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyFadingParameters(source: FadingFeature) {\n        this.setFadeNear(\n            source.fadeNear === undefined ? FadingFeature.DEFAULT_FADE_NEAR : source.fadeNear\n        );\n        this.setFadeFar(\n            source.fadeFar === undefined ? FadingFeature.DEFAULT_FADE_FAR : source.fadeFar\n        );\n        return this;\n    }\n}\n\nexport namespace ExtrusionFeature {\n    /**\n     * Checks if feature is enabled based on [[ExtrusionFeature]] properties.\n     *\n     * @param extrusionMaterial\n     */\n    export function isEnabled(extrusionMaterial: ExtrusionFeature) {\n        return (\n            extrusionMaterial.extrusionRatio !== undefined &&\n            extrusionMaterial.extrusionRatio >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN\n        );\n    }\n\n    /**\n     * Patch the THREE.ShaderChunk on first call with some extra shader chunks.\n     */\n    export function patchGlobalShaderChunks() {\n        if (THREE.ShaderChunk.extrusion_pars_vertex === undefined) {\n            Object.assign(THREE.ShaderChunk, extrusionShaderChunk);\n        }\n    }\n\n    /**\n     * Update the internals of the `ExtrusionFeature` depending on the value of [[extrusionRatio]].\n     *\n     * @param ExtrusionMaterial ExtrusionFeature\n     */\n    export function updateExtrusionFeature(extrusionMaterial: ExtrusionFeature): void {\n        assert(extrusionMaterial.shaderDefines !== undefined);\n        assert(extrusionMaterial.shaderUniforms !== undefined);\n\n        // Setup shader define that when changed will force material re-compile.\n        const useExtrusion = isEnabled(extrusionMaterial);\n        // Use shader define as marker if feature is enabled/disabled, this is not necessary\n        // required, but material requires update (re-compile) anyway to add/remove shader chunks.\n        const needsUpdate = setShaderDefine(\n            extrusionMaterial.shaderDefines,\n            \"EXTRUSION_MATERIAL\",\n            useExtrusion\n        );\n        // Enable/disable entire feature with material re-compile.\n        extrusionMaterial.needsUpdate = needsUpdate;\n\n        // Update uniform with new value\n        if (useExtrusion) {\n            extrusionMaterial.shaderUniforms!.extrusionRatio.value =\n                extrusionMaterial.extrusionRatio;\n        }\n        // Reset uniform to default, one time only, when feature is disabled (just for clarity).\n        else if (needsUpdate) {\n            extrusionMaterial.shaderUniforms!.extrusionRatio.value =\n                ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n        }\n    }\n\n    /**\n     * This function should be called on implementors of ExtrusionFeature in the `onBeforeCompile`\n     * callback of that material. It adds the required code to the shaders and declares the new\n     * uniforms that control extrusion.\n     *\n     * @param extrusionMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(extrusionMaterial: ExtrusionFeature, shader: THREE.Shader) {\n        if (!isEnabled(extrusionMaterial)) {\n            return;\n        }\n        assert(extrusionMaterial.shaderUniforms !== undefined);\n\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them. No defines are required to preprocess\n        // shader chunks, but we utilize one just to note the feature is enabled/disabled\n        // (easier debugging), this define may be easily stripped out or replaced with simple\n        // boolean flag.\n        linkMixinWithShader(extrusionMaterial, shader);\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"common\",\n            \"extrusion_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"begin_vertex\",\n            \"extrusion_vertex\",\n            true\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_pars_fragment\",\n            \"extrusion_pars_fragment\"\n        );\n\n        shader.fragmentShader = shader.fragmentShader.replace(\n            \"#include <normal_fragment_begin>\",\n            \"#include <extrusion_normal_fragment_begin>\"\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_fragment\",\n            \"extrusion_fragment\",\n            true\n        );\n    }\n}\n\n/**\n * Mixin class for extended THREE materials. Adds new properties required for `extrusionRatio`.\n *\n * There is some special handling for the extrusionRatio property, which is animated via\n * [[AnimatedExtrusionHandler]] that is using [[extrusionRatio]] setter and getter to update\n * extrusion in a way that works well with the mixin and EdgeMaterial.\n */\nexport class ExtrusionFeatureMixin implements ExtrusionFeature {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    defines?: any;\n    shaderDefines?: any;\n    shaderUniforms?: UniformsType;\n    onBeforeCompile?: CompileCallback;\n    private m_extrusion: number = ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n\n    /**\n     * @see [[ExtrusionFeature#extrusion]]\n     */\n    protected getExtrusionRatio(): number {\n        return this.m_extrusion;\n    }\n    /**\n     * @see [[ExtrusionFeature#extrusion]]\n     */\n    protected setExtrusionRatio(value: number) {\n        const needsUpdate = value !== this.m_extrusion;\n        if (needsUpdate) {\n            this.m_extrusion = value;\n            ExtrusionFeature.updateExtrusionFeature(this);\n        }\n    }\n\n    /**\n     * The mixin class should call this method to register the property [[extrusionRatio]]\n     */\n    protected addExtrusionProperties(): void {\n        Object.defineProperty(this, \"extrusionRatio\", {\n            get: () => {\n                return this.getExtrusionRatio();\n            },\n            set: val => {\n                this.setExtrusionRatio(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the extrusionRatio value from the parameters to the respective properties.\n     */\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // Prepare maps for holding uniforms and defines references from the actual material.\n        linkMixinWithMaterial(this, this);\n\n        assert(this.shaderDefines !== undefined);\n        assert(this.shaderUniforms !== undefined);\n\n        if (params && params.zFightingWorkaround === true) {\n            this.shaderDefines.ZFIGHTING_WORKAROUND = \"\";\n        }\n\n        // Create uniform with default value, this ensures that it is always created,\n        // so no need for checks in setters.\n        this.shaderUniforms!.extrusionRatio = new THREE.Uniform(\n            ExtrusionFeatureDefs.DEFAULT_RATIO_MAX\n        );\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.extrusionRatio !== undefined) {\n                this.setExtrusionRatio(params.extrusionRatio);\n            }\n        }\n\n        this.onBeforeCompile = chainCallbacks(this.onBeforeCompile, (shader: THREE.Shader) => {\n            ExtrusionFeature.onBeforeCompile(this, shader);\n        });\n\n        this.needsUpdate = ExtrusionFeature.isEnabled(this);\n    }\n\n    /**\n     * Copy extrusionRatio values from other ExtrusionFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyExtrusionParameters(source: ExtrusionFeature) {\n        if (source.extrusionRatio !== undefined) {\n            this.setExtrusionRatio(source.extrusionRatio);\n        }\n        return this;\n    }\n}\n\n/**\n * Subclass of [[THREE.MeshBasicMaterial]]. Adds new properties required for [[fadeNear]] and\n * [[fadeFar]]. In addition to the new properties (which update their respective uniforms), it is\n * also required to update the material in their objects [[onBeforeRender]] and [[OnAfterRender]]\n * calls, where their flag [[transparent]] is set and the internal fadeNear/fadeFar values are\n * updated to world space distances.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class MapMeshBasicMaterial extends THREE.MeshBasicMaterial\n    implements FadingFeature, ExtrusionFeature, DisplacementFeature {\n    /**\n     * Constructs a new `FadingMeshBasicMaterial`.\n     *\n     * @param params `FadingMeshBasicMaterial` parameters.\n     */\n    constructor(\n        params?: THREE.MeshBasicMaterialParameters &\n            FadingFeatureParameters &\n            ExtrusionFeatureParameters &\n            DisplacementFeatureParameters\n    ) {\n        super(params);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        this.addFadingProperties();\n        this.applyFadingParameters(params);\n\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        this.addExtrusionProperties();\n        this.applyExtrusionParameters({ ...params, zFightingWorkaround: true });\n\n        this.addDisplacementProperties();\n        this.applyDisplacementParameters(params);\n    }\n\n    clone(): this {\n        return new MapMeshBasicMaterial().copy(this);\n    }\n\n    copy(source: this): any {\n        super.copy(source);\n        this.copyFadingParameters(source);\n        this.copyExtrusionParameters(source);\n        this.copyDisplacementParameters(source);\n        return this;\n    }\n\n    // Only here to make the compiler happy, these methods will be overriden: The actual\n    // implementations are those in [[FadingFeatureMixin]] and [[ExtrusionFeatureMixin]], see below:\n    //\n    // applyMixinsWithoutProperties(FadingMeshBasicMaterial, [FadingFeatureMixin]);\n    // applyMixinsWithoutProperties(ExtrudionMeshBasicMaterial, [ExtrusionFeatureMixin]);\n    //\n    // Mixin declarations start ---------------------------------------------------------\n\n    get fadeNear(): number {\n        return FadingFeature.DEFAULT_FADE_NEAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeNear(value: number) {\n        // to be overridden\n    }\n\n    get fadeFar(): number {\n        return FadingFeature.DEFAULT_FADE_FAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeFar(value: number) {\n        // to be overridden\n    }\n\n    get extrusionRatio(): number {\n        return ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set extrusionRatio(value: number) {\n        // to be overridden\n    }\n\n    get displacementMap(): THREE.Texture | null {\n        return null;\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    set displacementMap(value: THREE.Texture | null) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    setDisplacementMap(value: THREE.Texture | null) {\n        // to be overridden\n    }\n\n    protected addFadingProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyFadingParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addExtrusionProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyExtrusionParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addDisplacementProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyDisplacementParameters(params?: DisplacementFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyDisplacementParameters(source: DisplacementFeature) {\n        // to be overridden\n    }\n    // Mixin declarations end -----------------------------------------------------------\n}\n\nexport class MapMeshDepthMaterial extends THREE.MeshDepthMaterial implements ExtrusionFeature {\n    constructor(params?: THREE.MeshDepthMaterialParameters & ExtrusionFeatureParameters) {\n        super(params);\n\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        this.addExtrusionProperties();\n        this.applyExtrusionParameters({ ...params, zFightingWorkaround: true });\n    }\n\n    // Only here to make the compiler happy, these methods will be overriden: The actual\n    // implementations are those in[[ExtrusionFeatureMixin]], see below:\n    //\n    // applyMixinsWithoutProperties(...);\n    //\n\n    // Mixin declarations start ---------------------------------------------------------\n    get extrusionRatio(): number {\n        return ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set extrusionRatio(value: number) {\n        // to be overridden\n    }\n\n    protected addExtrusionProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyExtrusionParameters(source: FadingFeature) {\n        // to be overridden\n    }\n    // Mixin declarations end -----------------------------------------------------------\n}\n\n/**\n * Subclass of THREE.MeshStandardMaterial. Adds new properties required for `fadeNear` and\n * `fadeFar`. In addition to the new properties (which fill respective uniforms), it is also\n * required to update the material in their objects `onBeforeRender` and `OnAfterRender` calls,\n * where their flag `transparent` is set and the internal fadeNear/fadeFar values are updated to\n * world space distances.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class MapMeshStandardMaterial extends THREE.MeshStandardMaterial\n    implements FadingFeature, ExtrusionFeature, DisplacementFeature {\n    uniformsNeedUpdate?: boolean;\n\n    /**\n     * Constructs a new `FadingMeshStandardMaterial`.\n     *\n     * @param params `FadingMeshStandardMaterial` parameters.\n     */\n    constructor(\n        params?: THREE.MeshStandardMaterialParameters &\n            FadingFeatureParameters &\n            ExtrusionFeatureParameters\n    ) {\n        super(params);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        this.addFadingProperties();\n        this.applyFadingParameters(params);\n\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        this.addExtrusionProperties();\n        this.applyExtrusionParameters({ ...params, zFightingWorkaround: true });\n    }\n\n    clone(): this {\n        return new MapMeshStandardMaterial().copy(this);\n    }\n\n    copy(source: this): any {\n        super.copy(source);\n        this.copyFadingParameters(source);\n        this.copyExtrusionParameters(source);\n        return this;\n    }\n\n    /** @override */\n    get displacementMap(): THREE.Texture | null {\n        return super.displacementMap === undefined ? null : super.displacementMap;\n    }\n\n    /** @override */\n    set displacementMap(map: THREE.Texture | null) {\n        if (map === this.displacementMap) {\n            return;\n        }\n\n        if (!map || !this.displacementMap) {\n            this.needsUpdate = true;\n        }\n\n        if (map) {\n            map.needsUpdate = true;\n        }\n        super.displacementMap = map;\n    }\n\n    // Only here to make the compiler happy, these methods will be overriden: The actual\n    // implementations are those in [[FadingFeatureMixin]] and [[ExtrusionFeatureMixin]], see below:\n    //\n    // applyMixinsWithoutProperties(FadingMeshBasicMaterial, [FadingFeatureMixin]);\n    // applyMixinsWithoutProperties(ExtrudionMeshBasicMaterial, [ExtrusionFeatureMixin]);\n    //\n    // Mixin declarations start ---------------------------------------------------------\n\n    get fadeNear(): number {\n        return FadingFeature.DEFAULT_FADE_NEAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeNear(value: number) {\n        // to be overridden\n    }\n\n    get fadeFar(): number {\n        return FadingFeature.DEFAULT_FADE_FAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeFar(value: number) {\n        // to be overridden\n    }\n\n    get extrusionRatio(): number {\n        return ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set extrusionRatio(value: number) {\n        // to be overridden\n    }\n\n    protected addFadingProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyFadingParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addExtrusionProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyExtrusionParameters(source: FadingFeature) {\n        // to be overridden\n    }\n    // Mixin declarations end -----------------------------------------------------------\n}\n\n/**\n * Finish the classes MapMeshBasicMaterial and MapMeshStandardMaterial by assigning them the actual\n * implementations of the mixed in functions.\n */\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [FadingFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshStandardMaterial, [FadingFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [ExtrusionFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshStandardMaterial, [ExtrusionFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshDepthMaterial, [ExtrusionFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [DisplacementFeatureMixin]);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Lists supported line caps types/modes.\n */\nexport enum LineCapsModes {\n    CAPS_NONE = 0,\n    CAPS_SQUARE,\n    CAPS_ROUND,\n    CAPS_TRIANGLE_IN,\n    CAPS_TRIANGLE_OUT\n}\n\nexport default {\n    extrude_line_vert_func: `\nvec3 extrudeLine(\n        in vec3 vertexPosition,\n        in float linePosition,\n        in float extrusionWidth,\n        in vec4 bitangent,\n        in vec3 tangent,\n        inout vec2 uv\n    ) {\n    vec3 result = vertexPosition;\n    // Retrieve the angle between this segment and the previous one (stored in the bitangent w\n    // component).\n    float angle = bitangent.w;\n    // Extrude according to the angle between segments to properly render narrow joints...\n    if (angle != 0.0) {\n        result += uv.y * extrusionWidth * bitangent.xyz / cos(angle / 2.0);\n        uv.x = linePosition + uv.x * extrusionWidth * uv.y * tan(angle / 2.0);\n    }\n    // ... or extrude in a simple manner for segments that keep the same direction.\n    else {\n        result += uv.y * extrusionWidth * bitangent.xyz + uv.x * extrusionWidth * tangent;\n        uv.x = linePosition + uv.x * extrusionWidth;\n    }\n    uv.y *= extrusionWidth;\n    return result;\n}\n`,\n    round_edges_and_add_caps: `\n#define CAPS_NONE ${LineCapsModes.CAPS_NONE}\n#define CAPS_SQUARE ${LineCapsModes.CAPS_SQUARE}\n#define CAPS_ROUND ${LineCapsModes.CAPS_ROUND}\n#define CAPS_TRIANGLE_IN ${LineCapsModes.CAPS_TRIANGLE_IN}\n#define CAPS_TRIANGLE_OUT ${LineCapsModes.CAPS_TRIANGLE_OUT}\n\nfloat roundEdgesAndAddCaps(in vec4 coords, in vec3 range) {\n    // Compute the line's width to length ratio.\n    float widthRatio = range.y / range.x;\n\n    // Compute the inner segment distance (same for all cap mode).\n    float dist = abs(coords.y);\n    float segmentBeginMask = clamp(ceil(coords.z - coords.x), 0.0, 1.0);\n    float segmentEndMask = clamp(ceil(coords.x - coords.w), 0.0, 1.0);\n    dist = max(dist, segmentBeginMask * length(vec2((coords.x - coords.z) / widthRatio, coords.y)));\n    dist = max(dist, segmentEndMask * length(vec2((coords.x - coords.w) / widthRatio, coords.y)));\n\n    #if CAPS_MODE != CAPS_ROUND\n    // Compute the caps mask.\n    float capRangeMask = clamp(1.0 - ceil(range.z - drawRange.y), 0.0, 1.0);\n    float beginCapMask = clamp(ceil(drawRange.x - coords.x), 0.0, 1.0);\n    float endCapMask = clamp(ceil(coords.x - drawRange.y), 0.0, 1.0);\n    float capMask = capRangeMask * max(beginCapMask, endCapMask);\n\n    // Compute the outer segment distance (specific for each cap mode).\n    float capDist = max(coords.x - drawRange.y, drawRange.x - coords.x) / widthRatio;\n    #if CAPS_MODE == CAPS_NONE\n    dist = mix(dist, max(abs(coords.y), (capDist + 0.1) / 0.1), capMask);\n    #elif CAPS_MODE == CAPS_SQUARE\n    dist = mix(dist, max(abs(coords.y), capDist), capMask);\n    #elif CAPS_MODE == CAPS_TRIANGLE_OUT\n    dist = mix(dist, abs(coords.y) + capDist, capMask);\n    #elif CAPS_MODE == CAPS_TRIANGLE_IN\n    dist = mix(dist, max(abs(coords.y), (capDist - abs(coords.y)) + capDist), capMask);\n    #endif\n    #endif // CAPS_MODE != CAPS_ROUND\n\n    return dist;\n}\n`,\n    tile_clip_func: `\nvoid tileClip(vec2 tilePos, vec2 tileSize) {\n    if (tileSize.x > 0.0 && (tilePos.x < -tileSize.x / 2.0 || tilePos.x > tileSize.x / 2.0))\n        discard;\n    if (tileSize.y > 0.0 && (tilePos.y < -tileSize.y / 2.0 || tilePos.y > tileSize.y / 2.0))\n        discard;\n}\n`,\n    high_precision_vert_func: `\nvec3 subtractDblEyePos( const in vec3 pos ) {\n    vec3 t1 = positionLow - u_eyepos_lowpart;\n    vec3 e = t1 - positionLow;\n    vec3 t2 = ((-u_eyepos_lowpart - e) + (positionLow - (t1 - e))) + pos - u_eyepos;\n    vec3 high_delta = t1 + t2;\n    vec3 low_delta = t2 - (high_delta - t1);\n    return (high_delta + low_delta);\n}\n`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { assert } from \"@here/harp-utils\";\nimport { Color } from \"three\";\nimport { ColorUtils } from \"./ColorUtils\";\n\nconst tmpColor = new Color();\n\n/**\n * Enumeration of supported string encoded numerals.\n */\nexport enum StringEncodedNumeralType {\n    Meters,\n    Pixels,\n    Hex,\n    RGB,\n    RGBA,\n    HSL\n}\n\n/**\n * Interface containing information about a [[StringEncodedNumeral]] format, component size and\n * evaluation.\n */\nexport interface StringEncodedNumeralFormat {\n    readonly type: StringEncodedNumeralType;\n    readonly size: number;\n    readonly regExp: RegExp;\n    mask?: number;\n    decoder: (encodedValue: string, target: number[]) => boolean;\n}\nconst StringEncodedMeters: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Meters,\n    size: 1,\n    regExp: /^((?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))m$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedMeters.regExp.exec(encodedValue);\n        return match ? (target[0] = Number(match[1])) !== undefined : false;\n    }\n};\nconst StringEncodedPixels: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Pixels,\n    size: 1,\n    mask: 1.0,\n    regExp: /^((?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))px$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedPixels.regExp.exec(encodedValue);\n        if (match === null) {\n            return false;\n        }\n        target[0] = Number(match[1]);\n        return true;\n    }\n};\nconst StringEncodedHex: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Hex,\n    size: 4,\n    regExp: /^\\#((?:[0-9A-Fa-f][0-9A-Fa-f]){3,4}|[0-9A-Fa-f]{3,4})$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedHex.regExp.exec(encodedValue);\n        if (match === null) {\n            return false;\n        }\n        const hex = match[1];\n        const size = hex.length;\n        // Only few sizes are possible for given reg-exp.\n        assert(\n            size === 3 || size === 4 || size === 6 || size === 8,\n            `Matched incorrect hex color format`\n        );\n        // Note that we simply ignore alpha channel value.\n        // TODO: To be resolved with HARP-7517\n        if (size === 3 || size === 4) {\n            // #RGB or #RGBA\n            target[0] = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n            target[1] = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n            target[2] = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n            target[3] = size === 4 ? parseInt(hex.charAt(3) + hex.charAt(3), 16) / 255 : 1;\n        } else if (size === 6 || size === 8) {\n            // #RRGGBB or #RRGGBBAA\n            target[0] = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n            target[1] = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n            target[2] = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n            target[3] = size === 8 ? parseInt(hex.charAt(6) + hex.charAt(7), 16) / 255 : 1;\n        }\n        return true;\n    }\n};\nconst StringEncodedRGB: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.RGB,\n    size: 3,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^rgb\\( ?(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedRGB.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        target[0] = parseInt(channels[1], 10) / 255;\n        target[1] = parseInt(channels[2], 10) / 255;\n        target[2] = parseInt(channels[3], 10) / 255;\n        return true;\n    }\n};\nconst StringEncodedRGBA: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.RGBA,\n    size: 4,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^rgba\\( ?(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:(0(?:\\.[0-9]+)?|1(?:\\.0+)?)) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedRGBA.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        target[0] = parseInt(channels[1], 10) / 255;\n        target[1] = parseInt(channels[2], 10) / 255;\n        target[2] = parseInt(channels[3], 10) / 255;\n        target[3] = parseFloat(channels[4]);\n        return true;\n    }\n};\nconst StringEncodedHSL: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.HSL,\n    size: 3,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^hsl\\( ?((?:[0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-9]{1,2}|3[0-5][0-9]|360)), ?(?:([0-9]|[1-9][0-9]|100)%), ?(?:([0-9]|[1-9][0-9]|100)%) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedHSL.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        tmpColor.setHSL(\n            parseInt(channels[1], 10) / 360,\n            parseInt(channels[2], 10) / 100,\n            parseInt(channels[3], 10) / 100\n        );\n        target[0] = tmpColor.r;\n        target[1] = tmpColor.g;\n        target[2] = tmpColor.b;\n        return true;\n    }\n};\n\n/**\n * Array of all supported [[StringEncodedNumeralFormat]]s describing sizes, lengths and distances.\n */\nexport const StringEncodedMetricFormats: StringEncodedNumeralFormat[] = [\n    StringEncodedMeters,\n    StringEncodedPixels\n];\n\nconst StringEncodedMetricFormatMaxSize = StringEncodedMetricFormats.reduce(\n    (a, b) => Math.max(a, b.size),\n    0\n);\n\n/**\n * Array of all supported [[StringEncodedNumeralFormat]]s describing color data.\n */\nexport const StringEncodedColorFormats: StringEncodedNumeralFormat[] = [\n    StringEncodedHex,\n    StringEncodedRGB,\n    StringEncodedRGBA,\n    StringEncodedHSL\n];\n\nconst StringEncodedColorFormatMaxSize = StringEncodedColorFormats.reduce(\n    (a, b) => Math.max(a, b.size),\n    0\n);\n\n/**\n * Array of supported [[StringEncodedNumeralFormat]]s (intended to be indexed with\n * [[StringEncodedNumeralType]] enum).\n */\nexport const StringEncodedNumeralFormats: StringEncodedNumeralFormat[] = [\n    ...StringEncodedMetricFormats,\n    ...StringEncodedColorFormats\n];\n\nexport const StringEncodedNumeralFormatMaxSize = Math.max(\n    StringEncodedColorFormatMaxSize,\n    StringEncodedMetricFormatMaxSize\n);\n\nconst tmpBuffer: number[] = new Array(StringEncodedNumeralFormatMaxSize);\n\n/**\n * Parse string encoded numeral values using all known [[StringEncodedNumeralFormats]].\n *\n * @param numeral The string representing numeric value.\n * @param pixelToMeters The ratio used to convert from meters to pixels (default 1.0).\n * @returns Number parsed or __undefined__ if non of the numeral patterns matches the expression\n * provided in [[numeral]].\n */\nexport function parseStringEncodedNumeral(\n    numeral: string,\n    pixelToMeters: number = 1.0\n): number | undefined {\n    let result: number | undefined;\n    const formatMatch = (format: StringEncodedNumeralFormat) => {\n        if (format.decoder(numeral, tmpBuffer)) {\n            switch (format.type) {\n                case StringEncodedNumeralType.Meters:\n                    result = tmpBuffer[0];\n                    break;\n                case StringEncodedNumeralType.Pixels:\n                    result = tmpBuffer[0] * pixelToMeters;\n                    break;\n                case StringEncodedNumeralType.Hex:\n                case StringEncodedNumeralType.RGBA:\n                    result = ColorUtils.getHexFromRgba(\n                        tmpBuffer[0],\n                        tmpBuffer[1],\n                        tmpBuffer[2],\n                        tmpBuffer[3]\n                    );\n                    break;\n                case StringEncodedNumeralType.RGB:\n                case StringEncodedNumeralType.HSL:\n                    result = ColorUtils.getHexFromRgb(tmpBuffer[0], tmpBuffer[1], tmpBuffer[2]);\n                    break;\n                default:\n                    result = tmpBuffer[0];\n                    break;\n            }\n            return true;\n        }\n        return false;\n    };\n    StringEncodedNumeralFormats.some(formatMatch);\n    return result;\n}\n\n/**\n * Parse string encoded color value using all known [[StringEncodedColorFormats]].\n *\n * @param color The string encoded color expression (i.e. '#FFF', 'rgb(255, 0, 0)', etc.).\n * @returns The color parsed or __undefined__ if non of the known representations matches\n * the expression provided in [[color]].\n */\nexport function parseStringEncodedColor(color: string): number | undefined {\n    const matchedFormat = matchFormat(StringEncodedColorFormats, color, tmpBuffer);\n    if (matchedFormat === undefined) {\n        return undefined;\n    }\n    switch (matchedFormat.type) {\n        case StringEncodedNumeralType.Hex:\n        case StringEncodedNumeralType.RGBA:\n            return ColorUtils.getHexFromRgba(\n                tmpBuffer[0],\n                tmpBuffer[1],\n                tmpBuffer[2],\n                tmpBuffer[3]\n            );\n        case StringEncodedNumeralType.RGB:\n        case StringEncodedNumeralType.HSL:\n            return ColorUtils.getHexFromRgb(tmpBuffer[0], tmpBuffer[1], tmpBuffer[2]);\n        default:\n            return tmpBuffer[0];\n    }\n}\n\nfunction matchFormat(\n    formats: StringEncodedNumeralFormat[],\n    numeral: string,\n    result: number[]\n): StringEncodedNumeralFormat | undefined {\n    return formats.find(format => {\n        return format.decoder(numeral, result) ? true : false;\n    });\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BaseTechniqueParams,\n    BasicExtrudedLineTechniqueParams,\n    ExtrudedPolygonTechniqueParams,\n    FillTechniqueParams,\n    isTextureBuffer,\n    LineTechniqueParams,\n    MarkerTechniqueParams,\n    PointTechniqueParams,\n    PolygonalTechniqueParams,\n    SegmentsTechniqueParams,\n    ShaderTechniqueParams,\n    SolidLineTechniqueParams,\n    StandardExtrudedLineTechniqueParams,\n    StandardTechniqueParams,\n    TerrainTechniqueParams,\n    TextTechniqueParams,\n    TextureCoordinateType\n} from \"./TechniqueParams\";\n\nimport { Expr, JsonExpr } from \"./Expr\";\nimport { InterpolatedPropertyDefinition } from \"./InterpolatedPropertyDefs\";\nimport {\n    AttrScope,\n    mergeTechniqueDescriptor,\n    TechniqueDescriptor,\n    TechniqueDescriptorRegistry\n} from \"./TechniqueDescriptor\";\n/**\n * Names of the supported texture properties.\n */\nexport const TEXTURE_PROPERTY_KEYS = [\n    \"map\",\n    \"normalMap\",\n    \"displacementMap\",\n    \"roughnessMap\",\n    \"emissiveMap\",\n    \"alphaMap\",\n    \"metalnessMap\",\n    \"bumpMap\"\n];\n\n/**\n * Names of the properties controlling transparency.\n */\nexport const TRANSPARENCY_PROPERTY_KEYS = [\"opacity\", \"transparent\"];\n\n// TODO: Can be removed, when all when interpolators are implemented as [[Expr]]s\nexport type RemoveInterpolatedPropDef<T> = T | InterpolatedPropertyDefinition<any> extends T\n    ? Exclude<T, InterpolatedPropertyDefinition<any>>\n    : T;\nexport type RemoveJsonExpr<T> = T | JsonExpr extends T ? Exclude<T, JsonExpr> : T;\n\n/**\n * Make runtime representation of technique attributes from JSON-compatible typings.\n *\n * Translates\n *  - InterpolatedPropertyDefinition -> InterpolatedProperty\n *  - JsonExpr -> Expr\n */\nexport type MakeTechniqueAttrs<T> = {\n    [P in keyof T]: T[P] | JsonExpr extends T[P]\n        ? RemoveInterpolatedPropDef<RemoveJsonExpr<T[P]>> | Expr\n        : T[P];\n};\n\nexport const techniqueDescriptors: TechniqueDescriptorRegistry = {};\n\nexport const baseTechniqueParamsDescriptor: TechniqueDescriptor<BaseTechniqueParams> = {\n    // TODO: Choose which techniques should support color with transparency.\n    // For now we chosen all, but it maybe not suitable for text or line marker techniques.\n    attrTransparencyColor: \"color\",\n    attrScopes: {\n        renderOrder: AttrScope.TechniqueGeometry,\n        enabled: AttrScope.FeatureGeometry,\n        kind: AttrScope.TechniqueGeometry,\n        transient: AttrScope.TechniqueGeometry,\n        fadeFar: AttrScope.TechniqueRendering,\n        fadeNear: AttrScope.TechniqueRendering\n    }\n};\n\nexport const pointTechniquePropTypes = mergeTechniqueDescriptor<PointTechniqueParams>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            texture: AttrScope.TechniqueGeometry,\n            enablePicking: AttrScope.TechniqueGeometry,\n            color: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueGeometry\n        }\n    }\n);\n\n/**\n * Runtime representation of [[SquaresStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[PointTechniqueParams]].\n */\nexport interface SquaresTechnique extends MakeTechniqueAttrs<PointTechniqueParams> {\n    name: \"squares\";\n}\n\nexport const squaresTechniquePropTypes = mergeTechniqueDescriptor<SquaresTechnique>(\n    baseTechniqueParamsDescriptor,\n    pointTechniquePropTypes\n);\ntechniqueDescriptors.squares = squaresTechniquePropTypes;\n\n/**\n * Runtime representation of [[CirclesStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[PointTechniqueParams]].\n */\nexport interface CirclesTechnique extends MakeTechniqueAttrs<PointTechniqueParams> {\n    name: \"circles\";\n}\n\nexport const circlesTechniquePropTypes = mergeTechniqueDescriptor<CirclesTechnique>(\n    baseTechniqueParamsDescriptor,\n    pointTechniquePropTypes\n);\ntechniqueDescriptors.circles = circlesTechniquePropTypes;\n\n/**\n * Runtime representation of [[PoiStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[MarkerTechniqueParams]].\n */\nexport interface PoiTechnique extends MakeTechniqueAttrs<MarkerTechniqueParams> {\n    name: \"labeled-icon\";\n}\n\n/**\n * Runtime representation of [[LineMarkerStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[MarkerTechniqueParams]].\n */\nexport interface LineMarkerTechnique extends MakeTechniqueAttrs<MarkerTechniqueParams> {\n    name: \"line-marker\";\n}\n\nconst lineMarkerTechniquePropTypes = mergeTechniqueDescriptor<LineMarkerTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            text: AttrScope.FeatureGeometry,\n            label: AttrScope.FeatureGeometry,\n            useAbbreviation: AttrScope.FeatureGeometry,\n            useIsoCode: AttrScope.FeatureGeometry,\n            priority: AttrScope.TechniqueGeometry,\n            textMinZoomLevel: AttrScope.TechniqueGeometry,\n            textMaxZoomLevel: AttrScope.TechniqueGeometry,\n            iconMinZoomLevel: AttrScope.TechniqueGeometry,\n            iconMaxZoomLevel: AttrScope.TechniqueGeometry,\n            distanceScale: AttrScope.TechniqueGeometry,\n            textMayOverlap: AttrScope.TechniqueGeometry,\n            iconMayOverlap: AttrScope.TechniqueGeometry,\n            textReserveSpace: AttrScope.TechniqueGeometry,\n            iconReserveSpace: AttrScope.TechniqueGeometry,\n            renderTextDuringMovements: AttrScope.TechniqueGeometry,\n            alwaysOnTop: AttrScope.TechniqueGeometry,\n            textIsOptional: AttrScope.TechniqueGeometry,\n            showOnMap: AttrScope.TechniqueGeometry,\n            stackMode: AttrScope.TechniqueGeometry,\n            minDistance: AttrScope.TechniqueGeometry,\n            iconIsOptional: AttrScope.TechniqueGeometry,\n            iconFadeTime: AttrScope.TechniqueGeometry,\n            textFadeTime: AttrScope.TechniqueGeometry,\n            xOffset: AttrScope.TechniqueGeometry,\n            yOffset: AttrScope.TechniqueGeometry,\n            iconXOffset: AttrScope.TechniqueGeometry,\n            iconYOffset: AttrScope.TechniqueGeometry,\n            iconScale: AttrScope.TechniqueGeometry,\n            screenHeight: AttrScope.TechniqueGeometry,\n            screenWidth: AttrScope.TechniqueGeometry,\n            poiTable: AttrScope.TechniqueGeometry,\n            poiName: AttrScope.FeatureGeometry,\n            poiNameField: AttrScope.TechniqueGeometry,\n            imageTexture: AttrScope.FeatureGeometry,\n            imageTextureField: AttrScope.TechniqueGeometry,\n            imageTexturePrefix: AttrScope.TechniqueGeometry,\n            imageTexturePostfix: AttrScope.TechniqueGeometry,\n            style: AttrScope.TechniqueGeometry,\n            fontName: AttrScope.TechniqueGeometry,\n            fontStyle: AttrScope.TechniqueGeometry,\n            fontVariant: AttrScope.TechniqueGeometry,\n            rotation: AttrScope.TechniqueGeometry,\n            tracking: AttrScope.TechniqueGeometry,\n            leading: AttrScope.TechniqueGeometry,\n            maxLines: AttrScope.TechniqueGeometry,\n            lineWidth: AttrScope.TechniqueGeometry,\n            canvasRotation: AttrScope.TechniqueGeometry,\n            lineRotation: AttrScope.TechniqueGeometry,\n            wrappingMode: AttrScope.TechniqueGeometry,\n            hAlignment: AttrScope.TechniqueGeometry,\n            vAlignment: AttrScope.TechniqueGeometry,\n            backgroundColor: AttrScope.TechniqueRendering,\n            backgroundSize: AttrScope.TechniqueRendering,\n            backgroundOpacity: AttrScope.TechniqueRendering,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            size: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"line-marker\"] = lineMarkerTechniquePropTypes;\ntechniqueDescriptors[\"labeled-icon\"] = lineMarkerTechniquePropTypes;\n\n/**\n * Runtime representation of [[SegmentsStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[SegmentsTechniqueParams]].\n */\nexport interface SegmentsTechnique extends MakeTechniqueAttrs<SegmentsTechniqueParams> {\n    name: \"segments\";\n}\n\nconst polygonalTechniqueDescriptor: TechniqueDescriptor<PolygonalTechniqueParams> = {\n    attrScopes: {\n        polygonOffset: AttrScope.TechniqueRendering,\n        polygonOffsetFactor: AttrScope.TechniqueRendering,\n        polygonOffsetUnits: AttrScope.TechniqueRendering,\n        lineColor: AttrScope.TechniqueRendering,\n        lineFadeFar: AttrScope.TechniqueRendering,\n        lineFadeNear: AttrScope.TechniqueRendering\n    }\n};\n/**\n * Runtime representation of [[BasicExtrudedLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[BasicExtrudedLineTechniqueParams]].\n */\nexport interface BasicExtrudedLineTechnique\n    extends MakeTechniqueAttrs<BasicExtrudedLineTechniqueParams> {\n    name: \"extruded-line\";\n}\n\n/**\n * Runtime representation of [[StandardExtrudedLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[StandardExtrudedLineTechniqueParams]].\n */\nexport interface StandardExtrudedLineTechnique\n    extends MakeTechniqueAttrs<StandardExtrudedLineTechniqueParams> {\n    name: \"extruded-line\";\n}\n\n/**\n * Runtime representation of [[SolidLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[SolidLineTechniqueParams]].\n */\nexport interface SolidLineTechnique extends MakeTechniqueAttrs<SolidLineTechniqueParams> {\n    name: \"solid-line\" | \"dashed-line\";\n}\n\nexport const solidLineTechniqueDescriptor = mergeTechniqueDescriptor<SolidLineTechnique>(\n    baseTechniqueParamsDescriptor,\n    polygonalTechniqueDescriptor,\n    {\n        attrScopes: {\n            clipping: AttrScope.TechniqueGeometry,\n            secondaryRenderOrder: AttrScope.TechniqueGeometry,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering,\n            secondaryWidth: AttrScope.TechniqueRendering,\n            secondaryColor: AttrScope.TechniqueRendering,\n            dashSize: AttrScope.TechniqueRendering,\n            gapSize: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"solid-line\"] = solidLineTechniqueDescriptor;\n// TODO: Remove deprecated \"dashed-line\" support in future releases.\ntechniqueDescriptors[\"dashed-line\"] = solidLineTechniqueDescriptor;\n\n/**\n * Runtime representation of [[LineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[LineTechniqueParams]].\n */\nexport interface LineTechnique extends MakeTechniqueAttrs<LineTechniqueParams> {\n    name: \"line\";\n}\n\nexport const lineTechniqueDescriptor = mergeTechniqueDescriptor<LineTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            // TODO, check, which are really dynamic !\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.FeatureGeometry\n        }\n    }\n);\n\ntechniqueDescriptors.line = lineTechniqueDescriptor;\n\n/**\n * Runtime representation of [[FillStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[FillTechniqueParams]].\n */\nexport interface FillTechnique extends MakeTechniqueAttrs<FillTechniqueParams> {\n    name: \"fill\";\n}\n\nconst fillTechniqueDescriptor = mergeTechniqueDescriptor<FillTechnique>(\n    baseTechniqueParamsDescriptor,\n    polygonalTechniqueDescriptor,\n    {\n        attrScopes: {\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors.fill = fillTechniqueDescriptor;\n\n/**\n * Technique used to render a mesh geometry.\n * For technique parameters see [[StandardTechniqueParams]].\n */\nexport interface StandardTechnique extends MakeTechniqueAttrs<StandardTechniqueParams> {\n    name: \"standard\";\n}\nconst standardTechniqueDescriptor = mergeTechniqueDescriptor<StandardTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            color: AttrScope.FeatureGeometry,\n            vertexColors: AttrScope.FeatureGeometry,\n            wireframe: AttrScope.TechniqueRendering,\n            roughness: AttrScope.TechniqueRendering,\n            metalness: AttrScope.TechniqueRendering,\n            alphaTest: AttrScope.TechniqueRendering,\n            depthTest: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            emissive: AttrScope.TechniqueRendering,\n            emissiveIntensity: AttrScope.TechniqueRendering,\n            refractionRatio: AttrScope.TechniqueRendering,\n            map: AttrScope.TechniqueGeometry,\n            mapProperties: AttrScope.TechniqueGeometry,\n            normalMap: AttrScope.TechniqueGeometry,\n            normalMapProperties: AttrScope.TechniqueGeometry,\n            displacementMap: AttrScope.TechniqueGeometry,\n            displacementMapProperties: AttrScope.TechniqueGeometry,\n            roughnessMap: AttrScope.TechniqueGeometry,\n            roughnessMapProperties: AttrScope.TechniqueGeometry,\n            emissiveMap: AttrScope.TechniqueGeometry,\n            emissiveMapProperties: AttrScope.TechniqueGeometry,\n            bumpMap: AttrScope.TechniqueGeometry,\n            bumpMapProperties: AttrScope.TechniqueGeometry,\n            metalnessMap: AttrScope.TechniqueGeometry,\n            metalnessMapProperties: AttrScope.TechniqueGeometry,\n            alphaMap: AttrScope.TechniqueGeometry,\n            alphaMapProperties: AttrScope.TechniqueGeometry\n        }\n    }\n);\ntechniqueDescriptors.standard = standardTechniqueDescriptor;\n\n/**\n * Runtime representation of [[ExtrudedPolygonStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[ExtrudedPolygonTechniqueParams]].\n */\nexport interface ExtrudedPolygonTechnique\n    extends MakeTechniqueAttrs<ExtrudedPolygonTechniqueParams> {\n    name: \"extruded-polygon\";\n}\n\nconst extrudedPolygonTechniqueDescriptor = mergeTechniqueDescriptor<ExtrudedPolygonTechnique>(\n    baseTechniqueParamsDescriptor,\n    standardTechniqueDescriptor,\n    {\n        attrScopes: {\n            height: AttrScope.FeatureGeometry,\n            floorHeight: AttrScope.FeatureGeometry,\n            color: AttrScope.FeatureGeometry,\n            defaultColor: AttrScope.FeatureGeometry,\n            defaultHeight: AttrScope.FeatureGeometry,\n            constantHeight: AttrScope.FeatureGeometry,\n            boundaryWalls: AttrScope.FeatureGeometry,\n            footprint: AttrScope.FeatureGeometry,\n            maxSlope: AttrScope.FeatureGeometry,\n            enableDepthPrePass: AttrScope.TechniqueGeometry,\n            animateExtrusionDuration: AttrScope.TechniqueGeometry,\n            animateExtrusion: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering,\n            lineFadeNear: AttrScope.TechniqueRendering,\n            lineFadeFar: AttrScope.TechniqueRendering,\n            lineColorMix: AttrScope.TechniqueGeometry,\n            lineColor: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"extruded-polygon\"] = extrudedPolygonTechniqueDescriptor;\n/**\n * Runtime representation of [[TextStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[TextTechniqueParams]].\n */\nexport interface TextTechnique extends MakeTechniqueAttrs<TextTechniqueParams> {\n    name: \"text\";\n}\n\nconst textTechniqueDescriptor = mergeTechniqueDescriptor<TextTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            text: AttrScope.FeatureGeometry,\n            label: AttrScope.FeatureGeometry,\n            useAbbreviation: AttrScope.FeatureGeometry,\n            useIsoCode: AttrScope.FeatureGeometry,\n\n            minZoomLevel: AttrScope.TechniqueGeometry,\n            maxZoomLevel: AttrScope.TechniqueGeometry,\n            distanceScale: AttrScope.TechniqueGeometry,\n            mayOverlap: AttrScope.TechniqueGeometry,\n            reserveSpace: AttrScope.TechniqueGeometry,\n            textFadeTime: AttrScope.TechniqueGeometry,\n            xOffset: AttrScope.TechniqueGeometry,\n            yOffset: AttrScope.TechniqueGeometry,\n            style: AttrScope.TechniqueGeometry,\n            fontName: AttrScope.TechniqueGeometry,\n            fontStyle: AttrScope.TechniqueGeometry,\n            fontVariant: AttrScope.TechniqueGeometry,\n            rotation: AttrScope.TechniqueGeometry,\n            tracking: AttrScope.TechniqueGeometry,\n            leading: AttrScope.TechniqueGeometry,\n            maxLines: AttrScope.TechniqueGeometry,\n            lineWidth: AttrScope.TechniqueGeometry,\n            canvasRotation: AttrScope.TechniqueGeometry,\n            lineRotation: AttrScope.TechniqueGeometry,\n            wrappingMode: AttrScope.TechniqueGeometry,\n            hAlignment: AttrScope.TechniqueGeometry,\n            vAlignment: AttrScope.TechniqueGeometry,\n            backgroundColor: AttrScope.TechniqueRendering,\n            backgroundSize: AttrScope.TechniqueRendering,\n            backgroundOpacity: AttrScope.TechniqueRendering,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            priority: AttrScope.TechniqueRendering,\n            size: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors.text = textTechniqueDescriptor;\n\n/**\n * Special technique for user-defined shaders.\n * For technique parameters see [[ShaderTechniqueParams]].\n */\nexport interface ShaderTechnique extends MakeTechniqueAttrs<ShaderTechniqueParams> {\n    name: \"shader\";\n}\n\nconst shaderTechniqueDescriptor = mergeTechniqueDescriptor<ShaderTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            primitive: AttrScope.TechniqueGeometry,\n            params: AttrScope.TechniqueRendering\n        }\n    }\n);\n\ntechniqueDescriptors.shader = shaderTechniqueDescriptor;\n\n/**\n * Technique used to render a terrain geometry with textures.\n * For technique parameters see [[TerrainTechniqueParams]].\n */\nexport interface TerrainTechnique extends MakeTechniqueAttrs<TerrainTechniqueParams> {\n    name: \"terrain\";\n}\n\n/**\n * Technique to avoid label rendering on top of certain line geometries.\n * For technique parameters see [[BaseTechniqueParams]].\n */\nexport interface LabelRejectionLineTechnique extends MakeTechniqueAttrs<BaseTechniqueParams> {\n    name: \"label-rejection-line\";\n}\n\n/**\n * Possible techniques that can be used to draw a geometry on the map.\n */\nexport type Technique =\n    | SquaresTechnique\n    | CirclesTechnique\n    | PoiTechnique\n    | LineMarkerTechnique\n    | LineTechnique\n    | SegmentsTechnique\n    | SolidLineTechnique\n    | FillTechnique\n    | StandardTechnique\n    | TerrainTechnique\n    | BasicExtrudedLineTechnique\n    | StandardExtrudedLineTechnique\n    | ExtrudedPolygonTechnique\n    | ShaderTechnique\n    | TextTechnique\n    | LabelRejectionLineTechnique;\n\n/**\n * Additional params used for optimized usage of `Techniques`.\n */\nexport interface IndexedTechniqueParams {\n    /**\n     * Optimization: Index into table in [[StyleSetEvaluator]] or in [[DecodedTile]].\n     * @hidden\n     */\n    _index: number;\n\n    /**\n     * Optimization: Unique [[Technique]] index of [[Style]] from which technique was derived.\n     * @hidden\n     */\n    _styleSetIndex: number;\n\n    /**\n     * The styleSet associated to this [[Technique]].\n     * @hidden\n     */\n    _styleSet?: string;\n\n    /**\n     * The category used to assign render orders to objects created using this [[Technique]].\n     * @hidden\n     */\n    _category?: string;\n\n    /**\n     * The category used to assign render orders to secondary objects\n     * created using this [[Technique]].\n     * @hidden\n     */\n    _secondaryCategory?: string;\n\n    /**\n     * `true` if any of the properties of this technique needs to access\n     * the feature's state.\n     *\n     * @hidden\n     */\n    _usesFeatureState?: boolean;\n\n    /**\n     * Last computed state derived from [[Technique.kind]].\n     */\n    _kindState?: boolean;\n}\n\n/**\n * For efficiency, [[StyleSetEvaluator]] returns [[Techniques]] additional params as defined in\n * [[IndexedTechniqueParams]].\n */\nexport type IndexedTechnique = Technique & IndexedTechniqueParams;\n\n/**\n * Type guard to check if an object is an instance of [[CirclesTechnique]].\n */\nexport function isCirclesTechnique(technique: Technique): technique is CirclesTechnique {\n    return technique.name === \"circles\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SquaresTechnique]].\n */\nexport function isSquaresTechnique(technique: Technique): technique is SquaresTechnique {\n    return technique.name === \"squares\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[PoiTechnique]].\n */\nexport function isPoiTechnique(technique: Technique): technique is PoiTechnique {\n    return technique.name === \"labeled-icon\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[LineMarkerTechnique]].\n */\nexport function isLineMarkerTechnique(technique: Technique): technique is LineMarkerTechnique {\n    return technique.name === \"line-marker\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[LineTechnique]].\n */\nexport function isLineTechnique(technique: Technique): technique is LineTechnique {\n    return technique.name === \"line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SolidLineTechnique]].\n */\nexport function isSolidLineTechnique(technique: Technique): technique is SolidLineTechnique {\n    return technique.name === \"solid-line\" || technique.name === \"dashed-line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SolidLineTechnique]] and is a kind that\n * has special dashes.\n * @note Lines with special dashes need line caps to render properly.\n */\nexport function isSpecialDashesLineTechnique(\n    technique: Technique\n): technique is SolidLineTechnique {\n    return (\n        (technique.name === \"solid-line\" || technique.name === \"dashed-line\") &&\n        technique.dashes !== undefined &&\n        technique.dashes !== \"Square\"\n    );\n}\n\n/**\n * Type guard to check if an object is an instance of [[SegmentsTechnique]].\n */\nexport function isSegmentsTechnique(technique: Technique): technique is SegmentsTechnique {\n    return technique.name === \"segments\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[BasicExtrudedLineTechnique]]\n * or [[StandardExtrudedLineTechnique]].\n */\nexport function isExtrudedLineTechnique(\n    technique: Technique\n): technique is BasicExtrudedLineTechnique | StandardExtrudedLineTechnique {\n    return technique.name === \"extruded-line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[BasicExtrudedLineTechnique]].\n */\nexport function isBasicExtrudedLineTechnique(\n    technique: Technique\n): technique is BasicExtrudedLineTechnique {\n    return isExtrudedLineTechnique(technique) && technique.shading === \"basic\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[StandardExtrudedLineTechnique]].\n */\nexport function isStandardExtrudedLineTechnique(\n    technique: Technique\n): technique is StandardExtrudedLineTechnique {\n    return isExtrudedLineTechnique(technique) && technique.shading === \"standard\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[FillTechnique]].\n */\nexport function isFillTechnique(technique: Technique): technique is FillTechnique {\n    return technique.name === \"fill\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[ExtrudedPolygonTechnique]].\n */\nexport function isExtrudedPolygonTechnique(\n    technique: Technique\n): technique is ExtrudedPolygonTechnique {\n    return technique.name === \"extruded-polygon\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[StandardTechnique]].\n */\nexport function isStandardTechnique(technique: Technique): technique is StandardTechnique {\n    return technique.name === \"standard\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[TerrainTechnique]].\n */\nexport function isTerrainTechnique(technique: Technique): technique is TerrainTechnique {\n    return technique.name === \"terrain\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[TextTechnique]].\n */\nexport function isTextTechnique(technique: Technique): technique is TextTechnique {\n    return technique.name === \"text\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[ShaderTechnique]].\n */\nexport function isShaderTechnique(technique: Technique): technique is ShaderTechnique {\n    return technique.name === \"shader\";\n}\n\nexport function isLabelRejectionLineTechnique(\n    technique: Technique\n): technique is LabelRejectionLineTechnique {\n    return technique.name === \"label-rejection-line\";\n}\n\n/**\n * Check if vertex normals should be generated for this technique (if no normals are in the data).\n * @param technique Technique to check.\n */\nexport function needsVertexNormals(technique: Technique): boolean {\n    return (\n        isFillTechnique(technique) ||\n        isStandardTechnique(technique) ||\n        isTerrainTechnique(technique) ||\n        isStandardExtrudedLineTechnique(technique)\n    );\n}\n\n/**\n * Get the texture coordinate type if the technique supports it.\n */\nexport function textureCoordinateType(technique: Technique): TextureCoordinateType | undefined {\n    if (isStandardTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else if (isExtrudedPolygonTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else if (isTerrainTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Add all the buffers of the technique to the transfer list.\n */\nexport function addBuffersToTransferList(technique: Technique, transferList: ArrayBuffer[]) {\n    if (\n        isStandardTechnique(technique) ||\n        isExtrudedPolygonTechnique(technique) ||\n        isTerrainTechnique(technique)\n    ) {\n        for (const texturePropertyKey of TEXTURE_PROPERTY_KEYS) {\n            const textureProperty = (technique as any)[texturePropertyKey];\n            if (isTextureBuffer(textureProperty)) {\n                if (textureProperty.buffer instanceof ArrayBuffer) {\n                    transferList.push(textureProperty.buffer);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Compose full texture name for given image name with technique specified.\n * Some techniques allows to add prefix/postfix to icons names specified, this\n * function uses technique information to create fully qualified texture name.\n * @param imageName base name of the marker icon.\n * @param technique the technique describing POI or line marker.\n * @returns fully qualified texture name for loading from atlas (without extension).\n */\nexport function composeTechniqueTextureName(\n    imageName: string,\n    technique: PoiTechnique | LineMarkerTechnique\n): string {\n    let textureName = imageName;\n    if (typeof technique.imageTexturePrefix === \"string\") {\n        textureName = technique.imageTexturePrefix + textureName;\n    }\n    if (typeof technique.imageTexturePostfix === \"string\") {\n        textureName = textureName + technique.imageTexturePostfix;\n    }\n    return textureName;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Definitions, StyleSet, Theme, ValueMap } from \"@here/harp-datasource-protocol\";\nimport { Projection, TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"./MapView\";\nimport { Tile } from \"./Tile\";\n\nconst logger = LoggerManager.instance.create(\"DataSource\");\nconst UPDATE_EVENT = { type: \"update\" };\n\n/**\n * Options for a [[DataSource]].\n */\nexport interface DataSourceOptions {\n    /**\n     * The unique name of a [[DataSource]] instance.\n     */\n    name?: string;\n    /**\n     * The name of the [[StyleSet]] to evaluate for the decoding.\n     */\n    styleSetName?: string;\n    /**\n     * The minimum zoom level at which data is available or displayed at\n     * (depending on [[DataSource]] subclass).\n     * @deprecated Use [[minDataLevel]] and [[minDisplayLevel]] instead.\n     */\n    minZoomLevel?: number;\n    /**\n     * The maximum zoom level at which data is available or displayed at\n     * (depending on [[DataSource]] subclass).\n     * @deprecated Use [[maxDataLevel]] and [[maxDisplayLevel]] instead.\n     */\n    maxZoomLevel?: number;\n    /**\n     * The minimum zoom level at which data is available.\n     */\n    minDataLevel?: number;\n    /**\n     * The maximum zoom level at which data is available.\n     */\n    maxDataLevel?: number;\n    /**\n     * The minimum zoom level at which [[DataSource]] is displayed.\n     */\n    minDisplayLevel?: number;\n    /**\n     * The maximum zoom level at which [[DataSource]] is displayed.\n     */\n    maxDisplayLevel?: number;\n    /**\n     * Storage level offset applied to this `DataSource`.\n     */\n    storageLevelOffset?: number;\n}\n\n/**\n * Derive a class from `DataSource` to contribute data and geometries to the [[MapView]].\n */\nexport abstract class DataSource extends THREE.EventDispatcher {\n    /**\n     * A counter to generate unique names for each `DataSource`, if no name is provided in the\n     * constructor.\n     */\n    private static uniqueNameCounter: number = 0;\n\n    /**\n     * Set to `true` if this `DataSource` is enabled; `false` otherwise.\n     */\n    enabled: boolean = true;\n\n    /**\n     * Set to `true` if the [[MapView]] can cache tiles produced by this `DataSource`.\n     */\n    cacheable: boolean = false;\n\n    /**\n     * Set to `true` if the loader should be used to get the tile contents.\n     */\n    useGeometryLoader: boolean = false;\n\n    /**\n     * The unique name of a `DataSource` instance.\n     */\n    name: string;\n\n    /**\n     * Whether the datasource should have a ground plane (this plane covers the tile entirely and\n     * has the minimum possible renderOrder), this can be required in some cases when fallback\n     * parent tiles need to be covered by the children, otherwise the content will overlap.\n     * Default is false\n     */\n    addGroundPlane: boolean = false;\n\n    /**\n     * The minimum zoom level at which data is available.\n     */\n    minDataLevel: number = 1;\n\n    /**\n     * The maximum zoom level at which data is available.\n     */\n    maxDataLevel: number = 20;\n\n    /**\n     * The minimum zoom level at which [[DataSource]] is displayed.\n     */\n    minDisplayLevel: number = 1;\n\n    /**\n     * The maximum zoom level at which [[DataSource]] is displayed.\n     */\n    maxDisplayLevel: number = 20;\n\n    /**\n     * The [[MapView]] instance holding a reference to this `DataSource`.\n     */\n    private m_mapView?: MapView;\n\n    /**\n     * The name of the [[StyleSet]] to evaluate for the decoding.\n     */\n    private m_styleSetName?: string;\n\n    /**\n     * Current value of [[maxGeometryHeight]] property.\n     */\n    private m_maxGeometryHeight = 0;\n\n    /**\n     * Storage level offset applied to this `DataSource`.\n     */\n    private m_storageLevelOffset: number = 0;\n\n    private readonly m_featureStateMap = new Map<number, ValueMap>();\n\n    /**\n     * Constructs a new `DataSource`.\n     *\n     * @param options The options to create the data source.\n     */\n    constructor(options: DataSourceOptions = {}) {\n        super();\n        let { name } = options;\n        const {\n            styleSetName,\n            // tslint:disable-next-line: deprecation\n            minZoomLevel,\n            // tslint:disable-next-line: deprecation\n            maxZoomLevel,\n            minDataLevel,\n            maxDataLevel,\n            minDisplayLevel,\n            maxDisplayLevel,\n            storageLevelOffset\n        } = options;\n        if (name === undefined || name.length === 0) {\n            name = `anonymous-datasource#${++DataSource.uniqueNameCounter}`;\n        }\n        this.name = name;\n\n        this.styleSetName = styleSetName;\n\n        if (minDataLevel !== undefined) {\n            this.minDataLevel = minDataLevel;\n        }\n        if (maxDataLevel !== undefined) {\n            this.maxDataLevel = maxDataLevel;\n        }\n        if (minZoomLevel !== undefined) {\n            // tslint:disable-next-line: deprecation\n            this.minZoomLevel = minZoomLevel;\n        }\n        if (maxZoomLevel !== undefined) {\n            // tslint:disable-next-line: deprecation\n            this.maxZoomLevel = maxZoomLevel;\n        }\n        if (minDisplayLevel !== undefined) {\n            this.minDisplayLevel = minDisplayLevel;\n        }\n        if (maxDisplayLevel !== undefined) {\n            this.maxDisplayLevel = maxDisplayLevel;\n        }\n        if (storageLevelOffset !== undefined) {\n            this.m_storageLevelOffset = storageLevelOffset;\n        }\n    }\n\n    /**\n     * Gets the state of the given feature id.\n     *\n     * @param featureId The id of the feature.\n     */\n    getFeatureState(featureId: number): ValueMap | undefined {\n        return this.m_featureStateMap.get(featureId);\n    }\n\n    /**\n     * Clears the state of all the features of this [[DataSource]].\n     */\n    clearFeatureState() {\n        this.m_featureStateMap.clear();\n    }\n\n    /**\n     * Sets the state of the given feature id.\n     *\n     * ```typescript\n     * dataSource.setFeatureState(featureId, { enabled: true });\n     * ```\n     *\n     * @param featureId The id of the feature.\n     * @param state The new state of the feature.\n     */\n    setFeatureState(featureId: number, state: ValueMap) {\n        this.m_featureStateMap.set(featureId, state);\n    }\n\n    /**\n     * Removes the state associated to the given feature.\n     *\n     * @param featureId The id of the feature.\n     */\n    removeFeatureState(featureId: number) {\n        this.m_featureStateMap.delete(featureId);\n    }\n\n    /**\n     * Returns the name of the [[StyleSet]] to use for the decoding.\n     */\n    get styleSetName(): string | undefined {\n        return this.m_styleSetName;\n    }\n\n    /**\n     * Sets the name of the [[StyleSet]] to use for the decoding. If this [[DataSource]] is already\n     * attached to a [[MapView]], this setter then reapplies [[StyleSet]] with this name found in\n     * [[MapView]]s theme.\n     */\n    set styleSetName(styleSetName: string | undefined) {\n        this.m_styleSetName = styleSetName;\n        if (this.m_mapView !== undefined && styleSetName !== undefined) {\n            this.setTheme(this.m_mapView.theme);\n        }\n    }\n\n    /**\n     * Destroys this `DataSource`.\n     */\n    dispose() {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Purges all the caching done by this `DataSource`\n     */\n    clearCache() {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Boolean which says whether a [[DataSource]] produces tiles that fully cover the tile, i.e.\n     * tiles underneath are completely hidden. Must be overriden for [[DataSource]]'s that don't\n     * have a ground plane, but which still fully cover the tile, e.g. web tiles.\n     */\n    isFullyCovering(): boolean {\n        return this.addGroundPlane;\n    }\n\n    /**\n     * Returns `true` if this `DataSource` is ready and the [[MapView]] can invoke `getTile()` to\n     * start requesting data.\n     */\n    ready(): boolean {\n        return true;\n    }\n\n    /**\n     * The [[MapView]] that is holding this `DataSource`.\n     */\n    get mapView(): MapView {\n        if (this.m_mapView === undefined) {\n            throw new Error(\"This DataSource was not added to MapView\");\n        }\n\n        return this.m_mapView;\n    }\n\n    /**\n     * The [[Projection]] used by the [[MapView]] that is holding this `DataSource`.\n     *\n     * An `Error` is thrown if you call this method before this `DataSource` has been added\n     * to a [[MapView]].\n     */\n    get projection(): Projection {\n        return this.mapView.projection;\n    }\n\n    /**\n     * This method is called when the `DataSource` is added to a [[MapView]]. Reimplement this\n     * method to provide any custom initialization, such as, to establish a network connection,\n     * or to initialize complex data structures.\n     */\n    async connect(): Promise<void> {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Returns the [[TilingScheme]] used by this `DataSource`.\n     */\n    abstract getTilingScheme(): TilingScheme;\n\n    /**\n     * This method is called when this `DataSource` is added to a [[MapView]].\n     *\n     * Reimplementations of this method must invoke the definition of the super class.\n     *\n     * @param mapView The instance of the [[MapView]].\n     */\n    attach(mapView: MapView): void {\n        this.m_mapView = mapView;\n    }\n\n    /**\n     * This method is called when this `DataSource` is removed from a [[MapView]].\n     *\n     * Reimplementations of this method must invoke the definition of the super class.\n     *\n     * @param mapView The instance of the [[MapView]].\n     */\n    detach(mapView: MapView) {\n        assert(this.m_mapView === mapView);\n        this.m_mapView = undefined;\n    }\n\n    /**\n     * Invoked by [[MapView]] to notify when the [[Theme]] has been changed.\n     *\n     * If `DataSource` depends on a `styleSet` or `languages`, it must update its tiles' geometry.\n     *\n     * @deprecated, Use [[setTheme]].\n     *\n     * @param styleSet The new theme that [[MapView]] uses.\n     * @param languages An optional list of languages for the `DataSource`.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        // to be overwritten by subclasses\n    }\n\n    /**\n     * Apply the [[Theme]] to this data source.\n     *\n     * If `DataSource` depends on a `styleSet` defined by this theme or `languages`, it must update\n     * its tiles' geometry.\n     *\n     * @param languages\n     */\n    setTheme(theme: Theme, languages?: string[]): void {\n        // to be overwritten by subclasses\n    }\n\n    /**\n     * Used to configure the languages used by the `DataSource` according to priority;\n     * the first language in the array has the highest priority.\n     *\n     * @param languages An array of ISO 639-1 language codes.\n     */\n    setLanguages(languages?: string[]): void {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * This method is called when [[MapView]] needs to visualize or preload the content of a\n     * [[TileKey]].\n     *\n     * @param tileKey The unique identifier for a map tile.\n     */\n    abstract getTile(tileKey: TileKey): Tile | undefined;\n\n    /**\n     * This method is called by [[MapView]] before the tile needs to be updated, for example after\n     * a theme change.\n     *\n     * @param tile The [[Tile]] to update.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    updateTile(tile: Tile) {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * This method is called by the [[MapView]] to determine if the content of the surrounding\n     * tiles must be preloaded.\n     *\n     * @returns `true` if the [[MapView]] should try to preload tiles surrounding the visible\n     * tiles; `false` otherwise. The default is `false`.\n     */\n    shouldPreloadTiles(): boolean {\n        return false;\n    }\n\n    /**\n     * The minimum zoom level at which data is available or displayed at\n     * (depending on [[DataSource]] subclass).\n     * @deprecated Use [[minDataLevel]] and [[minDisplayLevel]] instead.\n     */\n    get minZoomLevel(): number {\n        logger.warn(\n            \"DataSource.minZoomLevel is deprecated. Use minDataLevel and maxDataLevel instead.\"\n        );\n        return this.minDataLevel;\n    }\n\n    set minZoomLevel(level: number) {\n        logger.warn(\n            \"DataSource.minZoomLevel is deprecated. Use minDataLevel and minDisplayLevel instead.\"\n        );\n        this.minDataLevel = level;\n    }\n\n    /**\n     * The maximum zoom level at which data is available or displayed at\n     * (depending on [[DataSource]] subclass).\n     * @deprecated Use [[maxDataLevel]] and [[maxDisplayLevel]] instead.\n     */\n    get maxZoomLevel(): number {\n        logger.warn(\n            \"DataSource.maxZoomLevel is deprecated. Use maxDataLevel and maxDisplayLevel instead.\"\n        );\n        return this.maxDataLevel;\n    }\n\n    set maxZoomLevel(level: number) {\n        logger.warn(\n            \"DataSource.maxZoomLevel is deprecated. Use maxDataLevel and maxDisplayLevel instead.\"\n        );\n        this.maxDataLevel = level;\n    }\n\n    /**\n     * Maximum geometry height above ground level this `DataSource` can produce.\n     *\n     * Used in first stage of frustum culling before [[Tile.maxGeometryHeight]] data is available.\n     *\n     * @default 0.\n     */\n    get maxGeometryHeight() {\n        return this.m_maxGeometryHeight;\n    }\n    set maxGeometryHeight(value: number) {\n        this.m_maxGeometryHeight = value;\n    }\n\n    /**\n     * The difference between storage level and display level of tile.\n     *\n     * Storage level offset is a value applied (added) to current zoom level giving\n     * a final tile level being displayed. This way we may differentate current\n     * zoom level from the storage level that is displayed, giving fine grained\n     * control over the tiles being decoded an displayed.\n     */\n    get storageLevelOffset() {\n        return this.m_storageLevelOffset;\n    }\n\n    /**\n     * Setup the relative offset between storage level and display level of tile.\n     *\n     * @param levelOffset Difference between zoom level and display level.\n     */\n    set storageLevelOffset(levelOffset: number) {\n        this.m_storageLevelOffset = levelOffset;\n    }\n\n    /**\n     * Enables or disables overlay of geometry on elevation. It must be overloaded by data sources\n     * supporting this feature.\n     *\n     * @param value True to enable, false to disable.\n     */\n    setEnableElevationOverlay(enable: boolean) {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Computes the data zoom level to use.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @returns The data zoom level to use.\n     */\n    getDataZoomLevel(zoomLevel: number): number {\n        return THREE.MathUtils.clamp(\n            zoomLevel + this.m_storageLevelOffset,\n            this.minDataLevel,\n            this.maxDataLevel\n        );\n    }\n\n    /**\n     * Returns `true` if [[DataSource]] should be displayed for the zoom level.\n     * @param zoomLevel The zoom level of the [[MapView]].\n     */\n    isVisible(zoomLevel: number): boolean {\n        return zoomLevel >= this.minDisplayLevel && zoomLevel <= this.maxDisplayLevel;\n    }\n\n    /**\n     * Returns `true` if [[DataSource]] can load tile with given [[TileKey]] and zoom level.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the tile for the given [[TileKey]] can be loaded.\n     */\n    canGetTile(zoomLevel: number, tileKey: TileKey): boolean {\n        return tileKey.level <= zoomLevel;\n    }\n\n    /**\n     * Returns `true` if [[MapView]] should traverse tiles further with given [[TileKey]] and\n     * zoom level.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the subtiles of the given [[TileKey]] should be\n     * checked for collisions.\n     */\n    shouldSubdivide(zoomLevel: number, tileKey: TileKey): boolean {\n        return tileKey.level <= zoomLevel;\n    }\n\n    /**\n     * Returns `true` if [[MapView]] should render the text elements with the given [[TileKey]] and\n     * zoom level.\n     *\n     * This is an additional check for the tiles that are already selected for rendering so the\n     * default implementation returns `true`.\n     *\n     * @param zoomLevel The zoom level.\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the text elements created for the given [[TileKey]] should be rendered.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldRenderText(zoomLevel: number, tileKey: TileKey): boolean {\n        return true;\n    }\n\n    /**\n     * Sends a request to the [[MapView]] to redraw the scene.\n     */\n    requestUpdate() {\n        this.dispatchEvent(UPDATE_EVENT);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    Attachment,\n    BaseTechniqueParams,\n    BufferAttribute,\n    DecodedTile,\n    Env,\n    Expr,\n    ExtrudedPolygonTechnique,\n    FillTechnique,\n    Geometry,\n    GeometryKind,\n    GeometryKindSet,\n    getArrayConstructor,\n    getFeatureId,\n    getPropertyValue,\n    IndexedTechnique,\n    InterleavedBufferAttribute,\n    isCirclesTechnique,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isFillTechnique,\n    isLineMarkerTechnique,\n    isLineTechnique,\n    isPoiTechnique,\n    isSegmentsTechnique,\n    isSolidLineTechnique,\n    isSquaresTechnique,\n    isStandardTechnique,\n    isTerrainTechnique,\n    isTextTechnique,\n    MakeTechniqueAttrs,\n    MapEnv,\n    needsVertexNormals,\n    SolidLineTechnique,\n    StandardExtrudedLineTechnique,\n    Technique,\n    TerrainTechnique,\n    TextPathGeometry\n} from \"@here/harp-datasource-protocol\";\n// tslint:disable:max-line-length\nimport {\n    EdgeLengthGeometrySubdivisionModifier,\n    SubdivisionMode\n} from \"@here/harp-geometry/lib/EdgeLengthGeometrySubdivisionModifier\";\nimport { SphericalGeometrySubdivisionModifier } from \"@here/harp-geometry/lib/SphericalGeometrySubdivisionModifier\";\nimport { EarthConstants, GeoCoordinates, ProjectionType } from \"@here/harp-geoutils\";\nimport {\n    EdgeMaterial,\n    EdgeMaterialParameters,\n    FadingFeature,\n    isHighPrecisionLineMaterial,\n    MapMeshBasicMaterial,\n    MapMeshDepthMaterial,\n    MapMeshStandardMaterial,\n    setShaderMaterialDefine,\n    SolidLineMaterial\n} from \"@here/harp-materials\";\nimport { ContextualArabicConverter } from \"@here/harp-text-canvas\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { AnimatedExtrusionTileHandler } from \"../AnimatedExtrusionHandler\";\nimport {\n    applyBaseColorToMaterial,\n    applySecondaryColorToMaterial,\n    buildObject,\n    compileTechniques,\n    createMaterial,\n    getBufferAttribute,\n    usesObject3D\n} from \"../DecodedTileHelpers\";\nimport {\n    createDepthPrePassMesh,\n    isRenderDepthPrePassEnabled,\n    setDepthPrePassStencil\n} from \"../DepthPrePass\";\nimport { DisplacementMap, TileDisplacementMap } from \"../DisplacementMap\";\nimport { FALLBACK_RENDER_ORDER_OFFSET } from \"../MapView\";\nimport { MapViewPoints } from \"../MapViewPoints\";\nimport { PathBlockingElement } from \"../PathBlockingElement\";\nimport { TextElement } from \"../text/TextElement\";\nimport { DEFAULT_TEXT_DISTANCE_SCALE } from \"../text/TextElementsRenderer\";\nimport { Tile, TileFeatureData } from \"../Tile\";\nimport { LodMesh } from \"./LodMesh\";\n\nconst tmpVector3 = new THREE.Vector3();\nconst tmpVector2 = new THREE.Vector2();\n\nclass AttachmentCache {\n    readonly bufferAttributes = new Map<BufferAttribute, THREE.BufferAttribute>();\n\n    readonly interleavedAttributes = new Map<\n        InterleavedBufferAttribute,\n        Array<{ name: string; attribute: THREE.InterleavedBufferAttribute }>\n    >();\n}\n\nclass AttachmentInfo {\n    constructor(\n        readonly geometry: Geometry,\n        readonly info: Attachment,\n        readonly cache: AttachmentCache\n    ) {}\n\n    getBufferAttribute(description: BufferAttribute): THREE.BufferAttribute {\n        if (this.cache.bufferAttributes.has(description)) {\n            return this.cache.bufferAttributes.get(description)!;\n        }\n        const attribute = getBufferAttribute(description);\n        this.cache.bufferAttributes.set(description, attribute);\n        return attribute;\n    }\n\n    getInterleavedBufferAttributes(description: InterleavedBufferAttribute) {\n        const interleavedAttributes = this.cache.interleavedAttributes.get(description);\n\n        if (interleavedAttributes) {\n            return interleavedAttributes;\n        }\n\n        const ArrayCtor = getArrayConstructor(description.type);\n        const buffer = new ArrayCtor(description.buffer);\n        const interleavedBuffer = new THREE.InterleavedBuffer(buffer, description.stride);\n\n        const attrs = description.attributes.map(interleavedAttr => {\n            const attribute = new THREE.InterleavedBufferAttribute(\n                interleavedBuffer,\n                interleavedAttr.itemSize,\n                interleavedAttr.offset,\n                false\n            );\n            const name = interleavedAttr.name;\n            return { name, attribute };\n        });\n\n        this.cache.interleavedAttributes.set(description, attrs);\n        return attrs;\n    }\n}\n\n/**\n * Parameters that control fading.\n */\nexport interface FadingParameters {\n    fadeNear?: number;\n    fadeFar?: number;\n}\n\n/**\n * Parameters that control fading for extruded buildings with fading edges.\n */\nexport interface PolygonFadingParameters extends FadingParameters {\n    color?: string | number;\n    colorMix?: number;\n    lineFadeNear?: number;\n    lineFadeFar?: number;\n}\n\n/**\n * Support class to create geometry for a [[Tile]] from a [[DecodedTile]].\n */\nexport class TileGeometryCreator {\n    private static m_instance: TileGeometryCreator;\n\n    /**\n     * The `instance` of the `TileGeometryCreator`.\n     *\n     * @returns TileGeometryCreator\n     */\n    static get instance(): TileGeometryCreator {\n        return this.m_instance || (this.m_instance = new TileGeometryCreator());\n    }\n\n    /**\n     *  Creates an instance of TileGeometryCreator. Access is allowed only through `instance`.\n     */\n    private constructor() {\n        //\n    }\n\n    /**\n     * Apply `enabledKinds` and `disabledKinds` to all techniques in the `decodedTile`. If a\n     * technique is identified as disabled, its property `enabled` is set to `false`.\n     *\n     * @param decodedTile The decodedTile containing the actual tile map data.\n     * @param enabledKinds Optional [[GeometryKindSet]] used to specify which object kinds should be\n     *      created.\n     * @param disabledKinds Optional [[GeometryKindSet]] used to filter objects that should not be\n     *      created.\n     */\n    initDecodedTile(\n        decodedTile: DecodedTile,\n        enabledKinds?: GeometryKindSet | undefined,\n        disabledKinds?: GeometryKindSet | undefined\n    ) {\n        for (const technique of decodedTile.techniques) {\n            // tslint:disable-next-line: deprecation\n            const kind = technique.kind;\n\n            // No info about kind, no way to filter it.\n            if (kind === undefined || (kind instanceof Set && kind.size === 0)) {\n                technique._kindState = true;\n                continue;\n            }\n\n            // Technique is enabled only if enabledKinds is defined and technique belongs to that set or\n            // if that's not the case, disabledKinds must be undefined or technique does not belong to it.\n            technique._kindState =\n                !(disabledKinds !== undefined && disabledKinds.hasOrIntersects(kind)) ||\n                (enabledKinds !== undefined && enabledKinds.hasOrIntersects(kind));\n        }\n\n        for (const srcGeometry of decodedTile.geometries) {\n            for (const group of srcGeometry.groups) {\n                group.createdOffsets = [];\n            }\n        }\n\n        // compile the dynamic expressions.\n        compileTechniques(decodedTile.techniques);\n    }\n\n    /**\n     * Called after the `Tile` has been decoded. It is required to call `initDecodedTile` before\n     * calling this method.\n     *\n     * @see [[TileGeometryCreator#initDecodedTile]]\n     *\n     * @param tile The [[Tile]] to process.\n     * @param decodedTile The decodedTile containing the actual tile map data.\n     */\n    createAllGeometries(tile: Tile, decodedTile: DecodedTile) {\n        const filter = (technique: IndexedTechnique): boolean => {\n            return technique._kindState !== false;\n        };\n\n        this.createObjects(tile, decodedTile, filter);\n\n        this.preparePois(tile, decodedTile);\n\n        // TextElements do not get their geometry created by Tile, but are managed on a\n        // higher level.\n        const textFilter = (technique: IndexedTechnique): boolean => {\n            if (\n                !isPoiTechnique(technique) &&\n                !isLineMarkerTechnique(technique) &&\n                !isTextTechnique(technique)\n            ) {\n                return false;\n            }\n            return filter(technique);\n        };\n        this.createTextElements(tile, decodedTile, textFilter);\n\n        this.createLabelRejectionElements(tile, decodedTile);\n\n        // HARP-7899, disable ground plane for globe\n        if (tile.dataSource.addGroundPlane && tile.projection.type === ProjectionType.Planar) {\n            // The ground plane is required for when we change the zoom back and we fall back to the\n            // parent, in that case we reduce the renderOrder of the parent tile and this ground\n            // place ensures that parent doesn't come through. This value must be above the\n            // renderOrder of all objects in the fallback tile, otherwise there won't be a proper\n            // covering of the parent tile by the children, hence dividing by 2. To put a bit more\n            // concretely, we assume all objects are rendered with a renderOrder between 0 and\n            // FALLBACK_RENDER_ORDER_OFFSET / 2, i.e. 10000. The ground plane is put at -10000, and\n            // the fallback tiles have their renderOrder set between -20000 and -10000\n            TileGeometryCreator.instance.addGroundPlane(tile, -FALLBACK_RENDER_ORDER_OFFSET / 2);\n        }\n    }\n\n    createLabelRejectionElements(tile: Tile, decodedTile: DecodedTile) {\n        if (decodedTile.pathGeometries === undefined) {\n            return;\n        }\n        for (const path of decodedTile.pathGeometries) {\n            tile.addBlockingElement(new PathBlockingElement(path.path));\n        }\n    }\n\n    /**\n     * Processes the given tile and assign default values for geometry kinds,\n     * render orders and label priorities.\n     *\n     * @param {Tile} tile\n     * @param {(GeometryKindSet | undefined)} enabledKinds\n     * @param {(GeometryKindSet | undefined)} disabledKinds\n     */\n    processTechniques(\n        tile: Tile,\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void {\n        const decodedTile = tile.decodedTile;\n\n        if (decodedTile === undefined) {\n            return;\n        }\n\n        this.processPriorities(tile);\n\n        // Speedup and simplify following code: Test all techniques if they intersect with\n        // enabledKinds and disabledKinds, in which case they are flagged. The disabledKinds can be\n        // ignored hereafter.\n        this.initDecodedTile(decodedTile, enabledKinds, disabledKinds);\n    }\n\n    /**\n     * Adds a THREE object to the root of the tile. Sets the owning tiles datasource.name and the\n     * tileKey in the `userData` property of the object, such that the tile it belongs to can be\n     * identified during picking.\n     *\n     * @param tile The [[Tile]] to add the object to.\n     * @param object The object to add to the root of the tile.\n     * @param geometryKind The kind of object. Can be used for filtering.\n     */\n    registerTileObject(\n        tile: Tile,\n        object: THREE.Object3D,\n        geometryKind: GeometryKind | GeometryKindSet | undefined\n    ) {\n        if (object.userData === undefined) {\n            object.userData = {};\n        }\n        const userData = object.userData;\n        userData.tileKey = tile.tileKey;\n        userData.dataSource = tile.dataSource.name;\n\n        userData.kind =\n            geometryKind instanceof Set\n                ? Array.from((geometryKind as GeometryKindSet).values())\n                : Array.isArray(geometryKind)\n                ? geometryKind\n                : [geometryKind];\n\n        // Force a visibility check of all objects.\n        tile.resetVisibilityCounter();\n    }\n\n    /**\n     * Splits the text paths that contain sharp corners.\n     *\n     * @param tile The [[Tile]] to process paths on.\n     * @param textPathGeometries The original path geometries that may have defects.\n     * @param textFilter: Optional filter. Should return true for any text technique that is\n     *      applicable.\n     */\n    prepareTextPaths(\n        textPathGeometries: TextPathGeometry[],\n        decodedTile: DecodedTile,\n        textFilter?: (technique: IndexedTechnique) => boolean\n    ): TextPathGeometry[] {\n        const processedPaths = new Array<TextPathGeometry>();\n        const newPaths = textPathGeometries.slice();\n\n        while (newPaths.length > 0) {\n            const textPath = newPaths.pop();\n\n            if (textPath === undefined) {\n                break;\n            }\n\n            const technique = decodedTile.techniques[textPath.technique];\n            if (\n                !isTextTechnique(technique) ||\n                (textFilter !== undefined && !textFilter(technique))\n            ) {\n                continue;\n            }\n\n            processedPaths.push(textPath);\n        }\n        return processedPaths;\n    }\n\n    /**\n     * Creates [[TextElement]] objects from the decoded tile and list of materials specified. The\n     * priorities of the [[TextElement]]s are updated to simplify label placement.\n     *\n     * @param tile The [[Tile]] to create the testElements on.\n     * @param decodedTile The [[DecodedTile]].\n     * @param textFilter: Optional filter. Should return true for any text technique that is\n     *      applicable.\n     */\n    createTextElements(\n        tile: Tile,\n        decodedTile: DecodedTile,\n        textFilter?: (technique: IndexedTechnique) => boolean\n    ) {\n        const mapView = tile.mapView;\n        const textStyleCache = tile.textStyleCache;\n        const worldOffsetX = tile.computeWorldOffsetX();\n\n        const discreteZoomLevel = Math.floor(mapView.zoomLevel);\n        const discreteZoomEnv = new MapEnv({ $zoom: discreteZoomLevel }, mapView.env);\n\n        if (decodedTile.textPathGeometries !== undefined) {\n            const textPathGeometries = this.prepareTextPaths(\n                decodedTile.textPathGeometries,\n                decodedTile,\n                textFilter\n            );\n\n            for (const textPath of textPathGeometries) {\n                const technique = decodedTile.techniques[textPath.technique];\n\n                if (\n                    technique._kindState === false ||\n                    !isTextTechnique(technique) ||\n                    (textFilter !== undefined && !textFilter(technique))\n                ) {\n                    continue;\n                }\n\n                const path: THREE.Vector3[] = [];\n                for (let i = 0; i < textPath.path.length; i += 3) {\n                    path.push(\n                        new THREE.Vector3(\n                            textPath.path[i] + worldOffsetX,\n                            textPath.path[i + 1],\n                            textPath.path[i + 2]\n                        )\n                    );\n                }\n\n                // Make sorting stable.\n                const priority =\n                    technique.priority !== undefined\n                        ? getPropertyValue(technique.priority, discreteZoomEnv)\n                        : 0;\n                const fadeNear =\n                    technique.fadeNear !== undefined\n                        ? getPropertyValue(technique.fadeNear, discreteZoomEnv)\n                        : technique.fadeNear;\n                const fadeFar =\n                    technique.fadeFar !== undefined\n                        ? getPropertyValue(technique.fadeFar, discreteZoomEnv)\n                        : technique.fadeFar;\n                const userData = textPath.objInfos;\n                const featureId = getFeatureId(userData);\n                const textElement = new TextElement(\n                    ContextualArabicConverter.instance.convert(textPath.text),\n                    path,\n                    textStyleCache.getRenderStyle(technique),\n                    textStyleCache.getLayoutStyle(technique),\n                    priority,\n                    technique.xOffset !== undefined ? technique.xOffset : 0.0,\n                    technique.yOffset !== undefined ? technique.yOffset : 0.0,\n                    featureId,\n                    technique.style,\n                    fadeNear,\n                    fadeFar,\n                    tile.offset\n                );\n                textElement.pathLengthSqr = textPath.pathLengthSqr;\n                textElement.minZoomLevel =\n                    technique.minZoomLevel !== undefined\n                        ? technique.minZoomLevel\n                        : mapView.minZoomLevel;\n                textElement.maxZoomLevel =\n                    technique.maxZoomLevel !== undefined\n                        ? technique.maxZoomLevel\n                        : mapView.maxZoomLevel;\n                textElement.distanceScale =\n                    technique.distanceScale !== undefined\n                        ? technique.distanceScale\n                        : DEFAULT_TEXT_DISTANCE_SCALE;\n                textElement.mayOverlap = technique.mayOverlap === true;\n                textElement.reserveSpace = technique.reserveSpace !== false;\n                // tslint:disable-next-line: deprecation\n                textElement.kind = technique.kind;\n                // Get the userData for text element picking.\n                textElement.userData = textPath.objInfos;\n\n                tile.addTextElement(textElement);\n            }\n        }\n\n        if (decodedTile.textGeometries !== undefined) {\n            for (const text of decodedTile.textGeometries) {\n                if (text.technique === undefined || text.stringCatalog === undefined) {\n                    continue;\n                }\n\n                const technique = decodedTile.techniques[text.technique];\n\n                if (\n                    technique._kindState === false ||\n                    !isTextTechnique(technique) ||\n                    (textFilter !== undefined && !textFilter(technique))\n                ) {\n                    continue;\n                }\n\n                const positions = new THREE.BufferAttribute(\n                    new Float32Array(text.positions.buffer),\n                    text.positions.itemCount\n                );\n\n                const numPositions = positions.count;\n                if (numPositions < 1) {\n                    continue;\n                }\n\n                const priority =\n                    technique.priority !== undefined\n                        ? getPropertyValue(technique.priority, discreteZoomEnv)\n                        : 0;\n                const fadeNear =\n                    technique.fadeNear !== undefined\n                        ? getPropertyValue(technique.fadeNear, discreteZoomEnv)\n                        : technique.fadeNear;\n                const fadeFar =\n                    technique.fadeFar !== undefined\n                        ? getPropertyValue(technique.fadeFar, discreteZoomEnv)\n                        : technique.fadeFar;\n\n                for (let i = 0; i < numPositions; ++i) {\n                    const x = positions.getX(i) + worldOffsetX;\n                    const y = positions.getY(i);\n                    const z = positions.getZ(i);\n                    const label = text.stringCatalog[text.texts[i]];\n                    if (label === undefined) {\n                        // skip missing labels\n                        continue;\n                    }\n\n                    const userData = text.objInfos !== undefined ? text.objInfos[i] : undefined;\n                    const featureId = getFeatureId(userData);\n\n                    const textElement = new TextElement(\n                        ContextualArabicConverter.instance.convert(label!),\n                        new THREE.Vector3(x, y, z),\n                        textStyleCache.getRenderStyle(technique),\n                        textStyleCache.getLayoutStyle(technique),\n                        priority,\n                        technique.xOffset || 0.0,\n                        technique.yOffset || 0.0,\n                        featureId,\n                        technique.style,\n                        undefined,\n                        undefined,\n                        tile.offset\n                    );\n\n                    textElement.minZoomLevel =\n                        technique.minZoomLevel !== undefined\n                            ? technique.minZoomLevel\n                            : mapView.minZoomLevel;\n                    textElement.maxZoomLevel =\n                        technique.maxZoomLevel !== undefined\n                            ? technique.maxZoomLevel\n                            : mapView.maxZoomLevel;\n                    textElement.mayOverlap = technique.mayOverlap === true;\n                    textElement.reserveSpace = technique.reserveSpace !== false;\n                    // tslint:disable-next-line: deprecation\n                    textElement.kind = technique.kind;\n\n                    textElement.fadeNear = fadeNear;\n                    textElement.fadeFar = fadeFar;\n\n                    // Get the userData for text element picking.\n                    textElement.userData = userData;\n\n                    tile.addTextElement(textElement);\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates `Tile` objects from the decoded tile and list of materials specified.\n     *\n     * @param tile The [[Tile]] to create the geometry on.\n     * @param decodedTile The [[DecodedTile]].\n     * @param techniqueFilter: Optional filter. Should return true for any technique that is\n     *      applicable.\n     */\n    createObjects(\n        tile: Tile,\n        decodedTile: DecodedTile,\n        techniqueFilter?: (technique: IndexedTechnique) => boolean\n    ) {\n        const materials: THREE.Material[] = [];\n        const mapView = tile.mapView;\n        const dataSource = tile.dataSource;\n        const discreteZoomLevel = Math.floor(mapView.zoomLevel);\n        const discreteZoomEnv = new MapEnv({ $zoom: discreteZoomLevel }, mapView.env);\n        const objects = tile.objects;\n        const viewRanges = mapView.viewRanges;\n        const elevationEnabled = mapView.elevationProvider !== undefined;\n\n        for (const attachment of this.getAttachments(decodedTile)) {\n            const srcGeometry = attachment.geometry;\n            const groups = attachment.info.groups;\n            const groupCount = groups.length;\n\n            for (let groupIndex = 0; groupIndex < groupCount; ) {\n                const group = groups[groupIndex++];\n                const start = group.start;\n                const techniqueIndex = group.technique;\n                const technique = decodedTile.techniques[techniqueIndex];\n\n                if (group.createdOffsets === undefined) {\n                    group.createdOffsets = [];\n                }\n\n                if (\n                    group.createdOffsets!.indexOf(tile.offset) !== -1 ||\n                    technique._kindState === false ||\n                    (techniqueFilter !== undefined && !techniqueFilter(technique))\n                ) {\n                    continue;\n                }\n\n                let count = group.count;\n                group.createdOffsets!.push(tile.offset);\n\n                // compress consecutive groups\n                for (\n                    ;\n                    groupIndex < groupCount && groups[groupIndex].technique === techniqueIndex;\n                    ++groupIndex\n                ) {\n                    if (start + count !== groups[groupIndex].start) {\n                        break;\n                    }\n\n                    count += groups[groupIndex].count;\n\n                    // Mark this group as created, so it does not get processed again.\n                    groups[groupIndex].createdOffsets!.push(tile.offset);\n                }\n\n                if (!usesObject3D(technique)) {\n                    continue;\n                }\n\n                let material: THREE.Material | undefined = materials[techniqueIndex];\n\n                if (material === undefined) {\n                    const onMaterialUpdated = (texture: THREE.Texture) => {\n                        dataSource.requestUpdate();\n                        if (texture !== undefined) {\n                            tile.addOwnedTexture(texture);\n                        }\n                    };\n                    material = createMaterial(\n                        {\n                            technique,\n                            env: mapView.env,\n                            fog: mapView.scene.fog !== null\n                        },\n                        onMaterialUpdated\n                    );\n                    if (material === undefined) {\n                        continue;\n                    }\n                    materials[techniqueIndex] = material;\n                }\n\n                // tslint:disable-next-line: deprecation\n                const techniqueKind = technique.kind;\n\n                // Modify the standard textured shader to support height-based coloring.\n                if (isTerrainTechnique(technique)) {\n                    this.setupTerrainMaterial(technique, material, tile.mapView.clearColor);\n                }\n\n                const bufferGeometry = new THREE.BufferGeometry();\n\n                srcGeometry.vertexAttributes?.forEach(vertexAttribute => {\n                    const buffer = attachment.getBufferAttribute(vertexAttribute);\n                    bufferGeometry.setAttribute(vertexAttribute.name, buffer);\n                });\n\n                srcGeometry.interleavedVertexAttributes?.forEach(attr => {\n                    attachment\n                        .getInterleavedBufferAttributes(attr)\n                        .forEach(({ name, attribute }) =>\n                            bufferGeometry.setAttribute(name, attribute)\n                        );\n                });\n\n                const index = attachment.info.index ?? srcGeometry.index;\n                if (index) {\n                    bufferGeometry.setIndex(attachment.getBufferAttribute(index));\n                }\n\n                if (!bufferGeometry.getAttribute(\"normal\") && needsVertexNormals(technique)) {\n                    bufferGeometry.computeVertexNormals();\n                }\n\n                bufferGeometry.addGroup(start, count);\n\n                if (isSolidLineTechnique(technique)) {\n                    // TODO: Unify access to shader defines via SolidLineMaterial setters\n                    assert(!isHighPrecisionLineMaterial(material));\n                    const lineMaterial = material as SolidLineMaterial;\n                    if (\n                        technique.clipping !== false &&\n                        tile.projection.type === ProjectionType.Planar\n                    ) {\n                        tile.boundingBox.getSize(tmpVector3);\n                        tmpVector2.set(tmpVector3.x, tmpVector3.y);\n                        lineMaterial.clipTileSize = tmpVector2;\n                    }\n\n                    if (bufferGeometry.getAttribute(\"color\")) {\n                        setShaderMaterialDefine(lineMaterial, \"USE_COLOR\", true);\n                    }\n                }\n\n                // Add the solid line outlines as a separate object.\n                const hasSolidLinesOutlines: boolean =\n                    isSolidLineTechnique(technique) && technique.secondaryWidth !== undefined;\n\n                // When the source geometry is split in groups, we\n                // should create objects with an array of materials.\n                const hasFeatureGroups =\n                    Expr.isExpr(technique.enabled) &&\n                    srcGeometry.featureStarts &&\n                    srcGeometry.featureStarts.length > 0;\n\n                const object = buildObject(\n                    technique,\n                    bufferGeometry,\n                    hasFeatureGroups ? [material] : material,\n                    tile,\n                    elevationEnabled\n                );\n\n                object.renderOrder = technique.renderOrder!;\n\n                if (attachment.info.uuid !== undefined) {\n                    object.uuid = attachment.info.uuid;\n                    object.userData.geometryId = attachment.info.uuid;\n                }\n\n                if (\n                    (isCirclesTechnique(technique) || isSquaresTechnique(technique)) &&\n                    technique.enablePicking !== undefined\n                ) {\n                    // tslint:disable-next-line:max-line-length\n                    (object as MapViewPoints).enableRayTesting = technique.enablePicking!;\n                }\n\n                if (isLineTechnique(technique) || isSegmentsTechnique(technique)) {\n                    const hasDynamicColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n                    FadingFeature.addRenderHelper(\n                        object,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false,\n                        hasDynamicColor\n                            ? (renderer, mat) => {\n                                  const lineMaterial = mat as THREE.LineBasicMaterial;\n                                  applyBaseColorToMaterial(\n                                      lineMaterial,\n                                      lineMaterial.color,\n                                      technique,\n                                      technique.color,\n                                      mapView.env\n                                  );\n                              }\n                            : undefined\n                    );\n                }\n\n                if (isSolidLineTechnique(technique)) {\n                    const hasDynamicColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n\n                    FadingFeature.addRenderHelper(\n                        object,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false,\n                        (renderer, mat) => {\n                            const lineMaterial = mat as SolidLineMaterial;\n                            const unitFactor =\n                                // tslint:disable-next-line: deprecation\n                                technique.metricUnit === \"Pixel\" ? mapView.pixelToWorld : 1.0;\n\n                            if (hasDynamicColor) {\n                                applyBaseColorToMaterial(\n                                    lineMaterial,\n                                    lineMaterial.color,\n                                    technique,\n                                    technique.color,\n                                    mapView.env\n                                );\n                            }\n\n                            lineMaterial.lineWidth =\n                                getPropertyValue(technique.lineWidth, mapView.env) * unitFactor;\n\n                            if (technique.outlineWidth !== undefined) {\n                                lineMaterial.outlineWidth =\n                                    getPropertyValue(technique.outlineWidth, mapView.env) *\n                                    unitFactor;\n                            }\n\n                            if (technique.dashSize !== undefined) {\n                                lineMaterial.dashSize =\n                                    getPropertyValue(technique.dashSize, mapView.env) * unitFactor;\n                            }\n\n                            if (technique.gapSize !== undefined) {\n                                lineMaterial.gapSize =\n                                    getPropertyValue(technique.gapSize, mapView.env) * unitFactor;\n                            }\n                        }\n                    );\n                }\n\n                if (isExtrudedLineTechnique(technique)) {\n                    const hasDynamicColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    // extruded lines are normal meshes, and need transparency only when fading or\n                    // dynamic properties is defined.\n                    if (technique.fadeFar !== undefined || hasDynamicColor) {\n                        const fadingParams = this.getFadingParams(\n                            mapView.env,\n                            technique as StandardExtrudedLineTechnique\n                        );\n\n                        FadingFeature.addRenderHelper(\n                            object,\n                            viewRanges,\n                            fadingParams.fadeNear,\n                            fadingParams.fadeFar,\n                            true,\n                            hasDynamicColor\n                                ? (renderer, mat) => {\n                                      const extrudedMaterial = mat as\n                                          | MapMeshStandardMaterial\n                                          | MapMeshBasicMaterial;\n\n                                      applyBaseColorToMaterial(\n                                          extrudedMaterial,\n                                          extrudedMaterial.color,\n                                          technique,\n                                          technique.color!,\n                                          mapView.env\n                                      );\n                                  }\n                                : undefined\n                        );\n                    }\n                }\n\n                this.addUserData(tile, srcGeometry, technique, object);\n\n                if (isExtrudedPolygonTechnique(technique)) {\n                    object.castShadow = mapView.shadowsEnabled;\n                    object.receiveShadow = mapView.shadowsEnabled;\n                } else if (isStandardTechnique(technique)) {\n                    object.receiveShadow = mapView.shadowsEnabled;\n                }\n\n                if (isExtrudedPolygonTechnique(technique) || isFillTechnique(technique)) {\n                    // filled polygons are normal meshes, and need transparency only when fading or\n                    // dynamic properties is defined.\n                    const hasDynamicPrimaryColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    const hasDynamicSecondaryColor =\n                        isExtrudedPolygonTechnique(technique) && Expr.isExpr(technique.emissive);\n                    const hasDynamicColor = hasDynamicPrimaryColor || hasDynamicSecondaryColor;\n\n                    if (technique.fadeFar !== undefined || hasDynamicColor) {\n                        const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n                        FadingFeature.addRenderHelper(\n                            object,\n                            viewRanges,\n                            fadingParams.fadeNear,\n                            fadingParams.fadeFar,\n                            true,\n                            hasDynamicColor\n                                ? (renderer, mat) => {\n                                      const polygonMaterial = mat as\n                                          | MapMeshBasicMaterial\n                                          | MapMeshStandardMaterial;\n\n                                      if (hasDynamicPrimaryColor) {\n                                          applyBaseColorToMaterial(\n                                              polygonMaterial,\n                                              polygonMaterial.color,\n                                              technique,\n                                              technique.color!,\n                                              mapView.env\n                                          );\n                                      }\n\n                                      if (\n                                          hasDynamicSecondaryColor &&\n                                          // Just to omit compiler warnings\n                                          isExtrudedPolygonTechnique(technique)\n                                      ) {\n                                          const standardMat = mat as MapMeshStandardMaterial;\n\n                                          applySecondaryColorToMaterial(\n                                              standardMat.emissive,\n                                              technique.emissive!,\n                                              mapView.env\n                                          );\n                                      }\n                                  }\n                                : undefined\n                        );\n                    }\n                }\n\n                const extrudedObjects: Array<{\n                    object: THREE.Object3D;\n                    /**\n                     * If set to `true`, an [[ExtrusionFeature]] that injects extrusion shader\n                     * chunk will be applied to the material. Otherwise, extrusion should\n                     * be added in the material's shader manually.\n                     */\n                    materialFeature: boolean;\n                }> = [];\n\n                const animatedExtrusionHandler = mapView.animatedExtrusionHandler;\n\n                let extrusionAnimationEnabled: boolean | undefined = false;\n\n                if (\n                    isExtrudedPolygonTechnique(technique) &&\n                    animatedExtrusionHandler !== undefined\n                ) {\n                    let animateExtrusionValue = getPropertyValue(\n                        technique.animateExtrusion,\n                        discreteZoomEnv\n                    );\n                    if (animateExtrusionValue !== null) {\n                        animateExtrusionValue =\n                            typeof animateExtrusionValue === \"boolean\"\n                                ? animateExtrusionValue\n                                : typeof animateExtrusionValue === \"number\"\n                                ? animateExtrusionValue !== 0\n                                : false;\n                    }\n                    extrusionAnimationEnabled =\n                        animateExtrusionValue !== null &&\n                        animatedExtrusionHandler.forceEnabled === false\n                            ? animateExtrusionValue\n                            : animatedExtrusionHandler.enabled;\n                }\n\n                const renderDepthPrePass =\n                    isExtrudedPolygonTechnique(technique) &&\n                    isRenderDepthPrePassEnabled(technique, discreteZoomEnv);\n\n                if (renderDepthPrePass) {\n                    const depthPassMesh = createDepthPrePassMesh(object as THREE.Mesh);\n                    // Set geometry kind for depth pass mesh so that it gets the displacement map\n                    // for elevation overlay.\n                    this.registerTileObject(tile, depthPassMesh, techniqueKind);\n                    objects.push(depthPassMesh);\n\n                    if (extrusionAnimationEnabled) {\n                        extrudedObjects.push({\n                            object: depthPassMesh,\n                            materialFeature: true\n                        });\n                    }\n\n                    setDepthPrePassStencil(depthPassMesh, object as THREE.Mesh);\n                }\n\n                this.registerTileObject(tile, object, techniqueKind);\n                objects.push(object);\n\n                // Add the extruded building edges as a separate geometry.\n                if (isExtrudedPolygonTechnique(technique) && attachment.info.edgeIndex) {\n                    const edgeGeometry = new THREE.BufferGeometry();\n                    edgeGeometry.setAttribute(\"position\", bufferGeometry.getAttribute(\"position\"));\n\n                    const colorAttribute = bufferGeometry.getAttribute(\"color\");\n                    if (colorAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"color\", colorAttribute);\n                    }\n\n                    const extrusionAttribute = bufferGeometry.getAttribute(\"extrusionAxis\");\n                    if (extrusionAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"extrusionAxis\", extrusionAttribute);\n                    }\n\n                    const normalAttribute = bufferGeometry.getAttribute(\"normal\");\n                    if (normalAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"normal\", normalAttribute);\n                    }\n\n                    const uvAttribute = bufferGeometry.getAttribute(\"uv\");\n                    if (uvAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"uv\", uvAttribute);\n                    }\n\n                    edgeGeometry.setIndex(\n                        attachment.getBufferAttribute(attachment.info.edgeIndex!)\n                    );\n\n                    // Read the uniforms from the technique values (and apply the default values).\n                    const extrudedPolygonTechnique = technique as ExtrudedPolygonTechnique;\n\n                    const fadingParams = this.getPolygonFadingParams(\n                        discreteZoomEnv,\n                        extrudedPolygonTechnique\n                    );\n\n                    // Configure the edge material based on the theme values.\n                    const materialParams: EdgeMaterialParameters = {\n                        color: fadingParams.color,\n                        colorMix: fadingParams.colorMix,\n                        fadeNear: fadingParams.lineFadeNear,\n                        fadeFar: fadingParams.lineFadeFar\n                    };\n                    const edgeMaterial = new EdgeMaterial(materialParams);\n                    const edgeObj = new THREE.LineSegments(edgeGeometry, edgeMaterial);\n\n                    // Set the correct render order.\n                    edgeObj.renderOrder = object.renderOrder + 0.1;\n\n                    FadingFeature.addRenderHelper(\n                        edgeObj,\n                        viewRanges,\n                        fadingParams.lineFadeNear,\n                        fadingParams.lineFadeFar,\n                        false,\n                        extrudedPolygonTechnique.lineColor !== undefined &&\n                            Expr.isExpr(extrudedPolygonTechnique.lineColor)\n                            ? () => {\n                                  applyBaseColorToMaterial(\n                                      edgeMaterial,\n                                      edgeMaterial.color,\n                                      extrudedPolygonTechnique,\n                                      extrudedPolygonTechnique.lineColor!,\n                                      mapView.env\n                                  );\n                              }\n                            : undefined\n                    );\n\n                    if (extrusionAnimationEnabled) {\n                        extrudedObjects.push({\n                            object: edgeObj,\n                            materialFeature: false\n                        });\n                    }\n\n                    this.registerTileObject(tile, edgeObj, techniqueKind);\n                    objects.push(edgeObj);\n                }\n\n                // animate the extrusion of buildings\n                if (isExtrudedPolygonTechnique(technique) && extrusionAnimationEnabled) {\n                    extrudedObjects.push({\n                        object,\n                        materialFeature: true\n                    });\n                    object.customDepthMaterial = new MapMeshDepthMaterial({\n                        depthPacking: THREE.RGBADepthPacking\n                    });\n\n                    const extrusionAnimationDuration =\n                        technique.animateExtrusionDuration !== undefined &&\n                        animatedExtrusionHandler.forceEnabled === false\n                            ? technique.animateExtrusionDuration\n                            : animatedExtrusionHandler.duration;\n\n                    tile.animatedExtrusionTileHandler = new AnimatedExtrusionTileHandler(\n                        tile,\n                        extrudedObjects,\n                        extrusionAnimationDuration\n                    );\n                    mapView.animatedExtrusionHandler.add(tile.animatedExtrusionTileHandler);\n                }\n\n                // Add the fill area edges as a separate geometry.\n\n                if (isFillTechnique(technique) && attachment.info.edgeIndex) {\n                    const outlineGeometry = new THREE.BufferGeometry();\n                    outlineGeometry.setAttribute(\n                        \"position\",\n                        bufferGeometry.getAttribute(\"position\")\n                    );\n                    outlineGeometry.setIndex(\n                        attachment.getBufferAttribute(attachment.info.edgeIndex!)\n                    );\n\n                    const fillTechnique = technique as FillTechnique;\n\n                    const fadingParams = this.getPolygonFadingParams(mapView.env, fillTechnique);\n\n                    // Configure the edge material based on the theme values.\n                    const materialParams: EdgeMaterialParameters = {\n                        color: fadingParams.color,\n                        colorMix: fadingParams.colorMix,\n                        fadeNear: fadingParams.lineFadeNear,\n                        fadeFar: fadingParams.lineFadeFar\n                    };\n                    const outlineMaterial = new EdgeMaterial(materialParams);\n                    const outlineObj = new THREE.LineSegments(outlineGeometry, outlineMaterial);\n                    outlineObj.renderOrder = object.renderOrder + 0.1;\n\n                    FadingFeature.addRenderHelper(\n                        outlineObj,\n                        viewRanges,\n                        fadingParams.lineFadeNear,\n                        fadingParams.lineFadeFar,\n                        false,\n                        fillTechnique.lineColor !== undefined &&\n                            Expr.isExpr(fillTechnique.lineColor)\n                            ? (renderer, mat) => {\n                                  const edgeMaterial = mat as EdgeMaterial;\n                                  applyBaseColorToMaterial(\n                                      edgeMaterial,\n                                      edgeMaterial.color,\n                                      fillTechnique,\n                                      fillTechnique.lineColor!,\n                                      mapView.env\n                                  );\n                              }\n                            : undefined\n                    );\n\n                    this.registerTileObject(tile, outlineObj, techniqueKind);\n                    objects.push(outlineObj);\n                }\n\n                // Add the fill area edges as a separate geometry.\n                if (hasSolidLinesOutlines) {\n                    const outlineTechnique = technique as SolidLineTechnique;\n                    const outlineMaterial = material.clone() as SolidLineMaterial;\n                    applyBaseColorToMaterial(\n                        outlineMaterial,\n                        outlineMaterial.color,\n                        outlineTechnique,\n                        outlineTechnique.secondaryColor ?? 0x000000,\n                        discreteZoomEnv\n                    );\n\n                    if (outlineTechnique.secondaryCaps !== undefined) {\n                        outlineMaterial.caps = outlineTechnique.secondaryCaps;\n                    }\n                    const outlineObj = buildObject(\n                        technique,\n                        bufferGeometry,\n                        outlineMaterial,\n                        tile,\n                        elevationEnabled\n                    );\n\n                    outlineObj.renderOrder =\n                        outlineTechnique.secondaryRenderOrder !== undefined\n                            ? outlineTechnique.secondaryRenderOrder\n                            : technique.renderOrder - 0.0000001;\n\n                    const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n                    FadingFeature.addRenderHelper(\n                        outlineObj,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false,\n                        (renderer, mat) => {\n                            const lineMaterial = mat as SolidLineMaterial;\n\n                            const unitFactor =\n                                // tslint:disable-next-line: deprecation\n                                outlineTechnique.metricUnit === \"Pixel\"\n                                    ? mapView.pixelToWorld\n                                    : 1.0;\n\n                            if (outlineTechnique.secondaryColor !== undefined) {\n                                applyBaseColorToMaterial(\n                                    lineMaterial,\n                                    lineMaterial.color,\n                                    outlineTechnique,\n                                    outlineTechnique.secondaryColor,\n                                    mapView.env\n                                );\n                            }\n\n                            if (outlineTechnique.secondaryWidth !== undefined) {\n                                const techniqueLineWidth = getPropertyValue(\n                                    outlineTechnique.lineWidth!,\n                                    mapView.env\n                                );\n                                const techniqueSecondaryWidth = getPropertyValue(\n                                    outlineTechnique.secondaryWidth!,\n                                    mapView.env\n                                );\n                                const techniqueOpacity = getPropertyValue(\n                                    outlineTechnique.opacity,\n                                    mapView.env\n                                );\n                                // hide outline when it's equal or smaller then line to avoid subpixel contour\n                                const lineWidth =\n                                    techniqueSecondaryWidth <= techniqueLineWidth &&\n                                    (techniqueOpacity === null || techniqueOpacity === 1)\n                                        ? 0\n                                        : techniqueSecondaryWidth;\n                                lineMaterial.lineWidth = lineWidth * unitFactor;\n                            }\n                        }\n                    );\n\n                    this.registerTileObject(tile, outlineObj, techniqueKind);\n                    objects.push(outlineObj);\n                }\n            }\n        }\n    }\n\n    /**\n     * Prepare the [[Tile]]s pois. Uses the [[PoiManager]] in [[MapView]].\n     */\n    preparePois(tile: Tile, decodedTile: DecodedTile) {\n        if (decodedTile.poiGeometries !== undefined) {\n            tile.mapView.poiManager.addPois(tile, decodedTile);\n        }\n    }\n\n    /**\n     * Create a ground plane mesh for a tile\n     * @param tile Tile\n     * @param material Material\n     * @param createTexCoords Enable creation of texture coordinates\n     */\n    createGroundPlane(\n        tile: Tile,\n        material: THREE.Material | THREE.Material[],\n        createTexCoords: boolean,\n        shadowsEnabled?: boolean\n    ): THREE.Mesh {\n        const { dataSource, projection, mapView } = tile;\n        const sourceProjection = dataSource.getTilingScheme().projection;\n        const shouldSubdivide = projection.type === ProjectionType.Spherical;\n        const tmpV = new THREE.Vector3();\n\n        function moveTileCenter(geom: THREE.BufferGeometry) {\n            const attr = geom.getAttribute(\"position\") as THREE.BufferAttribute;\n            const posArray = attr.array as Float32Array;\n            for (let i = 0; i < posArray.length; i += 3) {\n                tmpV.set(posArray[i], posArray[i + 1], posArray[i + 2]);\n                projection.reprojectPoint(sourceProjection, tmpV, tmpV);\n                tmpV.sub(tile.center);\n                posArray[i] = tmpV.x;\n                posArray[i + 1] = tmpV.y;\n                posArray[i + 2] = tmpV.z;\n            }\n            attr.needsUpdate = true;\n        }\n\n        // Create plane\n        const { east, west, north, south } = tile.geoBox;\n        const geometry = new THREE.BufferGeometry();\n        const sw = sourceProjection.projectPoint(\n            new GeoCoordinates(south, west),\n            new THREE.Vector3()\n        );\n        const se = sourceProjection.projectPoint(\n            new GeoCoordinates(south, east),\n            new THREE.Vector3()\n        );\n        const nw = sourceProjection.projectPoint(\n            new GeoCoordinates(north, west),\n            new THREE.Vector3()\n        );\n        const ne = sourceProjection.projectPoint(\n            new GeoCoordinates(north, east),\n            new THREE.Vector3()\n        );\n        const posAttr = new THREE.BufferAttribute(\n            new Float32Array([...sw.toArray(), ...se.toArray(), ...nw.toArray(), ...ne.toArray()]),\n            3\n        );\n        geometry.setAttribute(\"position\", posAttr);\n        if (shadowsEnabled === true) {\n            sourceProjection.surfaceNormal(sw, tmpV);\n            // Webmercator needs to have it negated to work correctly.\n            tmpV.negate();\n            const normAttr = new THREE.BufferAttribute(\n                new Float32Array([\n                    ...tmpV.toArray(),\n                    ...tmpV.toArray(),\n                    ...tmpV.toArray(),\n                    ...tmpV.toArray()\n                ]),\n                3\n            );\n            geometry.setAttribute(\"normal\", normAttr);\n        }\n        geometry.setIndex(new THREE.BufferAttribute(new Uint16Array([0, 1, 2, 2, 1, 3]), 1));\n\n        if (createTexCoords) {\n            const uvAttr = new THREE.BufferAttribute(new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]), 2);\n            geometry.setAttribute(\"uv\", uvAttr);\n        }\n\n        if (shouldSubdivide) {\n            const geometries: THREE.BufferGeometry[] = [];\n            const sphericalModifier = new SphericalGeometrySubdivisionModifier(\n                THREE.MathUtils.degToRad(10),\n                sourceProjection\n            );\n            const enableMixedLod = mapView.enableMixedLod || mapView.enableMixedLod === undefined;\n\n            if (enableMixedLod) {\n                // Use a [[LodMesh]] to adapt tesselation of tile depending on zoom level\n                for (let zoomLevelOffset = 0; zoomLevelOffset < 4; ++zoomLevelOffset) {\n                    const subdivision = Math.pow(2, zoomLevelOffset);\n                    const zoomLevelGeometry = geometry.clone();\n                    if (subdivision > 1) {\n                        const edgeModifier = new EdgeLengthGeometrySubdivisionModifier(\n                            subdivision,\n                            tile.geoBox,\n                            SubdivisionMode.All,\n                            sourceProjection\n                        );\n                        edgeModifier.modify(zoomLevelGeometry);\n                    }\n                    sphericalModifier.modify(zoomLevelGeometry);\n                    moveTileCenter(zoomLevelGeometry);\n                    geometries.push(zoomLevelGeometry);\n                }\n                return new LodMesh(geometries, material);\n            } else {\n                // Use static mesh if mixed LOD is disabled\n                sphericalModifier.modify(geometry);\n                moveTileCenter(geometry);\n\n                return new THREE.Mesh(geometry, material);\n            }\n        } else {\n            // Use static mesh for planar projection\n            moveTileCenter(geometry);\n            return new THREE.Mesh(geometry, material);\n        }\n    }\n\n    /**\n     * Creates and add a background plane for the tile.\n     * @param tile Tile\n     * @param renderOrder Render order of the tile\n     */\n    addGroundPlane(tile: Tile, renderOrder: number) {\n        const shadowsEnabled = tile.mapView.shadowsEnabled;\n        const material = this.createGroundPlaneMaterial(\n            new THREE.Color(tile.mapView.clearColor),\n            shadowsEnabled,\n            tile.mapView.projection.type === ProjectionType.Spherical\n        );\n        const mesh = this.createGroundPlane(tile, material, false, shadowsEnabled);\n        mesh.receiveShadow = shadowsEnabled;\n        mesh.renderOrder = renderOrder;\n        this.registerTileObject(tile, mesh, GeometryKind.Background);\n        tile.objects.push(mesh);\n    }\n\n    /**\n     * Gets the attachments of the given [[DecodedTile]].\n     *\n     * @param decodedTile The [[DecodedTile]].\n     */\n    private *getAttachments(decodedTile: DecodedTile): Generator<AttachmentInfo> {\n        const cache = new AttachmentCache();\n\n        for (const geometry of decodedTile.geometries) {\n            // the main attachment\n\n            const mainAttachment: Attachment = {\n                index: geometry.index,\n                edgeIndex: geometry.edgeIndex,\n                uuid: geometry.uuid,\n                groups: geometry.groups\n            };\n\n            yield new AttachmentInfo(geometry, mainAttachment, cache);\n\n            if (geometry.attachments) {\n                // the additional attachments\n                for (const info of geometry.attachments) {\n                    yield new AttachmentInfo(geometry, info, cache);\n                }\n            }\n        }\n    }\n\n    /**\n     * Process the given [[Tile]] and assign default values to render orders\n     * and label priorities.\n     *\n     * @param tile The [[Tile]] to process.\n     */\n    private processPriorities(tile: Tile) {\n        const decodedTile = tile.decodedTile;\n\n        if (decodedTile === undefined) {\n            return;\n        }\n\n        const theme = tile.mapView;\n\n        if (!theme) {\n            return;\n        }\n\n        const { priorities, labelPriorities } = tile.mapView.theme;\n\n        decodedTile.techniques.forEach(technique => {\n            if (\n                isTextTechnique(technique) ||\n                isPoiTechnique(technique) ||\n                isLineMarkerTechnique(technique)\n            ) {\n                // for screen-space techniques the `category` is used to assign\n                // priorities.\n                if (labelPriorities && typeof technique._category === \"string\") {\n                    // override the `priority` when the technique uses `category`.\n                    const priority = labelPriorities.indexOf(technique._category);\n                    if (priority !== -1) {\n                        technique.priority = labelPriorities.length - priority;\n                    }\n                }\n            } else if (priorities && technique._styleSet !== undefined) {\n                // Compute the render order based on the style category and styleSet.\n                const computeRenderOrder = (category: string): number | undefined => {\n                    const priority = priorities?.findIndex(\n                        entry => entry.group === technique._styleSet && entry.category === category\n                    );\n\n                    return priority !== undefined && priority !== -1\n                        ? (priority + 1) * 10\n                        : undefined;\n                };\n\n                if (typeof technique._category === \"string\") {\n                    // override the renderOrder when the technique is using categories.\n                    const renderOrder = computeRenderOrder(technique._category);\n\n                    if (renderOrder !== undefined) {\n                        technique.renderOrder = renderOrder;\n                    }\n                }\n\n                if (typeof technique._secondaryCategory === \"string\") {\n                    // override the secondaryRenderOrder when the technique is using categories.\n                    const secondaryRenderOrder = computeRenderOrder(technique._secondaryCategory);\n\n                    if (secondaryRenderOrder !== undefined) {\n                        (technique as any).secondaryRenderOrder = secondaryRenderOrder;\n                    }\n                }\n            }\n        });\n    }\n\n    private createGroundPlaneMaterial(\n        color: THREE.Color,\n        shadowsEnabled: boolean,\n        depthWrite: boolean\n    ): THREE.Material {\n        if (shadowsEnabled) {\n            return new MapMeshStandardMaterial({\n                color,\n                visible: true,\n                depthWrite,\n                roughness: 1.0\n            });\n        } else {\n            return new MapMeshBasicMaterial({\n                color,\n                visible: true,\n                depthWrite\n            });\n        }\n    }\n\n    private setupTerrainMaterial(\n        technique: TerrainTechnique,\n        material: THREE.Material,\n        terrainColor: number\n    ) {\n        if (technique.displacementMap === undefined) {\n            // Render terrain using the given color.\n            const stdMaterial = material as MapMeshStandardMaterial;\n            stdMaterial.color.set(terrainColor);\n            return;\n        }\n\n        // Render terrain using height-based colors.\n        (material as any).onBeforeCompile = (shader: THREE.Shader) => {\n            shader.fragmentShader = shader.fragmentShader.replace(\n                \"#include <map_pars_fragment>\",\n                `#include <map_pars_fragment>\n    uniform sampler2D displacementMap;\n    uniform float displacementScale;\n    uniform float displacementBias;`\n            );\n            shader.fragmentShader = shader.fragmentShader.replace(\n                \"#include <map_fragment>\",\n                `#ifdef USE_MAP\n    float minElevation = ${EarthConstants.MIN_ELEVATION.toFixed(1)};\n    float maxElevation = ${EarthConstants.MAX_ELEVATION.toFixed(1)};\n    float elevationRange = maxElevation - minElevation;\n\n    float disp = texture2D( displacementMap, vUv ).x * displacementScale + displacementBias;\n    vec4 texelColor = texture2D( map, vec2((disp - minElevation) / elevationRange, 0.0) );\n    texelColor = mapTexelToLinear( texelColor );\n    diffuseColor *= texelColor;\n#endif`\n            );\n            // We remove the displacement map from manipulating the vertices, it is\n            // however still required for the pixel shader, so it can't be directly\n            // removed.\n            shader.vertexShader = shader.vertexShader.replace(\n                \"#include <displacementmap_vertex>\",\n                \"\"\n            );\n        };\n        (material as MapMeshStandardMaterial).displacementMap!.needsUpdate = true;\n    }\n\n    private addUserData(\n        tile: Tile,\n        srcGeometry: Geometry,\n        technique: Technique,\n        object: THREE.Object3D\n    ) {\n        if ((srcGeometry.objInfos?.length ?? 0) === 0) {\n            return;\n        }\n\n        if (isTerrainTechnique(technique)) {\n            assert(\n                Object.keys(object.userData).length === 0,\n                \"Unexpected user data in terrain object\"\n            );\n\n            assert(\n                typeof srcGeometry.objInfos![0] === \"object\",\n                \"Wrong attribute map type for terrain geometry\"\n            );\n\n            const displacementMap = (srcGeometry.objInfos as DisplacementMap[])[0];\n            const tileDisplacementMap: TileDisplacementMap = {\n                tileKey: tile.tileKey,\n                texture: new THREE.DataTexture(\n                    displacementMap.buffer,\n                    displacementMap.xCountVertices,\n                    displacementMap.yCountVertices,\n                    THREE.LuminanceFormat,\n                    THREE.FloatType\n                ),\n                displacementMap,\n                geoBox: tile.geoBox\n            };\n            object.userData = tileDisplacementMap;\n        } else {\n            // Set the feature data for picking with `MapView.intersectMapObjects()` except for\n            // solid-line which uses tile-based picking.\n            const featureData: TileFeatureData = {\n                geometryType: srcGeometry.type,\n                starts: srcGeometry.featureStarts,\n                objInfos: srcGeometry.objInfos\n            };\n            object.userData.feature = featureData;\n            object.userData.technique = technique;\n        }\n    }\n\n    /**\n     * Gets the fading parameters for several kinds of objects.\n     */\n    private getFadingParams(\n        env: Env,\n        technique: MakeTechniqueAttrs<BaseTechniqueParams>\n    ): FadingParameters {\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, env)\n                : FadingFeature.DEFAULT_FADE_NEAR;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, env)\n                : FadingFeature.DEFAULT_FADE_FAR;\n        return {\n            fadeNear,\n            fadeFar\n        };\n    }\n\n    /**\n     * Gets the fading parameters for several kinds of objects.\n     */\n    private getPolygonFadingParams(\n        env: Env,\n        technique: FillTechnique | ExtrudedPolygonTechnique\n    ): PolygonFadingParameters {\n        let color: string | number | undefined;\n        let colorMix = EdgeMaterial.DEFAULT_COLOR_MIX;\n\n        if (technique.lineColor !== undefined) {\n            color = getPropertyValue(technique.lineColor, env);\n            if (isExtrudedPolygonTechnique(technique)) {\n                const extrudedPolygonTechnique = technique as ExtrudedPolygonTechnique;\n                colorMix =\n                    extrudedPolygonTechnique.lineColorMix !== undefined\n                        ? extrudedPolygonTechnique.lineColorMix\n                        : EdgeMaterial.DEFAULT_COLOR_MIX;\n            }\n        }\n\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, env)\n                : FadingFeature.DEFAULT_FADE_NEAR;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, env)\n                : FadingFeature.DEFAULT_FADE_FAR;\n\n        const lineFadeNear =\n            technique.lineFadeNear !== undefined\n                ? getPropertyValue(technique.lineFadeNear, env)\n                : fadeNear;\n        const lineFadeFar =\n            technique.lineFadeFar !== undefined\n                ? getPropertyValue(technique.lineFadeFar, env)\n                : fadeFar;\n\n        if (color === undefined) {\n            color = EdgeMaterial.DEFAULT_COLOR;\n        }\n\n        return {\n            color,\n            colorMix,\n            fadeNear,\n            fadeFar,\n            lineFadeNear,\n            lineFadeFar\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Font } from \"./FontCatalog\";\n\n/**\n * Structure containing all the required information necessary to render a BMFont glyph using\n * [[TextCanvas]].\n */\nexport class GlyphData {\n    /**\n     * Unicode character represented by this glyph.\n     */\n    readonly character: string;\n\n    /**\n     * Glyph' direction.\n     */\n    readonly direction: UnicodeUtils.Direction;\n\n    /**\n     * Array containing the positions for all corners of this glyph.\n     */\n    positions: THREE.Vector3[] = [];\n\n    /**\n     * Array containing the source texture coordinates for all corners of this glyph.\n     * Used to sample the original texture atlas pages.\n     */\n    sourceTextureCoordinates: THREE.Vector2[] = [];\n\n    /**\n     * Array containing the dynamic texture coordinates for all corners of this glyph.\n     * Used to sample the dynamic texture atlas page.\n     */\n    dynamicTextureCoordinates: THREE.Vector2[] = [];\n\n    /**\n     * Source texture atlas' page copy index.\n     */\n    copyIndex: number = 0;\n\n    /**\n     * Flag indicating if glyph can be currently rendered.\n     */\n    isInCache: boolean = false;\n\n    /**\n     * Creates a new `GlyphData` object.\n     *\n     * @param codePoint Unicode code point.\n     * @param block Unicode block.\n     * @param width Glyph' width.\n     * @param height Glyph' height.\n     * @param advanceX Amount of pixel to move after placing this glyph.\n     * @param offsetX Horizontal offset from the glyph' origin.\n     * @param offsetY Vertical offset from the glyph' origin.\n     * @param u0 Glyph' left texture coordinate.\n     * @param v0 Glyph' bottom texture coordinate.\n     * @param u1 Glyph' right texture coordinate.\n     * @param v1 Glyph' top texture coordinate.\n     * @param texture Glyph' source texture atlas page.\n     * @param font Glyph' font.\n     *\n     * @returns New `GlyphData`.\n     */\n    constructor(\n        readonly codePoint: number,\n        readonly block: string,\n        readonly width: number,\n        readonly height: number,\n        readonly advanceX: number,\n        readonly offsetX: number,\n        readonly offsetY: number,\n        u0: number,\n        v0: number,\n        u1: number,\n        v1: number,\n        readonly texture: THREE.Texture,\n        readonly font: Font\n    ) {\n        this.character = String.fromCodePoint(codePoint);\n        this.direction = UnicodeUtils.getDirection(codePoint, block);\n\n        const left = this.offsetX;\n        const right = left + this.width;\n        const top = font.metrics.lineHeight - this.offsetY;\n        const bottom = top - this.height;\n\n        this.positions.push(\n            new THREE.Vector3(left, bottom, 1.0),\n            new THREE.Vector3(right, bottom, 1.0),\n            new THREE.Vector3(left, top, 1.0),\n            new THREE.Vector3(right, top, 1.0)\n        );\n\n        this.sourceTextureCoordinates.push(\n            new THREE.Vector2(u0, v0),\n            new THREE.Vector2(u1, v0),\n            new THREE.Vector2(u0, v1),\n            new THREE.Vector2(u1, v1)\n        );\n\n        this.dynamicTextureCoordinates.push(\n            new THREE.Vector2(0.0, 0.0),\n            new THREE.Vector2(1.0, 0.0),\n            new THREE.Vector2(0.0, 1.0),\n            new THREE.Vector2(1.0, 1.0)\n        );\n    }\n\n    /**\n     * Clone this `GlyphData`.\n     *\n     * @returns Cloned `GlyphData`.\n     */\n    clone(): GlyphData {\n        return new GlyphData(\n            this.codePoint,\n            this.block,\n            this.width,\n            this.height,\n            this.advanceX,\n            this.offsetX,\n            this.offsetY,\n            this.sourceTextureCoordinates[0].x,\n            this.sourceTextureCoordinates[0].y,\n            this.sourceTextureCoordinates[3].x,\n            this.sourceTextureCoordinates[3].y,\n            this.texture,\n            this.font\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"../TextCanvas\";\nimport { GlyphData } from \"./GlyphData\";\nimport { TextBufferObject } from \"./TextBufferObject\";\nimport { TextRenderStyle } from \"./TextStyle\";\n\nexport const MAX_CAPACITY = 65536;\nexport const VERTEX_BUFFER_STRIDE = 16;\nexport const INDEX_BUFFER_STRIDE = 1;\nexport const VERTICES_PER_QUAD = 4;\nexport const INDICES_PER_QUAD = 6;\nexport const QUAD_VERTEX_MEMORY_FOOTPRINT = VERTICES_PER_QUAD * VERTEX_BUFFER_STRIDE;\nexport const QUAD_INDEX_MEMORY_FOOTPRINT = INDICES_PER_QUAD * INDEX_BUFFER_STRIDE;\n\n/**\n * Number of bytes for float in an Float32Array.\n */\nconst NUM_BYTES_PER_FLOAT = 4;\n\n/**\n * Number of bytes for integer number in an UInt32Array.\n */\nconst NUM_BYTES_PER_INT32 = 4;\n\n/**\n * Interface containing user-supplied picking data, as well as the [[TextGeometry]] range it's\n * assigned to.\n */\ninterface PickingData {\n    start: number;\n    end: number;\n    data: any;\n}\n\n/**\n * Procedural geometry that holds vertex attribute data for all glyphs in a [[TextCanvas]].\n */\nexport class TextGeometry {\n    /**\n     * Count of currently drawn glyphs.\n     */\n    get drawCount(): number {\n        return this.m_drawCount;\n    }\n\n    /**\n     * Mesh used to render foreground glyphs.\n     */\n    get mesh(): THREE.Mesh {\n        return this.m_mesh;\n    }\n\n    /**\n     * Mesh used to render background glyphs.\n     */\n    get backgroundMesh(): THREE.Mesh {\n        return this.m_bgMesh;\n    }\n    /**\n     * Maximum glyph capacity.\n     */\n    readonly capacity: number;\n\n    private m_currentCapacity: number;\n    private m_drawCount: number;\n    private m_updateOffset: number;\n\n    private m_vertexBuffer: THREE.InterleavedBuffer;\n    private m_positionAttribute: THREE.InterleavedBufferAttribute;\n    private m_uvAttribute: THREE.InterleavedBufferAttribute;\n    private m_colorAttribute: THREE.InterleavedBufferAttribute;\n    private m_bgColorAttribute: THREE.InterleavedBufferAttribute;\n    private m_indexBuffer: THREE.BufferAttribute;\n\n    private m_geometry: THREE.BufferGeometry;\n    private m_mesh: THREE.Mesh;\n    private m_bgMesh: THREE.Mesh;\n\n    private m_pickingCount: number;\n    private m_pickingDataArray: PickingData[];\n\n    /**\n     * Creates a new `TextGeometry`.\n     *\n     * @param material Material used to render foreground glyphs.\n     * @param backgroundMaterial Material used to render background glyphs.\n     * @param initialSize Initial amount of glyphs that can be stored.\n     * @param capacity Maximum glyph capacity.\n     *\n     * @returns New `TextGeometry`.\n     */\n    constructor(\n        readonly scene: THREE.Scene,\n        material: THREE.Material,\n        backgroundMaterial: THREE.Material,\n        initialSize: number,\n        capacity: number\n    ) {\n        this.capacity = Math.min(capacity, MAX_CAPACITY);\n        this.m_currentCapacity = Math.min(initialSize, capacity);\n        this.m_drawCount = 0;\n        this.m_updateOffset = 0;\n        this.m_pickingCount = 0;\n\n        this.m_vertexBuffer = new THREE.InterleavedBuffer(\n            new Float32Array(this.m_currentCapacity * QUAD_VERTEX_MEMORY_FOOTPRINT),\n            VERTEX_BUFFER_STRIDE\n        );\n        this.m_vertexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_positionAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 0);\n        this.m_uvAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 4);\n        this.m_colorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 8);\n        this.m_bgColorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 12);\n\n        this.m_indexBuffer = new THREE.BufferAttribute(\n            new Uint32Array(this.m_currentCapacity * QUAD_INDEX_MEMORY_FOOTPRINT),\n            INDEX_BUFFER_STRIDE\n        );\n        this.m_indexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_geometry = new THREE.BufferGeometry();\n        this.m_geometry.setAttribute(\"position\", this.m_positionAttribute);\n        this.m_geometry.setAttribute(\"uv\", this.m_uvAttribute);\n        this.m_geometry.setAttribute(\"color\", this.m_colorAttribute);\n        this.m_geometry.setAttribute(\"bgColor\", this.m_bgColorAttribute);\n        this.m_geometry.setIndex(this.m_indexBuffer);\n\n        this.m_pickingDataArray = new Array(this.m_currentCapacity);\n\n        this.m_mesh = new THREE.Mesh(this.m_geometry, material);\n        this.m_bgMesh = new THREE.Mesh(this.m_geometry, backgroundMaterial);\n        this.m_mesh.renderOrder = Number.MAX_SAFE_INTEGER;\n        this.m_bgMesh.renderOrder = Number.MAX_SAFE_INTEGER - 1;\n        this.m_mesh.frustumCulled = false;\n        this.m_bgMesh.frustumCulled = false;\n        this.scene.add(this.m_bgMesh, this.m_mesh);\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose() {\n        this.scene.remove(this.m_bgMesh, this.m_mesh);\n        this.m_geometry.dispose();\n    }\n\n    /**\n     * Clear the geometry.\n     */\n    clear() {\n        this.m_drawCount = 0;\n        this.m_updateOffset = 0;\n        this.m_pickingCount = 0;\n    }\n\n    /**\n     * Update the GPU resources to reflect the latest additions to the geometry.\n     */\n    update() {\n        if (this.drawCount > this.m_updateOffset) {\n            this.m_vertexBuffer.needsUpdate = true;\n            this.m_vertexBuffer.updateRange.offset =\n                this.m_updateOffset * QUAD_VERTEX_MEMORY_FOOTPRINT;\n            this.m_vertexBuffer.updateRange.count =\n                (this.m_drawCount - this.m_updateOffset) * QUAD_VERTEX_MEMORY_FOOTPRINT;\n            this.m_indexBuffer.needsUpdate = true;\n            this.m_indexBuffer.updateRange.offset =\n                this.m_updateOffset * QUAD_INDEX_MEMORY_FOOTPRINT;\n            this.m_indexBuffer.updateRange.count =\n                (this.m_drawCount - this.m_updateOffset) * QUAD_INDEX_MEMORY_FOOTPRINT;\n        }\n        this.m_updateOffset = this.m_drawCount;\n        this.m_geometry.setDrawRange(0, this.m_drawCount * INDICES_PER_QUAD);\n    }\n\n    /**\n     * Add a new glyph to the `TextGeometry`.\n     *\n     * @param glyphData [[GlyphData]] holding the glyph description.\n     * @param corners Transformed glyph corners.\n     * @param weight Foreground glyph sampling weight.\n     * @param bgWeight Foreground glyph sampling weight.\n     * @param mirrored If `true`, UVs will be horizontally mirrored (needed for RTL punctuation).\n     * @param style Currently set [[TextRenderStyle]].\n     *\n     * @returns Result of the addition.\n     */\n    add(\n        glyphData: GlyphData,\n        corners: THREE.Vector3[],\n        weight: number,\n        bgWeight: number,\n        mirrored: boolean,\n        style: TextRenderStyle\n    ): boolean {\n        if (this.m_drawCount >= this.capacity) {\n            return false;\n        } else if (this.m_drawCount >= this.m_currentCapacity) {\n            const newSize = Math.min(this.m_currentCapacity * 2, this.capacity);\n            this.resizeBuffers(newSize);\n        }\n\n        const baseVertex = this.m_drawCount * VERTICES_PER_QUAD;\n        const baseIndex = this.m_drawCount * INDICES_PER_QUAD;\n\n        for (let i = 0; i < VERTICES_PER_QUAD; ++i) {\n            this.m_positionAttribute.setXYZW(\n                baseVertex + i,\n                corners[i].x,\n                corners[i].y,\n                corners[i].z,\n                (mirrored ? -1.0 : 1.0) * style.rotation\n            );\n            const mirroredUVIdx = mirrored ? ((i + 1) % 2) + Math.floor(i / 2) * 2 : i;\n            this.m_uvAttribute.setXYZW(\n                baseVertex + i,\n                glyphData.dynamicTextureCoordinates[mirroredUVIdx].x,\n                glyphData.dynamicTextureCoordinates[mirroredUVIdx].y,\n                weight,\n                bgWeight\n            );\n            this.m_colorAttribute.setXYZW(\n                baseVertex + i,\n                style.color.r,\n                style.color.g,\n                style.color.b,\n                style.opacity\n            );\n            this.m_bgColorAttribute.setXYZW(\n                baseVertex + i,\n                style.backgroundColor.r,\n                style.backgroundColor.g,\n                style.backgroundColor.b,\n                style.backgroundOpacity\n            );\n        }\n\n        this.m_indexBuffer.setX(baseIndex, baseVertex);\n        this.m_indexBuffer.setX(baseIndex + 1, baseVertex + 1);\n        this.m_indexBuffer.setX(baseIndex + 2, baseVertex + 2);\n        this.m_indexBuffer.setX(baseIndex + 3, baseVertex + 2);\n        this.m_indexBuffer.setX(baseIndex + 4, baseVertex + 1);\n        this.m_indexBuffer.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_drawCount;\n        return true;\n    }\n\n    /**\n     * Add a new glyph to a text buffer.\n     *\n     * @param buffer Target buffer where glyph attributes will be stored.\n     * @param offset Offset of the target buffer.\n     * @param glyphData [[GlyphData]] holding the glyph description.\n     * @param corners Transformed glyph corners.\n     * @param weight Foreground glyph sampling weight.\n     * @param bgWeight Foreground glyph sampling weight.\n     * @param mirrored If `true`, UVs will be mirrored (needed for RTL punctuation).\n     * @param style Currently set [[TextRenderStyle]].\n     */\n    addToBuffer(\n        buffer: Float32Array,\n        offset: number,\n        glyphData: GlyphData,\n        corners: THREE.Vector3[],\n        weight: number,\n        bgWeight: number,\n        mirrored: boolean,\n        style: TextRenderStyle\n    ): void {\n        for (let i = 0; i < VERTICES_PER_QUAD; ++i) {\n            const vertexOffset = offset + VERTEX_BUFFER_STRIDE * i;\n            buffer[vertexOffset] = corners[i].x;\n            buffer[vertexOffset + 1] = corners[i].y;\n            buffer[vertexOffset + 2] = corners[i].z;\n            buffer[vertexOffset + 3] = (mirrored ? -1.0 : 1.0) * style.rotation;\n\n            const mirroredUVIdx = mirrored ? ((i + 1) % 2) + Math.floor(i / 2) * 2 : i;\n            buffer[vertexOffset + 4] = glyphData.dynamicTextureCoordinates[mirroredUVIdx].x;\n            buffer[vertexOffset + 5] = glyphData.dynamicTextureCoordinates[mirroredUVIdx].y;\n            buffer[vertexOffset + 6] = weight;\n            buffer[vertexOffset + 7] = bgWeight;\n\n            buffer[vertexOffset + 8] = style.color.r;\n            buffer[vertexOffset + 9] = style.color.g;\n            buffer[vertexOffset + 10] = style.color.b;\n            buffer[vertexOffset + 11] = style.opacity;\n\n            buffer[vertexOffset + 12] = style.backgroundColor.r;\n            buffer[vertexOffset + 13] = style.backgroundColor.g;\n            buffer[vertexOffset + 14] = style.backgroundColor.b;\n            buffer[vertexOffset + 15] = style.backgroundOpacity;\n        }\n    }\n\n    /**\n     * Add a previously computed [[TextBufferObject]] to the `TextGeometry`. Extra parameters can\n     * be passed to override the passed attribute data.\n     *\n     * @param textBufferObject [[TextBufferObject]] containing computed glyphs.\n     * @param position Override position value.\n     * @param scale Override scale value.\n     * @param rotation Override rotation value.\n     * @param color Override color value.\n     * @param opacity Override opacity value.\n     * @param bgColor Override background color value.\n     * @param bgOpacity Override background opacity value.\n     *\n     * @returns Result of the addition.\n     */\n    addTextBufferObject(\n        textBufferObject: TextBufferObject,\n        position?: THREE.Vector3,\n        scale?: number,\n        rotation?: number,\n        color?: THREE.Color,\n        opacity?: number,\n        bgColor?: THREE.Color,\n        bgOpacity?: number\n    ): boolean {\n        if (this.m_drawCount + textBufferObject.glyphs.length >= this.capacity) {\n            return false;\n        } else if (this.m_drawCount + textBufferObject.glyphs.length >= this.m_currentCapacity) {\n            const newSize = Math.min(this.m_currentCapacity * 2, this.capacity);\n            this.resizeBuffers(newSize);\n        }\n\n        const s = scale || 1.0;\n        const r = rotation || 0.0;\n        const cosR = Math.cos(r);\n        const sinR = Math.sin(r);\n        const offsetX = position !== undefined ? position.x : 0.0;\n        const offsetY = position !== undefined ? position.y : 0.0;\n        const offsetZ = position !== undefined ? position.z : 0.0;\n\n        const buffer = textBufferObject.buffer;\n\n        const rot = buffer[3];\n        const rotSign = rot < 0 ? -1.0 : 1.0;\n\n        const red = color !== undefined ? color.r : buffer[8];\n        const green = color !== undefined ? color.g : buffer[9];\n        const blue = color !== undefined ? color.b : buffer[10];\n        const alpha = opacity !== undefined ? opacity : buffer[11];\n        const bgRed = bgColor !== undefined ? bgColor.r : buffer[12];\n        const bgGreen = bgColor !== undefined ? bgColor.g : buffer[13];\n        const bgBlue = bgColor !== undefined ? bgColor.b : buffer[14];\n        const bgAlpha = bgOpacity !== undefined ? bgOpacity : buffer[15];\n\n        const targetOffset = this.m_drawCount * VERTICES_PER_QUAD;\n        for (let i = 0; i < textBufferObject.glyphs.length; ++i) {\n            const srcOffset = i * QUAD_VERTEX_MEMORY_FOOTPRINT;\n\n            const glyph = textBufferObject.glyphs[i];\n            if (!glyph.isInCache) {\n                return false;\n            }\n\n            const mirrored = buffer[srcOffset + 4] > buffer[srcOffset + VERTEX_BUFFER_STRIDE + 4];\n            const w = buffer[srcOffset + 6];\n            const bw = buffer[srcOffset + 7];\n\n            for (let j = 0; j < VERTICES_PER_QUAD; ++j) {\n                const x = buffer[srcOffset + j * VERTEX_BUFFER_STRIDE];\n                const y = buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 1];\n                this.m_positionAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    x * s * cosR + y * s * -sinR + offsetX,\n                    x * s * sinR + y * s * cosR + offsetY,\n                    buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 2] + offsetZ,\n                    buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 3] + rotSign * r\n                );\n                const mirroredUVIdx = mirrored ? ((j + 1) % 2) + Math.floor(j / 2) * 2 : j;\n                this.m_uvAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    glyph.dynamicTextureCoordinates[mirroredUVIdx].x,\n                    glyph.dynamicTextureCoordinates[mirroredUVIdx].y,\n                    w,\n                    (bw - w) / s + w\n                );\n                this.m_colorAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    red,\n                    green,\n                    blue,\n                    alpha\n                );\n                this.m_bgColorAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    bgRed,\n                    bgGreen,\n                    bgBlue,\n                    bgAlpha\n                );\n            }\n\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 1,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 1\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 2,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 2\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 3,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 2\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 4,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 1\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 5,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 3\n            );\n        }\n\n        this.m_drawCount += textBufferObject.glyphs.length;\n        return true;\n    }\n\n    /**\n     * Adds picking data for glyphs from the specified start until the last glyph added.\n     *\n     * @param startIdx First glyph index that this picking data is associated to.\n     * @param endIdx Last glyph index that this picking data is associated to.\n     * @param pickingData Picking data to be added.\n     */\n    addPickingData(startIdx: number, endIdx: number, pickingData: any): boolean {\n        if (this.m_pickingCount >= this.m_currentCapacity) {\n            return false;\n        }\n\n        this.m_pickingDataArray[this.m_pickingCount] = {\n            start: Math.min(startIdx, this.capacity),\n            end: Math.min(endIdx, this.capacity),\n            data: pickingData\n        };\n\n        ++this.m_pickingCount;\n        return true;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple glyphs\n     * are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pick(screenPosition: THREE.Vector2, pickCallback: (pickData: any | undefined) => void) {\n        for (const pickingData of this.m_pickingDataArray) {\n            if (pickingData === undefined) {\n                return;\n            }\n\n            for (let i = pickingData.start; i < pickingData.end; ++i) {\n                const positionIndex = i * VERTICES_PER_QUAD;\n\n                const minX = Math.min(\n                    this.m_positionAttribute.getX(positionIndex + 2),\n                    this.m_positionAttribute.getX(positionIndex + 1)\n                );\n                if (screenPosition.x < minX) {\n                    continue;\n                }\n\n                const maxX = Math.max(\n                    this.m_positionAttribute.getX(positionIndex + 2),\n                    this.m_positionAttribute.getX(positionIndex + 1)\n                );\n                if (screenPosition.x > maxX) {\n                    continue;\n                }\n\n                const minY = Math.min(\n                    this.m_positionAttribute.getY(positionIndex + 2),\n                    this.m_positionAttribute.getY(positionIndex + 1)\n                );\n                if (screenPosition.y < minY) {\n                    continue;\n                }\n\n                const maxY = Math.max(\n                    this.m_positionAttribute.getY(positionIndex + 2),\n                    this.m_positionAttribute.getY(positionIndex + 1)\n                );\n                if (screenPosition.y > maxY) {\n                    continue;\n                }\n\n                pickCallback(pickingData.data);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `TextGeometry`.\n     *\n     * @param info The info object to increment with the values from this `TextGeometry`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        const numBytes =\n            this.m_vertexBuffer.count * NUM_BYTES_PER_FLOAT +\n            this.m_indexBuffer.count * NUM_BYTES_PER_INT32;\n        info.heapSize += numBytes;\n        info.gpuSize += numBytes;\n    }\n\n    private resizeBuffers(size: number) {\n        this.m_currentCapacity = size;\n\n        const newVertexBuffer = new Float32Array(size * QUAD_VERTEX_MEMORY_FOOTPRINT);\n        newVertexBuffer.set(this.m_vertexBuffer.array);\n        this.m_vertexBuffer = new THREE.InterleavedBuffer(newVertexBuffer, VERTEX_BUFFER_STRIDE);\n        this.m_vertexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_positionAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 0);\n        this.m_uvAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 4);\n        this.m_colorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 8);\n        this.m_bgColorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 12);\n\n        const newIndexBuffer = new Uint32Array(size * QUAD_INDEX_MEMORY_FOOTPRINT);\n        newIndexBuffer.set(this.m_indexBuffer.array);\n        this.m_indexBuffer = new THREE.BufferAttribute(newIndexBuffer, INDEX_BUFFER_STRIDE);\n        this.m_indexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_geometry.dispose();\n        this.m_geometry = new THREE.BufferGeometry();\n        this.m_geometry.setAttribute(\"position\", this.m_positionAttribute);\n        this.m_geometry.setAttribute(\"uv\", this.m_uvAttribute);\n        this.m_geometry.setAttribute(\"color\", this.m_colorAttribute);\n        this.m_geometry.setAttribute(\"bgColor\", this.m_bgColorAttribute);\n        this.m_geometry.setIndex(this.m_indexBuffer);\n\n        this.m_pickingDataArray.length = this.m_currentCapacity;\n\n        this.scene.remove(this.m_bgMesh, this.m_mesh);\n        this.m_mesh = new THREE.Mesh(this.m_geometry, this.m_mesh.material);\n        this.m_bgMesh = new THREE.Mesh(this.m_geometry, this.m_bgMesh.material);\n        this.m_mesh.renderOrder = Number.MAX_SAFE_INTEGER;\n        this.m_bgMesh.renderOrder = Number.MAX_SAFE_INTEGER - 1;\n        this.m_mesh.frustumCulled = false;\n        this.m_bgMesh.frustumCulled = false;\n        this.scene.add(this.m_bgMesh, this.m_mesh);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GlyphData } from \"../rendering/GlyphData\";\nimport { FontUnit, FontVariant } from \"../rendering/TextStyle\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\n\n/**\n * Collection of different constants and utility functions used by [[Typesetter]]s.\n */\nexport namespace TypesettingUtils {\n    /**\n     * Ratio between EMs and Pixels.\n     */\n    export const EM_TO_PX = 16.0;\n\n    /**\n     * Ratio between Points and Pixels.\n     */\n    export const PT_TO_PX = 1.25;\n\n    /**\n     * Angle used when emulating italic fonts (oblique).\n     */\n    export const OBLIQUE_ANGLE = 0.174533;\n\n    /**\n     * Horizontal offset used when emulating italic fonts (oblique).\n     */\n    export const OBLIQUE_OFFSET = Math.tan(OBLIQUE_ANGLE);\n\n    /**\n     * Convert between any size specified in any [[FontUnit]] to pixels.\n     *\n     * @param size Font size (specified in `unit`).\n     * @param unit Size unit.\n     * @param originalSize Original size (pixels)\n     *\n     * @returns Pixel size.\n     */\n    export function getPixelSize(size: number, unit: FontUnit, originalSize: number) {\n        let result = size;\n        switch (unit) {\n            case FontUnit.Em:\n                result *= EM_TO_PX;\n                break;\n            case FontUnit.Point:\n                result *= PT_TO_PX;\n                break;\n            case FontUnit.Percent:\n                result *= (1.0 / 100) * originalSize;\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * Gets the scale applied to a certain character when using the [[FontVariant]].`SmallCaps`.\n     *\n     * @param glyphs Array containing [[TransformedGlyphData]].\n     * @param index Index to `glyphDataArray`.\n     * @param fontVariant Currently active [[FontVariant]].\n     *\n     * @returns Glyph `SmallCaps` scale.\n     */\n    export function getSmallCapsScale(\n        glyphs: GlyphData[],\n        smallCapsTransformations: boolean[],\n        index: number,\n        fontVariant: FontVariant\n    ): number {\n        const isSmallCaps =\n            smallCapsTransformations[index] && fontVariant === FontVariant.SmallCaps;\n        return isSmallCaps\n            ? glyphs[index].font.metrics.xHeight / glyphs[index].font.metrics.capHeight\n            : 1.0;\n    }\n\n    /**\n     * Returns the first strong direction (LTR or RTL) found for a given array of [[GlyphData]].\n     *\n     * @param glyphs Array containing [[GlyphData]].\n     * @param offset `glyphDataArray` offset.\n     *\n     * @returns Strong direction.\n     */\n    export function getDirection(glyphs: GlyphData[], offset: number): UnicodeUtils.Direction {\n        let result = UnicodeUtils.Direction.LTR;\n        let index = offset;\n        while (\n            glyphs[index].direction !== UnicodeUtils.Direction.LTR &&\n            glyphs[index].direction !== UnicodeUtils.Direction.RTL &&\n            index < glyphs.length - 1\n        ) {\n            ++index;\n        }\n\n        if (Math.abs(glyphs[index].direction) === 1.0) {\n            result = glyphs[index].direction;\n        }\n        return result;\n    }\n\n    /**\n     * Computes the transformation matrix for a glyph.\n     *\n     * @param transform Matrix used to store the results.\n     * @param position Glyph' position.\n     * @param scale Glyph' scale.\n     * @param rotation [[TextCanvas]] rotation.\n     * @param localRotation Glyph' local rotation.\n     */\n    export function computeGlyphTransform(\n        transform: THREE.Matrix3,\n        position: THREE.Vector3,\n        scale: number,\n        rotation: number,\n        localRotation: number\n    ): void {\n        const cosAngle = Math.cos(rotation);\n        const sinAngle = Math.sin(rotation);\n        const localCosAngle = Math.cos(localRotation);\n        const localSinAngle = Math.sin(localRotation);\n        transform.set(\n            scale * localCosAngle,\n            scale * -localSinAngle,\n            cosAngle * position.x - sinAngle * position.y,\n            scale * localSinAngle,\n            scale * localCosAngle,\n            sinAngle * position.x + cosAngle * position.y,\n            0,\n            0,\n            1.0\n        );\n    }\n\n    /**\n     * Updates the supplied bounds with the computed screen-space corners for a given glyph.\n     *\n     * @param corners Glyph' corners.\n     * @param globalBounds Global text bounds.\n     * @param individualBounds Individual per-character bounds.\n     */\n    export function updateBounds(\n        corners: THREE.Vector3[],\n        globalBounds: THREE.Box2,\n        individualBounds?: { array: THREE.Box2[]; offset: number }\n    ): void {\n        const minX = Math.min(corners[0].x, corners[1].x, corners[2].x, corners[3].x);\n        const maxX = Math.max(corners[0].x, corners[1].x, corners[2].x, corners[3].x);\n        const minY = Math.min(corners[0].y, corners[1].y, corners[2].y, corners[3].y);\n        const maxY = Math.max(corners[0].y, corners[1].y, corners[2].y, corners[3].y);\n\n        if (individualBounds !== undefined) {\n            if (individualBounds.array[individualBounds.offset] !== undefined) {\n                individualBounds.array[individualBounds.offset].min.set(minX, minY);\n                individualBounds.array[individualBounds.offset].max.set(maxX, maxY);\n            } else {\n                individualBounds.array.push(\n                    new THREE.Box2(new THREE.Vector2(minX, minY), new THREE.Vector2(maxX, maxY))\n                );\n            }\n            ++individualBounds.offset;\n        }\n\n        globalBounds.min.set(\n            Math.min(globalBounds.min.x, minX),\n            Math.min(globalBounds.min.y, minY)\n        );\n        globalBounds.max.set(\n            Math.max(globalBounds.max.x, maxX),\n            Math.max(globalBounds.max.y, maxY)\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { PickingRaycaster } from \"./PickingRaycaster\";\n\n/**\n * `MapViewPoints` is a class to extend for the `\"circles\"` and `\"squares\"` [[Technique]]s to\n * implement raycasting of [[THREE.Points]] as expected in [[MapView]], that are in screen space. It\n * copies the behaviour of the `raycast` method in [[THREE.Points]] and dispatches it to its\n * children classes, [[Circles]] and [[Squares]], who hold the intersection testing in the\n * `testPoint` method. This class also has the ability to dismiss the testing via the\n * `enableRayTesting` flag.\n *\n * Its main motivation is to handle the point styles of XYZ projects.\n *\n * @see https://github.com/mrdoob/three.js/blob/master/src/objects/Points.js\n */\nexport abstract class MapViewPoints extends THREE.Points {\n    /**\n     * This allows to discard the ray testing.\n     */\n    enableRayTesting: boolean = true;\n\n    /**\n     * Implements the intersection testing in screen space between the drawn points and the ray. The\n     * drawing of the points being different between [[Circles]] and [[Squares]], this method is\n     * implemented in these child classes.\n     *\n     * @param point The point to test.\n     * @param screenPosition The point position on screen.\n     * @param pickCoordinates The picking position on screen.\n     * @param index The index of the point in the [[THREE.Geometry]].\n     * @param distance The distance between the point and the ray origin.\n     * @param intersects The results array.\n     */\n    abstract testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ): void;\n\n    /**\n     * This method is similar to the original method `raycast` in [[THREE.Points]] except that it\n     * then calls the tailored `testPoint` method in the children classes to test intersections\n     * depending on whether the points are circles or squares, which [[THREE.Points]] cannot do.\n     *\n     * @param raycaster The raycaster.\n     * @param intersects The array to fill with the results.\n     */\n    raycast(raycaster: PickingRaycaster, intersects: THREE.Intersection[]) {\n        if (!this.enableRayTesting) {\n            return;\n        }\n\n        const geometry = this.geometry;\n        const matrixWorld = this.matrixWorld;\n        const screenCoords = raycaster.ray.origin\n            .clone()\n            .add(raycaster.ray.direction)\n            .project(raycaster.camera);\n        const mouseCoords = new THREE.Vector2(\n            Math.ceil(((screenCoords.x + 1) / 2) * raycaster.width),\n            Math.ceil(((1 - screenCoords.y) / 2) * raycaster.height)\n        );\n\n        if (geometry instanceof THREE.BufferGeometry) {\n            const point = new THREE.Vector3();\n            const index = geometry.index;\n            const attributes = geometry.attributes;\n            const positions = attributes.position.array;\n            if (index !== null) {\n                const indices = index.array;\n                for (let i = 0, il = indices.length; i < il; i++) {\n                    const a = indices[i];\n                    point.fromArray(positions as number[], a * 3);\n                    const pointInfo = getPointInfo(point, matrixWorld, raycaster);\n                    if (pointInfo.pointIsOnScreen) {\n                        this.testPoint(\n                            point,\n                            pointInfo.absoluteScreenPosition!,\n                            mouseCoords,\n                            i,\n                            pointInfo.distance!,\n                            intersects\n                        );\n                    }\n                }\n            } else {\n                for (let i = 0, l = positions.length / 3; i < l; i++) {\n                    point.fromArray(positions as number[], i * 3);\n                    const pointInfo = getPointInfo(point, matrixWorld, raycaster);\n                    if (pointInfo.pointIsOnScreen) {\n                        this.testPoint(\n                            point,\n                            pointInfo.absoluteScreenPosition!,\n                            mouseCoords,\n                            i,\n                            pointInfo.distance!,\n                            intersects\n                        );\n                    }\n                }\n            }\n        } else {\n            const vertices = geometry.vertices;\n            for (let index = 0; index < vertices.length; index++) {\n                const point = vertices[index];\n                const pointInfo = getPointInfo(point, matrixWorld, raycaster);\n                if (pointInfo.pointIsOnScreen) {\n                    this.testPoint(\n                        point,\n                        pointInfo.absoluteScreenPosition!,\n                        mouseCoords,\n                        index,\n                        pointInfo.distance!,\n                        intersects\n                    );\n                }\n            }\n        }\n    }\n}\n\nfunction getPointInfo(\n    point: THREE.Vector3,\n    matrixWorld: THREE.Matrix4,\n    raycaster: PickingRaycaster\n): {\n    pointIsOnScreen: boolean;\n    absoluteScreenPosition?: THREE.Vector2;\n    distance?: number;\n} {\n    const worldPosition = point.clone();\n    worldPosition.applyMatrix4(matrixWorld);\n    const distance = worldPosition.distanceTo(raycaster.ray.origin);\n    worldPosition.project(raycaster.camera);\n    const relativeScreenPosition = new THREE.Vector2(worldPosition.x, worldPosition.y);\n    const pointIsOnScreen =\n        relativeScreenPosition.x < 1 &&\n        relativeScreenPosition.x > -1 &&\n        relativeScreenPosition.y < 1 &&\n        relativeScreenPosition.y > -1;\n    if (pointIsOnScreen) {\n        worldPosition.x = ((worldPosition.x + 1) / 2) * raycaster.width;\n        worldPosition.y = ((1 - worldPosition.y) / 2) * raycaster.height;\n        const absoluteScreenPosition = new THREE.Vector2(worldPosition.x, worldPosition.y);\n        return {\n            absoluteScreenPosition,\n            pointIsOnScreen,\n            distance\n        };\n    }\n    return {\n        pointIsOnScreen\n    };\n}\n\n/**\n * Point object that implements the raycasting of circles in screen space.\n */\nexport class Circles extends MapViewPoints {\n    /** @override */\n    testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ) {\n        const dx = screenPosition.x - pickCoordinates.x;\n        const dy = screenPosition.y - pickCoordinates.y;\n        const dist = Math.sqrt(dx * dx + dy * dy);\n        const radius = (this.material as THREE.PointsMaterial).size / 2;\n\n        if (dist <= radius) {\n            intersects.push({\n                point,\n                distance,\n                index,\n                object: this\n            });\n        }\n    }\n}\n\n/**\n * Point object that implements the raycasting of squares in screen space.\n */\nexport class Squares extends MapViewPoints {\n    /** @override */\n    testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ) {\n        const dx = screenPosition.x - pickCoordinates.x;\n        const dy = screenPosition.y - pickCoordinates.y;\n        const halfSize = (this.material as THREE.PointsMaterial).size / 2;\n\n        if (Math.abs(dx) <= halfSize && Math.abs(dy) <= halfSize) {\n            intersects.push({\n                point,\n                distance,\n                index,\n                object: this\n            });\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Usage in Modules:\n *\n * import { DebugContext, debugContext } from \"../lib/DebugContext\";\n *\n * Declare a debug option:\n * debugContext.settings.setOption(\"MY_DBG_OPT\", \"default\");\n *\n * Access an option:\n * if (debugContext.settings.option(\"MY_DBG_OPT\")) {\n *     ...\n * }\n *\n *\n * Access in browser console:\n *\n * window.__debugContext.settings.addEventListener(\"MY_DBG_OPT\", function(event) {\n *  console.log(\"name:\", event.type, \"value:\", event.value)});\n *\n */\n\n/**\n * Allows access to the global `window` object here. The constructor of [[DebugContext]] adds the\n * instance to `window`, so it is available from the browser console.\n */\n\ninterface DebugInfo {\n    __debugContext?: DebugContext;\n}\n\nconst isNode = typeof window === \"undefined\";\n\n/**\n * A `DebugOption` is a pair that consists of an option value and an array of change listeners.\n * Listeners are called up when setting the option's value.\n */\nclass DebugOption extends THREE.EventDispatcher {\n    static SET_EVENT_TYPE: string = \"set\";\n\n    /**\n     * Constructs the `DebugOption`.\n     *\n     * @param value The value of the option.\n     */\n    constructor(public value: any) {\n        super();\n    }\n\n    /**\n     * Updates the value of a given option.\n     *\n     * @param value The new value for the option.\n     * @param name The name of the option to set.\n     */\n    set(value: any, name: string) {\n        this.value = value;\n        this.dispatchEvent({ type: DebugOption.SET_EVENT_TYPE, name, value });\n    }\n}\n\n/**\n * Maintains a map of [[DebugOption]]s. You can add listeners to debug options by passing their\n * names.\n */\nexport class DebugContext {\n    private m_optionsMap: Map<string, DebugOption>;\n\n    /**\n     * Builds a `DebugContext`.\n     */\n    constructor() {\n        this.m_optionsMap = new Map<string, DebugOption>();\n\n        // If we have a `window` object, we store the context in it to make it available in the\n        // console.\n        if (!isNode && typeof window !== \"undefined\" && window) {\n            const debugInfo = window as DebugInfo;\n            debugInfo.__debugContext = this;\n        }\n    }\n\n    /**\n     * Sets the value of an option. Calls change listeners of that option, even if the value has\n     * not been changed. The change listeners provided here are not called during this set\n     * operation.\n     *\n     * @param name Name of the option.\n     * @param value Value of the option.\n     */\n    setValue(name: string, value: any): void {\n        let opt = this.m_optionsMap.get(name);\n        if (!opt) {\n            opt = new DebugOption(value);\n            this.m_optionsMap.set(name, opt);\n        } else {\n            opt.set(value, name);\n        }\n    }\n\n    /**\n     * Gets the option value.\n     *\n     * @param name Name of option.\n     */\n    getValue(name: string): any {\n        const opt = this.m_optionsMap.get(name);\n        return opt ? opt.value : undefined;\n    }\n\n    /**\n     * Determines if the option is registered.\n     *\n     * @param name Name of option.\n     */\n    hasOption(name: string): boolean {\n        return this.m_optionsMap.get(name) !== undefined;\n    }\n\n    /**\n     * Adds a listener to a debug option.\n     *\n     * @param name Name of the option that requires a listener.\n     * @param listener The listener function to add.\n     */\n    addEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            opt.addEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Checks for a listener in a debug option.\n     *\n     * @param name Name of the option to check for.\n     * @param listener The listener function to check for.\n     */\n    hasEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            return opt.hasEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Removes a listener from a debug option.\n     *\n     * @param name Name of the option from which to remove a listener.\n     * @param listener The listener function to remove.\n     */\n    removeEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            opt.removeEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Provides access to the options map. This method is useful for creating an automatic\n     * browser GUI.\n     */\n    get options(): Map<string, any> {\n        return this.m_optionsMap;\n    }\n\n    /**\n     * Clears away all debug options. Currently, `THREE.EventDispatcher` does not provide an API\n     * to remove all event listeners.\n     */\n    clear() {\n        this.m_optionsMap.forEach(option => {\n            option.set(undefined, \"\");\n        });\n    }\n}\n\nexport const debugContext = new DebugContext();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Use `ColorCache` to reuse a color specified by name and save allocation as well as\n * setup time.\n *\n * Implemented as a singleton. Do not modify colors after getting them from the `ColorCache`.\n */\nexport class ColorCache {\n    /**\n     * Return instance of `ColorCache`.\n     */\n    static get instance() {\n        return this.m_instance;\n    }\n\n    private static m_instance: ColorCache = new ColorCache();\n    private m_map: Map<string, THREE.Color> = new Map();\n\n    /**\n     * Returns the color for the given `colorCode`. This function may reuse a previously generated\n     * color, so you cannot modify the contents of the color.\n     *\n     * @param colorCode ThreeJS color code or name. You must provide a valid color code or name,\n     * as this function does not do any validation.\n     */\n    getColor(colorCode: string | number): THREE.Color {\n        if (typeof colorCode === \"number\") {\n            colorCode = \"#\" + colorCode.toString(16).padStart(6, \"0\");\n        }\n\n        let color = this.m_map.get(colorCode);\n        if (color !== undefined) {\n            return color;\n        }\n        color = new THREE.Color(colorCode);\n        this.m_map.set(colorCode, color);\n        return color;\n    }\n\n    /**\n     * Returns the number of elements in the cache.\n     */\n    get size(): number {\n        return this.m_map.size;\n    }\n\n    /**\n     * Clears the cache. Only references to the THREE.Color are removed from the cache.\n     * Consequently, clearing the cache does not cause any negative visual impact.\n     */\n    clear(): void {\n        this.m_map.clear();\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ITileDecoder } from \"@here/harp-datasource-protocol\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\nimport { WorkerBasedDecoder } from \"./WorkerBasedDecoder\";\n\n/**\n * Default concurrent decoder helper.\n *\n * A convenient singleton that maintains a separate [[ConcurrentWorkerSet]] for each bundle\n * requested. Provides easy access to [[WorkerBasedDecoder]]s for data sources.\n */\nexport class ConcurrentDecoderFacade {\n    /**\n     * The URL containing a script to fall back (default) to when looking for worker sets\n     * and decoders.\n     */\n    static defaultScriptUrl: string = \"./decoder.bundle.js\";\n\n    /**\n     * The default number of workers.\n     */\n    static defaultWorkerCount?: number = undefined;\n\n    /**\n     * Returns a [[WorkerBasedDecoder]] instance.\n     *\n     * @param decoderServiceType The name of the decoder service type.\n     * @param scriptUrl The optional URL with the workers' script.\n     * @param workerCount The number of web workers to use.\n     */\n    static getTileDecoder(\n        decoderServiceType: string,\n        scriptUrl?: string,\n        workerCount?: number\n    ): ITileDecoder {\n        const workerSet = this.getWorkerSet(scriptUrl, workerCount);\n\n        return new WorkerBasedDecoder(workerSet, decoderServiceType);\n    }\n\n    /**\n     * Returns a [[ConcurrentWorkerSet]] instance based on the script URL specified.\n     *\n     * @param scriptUrl The optional URL with the workers' script. If not specified,\n     * the function uses [[defaultScriptUrl]] instead.\n     * @param workerCount The number of web workers to use.\n     */\n    static getWorkerSet(scriptUrl?: string, workerCount?: number): ConcurrentWorkerSet {\n        if (scriptUrl === undefined) {\n            scriptUrl = this.defaultScriptUrl;\n        }\n\n        let workerSet = this.workerSets[scriptUrl];\n        if (workerSet === undefined) {\n            workerSet = new ConcurrentWorkerSet({\n                scriptUrl,\n                workerCount: workerCount === undefined ? this.defaultWorkerCount : workerCount\n            });\n            this.workerSets[scriptUrl] = workerSet;\n        }\n        return workerSet;\n    }\n\n    /**\n     * Destroys a [[ConcurrentWorkerSet]] instance.\n     *\n     * @param scriptUrl The worker script URL that was used to create the [[ConcurrentWorkerSet]].\n     */\n    static destroyWorkerSet(scriptUrl: string) {\n        const workerSet = this.workerSets[scriptUrl];\n        if (workerSet !== undefined) {\n            workerSet.destroy();\n            delete this.workerSets[scriptUrl];\n        }\n    }\n\n    /**\n     * Destroys all managed [[ConcurrentWorkerSet]]s.\n     */\n    static destroy() {\n        Object.keys(this.workerSets).forEach(name => {\n            this.workerSets[name].destroy();\n        });\n        this.workerSets = {};\n    }\n\n    /**\n     * The [[ConcurrentWorkerSet]] instances which are stored by the script URL.\n     */\n    private static workerSets: {\n        [bundleUrl: string]: ConcurrentWorkerSet;\n    } = {};\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { getOptionValue, MathUtils } from \"@here/harp-utils\";\n\n/**\n * Copyright info attached to data displayed on map. Provided by [[DataSource]] and attached\n * to [[Tile]]s.\n *\n * In most cases, an application should display this information on [[MapView]] to conform with\n * licencing terms of its map data providers.\n *\n * @see [[CopyrightElementHandler]]\n */\nexport interface CopyrightInfo {\n    /**\n     * Unique id of the copyright holder.\n     *\n     * `id`s should be unique. It is recommended to build them from unique identifiers like\n     * registered domain names.\n     *\n     * Examples:\n     *\n     *  * `openstreetmap.org` - for data originating from OpenStreetMap project\n     *  * `naturalearthdata.com` - for data originating from Natural Earth dataset\n     *\n     * Note: [[DataSource]] may return [[CopyrightInfo]] with only `id`, thus defining only holder\n     * of copyright, however, valid attribution may require proper `label` and `link`.\n     *\n     * Entries with same `id` are deduplicated by [[CopyrightInfo.mergeArrays]].\n     */\n    id: string;\n\n    /**\n     * Copyright text to display after the copyright symbol on the map.\n     *\n     * If undefined, `id` is used as text label.\n     * Set it to empty string to not render a copyright info.\n     */\n    label?: string;\n\n    /**\n     * Optional URL pointing to further copyright information.\n     */\n    link?: string;\n\n    /**\n     * Optional, copyright notice year.\n     */\n    year?: number;\n}\n\nexport namespace CopyrightInfo {\n    /**\n     * Merge [[CopyrightInfo]] arrays, removing duplicates.\n     *\n     * `id` and `label` are considered keys in deduplication algorithm.\n     *\n     * @param sources non-duplicate elements from this array are added to `target`\n     * @returns merge of all copyright infos in `sources`\n     */\n    export function mergeArrays(a: CopyrightInfo[], b?: CopyrightInfo[]): CopyrightInfo[] {\n        const result: CopyrightInfo[] = [];\n        for (const source of [a, b]) {\n            if (source === undefined) {\n                continue;\n            }\n\n            for (const sourceInfo of source) {\n                const existingInfo = result.find(\n                    findItem =>\n                        findItem.id === sourceInfo.id ||\n                        (findItem.label !== undefined && findItem.label === sourceInfo.label)\n                );\n\n                if (existingInfo === undefined) {\n                    result.push({ ...sourceInfo });\n                } else {\n                    existingInfo.year = MathUtils.max2(sourceInfo.year, existingInfo.year);\n                    existingInfo.label = getOptionValue(sourceInfo.label, existingInfo.label);\n                    existingInfo.link = getOptionValue(sourceInfo.link, existingInfo.link);\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Format copyright information to a HTML string that can be displayed in the UI.\n     *\n     * * Empty list returns empty string.\n     * * Entries with empty (but defined) labels are skipped.\n     *\n     * @param copyrightInfo Array of copyrights to format.\n     */\n    export function formatAsHtml(copyrightInfo: CopyrightInfo[]): string {\n        if (copyrightInfo.length === 0) {\n            return \"\";\n        }\n\n        const filtered = copyrightInfo.filter(entry => entry.label !== \"\");\n        if (filtered.length === 0) {\n            return \"\";\n        }\n\n        return (\n            \"© \" +\n            filtered\n                .map(entry => {\n                    const label = entry.label ?? entry.id;\n                    const text = entry.year !== undefined ? `${entry.year} ${label}` : label;\n                    const link = entry.link;\n                    return link\n                        ? `<a href=\"${link}\" target=\"_blank\" rel=\"noreferrer noopener\">${text}</a>`\n                        : `${text}`;\n                })\n                .join(\", \")\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    HighPrecisionLineMaterial,\n    HighPrecisionPointMaterial,\n    isHighPrecisionPointMaterial\n} from \"@here/harp-materials\";\nimport {\n    BufferAttribute,\n    BufferGeometry,\n    Camera,\n    Color,\n    Float32BufferAttribute,\n    InterleavedBuffer,\n    InterleavedBufferAttribute,\n    Matrix4,\n    PointsMaterialParameters,\n    ShaderMaterial,\n    ShaderMaterialParameters,\n    Vector3\n} from \"three\";\n\nimport * as HPL from \"./HighPrecisionLines\";\nimport * as HPP from \"./HighPrecisionPoints\";\nimport { triangulateLine } from \"./TriangulateLines\";\n\nexport namespace HighPrecisionUtils {\n    /**\n     * Extract the `float` parts of all vector members, Making this a `Vector3` of `float`.\n     * precision.\n     *\n     * @param v\n     */\n    export function doubleToFloatVec(v: Vector3): Vector3 {\n        return new Vector3(Math.fround(v.x), Math.fround(v.y), Math.fround(v.z));\n    }\n\n    /**\n     * Convert a `Vector3` to `float` (in place!) Returns the minor float vector, which is the\n     * difference of the double elements and their float counterparts.\n     *\n     * @param v Vector3 to convert to float IN-PLACE!\n     */\n    export function makeFloatVec(v: Vector3): Vector3 {\n        const majorX = Math.fround(v.x);\n        const majorY = Math.fround(v.y);\n        const majorZ = Math.fround(v.z);\n\n        const minorVec = new Vector3(v.x - majorX, v.y - majorY, v.z - majorZ);\n\n        v.x = Math.fround(majorX);\n        v.y = Math.fround(majorY);\n        v.z = Math.fround(majorZ);\n\n        return minorVec;\n    }\n\n    /**\n     * Describes addtional postion data needed to render high-precision vertices. Created by\n     * [[createHighPrecisionCameraPos]].\n     */\n    export interface HighPrecisionCameraInfo {\n        /**\n         * View Projection matrix of this high-precision camera.\n         */\n        viewProjection: Matrix4;\n\n        /**\n         * Low-order bits of the high-precision camera's position.\n         */\n        eyePosLo: Vector3;\n\n        /**\n         * High-order bits of the high-precision camera's position.\n         */\n        eyePosHi: Vector3;\n    }\n\n    /**\n     * Describes different properties used when creating a [[HighPrecisionLine]] or\n     * a [[HighPrecisionWireFrameLine]].\n     */\n    export interface HighPrecisionLineParams extends ShaderMaterialParameters {\n        /**\n         * Color of the rendered line.\n         */\n        color?: number | string | Color;\n\n        /**\n         * Width of the rendered line (specified in world units).\n         */\n        lineWidth?: number;\n\n        /**\n         * Add rounded caps to the extremes of the line if set to `true`.\n         */\n        addCircles?: boolean;\n\n        /**\n         * Opacity of the rendered line.\n         */\n        opacity?: number;\n\n        /**\n         * Renders a wireframe line if set to `true`.\n         */\n        wireFrame?: boolean;\n    }\n\n    /**\n     * Calculate high-precision camera position used in vertex shader of high-precision materials.\n     *\n     * @param camera Camera used to get the high-precision position.\n     * @param objectInverseWorldMatrix Inverse World Matrix of the rendered [[HighPrecisionObject]].\n     */\n    export function createHighPrecisionCameraPos(\n        camera: Camera,\n        objectInverseWorldMatrix: Matrix4\n    ): HighPrecisionCameraInfo {\n        const _projScreenMatrix = new Matrix4().copy(camera.projectionMatrix);\n        const mvp = _projScreenMatrix.multiply(camera.matrixWorldInverse);\n        const eyePos = new Vector3(0, 0, 0).applyMatrix4(objectInverseWorldMatrix);\n\n        // split the double float vector into hi and lo parts\n        const eyePosFloat = doubleToFloatVec(eyePos);\n\n        const eyePosLo = doubleToFloatVec(eyePos.sub(eyePosFloat));\n\n        return {\n            viewProjection: mvp,\n            eyePosHi: eyePosFloat,\n            eyePosLo\n        };\n    }\n\n    /**\n     * Updates the high-precision uniform data of a material used to render a\n     * [[HighPrecisionObject]].\n     *\n     * @param object [[HighPrecisionObject]] used for rendering.\n     * @param camera Camera used to get the high-precision position.\n     * @param shaderMaterial Material which uniforms will be updated.\n     */\n    export function updateHpUniforms(\n        object: HPL.HighPrecisionObject,\n        camera: Camera,\n        shaderMaterial: ShaderMaterial\n    ): void {\n        const highPrecisionCameraInfo = createHighPrecisionCameraPos(\n            camera,\n            object.matrixWorldInverse\n        );\n        const mvp = highPrecisionCameraInfo.viewProjection;\n\n        if (shaderMaterial !== undefined && shaderMaterial.isMaterial) {\n            if (\n                shaderMaterial.uniforms &&\n                shaderMaterial.uniforms.u_mvp &&\n                shaderMaterial.uniforms.u_eyepos &&\n                shaderMaterial.uniforms.u_eyepos_lowpart\n            ) {\n                shaderMaterial.uniforms.u_mvp.value = new Float32Array(mvp.elements);\n                shaderMaterial.uniforms.u_eyepos.value = new Float32Array(\n                    highPrecisionCameraInfo.eyePosHi.toArray()\n                );\n                shaderMaterial.uniforms.u_eyepos_lowpart.value = new Float32Array(\n                    highPrecisionCameraInfo.eyePosLo.toArray()\n                );\n            } else {\n                throw Error(\"High pecision material has missing uniforms\");\n            }\n        } else {\n            throw Error(\"High pecision line has no high precision material\");\n        }\n    }\n\n    /**\n     * Assembles the necessary attribute buffers needed to render [[HighPrecisionObject]].\n     *\n     * @param positions Array of positions.\n     */\n    export function createAttributes(\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): {\n        positionHigh: BufferAttribute;\n        positionLow: BufferAttribute;\n    } {\n        if (positions.length > 0) {\n            const v = positions[0];\n\n            if (v === undefined || v === null) {\n                throw Error(\"Empty element in positions\");\n            }\n\n            const positionVec = new Array<number>();\n            const positionVecLow = new Array<number>();\n\n            const addHPValue = (...values: number[]) => {\n                for (const value of values) {\n                    const major = Math.fround(value);\n                    positionVecLow.push(value - major);\n                    positionVec.push(major);\n                }\n            };\n\n            const addHPVector = (vec: Vector3) => {\n                addHPValue(vec.x, vec.y, vec.z);\n            };\n\n            const vAny = v as any;\n            if (vAny.z !== undefined) {\n                (positions as Vector3[]).forEach(vec => {\n                    addHPVector(vec);\n                });\n            } else {\n                if (positionVec.length % 3 !== 0) {\n                    throw Error(\"Positions must be 3D, not 2D\");\n                }\n                (positions as number[]).forEach((n: number): void => {\n                    addHPValue(n);\n                });\n            }\n\n            return {\n                positionHigh: new Float32BufferAttribute(positionVec, 3),\n                positionLow: new Float32BufferAttribute(positionVecLow, 3)\n            };\n        } else {\n            return {\n                positionHigh: new Float32BufferAttribute([], 3),\n                positionLow: new Float32BufferAttribute([], 3)\n            };\n        }\n    }\n\n    /**\n     * Assembles an interleaved buffer containing the position attribute data for a\n     * [[HighPrecisionObject]].\n     *\n     * @param positions Array of positions.\n     * @param stride Stride of the elements in the `positions` array.\n     * @param positionOffset Offset into the `positions` array.\n     */\n    export function addInterleavedAttributes3(\n        positions: ArrayLike<number>,\n        stride: number,\n        positionOffset = 0\n    ): ArrayLike<number> {\n        const newPositions = new Array<number>();\n\n        const end = positions.length;\n\n        for (let i = 0; i < end; i += stride) {\n            for (let j = 0; j < positionOffset; j++) {\n                newPositions.push(positions[i + j]);\n            }\n\n            const x = positions[i + positionOffset];\n            const y = positions[i + positionOffset + 1];\n            const z = positions[i + positionOffset + 2];\n            const majorX = Math.fround(x);\n            const minorX = x - majorX;\n            const majorY = Math.fround(y);\n            const minorY = y - majorY;\n            const majorZ = Math.fround(z);\n            const minorZ = z - majorZ;\n\n            // insert values in interleaved buffer\n            newPositions.push(majorX, majorY, majorZ, minorX, minorY, minorZ);\n\n            for (let j = positionOffset + 3; j < stride; j++) {\n                newPositions.push(positions[i + j]);\n            }\n        }\n\n        return newPositions;\n    }\n\n    /**\n     * Adds the high-precision position attribute data to a [[HighPrecisionObject]].\n     *\n     * @param object [[HighPrecisionObject]] which position attribute will be set.\n     * @param positions Array of positions.\n     */\n    export function setPositions(\n        object: HPL.HighPrecisionObject,\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): number {\n        const attributes = createAttributes(positions);\n\n        object.bufferGeometry.setAttribute(\"position\", attributes.positionHigh);\n        object.bufferGeometry.setAttribute(\"positionLow\", attributes.positionLow);\n\n        return attributes.positionHigh.itemSize;\n    }\n\n    /**\n     * Convert positions from `Array<Vector3>` to `Array<number>`.\n     *\n     * @param positions Array of positions.\n     */\n    export function convertPositions(\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): { positions: number[] } {\n        if (positions.length <= 0) {\n            return { positions: [] };\n        }\n\n        const v = positions[0];\n\n        if (v === undefined || v === null) {\n            throw Error(\"Empty element in positions\");\n        }\n\n        const vAny = v as any;\n        if (vAny.y === undefined && vAny.z === undefined) {\n            return { positions: positions as number[] };\n        }\n\n        const returnPositions = new Array<number>();\n        (positions as Vector3[]).forEach(vec => {\n            returnPositions.push(vec.x, vec.y, vec.z);\n        });\n\n        return { positions: returnPositions };\n    }\n\n    /**\n     * Creates a [[HighPrecisionLine]] or [[HighPrecisionWireFrameLine]] object.\n     *\n     * @param linePositions Array of 2D/3D positions.\n     * @param params Parameters used to configure the created [[HighPrecisionObject]].\n     */\n    export function createLine(\n        linePositions: ArrayLike<number>,\n        params: HighPrecisionLineParams\n    ): HPL.HighPrecisionLine | HPL.HighPrecisionWireFrameLine {\n        const lineWidth = params.lineWidth !== undefined ? params.lineWidth : 5;\n        const addCircles = params.addCircles !== undefined ? params.addCircles : false;\n        const wireFrame = params.wireFrame !== undefined ? params.wireFrame : false;\n\n        const positions: number[] = [];\n        const indices: number[] = [];\n\n        triangulateLine(linePositions, lineWidth, positions, indices, addCircles);\n\n        const hpLineGeometry = new BufferGeometry();\n        const hpPositions = addInterleavedAttributes3(positions, 3);\n        const buffer = new InterleavedBuffer(new Float32Array(hpPositions), 6);\n\n        const positionAttribute = new InterleavedBufferAttribute(buffer, 3, 0, false);\n        const positionLowAttribute = new InterleavedBufferAttribute(buffer, 3, 3, false);\n\n        hpLineGeometry.setAttribute(\"position\", positionAttribute);\n        hpLineGeometry.setAttribute(\"positionLow\", positionLowAttribute);\n        hpLineGeometry.setIndex(new BufferAttribute(new Uint32Array(indices), 1));\n\n        const hpSolidMaterial = new HighPrecisionLineMaterial(params);\n\n        const lineObject = wireFrame\n            ? new HPL.HighPrecisionWireFrameLine(hpLineGeometry, hpSolidMaterial)\n            : new HPL.HighPrecisionLine(hpLineGeometry, hpSolidMaterial);\n\n        lineObject.setupForRendering();\n\n        return lineObject;\n    }\n\n    /**\n     * Creates a group of [[HighPrecisionPoints]].\n     *\n     * @param pointPositions Array of 2D/3D positions.\n     * @param materialParameters Parameters used to configure the material used to render the\n     * created [[HighPrecisionPoints]].\n     */\n    export function createPoints(\n        pointPositions: ArrayLike<number>,\n        materialParameters?: PointsMaterialParameters | HighPrecisionPointMaterial\n    ): HPP.HighPrecisionPoints {\n        const indices: number[] = [];\n\n        // tslint:disable-next-line:prefer-for-of - pointPositions doesn't have iterable interface\n        for (let i = 0; i < pointPositions.length; i++) {\n            indices.push(indices.length / 3);\n        }\n\n        const hpPointsGeometry = new BufferGeometry();\n\n        const hpPointsMaterial = isHighPrecisionPointMaterial(materialParameters)\n            ? materialParameters\n            : new HighPrecisionPointMaterial(materialParameters);\n\n        const pointsObject = new HPP.HighPrecisionPoints(hpPointsGeometry, hpPointsMaterial);\n\n        setPositions(pointsObject, pointPositions);\n\n        pointsObject.setupForRendering();\n\n        return pointsObject;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Value } from \"@here/harp-datasource-protocol/index-decoder\";\n\n/**\n * Feature Modifier ids to choose which OmvFeatureModifer should be used in OmvDecoder.\n */\nexport enum FeatureModifierId {\n    /**\n     * Identifier to use the OmvTomTomFeatureModifier in the OmvDecoder.\n     */\n    tomTom\n}\n\n/**\n * Definition of a filter.\n */\nexport interface OmvFilterString {\n    /**  String value */\n    value: string;\n    /** Match condition */\n    match: OmvFilterString.StringMatch;\n}\n\n/**\n * Adding the match condition type and the matching function to the namespace of `OmvFilterString`.\n */\nexport namespace OmvFilterString {\n    /**\n     * Match condition.\n     */\n    export enum StringMatch {\n        /** Matches any. */\n        Any,\n        /** Exact match. */\n        Match,\n        /** Matches if a test string starts with a filter string. */\n        StartsWith,\n        /** Matches if a test string contains a filter string. */\n        Contains,\n        /** Matches if a test string ends with a filter string. */\n        EndsWith\n    }\n\n    /**\n     * Check for a string against a filter.\n     *\n     * @param str The string to check against a filter.\n     * @param filterString The filter containing the match condition.\n     * @returns `true` if the match condition is satisfied.\n     */\n    export function matchString(str: string, filterString: OmvFilterString): boolean {\n        switch (filterString.match) {\n            case OmvFilterString.StringMatch.Any:\n                return true;\n            case OmvFilterString.StringMatch.Match:\n                return str === filterString.value;\n            case OmvFilterString.StringMatch.StartsWith:\n                return filterString.value.startsWith(str);\n            case OmvFilterString.StringMatch.EndsWith:\n                return filterString.value.endsWith(str);\n            default:\n                return str.indexOf(filterString.value) >= 0;\n        }\n    }\n}\n\n/**\n * Definition of a filter for a feature attribute\n */\nexport interface OmvFilterFeatureAttribute {\n    key: string;\n    value: Value;\n}\n\nexport enum OmvGeometryType {\n    UNKNOWN = 0,\n    POINT = 1,\n    LINESTRING = 2,\n    POLYGON = 3\n}\n\n/**\n * Internal type of a layer filter description, Should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvLayerFilterDescription {\n    name: OmvFilterString;\n    minLevel: number;\n    maxLevel: number;\n}\n\n/**\n * Internal type of a single filter description, Should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvFilterDescription {\n    layerName: OmvFilterString;\n    geometryTypes?: OmvGeometryType[];\n    classes?: OmvFilterString[];\n    minLevel: number;\n    maxLevel: number;\n    featureAttribute?: OmvFilterFeatureAttribute;\n}\n\n/**\n * Internal type of a complete [[OmvFeatureFilter]] description, should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvFeatureFilterDescription {\n    processLayersDefault: boolean;\n    processPointsDefault: boolean;\n    processLinesDefault: boolean;\n    processPolygonsDefault: boolean;\n\n    layersToProcess: OmvLayerFilterDescription[];\n    layersToIgnore: OmvLayerFilterDescription[];\n    pointsToProcess: OmvFilterDescription[];\n    pointsToIgnore: OmvFilterDescription[];\n    linesToProcess: OmvFilterDescription[];\n    linesToIgnore: OmvFilterDescription[];\n    polygonsToProcess: OmvFilterDescription[];\n    polygonsToIgnore: OmvFilterDescription[];\n\n    // enabledKinds and disabledKinds\n    kindsToProcess: string[];\n    kindsToIgnore: string[];\n}\n\n/**\n * Internal interface for options passed from the [[OmvDataSource]] to the decoder.\n *\n * @hidden\n */\nexport interface OmvDecoderOptions {\n    /**\n     * If true, features that have no technique in the theme will be printed to the console (can be\n     * excessive!).\n     */\n    showMissingTechniques?: boolean;\n\n    /**\n     * Gather feature attributes from [[OmvData]]. Defaults to false.\n     */\n    gatherFeatureAttributes?: boolean;\n    createTileInfo?: boolean;\n    gatherRoadSegments?: boolean;\n\n    /**\n     * Optional storage level offset for [[Tile]]s. Default is -2.\n     */\n    storageLevelOffset?: number;\n\n    /**\n     * If not set to `false` very short text labels will be skipped during decoding based on a\n     * heuristic.\n     */\n    skipShortLabels?: boolean;\n\n    /**\n     * A description for the feature filter which can be safely passed down to the web workers.\n     * It has to be generated with the help of the [[OmvFeatureFilterDescriptionBuilder]] (to\n     * guarantee the correctness).\n     */\n    filterDescription?: OmvFeatureFilterDescription | null;\n\n    /**\n     * Identifier used to choose OmvFeatureModifier, if undefined [[OmvGenericFeatureModifier]] is\n     * used.\n     */\n    featureModifierId?: FeatureModifierId;\n\n    enableElevationOverlay?: boolean;\n}\n\n/**\n * Default OMV tile decoder service type.\n *\n * Used for requesting decoder services using [[WorkerServiceManager]].\n */\nexport const OMV_TILE_DECODER_SERVICE_TYPE = \"omv-tile-decoder\";\n\n/**\n * Default OMV tiler service type.\n *\n * Used for requesting tiler services using [[WorkerServiceManager]].\n */\nexport const OMV_TILER_SERVICE_TYPE = \"omv-tiler\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { DataSource, Tile } from \"@here/harp-mapview\";\n\nexport class OmvTile extends Tile {\n    constructor(dataSource: DataSource, tileKey: TileKey) {\n        super(dataSource, tileKey);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Represents an object with `GeoCoordinates` like interface.\n */\nexport interface GeoCoordinatesLike {\n    /** The latitude in degrees. */\n    latitude: number;\n\n    /** The longitude in degrees. */\n    longitude: number;\n\n    /** The optional altitude in meters. */\n    altitude?: number;\n}\n\n/**\n * Type guard to assert that `object` conforms to [[GeoCoordinatesLike]] data interface.\n */\nexport function isGeoCoordinatesLike(object: any): object is GeoCoordinatesLike {\n    return (\n        object &&\n        typeof object.latitude === \"number\" &&\n        typeof object.longitude === \"number\" &&\n        (typeof object.altitude === \"number\" || typeof object.altitude === \"undefined\")\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * An [[Array]] following the order longitude, latitude, altitude.\n */\nexport type GeoPointLike = [number, number, number?];\n\n/**\n * Type guard to assert that `object` conforms to [[GeoPointLike]] interface.\n */\nexport function isGeoPointLike(geoPoint: any): geoPoint is GeoPointLike {\n    if (Array.isArray(geoPoint)) {\n        const [longitude, latitude, altitude] = geoPoint;\n        return (\n            typeof longitude === \"number\" &&\n            typeof latitude === \"number\" &&\n            (altitude === undefined || typeof altitude === \"number\")\n        );\n    }\n    return false;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Represents an object with `LatLng` like interface.\n */\nexport interface LatLngLike {\n    /** The latitude in degrees. */\n    lat: number;\n\n    /** The longitude in degrees. */\n    lng: number;\n}\n\n/**\n * Type guard to assert that `object` conforms to [[LatLngLike]] interface.\n */\nexport function isLatLngLike(object: any): object is LatLngLike {\n    return object && typeof object.lat === \"number\" && typeof object.lng === \"number\";\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\nclass EquirectangularProjection extends Projection {\n    static geoToWorldScale: number = 1.0 / (2.0 * Math.PI);\n    static worldToGeoScale: number = (2.0 * Math.PI) / 1.0;\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        result.min.x = 0.0;\n        result.min.y = 0.0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale / 2;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (result === undefined) {\n            /*\n             * The following tslint:disable is due to the fact that the [[WorldCoordinates]]\n             * might be a concrete class which is not available at runtime.\n             * Consider the following example:\n             *\n             *  const x: THREE.Vector3 = new THREE.Vector3(0,0,0);\n             *  const result = EquirectangularProjection.projectPoint<THREE.Vector3>(x);\n             *\n             * Note: type of `result` is Vector3Like and not as expected: THREE.Vector3!\n             */\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x =\n            (THREE.MathUtils.degToRad(geoPoint.longitude) + Math.PI) *\n            EquirectangularProjection.geoToWorldScale *\n            this.unitScale;\n        result.y =\n            (THREE.MathUtils.degToRad(geoPoint.latitude) + Math.PI * 0.5) *\n            EquirectangularProjection.geoToWorldScale *\n            this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(\n            (worldPoint.y * EquirectangularProjection.worldToGeoScale) / this.unitScale -\n                Math.PI * 0.5,\n            (worldPoint.x * EquirectangularProjection.worldToGeoScale) / this.unitScale - Math.PI,\n            worldPoint.z\n        );\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const worldCenter = this.projectPoint(\n            new GeoCoordinates(geoBox.center.latitude, geoBox.center.longitude, 0)\n        );\n        const { latitudeSpanInRadians, longitudeSpanInRadians, altitudeSpan } = geoBox;\n        const sizeX = longitudeSpanInRadians * EquirectangularProjection.geoToWorldScale;\n        const sizeY = latitudeSpanInRadians * EquirectangularProjection.geoToWorldScale;\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = worldCenter.x - sizeX * 0.5 * this.unitScale;\n            result.min.y = worldCenter.y - sizeY * 0.5 * this.unitScale;\n            result.max.x = worldCenter.x + sizeX * 0.5 * this.unitScale;\n            result.max.y = worldCenter.y + sizeY * 0.5 * this.unitScale;\n            if (altitudeSpan !== undefined) {\n                result.min.z = worldCenter.z - altitudeSpan * 0.5;\n                result.max.z = worldCenter.z + altitudeSpan * 0.5;\n            } else {\n                result.min.z = 0;\n                result.max.z = 0;\n            }\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = worldCenter.x;\n            result.position.y = worldCenter.y;\n            result.position.z = worldCenter.z;\n            result.extents.x = sizeX * 0.5 * this.unitScale;\n            result.extents.y = sizeY * 0.5 * this.unitScale;\n            result.extents.z = Math.max(Number.EPSILON, (altitudeSpan || 0) * 0.5);\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        return GeoBox.fromCoordinates(minGeo, maxGeo);\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n}\n\n/**\n * Equirectangular [[Projection]] used to convert geo coordinates to unit coordinates and vice\n * versa.\n */\nexport const normalizedEquirectangularProjection: Projection = new EquirectangularProjection(1);\n\n/**\n * Equirectangular [[Projection]] used to convert geo coordinates to world coordinates and vice\n * versa.\n */\nexport const equirectangularProjection: Projection = new EquirectangularProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\n/**\n *\n * https://en.wikipedia.org/wiki/Transverse_Mercator_projection\n * http://mathworld.wolfram.com/MercatorProjection.html\n *\n */\nclass TransverseMercatorProjection extends Projection {\n    /**\n     * Like in regular Mercator projection, there are two points on sphere\n     * with radius about 5 degrees, that is out of projected space.\n     *\n     *\n     * in regular Mercator these points are:\n     *     (90, any), (-90, any)\n     *\n     * and in transverse Mercator:\n     *     (0, 90), (0, -90)\n     *\n     * So, in transverse we need to compute distnce to poles, and clamp if\n     * radius is exceeded\n     */\n    static clampGeoPoint(geoPoint: GeoCoordinatesLike, _unitScale: number) {\n        const lat = geoPoint.latitude;\n        const lon = geoPoint.longitude;\n\n        const r = TransverseMercatorUtils.POLE_RADIUS;\n        const rsq = TransverseMercatorUtils.POLE_RADIUS_SQ;\n\n        const nearestQuarter = Math.round(lon / 90);\n        const deltaLon = nearestQuarter * 90 - lon;\n        if (nearestQuarter % 2 === 0 || Math.abs(deltaLon) > r) {\n            return geoPoint;\n        }\n\n        const deltaLat = lat - 0;\n        const distanceToPoleSq = deltaLon * deltaLon + deltaLat * deltaLat;\n        if (distanceToPoleSq < rsq) {\n            const distanceToPole = Math.sqrt(distanceToPoleSq);\n            const scale = (r - distanceToPole) / distanceToPole;\n            // const quarter = ((nearestQuarter % 4) + 4) % 4;\n            // const dir = quarter === 1 ? -1 : quarter === 3 ? 1 : 0;\n            const dir = 1;\n            const offsetLon = deltaLon === 0 && deltaLat === 0 ? r * dir : deltaLon;\n            return new GeoCoordinates(lat + deltaLat * scale, lon + offsetLon * scale);\n        }\n\n        return geoPoint;\n    }\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    private m_phi0: number = 0;\n    private m_lambda0: number = 0;\n\n    constructor(readonly unitScale: number) {\n        super(unitScale);\n    }\n\n    /** @override */\n    getScaleFactor(worldPoint: Vector3Like): number {\n        return Math.cosh((worldPoint.x / this.unitScale - 0.5) * 2 * Math.PI);\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        result.min.x = 0;\n        result.min.y = 0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n\n        const clamped = TransverseMercatorProjection.clampGeoPoint(geoPoint, this.unitScale);\n        const normalLon = clamped.longitude / 360 + 0.5;\n        const offset = normalLon === 1 ? 0 : Math.floor(normalLon);\n        const phi = THREE.MathUtils.degToRad(clamped.latitude);\n        const lambda = THREE.MathUtils.degToRad(clamped.longitude - offset * 360) - this.m_lambda0;\n\n        const B = Math.cos(phi) * Math.sin(lambda);\n        // result.x = 1/2 * Math.log((1 + B) / (1 - B));\n        result.x = Math.atanh(B);\n        result.y = Math.atan2(Math.tan(phi), Math.cos(lambda)) - this.m_phi0;\n\n        const outScale = 0.5 / Math.PI;\n        result.x =\n            this.unitScale * (THREE.MathUtils.clamp(result.x * outScale + 0.5, 0, 1) + offset);\n        result.y = this.unitScale * THREE.MathUtils.clamp(result.y * outScale + 0.5, 0, 1);\n\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const tau = Math.PI * 2;\n        const nx = worldPoint.x / this.unitScale;\n        const ny = worldPoint.y / this.unitScale;\n        const offset = nx === 1 ? 0 : Math.floor(nx);\n        const x = tau * (nx - 0.5 - offset);\n        const y = tau * (ny - 0.5);\n        const z = worldPoint.z || 0;\n\n        const D = y + this.m_phi0;\n\n        const phi = Math.asin(Math.sin(D) / Math.cosh(x));\n        const lambda = this.m_lambda0 + Math.atan2(Math.sinh(x), Math.cos(D)) + offset * tau;\n\n        const geoPoint = GeoCoordinates.fromRadians(phi, lambda, z);\n        return geoPoint;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const { north, south, east, west } = geoBox;\n\n        const pointsToCheck = [\n            geoBox.center,\n            geoBox.northEast,\n            geoBox.southWest,\n            new GeoCoordinates(south, east),\n            new GeoCoordinates(north, west)\n        ];\n\n        const E = TransverseMercatorUtils.POLE_EDGE_DEG;\n\n        const containsWestCut = west < -90 && east > -90;\n        const containsEastCut = west < 90 && east > 90;\n        const containsCenterX = west < 0 && east > 0;\n        const containsCenterY = west < E && east > -E && north > 0 && south < 0;\n\n        if (containsWestCut) {\n            pointsToCheck.push(new GeoCoordinates(north, -90));\n            pointsToCheck.push(new GeoCoordinates(south, -90));\n        }\n\n        if (containsEastCut) {\n            pointsToCheck.push(new GeoCoordinates(north, 90));\n            pointsToCheck.push(new GeoCoordinates(south, 90));\n        }\n\n        if (containsCenterX) {\n            pointsToCheck.push(new GeoCoordinates(north, 0));\n            pointsToCheck.push(new GeoCoordinates(south, 0));\n        }\n\n        if (containsCenterY) {\n            pointsToCheck.push(new GeoCoordinates(0, west));\n            pointsToCheck.push(new GeoCoordinates(0, east));\n        }\n\n        TransverseMercatorUtils.alignLatitude(pointsToCheck, pointsToCheck[0]);\n\n        const projected = pointsToCheck.map(p => this.projectPoint(p));\n        const vx = projected.map(p => p.x);\n        const vy = projected.map(p => p.y);\n        const vz = projected.map(p => p.z);\n\n        const minX = Math.min(...vx);\n        const minY = Math.min(...vy);\n        const minZ = Math.min(...vz);\n        const maxX = Math.max(...vx);\n        const maxY = Math.max(...vy);\n        const maxZ = Math.max(...vz);\n\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = minX;\n            result.min.y = minY;\n            result.min.z = minZ;\n            result.max.x = maxX;\n            result.max.y = maxY;\n            result.max.z = maxZ;\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = (minX + maxX) / 2;\n            result.position.y = (minY + maxY) / 2;\n            result.position.z = (minZ + maxZ) / 2;\n            result.extents.x = (maxX - minX) / 2;\n            result.extents.y = (maxY - minY) / 2;\n            result.extents.z = (maxZ - minZ) / 2;\n        } else {\n            throw new Error(\"invalid bounding box\");\n        }\n        return result;\n    }\n\n    /**\n     * There are 8 sub-regions on entire projection space\n     * where both longitude and latitude preserve direction.\n     * If bounding box hits more than one region, it should be splitted\n     * into sub-boxes by regions, (un)projected and then united again.\n     *\n     *\n     * directions in form [latitude / longitude]:\n     *    1 ┌─────────|─────────┐\n     *      │ dr / dl | dl / ul │\n     * 0.75 ----------|----------\n     *      │ ur / dr | ul / ur │\n     * 0.5  ----------|----------\n     *      │ ul / ur | ur / dr │\n     * 0.25 ----------|----------\n     *      │ dl / ul | dr / dl │\n     *      └─────────|─────────┘\n     *     0         0.5        1\n     *     @override\n     */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const s = this.unitScale;\n\n        const min = worldBox.min;\n        const max = worldBox.max;\n        const pointsToCheck = [\n            { x: (min.x + max.x) / 2, y: (min.y + max.y) / 2, z: 0 },\n            min,\n            max,\n            { x: min.x, y: max.y, z: 0 },\n            { x: max.x, y: min.y, z: 0 }\n        ];\n\n        const center = 0.5 * s;\n        const lowerQ = 0.25 * s;\n        const upperQ = 0.75 * s;\n\n        const containsCenterX = min.x < center && max.x > center;\n        const containsCenterY = min.y < center && max.y > center;\n        const containsLowerQY = min.y < lowerQ && max.y > lowerQ;\n        const containsUpperQY = min.y < upperQ && max.y > upperQ;\n\n        if (containsCenterY) {\n            pointsToCheck.push({ x: min.x, y: center, z: 0 });\n            pointsToCheck.push({ x: max.x, y: center, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: center, z: 0 });\n            }\n        }\n        if (containsLowerQY) {\n            pointsToCheck.push({ x: min.x, y: lowerQ, z: 0 });\n            pointsToCheck.push({ x: max.x, y: lowerQ, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: lowerQ, z: 0 });\n            }\n        }\n        if (containsUpperQY) {\n            pointsToCheck.push({ x: min.x, y: upperQ, z: 0 });\n            pointsToCheck.push({ x: max.x, y: upperQ, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: upperQ, z: 0 });\n            }\n        }\n\n        const geoPoints = pointsToCheck.map(p => this.unprojectPoint(p));\n        TransverseMercatorUtils.alignLongitude(geoPoints, geoPoints[0]);\n\n        const latitudes = geoPoints.map(g => g.latitude);\n        const longitudes = geoPoints.filter(g => Math.abs(g.latitude) < 90).map(g => g.longitude);\n        const altitudes = geoPoints.map(g => g.altitude || 0);\n\n        const minGeo = new GeoCoordinates(\n            Math.min(...latitudes),\n            Math.min(...longitudes),\n            Math.min(...altitudes)\n        );\n\n        const maxGeo = new GeoCoordinates(\n            Math.max(...latitudes),\n            Math.max(...longitudes),\n            Math.max(...altitudes)\n        );\n\n        const geoBox = GeoBox.fromCoordinates(minGeo, maxGeo);\n        return geoBox;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: -1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = -1;\n        }\n        return normal;\n    }\n}\n\nexport class TransverseMercatorUtils {\n    static POLE_EDGE: number = 1.4844222297453323;\n    static POLE_EDGE_DEG: number = THREE.MathUtils.radToDeg(TransverseMercatorUtils.POLE_EDGE);\n    static POLE_RADIUS: number = 90 - TransverseMercatorUtils.POLE_EDGE_DEG;\n    static POLE_RADIUS_SQ: number = Math.pow(TransverseMercatorUtils.POLE_RADIUS, 2);\n\n    /**\n     * There are two regions on projected space that have same geo coordinates,\n     * it's the entire lines   { x: [0..1], y: 0 } and { x: [0..1], y: 1 }\n     * they both have geo coordinates of   (0, [-90..+90])\n     * and should be aligned somehow to fall into first or second region\n     * to make proper bounding boxes, tile bounds, etc.\n     */\n    static alignLatitude(points: GeoCoordinatesLike[], referencePoint: GeoCoordinatesLike): void {\n        const EPSILON = 1e-9;\n\n        for (const point of points) {\n            if (point.latitude === 0) {\n                point.latitude = referencePoint.latitude * EPSILON;\n            }\n        }\n    }\n\n    /**\n     * There are two regions on projected plane,\n     * { x: 0.5, y: [0..0.25] }    and    { x: 0.5, y: [0.75..1] }\n     * that represent longitude edge where -180 and +180 met.\n     * Points falling in this regions should be aligned to get proper boxes etc.\n     */\n    static alignLongitude(points: GeoCoordinatesLike[], referencePoint: GeoCoordinatesLike): void {\n        const bad = referencePoint.longitude < 0 ? 180 : -180;\n        const good = referencePoint.longitude < 0 ? -180 : 180;\n\n        for (const point of points) {\n            if (point.longitude === bad) {\n                point.longitude = good;\n            }\n        }\n    }\n}\n\n/**\n * Transverse Mercator [[Projection]] used to convert geo coordinates to world coordinates\n * and vice versa.\n */\nexport const transverseMercatorProjection: Projection = new TransverseMercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { Projection } from \"../projection/Projection\";\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\nimport * as THREE from \"three\";\n\n/**\n * `FlatTileBoundingBoxGenerator` generates bounding boxes in world and geo coordinates for a given\n * TilingScheme.\n */\nexport class FlatTileBoundingBoxGenerator {\n    private readonly m_tilingScheme: TilingScheme;\n    private readonly m_worldDimensions: Vector3Like;\n    private readonly m_worldBox: Box3Like;\n    /**\n     * Creates a new `FlatTileBoundingBoxGenerator` that can generate bounding boxes for the given\n     * TilingScheme.\n     *\n     * @param tilingScheme The [[TilingScheme]] used to compute bounding boxes.\n     * @param minElevation The minimum elevation in meters.\n     * @param maxElevation The maximum elevation in meters.\n     */\n    constructor(\n        readonly tilingScheme: TilingScheme,\n        readonly minElevation: number = 0,\n        readonly maxElevation: number = 0\n    ) {\n        this.m_tilingScheme = tilingScheme;\n        this.m_worldBox = tilingScheme.projection.worldExtent(minElevation, maxElevation);\n        const { min, max } = this.m_worldBox;\n        this.m_worldDimensions = { x: max.x - min.x, y: max.y - min.y, z: max.z - min.z };\n    }\n\n    /**\n     * Returns the [[Projection]] of the [[TilingScheme]].\n     */\n    get projection(): Projection {\n        return this.m_tilingScheme.projection;\n    }\n\n    /**\n     * Returns the [[SubdivisionScheme]] of the [[TilingScheme]].\n     */\n    get subdivisionScheme(): SubdivisionScheme {\n        return this.m_tilingScheme.subdivisionScheme;\n    }\n\n    /**\n     * Returns the bounding box in world coordinates of the given [[TileKey]].\n     *\n     * Example:\n     * ```typescript\n     * const worldBounds = new THREE.Box3();\n     * generator.getWorldBox(geoBox, worldBounds);\n     * console.log(worldBounds.getCenter());\n     * ```\n     *\n     * @param tileKey The TileKey.\n     * @param result The optional object used to store the resulting bounding box in world\n     * coordinates.\n     */\n    getWorldBox(tileKey: TileKey, result?: Box3Like): Box3Like {\n        const level = tileKey.level;\n        const levelDimensionX = this.subdivisionScheme.getLevelDimensionX(level);\n        const levelDimensionY = this.subdivisionScheme.getLevelDimensionY(level);\n        const sizeX = this.m_worldDimensions.x / levelDimensionX;\n        const sizeY = this.m_worldDimensions.y / levelDimensionY;\n        const originX = this.m_worldBox.min.x + sizeX * tileKey.column;\n        const originY = this.m_worldBox.min.y + sizeY * tileKey.row;\n\n        if (!result) {\n            result = new THREE.Box3();\n        }\n\n        result.min.x = originX;\n        result.min.y = originY;\n        result.min.z = this.m_worldBox.min.z;\n        result.max.x = originX + sizeX;\n        result.max.y = originY + sizeY;\n        result.max.z = this.m_worldBox.max.z;\n        return result;\n    }\n\n    /**\n     * Returns the bounding box in geo coordinates for the given [[TileKey]].\n     *\n     * Example:\n     * ```typescript\n     * const geoBox = generator.getGeoBox(worldBounds);\n     * console.log(geoBox.center);\n     * ```\n     *\n     * @param tileKey The [[TileKey]].\n     */\n    getGeoBox(tileKey: TileKey): GeoBox {\n        const worldBox = this.getWorldBox(tileKey);\n        return this.projection.unprojectBox(worldBox);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\n\nclass HalfQuadTreeSubdivisionScheme implements SubdivisionScheme {\n    getSubdivisionX(): number {\n        return 2;\n    }\n    getSubdivisionY(level: number): number {\n        return level === 0 ? 1 : 2;\n    }\n    getLevelDimensionX(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n    getLevelDimensionY(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return level !== 0 ? 1 << (level - 1) : 1;\n    }\n}\n\n/**\n * A [[SubdivisionScheme]] used to represent half quadtrees. This particular subdivision scheme is\n * used by the HERE tiling scheme.\n */\nexport const halfQuadTreeSubdivisionScheme: SubdivisionScheme = new HalfQuadTreeSubdivisionScheme();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"./TileKey\";\n\nexport class SubTiles implements Iterable<TileKey> {\n    constructor(public tileKey: TileKey, public sizeX: number, public sizeY: number) {}\n\n    [Symbol.iterator](): Iterator<TileKey> {\n        return this.sizeX === 2 && this.sizeY === 2\n            ? SubTiles.ZCurveIterator(this.tileKey)\n            : SubTiles.RowColumnIterator(this.tileKey, this.sizeX, this.sizeY);\n    }\n}\n\nexport namespace SubTiles {\n    export function* RowColumnIterator(\n        parentKey: TileKey,\n        sizeX: number,\n        sizeY: number\n    ): Iterator<TileKey> {\n        for (let y = 0; y < sizeY; y++) {\n            for (let x = 0; x < sizeX; x++) {\n                yield TileKey.fromRowColumnLevel(\n                    parentKey.row * sizeY + y,\n                    parentKey.column * sizeX + x,\n                    parentKey.level + 1\n                );\n            }\n        }\n    }\n\n    export function* ZCurveIterator(parentKey: TileKey): Iterator<TileKey> {\n        // tslint:disable:no-bitwise\n        for (let i = 0; i < 4; i++) {\n            yield TileKey.fromRowColumnLevel(\n                (parentKey.row << 1) | (i >> 1),\n                (parentKey.column << 1) | (i & 1),\n                parentKey.level + 1\n            );\n        }\n        // tslint:enableno-bitwise\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\nexport class TileKeyUtils {\n    static geoCoordinatesToTileKey(\n        tilingScheme: TilingScheme,\n        geoPoint: GeoCoordinatesLike,\n        level: number\n    ): TileKey | null {\n        const projection = tilingScheme.projection;\n        const worldPoint = projection.projectPoint(geoPoint);\n\n        return this.worldCoordinatesToTileKey(tilingScheme, worldPoint, level);\n    }\n\n    static worldCoordinatesToTileKey(\n        tilingScheme: TilingScheme,\n        worldPoint: Vector3Like,\n        level: number\n    ): TileKey | null {\n        const projection = tilingScheme.projection;\n        const subdivisionScheme = tilingScheme.subdivisionScheme;\n\n        const cx = subdivisionScheme.getLevelDimensionX(level);\n        const cy = subdivisionScheme.getLevelDimensionY(level);\n\n        const { min, max } = projection.worldExtent(0, 0);\n        const worldSizeX = max.x - min.x;\n        const worldSizeY = max.y - min.y;\n\n        if (worldPoint.x < min.x || worldPoint.x > max.x) {\n            return null;\n        }\n\n        if (worldPoint.y < min.y || worldPoint.y > max.y) {\n            return null;\n        }\n\n        const column = Math.min(cx - 1, Math.floor((cx * (worldPoint.x - min.x)) / worldSizeX));\n        const row = Math.min(cy - 1, Math.floor((cy * (worldPoint.y - min.y)) / worldSizeY));\n\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n\n    static geoRectangleToTileKeys(\n        tilingScheme: TilingScheme,\n        geoBox: GeoBox,\n        level: number\n    ): TileKey[] {\n        const wrap = (value: number, lower: number, upper: number) => {\n            if (value < lower) {\n                return upper - ((lower - value) % (upper - lower));\n            }\n\n            return lower + ((value - lower) % (upper - lower));\n        };\n\n        const clamp = (x: number, minVal: number, maxVal: number) => {\n            return Math.min(Math.max(x, minVal), maxVal);\n        };\n\n        // Clamp at the poles and wrap around the international date line.\n        const southWestLongitude = wrap(geoBox.southWest.longitudeInRadians, -Math.PI, Math.PI);\n        const southWestLatitude = clamp(\n            geoBox.southWest.latitudeInRadians,\n            -(Math.PI * 0.5),\n            Math.PI * 0.5\n        );\n        const northEastLongitude = wrap(geoBox.northEast.longitudeInRadians, -Math.PI, Math.PI);\n        const northEastLatitude = clamp(\n            geoBox.northEast.latitudeInRadians,\n            -(Math.PI * 0.5),\n            Math.PI * 0.5\n        );\n        const minTileKey = TileKeyUtils.geoCoordinatesToTileKey(\n            tilingScheme,\n            GeoCoordinates.fromRadians(southWestLatitude, southWestLongitude),\n            level\n        );\n        const maxTileKey = TileKeyUtils.geoCoordinatesToTileKey(\n            tilingScheme,\n            GeoCoordinates.fromRadians(northEastLatitude, northEastLongitude),\n            level\n        );\n        const columnCount = tilingScheme.subdivisionScheme.getLevelDimensionX(level);\n\n        if (!minTileKey || !maxTileKey) {\n            throw new Error(\"Invalid coordinates\");\n        }\n\n        const minColumn = minTileKey.column;\n        let maxColumn = maxTileKey.column;\n\n        // wrap around case\n        if (southWestLongitude > northEastLongitude) {\n            if (maxColumn !== minColumn) {\n                maxColumn += columnCount;\n            } else {\n                // do not duplicate\n                maxColumn += columnCount - 1;\n            }\n        }\n\n        const minRow = Math.min(minTileKey.row, maxTileKey.row);\n        const maxRow = Math.max(minTileKey.row, maxTileKey.row);\n\n        const keys = new Array<TileKey>();\n\n        for (let row = minRow; row <= maxRow; ++row) {\n            for (let column = minColumn; column <= maxColumn; ++column) {\n                keys.push(TileKey.fromRowColumnLevel(row, column % columnCount, level));\n            }\n        }\n\n        return keys;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { SubTiles } from \"./SubTiles\";\nimport { TileKey } from \"./TileKey\";\n\nexport class TileTreeTraverse {\n    private m_subdivisionScheme: SubdivisionScheme;\n\n    constructor(subdivisionScheme: SubdivisionScheme) {\n        this.m_subdivisionScheme = subdivisionScheme;\n    }\n\n    subTiles(tileKey: TileKey): Iterable<TileKey> {\n        const divX = this.m_subdivisionScheme.getSubdivisionX(tileKey.level);\n        const divY = this.m_subdivisionScheme.getSubdivisionY(tileKey.level);\n\n        return new SubTiles(tileKey, divX, divY);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Class for the default console channel.\n */\n\nexport class ConsoleChannel implements IChannel {\n    error(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.error(message, ...optionalParams);\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.debug(message, ...optionalParams);\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.info(message, ...optionalParams);\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.log(message, ...optionalParams);\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.trace(message, ...optionalParams);\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.warn(message, ...optionalParams);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\nimport { ILogger, LoggerOptions, LogLevel } from \"./ILogger\";\n\n/**\n * Logger class.\n */\nexport class Logger implements ILogger {\n    enabled: boolean = true;\n    level: LogLevel = LogLevel.Trace;\n\n    constructor(readonly name: string, private m_channel: IChannel, options?: LoggerOptions) {\n        if (options !== undefined) {\n            this.update(options);\n        }\n    }\n\n    error(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Error) {\n            this.m_channel.error(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Debug) {\n            this.m_channel.debug(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Info) {\n            this.m_channel.info(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Log) {\n            this.m_channel.log(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Trace) {\n            this.m_channel.trace(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Warn) {\n            this.m_channel.warn(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    update(options: LoggerOptions) {\n        this.enabled = options.enabled === undefined ? this.enabled : options.enabled;\n        this.level = options.level === undefined ? this.level : options.level;\n    }\n\n    private get prefix(): string {\n        return this.name + \":\";\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\nimport { LogLevel } from \"./ILogger\";\n\ndeclare let self: Worker;\n\nexport const WORKERCHANNEL_MSG_TYPE = \"worker-channel-message\";\n\n/**\n * The interface for the messages of the WorkerChannel.\n */\nexport interface IWorkerChannelMessage {\n    message: any[];\n    type: \"worker-channel-message\";\n    level: LogLevel;\n}\n\n/**\n * The class for the worker channel.\n */\nexport class WorkerChannel implements IChannel {\n    error(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Error\n        };\n        self.postMessage(workerMessage);\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Debug\n        };\n        self.postMessage(workerMessage);\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Info\n        };\n        self.postMessage(workerMessage);\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Log\n        };\n        self.postMessage(workerMessage);\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Trace\n        };\n        self.postMessage(workerMessage);\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Warn\n        };\n        self.postMessage(workerMessage);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * The base shader to use for [[MapView]]'s composing passes, like [[MSAAMaterial]].\n */\n\nexport const CopyShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        opacity: { value: 1.0 }\n    },\n    vertexShader: `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }`,\n    fragmentShader: `\n    uniform float opacity;\n    uniform sampler2D tDiffuse;\n    varying vec2 vUv;\n    void main() {\n        vec4 texel = texture2D( tDiffuse, vUv );\n        gl_FragColor = opacity * texel;\n    }`\n};\n\n/**\n * The material is used for composing.\n */\nexport class CopyMaterial extends THREE.ShaderMaterial {\n    /**\n     * The constructor of `CopyMaterial`.\n     *\n     * @param uniforms The [[CopyShader]]'s uniforms.\n     */\n    constructor(uniforms: { [uniformName: string]: THREE.IUniform }) {\n        super({\n            name: \"CopyMaterial\",\n            uniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            premultipliedAlpha: true,\n            transparent: false,\n            blending: THREE.NoBlending,\n            depthTest: false,\n            depthWrite: false\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport { ColorUtils } from \"./ColorUtils\";\nimport { Env } from \"./Env\";\nimport { ExponentialInterpolant } from \"./ExponentialInterpolant\";\nimport { Expr, ExprScope, Value } from \"./Expr\";\nimport { InterpolatedPropertyDefinition, InterpolationMode } from \"./InterpolatedPropertyDefs\";\nimport {\n    parseStringEncodedNumeral,\n    StringEncodedColorFormats,\n    StringEncodedMetricFormats,\n    StringEncodedNumeralFormat,\n    StringEncodedNumeralFormatMaxSize,\n    StringEncodedNumeralFormats,\n    StringEncodedNumeralType\n} from \"./StringEncodedNumeral\";\n\nconst logger = LoggerManager.instance.create(\"InterpolatedProperty\");\n\nconst interpolants = [\n    THREE.DiscreteInterpolant,\n    THREE.LinearInterpolant,\n    THREE.CubicInterpolant,\n    ExponentialInterpolant\n];\n\nconst tmpBuffer = new Array<number>(StringEncodedNumeralFormatMaxSize);\n\n/**\n * Property which value is interpolated across different zoom levels.\n */\nexport interface InterpolatedProperty {\n    /**\n     * Interpolation mode that should be used for this property.\n     */\n    interpolationMode: InterpolationMode;\n\n    /**\n     * Zoom level keys array.\n     */\n    zoomLevels: Float32Array;\n\n    /**\n     * Property values array.\n     */\n    values: ArrayLike<any>;\n\n    /**\n     * Exponent used in interpolation. Only valid with `Exponential` [[InterpolationMode]].\n     */\n    exponent?: number;\n\n    /**\n     * @hidden\n     * [[StringEncodedNumeral]] type needed to interpret interpolated values back to numbers.\n     */\n    _stringEncodedNumeralType?: StringEncodedNumeralType;\n\n    /**\n     * @hidden\n     * Array of `0` and `1`mask values used to modify the interpolation behaviour of some\n     * [[StringEncodedNumeral]]s.\n     */\n    _stringEncodedNumeralDynamicMask?: Float32Array;\n}\n\n/**\n * Type guard to check if an object is an instance of `InterpolatedProperty`.\n */\nexport function isInterpolatedProperty(p: any): p is InterpolatedProperty {\n    if (\n        p &&\n        p.interpolationMode !== undefined &&\n        p.zoomLevels instanceof Float32Array &&\n        p.values !== undefined &&\n        p.values.length > 0 &&\n        (p.zoomLevels.length === p.values.length / 4 ||\n            p.zoomLevels.length === p.values.length / 3 ||\n            p.zoomLevels.length === p.values.length)\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n* Get the value of the specified property in given `env`.\n\n* @param property Property of a technique.\n* @param env The [[Env]] used to evaluate the property\n*/\nexport function getPropertyValue(property: Value | Expr | undefined, env: Env): any {\n    if (Expr.isExpr(property)) {\n        try {\n            return property.evaluate(env, ExprScope.Dynamic);\n        } catch (error) {\n            logger.error(\n                \"failed to evaluate expression\",\n                JSON.stringify(property),\n                \"error\",\n                String(error)\n            );\n            return null;\n        }\n    }\n\n    if (property === null || typeof property === \"undefined\") {\n        return null;\n    } else if (typeof property !== \"string\") {\n        // Property in numeric or array, etc. format\n        return property;\n    } else {\n        // Non-interpolated string encoded numeral parsing\n        const pixelToMeters = (env.lookup(\"$pixelToMeters\") as number) || 1;\n        const value = parseStringEncodedNumeral(property, pixelToMeters);\n        return value !== undefined ? value : property;\n    }\n}\n\nexport function evaluateInterpolatedProperty(property: InterpolatedProperty, env: Env): any {\n    const level = env.lookup(\"$zoom\") as number;\n    const pixelToMeters = env.lookup(\"$pixelToMeters\") as number;\n\n    if (property._stringEncodedNumeralType !== undefined) {\n        switch (property._stringEncodedNumeralType) {\n            case StringEncodedNumeralType.Meters:\n            case StringEncodedNumeralType.Pixels:\n                return getInterpolatedMetric(property, level, pixelToMeters);\n            case StringEncodedNumeralType.Hex:\n            case StringEncodedNumeralType.RGB:\n            case StringEncodedNumeralType.RGBA:\n            case StringEncodedNumeralType.HSL:\n                return getInterpolatedColor(property, level);\n        }\n    }\n    return getInterpolatedMetric(property, level, pixelToMeters);\n}\n\nfunction getInterpolatedMetric(\n    property: InterpolatedProperty,\n    level: number,\n    pixelToMeters: number\n): number {\n    const nChannels = property.values.length / property.zoomLevels.length;\n    const interpolant = new interpolants[property.interpolationMode](\n        property.zoomLevels,\n        property.values,\n        nChannels\n    );\n    if (\n        property.interpolationMode === InterpolationMode.Exponential &&\n        property.exponent !== undefined\n    ) {\n        (interpolant as ExponentialInterpolant).exponent = property.exponent;\n    }\n    interpolant.evaluate(level);\n\n    if (property._stringEncodedNumeralDynamicMask === undefined) {\n        return interpolant.resultBuffer[0];\n    } else {\n        const maskInterpolant = new interpolants[property.interpolationMode](\n            property.zoomLevels,\n            property._stringEncodedNumeralDynamicMask,\n            1\n        );\n        if (\n            property.interpolationMode === InterpolationMode.Exponential &&\n            property.exponent !== undefined\n        ) {\n            (maskInterpolant as ExponentialInterpolant).exponent = property.exponent;\n        }\n        maskInterpolant.evaluate(level);\n\n        return (\n            interpolant.resultBuffer[0] *\n            (1 + maskInterpolant.resultBuffer[0] * (pixelToMeters - 1))\n        );\n    }\n}\n\nfunction getInterpolatedColor(property: InterpolatedProperty, level: number): number {\n    const nChannels = property.values.length / property.zoomLevels.length;\n    const interpolant = new interpolants[property.interpolationMode](\n        property.zoomLevels,\n        property.values,\n        nChannels\n    );\n    if (\n        property.interpolationMode === InterpolationMode.Exponential &&\n        property.exponent !== undefined\n    ) {\n        (interpolant as ExponentialInterpolant).exponent = property.exponent;\n    }\n    interpolant.evaluate(level);\n\n    assert(nChannels === 3 || nChannels === 4);\n    // ColorUtils.getHexFromRgba() does not clamp the values which may be out of\n    // color channels range (0 <= c <= 1) after interpolation.\n    if (nChannels === 4) {\n        return ColorUtils.getHexFromRgba(\n            THREE.MathUtils.clamp(interpolant.resultBuffer[0], 0, 1),\n            THREE.MathUtils.clamp(interpolant.resultBuffer[1], 0, 1),\n            THREE.MathUtils.clamp(interpolant.resultBuffer[2], 0, 1),\n            THREE.MathUtils.clamp(interpolant.resultBuffer[3], 0, 1)\n        );\n    } else {\n        return ColorUtils.getHexFromRgb(\n            THREE.MathUtils.clamp(interpolant.resultBuffer[0], 0, 1),\n            THREE.MathUtils.clamp(interpolant.resultBuffer[1], 0, 1),\n            THREE.MathUtils.clamp(interpolant.resultBuffer[2], 0, 1)\n        );\n    }\n}\n\n/**\n * Convert JSON representation of interpolated property to internal, normalized version that\n * can be evaluated by [[getPropertyValue]].\n */\nexport function createInterpolatedProperty(\n    prop: InterpolatedPropertyDefinition<unknown>\n): InterpolatedProperty | undefined {\n    removeDuplicatePropertyValues(prop);\n\n    const interpolationMode =\n        prop.interpolation !== undefined\n            ? InterpolationMode[prop.interpolation]\n            : InterpolationMode.Discrete;\n\n    const zoomLevels = new Float32Array(prop.zoomLevels);\n\n    const firstValue = prop.values[0];\n    switch (typeof firstValue) {\n        default:\n        case \"number\":\n        case \"boolean\":\n            return {\n                interpolationMode,\n                zoomLevels,\n                values: new Float32Array(prop.values as any),\n                exponent: prop.exponent\n            };\n        case \"string\":\n            // TODO: Minimize effort for pre-matching the numeral format.\n            const matchedFormat = StringEncodedNumeralFormats.find(format =>\n                format.regExp.test(firstValue)\n            );\n\n            if (matchedFormat === undefined) {\n                if (interpolationMode === InterpolationMode.Discrete) {\n                    return {\n                        interpolationMode,\n                        zoomLevels,\n                        values: prop.values\n                    };\n                }\n\n                logger.error(`No StringEncodedNumeralFormat matched ${firstValue}.`);\n                return undefined;\n            }\n\n            let needsMask = false;\n\n            const propValues = new Float32Array(prop.values.length * matchedFormat.size);\n            const maskValues = new Float32Array(prop.values.length);\n            needsMask = procesStringEnocodedNumeralInterpolatedProperty(\n                matchedFormat,\n                prop as InterpolatedPropertyDefinition<string>,\n                propValues,\n                maskValues\n            );\n\n            return {\n                interpolationMode,\n                zoomLevels,\n                values: propValues,\n                exponent: prop.exponent,\n                _stringEncodedNumeralType: matchedFormat.type,\n                _stringEncodedNumeralDynamicMask: needsMask ? maskValues : undefined\n            };\n    }\n}\n\nfunction removeDuplicatePropertyValues<T>(p: InterpolatedPropertyDefinition<T>) {\n    const eps = 0.001;\n\n    // detect cubic interpolations and remove stops\n    // closer than `eps`, this is needed to avoid\n    // possible NaN generated by the cubic interpolator.\n    const isCubic = p.interpolation === \"Cubic\";\n\n    for (let i = 0; i < p.values.length; ++i) {\n        const firstIdx = p.zoomLevels.findIndex(a => {\n            return isCubic ? Math.abs(a - p.zoomLevels[i]) < eps : a === p.zoomLevels[i];\n        });\n        if (firstIdx !== i) {\n            p.zoomLevels.splice(--i, 1);\n            p.values.splice(--i, 1);\n        }\n    }\n}\n\nfunction procesStringEnocodedNumeralInterpolatedProperty(\n    baseFormat: StringEncodedNumeralFormat,\n    prop: InterpolatedPropertyDefinition<string>,\n    propValues: Float32Array,\n    maskValues: Float32Array\n): boolean {\n    let needsMask = false;\n    const allowedValueFormats =\n        baseFormat.type === StringEncodedNumeralType.Meters ||\n        baseFormat.type === StringEncodedNumeralType.Pixels\n            ? StringEncodedMetricFormats\n            : StringEncodedColorFormats;\n\n    for (let valueIdx = 0; valueIdx < prop.values.length; ++valueIdx) {\n        let matched = false;\n        for (const valueFormat of allowedValueFormats) {\n            const value = prop.values[valueIdx];\n            matched = valueFormat.decoder(value, tmpBuffer);\n            if (!matched) {\n                continue;\n            }\n\n            if (valueFormat.mask !== undefined) {\n                maskValues[valueIdx] = valueFormat.mask;\n                needsMask = true;\n            }\n\n            for (let i = 0; i < valueFormat.size; ++i) {\n                propValues[valueIdx * valueFormat.size + i] = tmpBuffer[i];\n            }\n            break;\n        }\n        if (!matched) {\n            throw Error(\n                `Not all interpolation values match the same format: ${JSON.stringify(prop)}`\n            );\n        }\n    }\n\n    return needsMask;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { JsonExpr } from \"./Expr\";\nimport { InterpolatedPropertyDefinition } from \"./InterpolatedPropertyDefs\";\n\n/**\n * Available line caps types(`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n * Default is `\"Round\"`.\n */\nexport type LineCaps = \"Square\" | \"Round\" | \"None\" | \"TriangleOut\" | \"TriangleIn\";\n\n/**\n * Available line dash types(`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\n * Default is `\"Square\"`.\n */\nexport type LineDashes = \"Square\" | \"Round\" | \"Diamond\";\n\n/**\n * Standard kinds of geometry.\n */\nexport enum StandardGeometryKind {\n    /**\n     * Used in the enabledKinds/disabledKinds filter to match any kind.\n     */\n    All = \"_all_\",\n\n    /**\n     * Background geometry.\n     */\n    Background = \"background\",\n\n    /**\n     * Terrain geometry.\n     */\n    Terrain = \"terrain\",\n\n    /**\n     * Default value for the FillTechnique.\n     */\n    Area = \"area\",\n\n    /**\n     * Default value for all line techniques.\n     */\n    Line = \"line\",\n\n    /**\n     * Default value for the FillTechnique.\n     */\n    Water = \"water\",\n\n    /**\n     * Political borders.\n     */\n    Border = \"border\",\n\n    /**\n     * Basis for all roads.\n     */\n    Road = \"road\",\n\n    /**\n     * Default value for the ExtrudedPolygonTechnique.\n     */\n    Building = \"building\",\n\n    /**\n     * Default value for the TextTechnique, LineMarkerTechnique and the PoiTechnique.\n     */\n    Label = \"label\",\n\n    /**\n     * Anything that may show up last.\n     */\n    Detail = \"detail\"\n}\n\n/**\n * Geometry kind used for use by [[BaseTechniqueParams.kind]].\n *\n * The kind of geometry is used to group objects together,\n * allowing the group to be hidden or displayed.\n *\n * Any string can be used to specify the kind of the technique in a style in the theme file. Is is\n * suggested to specify multiple kinds for specific types of data. For a highway, the following list\n * of kinds is suggested:\n *\n *    [\"line\", \"road\", \"road:highway\"]\n *\n * If it is a tunnel for a highway:\n *\n *    [\"line\", \"road\", \"road:highway\", \"tunnel\", \"road:tunnel\", \"road:highway:tunnel\"]\n *\n * If specified in this way, specific types of data (here: highway roads) can be enabled and/or\n * disabled.\n */\nexport type GeometryKind = string | StandardGeometryKind;\nexport const GeometryKind = StandardGeometryKind;\n\n/**\n * Decorate property type with possible dynamic variants.\n */\nexport type DynamicProperty<T> = T | JsonExpr | InterpolatedPropertyDefinition<T>;\n\n/*\n * Description of length units inside a style. Supports literal values (interpreted as `m`), `m` and\n * `px`(i.e. `80`, `14px`, `0.6m`, etc.).\n */\nexport type StyleLength = string | number;\n\n/**\n * Description of colors inside a style. Supports hex values as well as CSS hex, rgb and hsl values\n * (i.e. `0xffffff`, `#f00fab`, `#aaa`, `rgb(255, 0 120)`, `hsl(360, 100%, 100%)`, etc.).\n */\nexport type StyleColor = string | number;\n\n/**\n * A set of [[GeometryKind]]s.\n */\nexport class GeometryKindSet extends Set {\n    /**\n     * Return `true` if the Set is a superset of the set 'subset'.\n     */\n    isSuperset(subset: Set<any>): boolean {\n        for (const elem of subset) {\n            if (!this.has(elem)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Return `true` if the Set intersects Set 'set'.\n     */\n    hasIntersection(set: any) {\n        for (const elem of set) {\n            if (this.has(elem)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Return `true` if the Set either intersects Set 'set' (if set is a Set), of has element 'set'\n     * if set is not a Set.\n     */\n    hasOrIntersects(set: any) {\n        if (set instanceof Set) {\n            return this.hasIntersection(set);\n        }\n        return this.has(set);\n    }\n\n    /**\n     * Return `true` if this set and the array of elements share at least a single element.\n     */\n    hasOrIntersectsArray(subset: any[]) {\n        for (const elem of subset) {\n            if (this.has(elem)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Common attributes or all [[Technique]]s.\n */\nexport interface BaseTechniqueParams {\n    /**\n     * The name used to identify materials created from this technique.\n     */\n    id?: string;\n\n    /**\n     * The render order of the objects created using this technique.\n     *\n     * If not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\n     * values according to style position in file.\n     */\n    renderOrder: number;\n\n    /**\n     * The category of this technique.\n     *\n     * The category is used in conjunction with [[Theme.priorities]]\n     * to assign render orders to the objects created by this [[Style]].\n     */\n    category?: string;\n\n    /**\n     * Optional. If `true`, no IDs will be saved for the geometry this technique creates.\n     */\n    transient?: boolean;\n\n    /**\n     * Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\n     * fading out (opacity decreases).\n     */\n    fadeNear?: DynamicProperty<number>;\n\n    /**\n     * Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\n     * opacity and stops fading out. An undefined value disables fading.\n     */\n    fadeFar?: DynamicProperty<number>;\n\n    /**\n     * Specified kind of geometry. One kind is set as default in the technique, and can be\n     * overridden in the style.\n     *\n     * @deprecated Use [[enabled]] with expressions based on `['dynamic-properties']` operator.\n     */\n    kind?: GeometryKind | GeometryKindSet;\n\n    /**\n     * Runtime filtering of techniques.\n     *\n     * Use with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc.\n     *\n     * @see Picking example - [[PickingExample]]\n     */\n    enabled?: DynamicProperty<boolean>;\n}\n\nexport enum TextureCoordinateType {\n    /**\n     * Texture coordinates are in tile space.\n     * SW of the tile will have (0,0) and NE will have (1,1).\n     */\n    TileSpace = \"tile-space\",\n    /**\n     * Texture coordinates are in equirectangular space.\n     * (u, v) = ( (longitude+180) / 360, (latitude+90) / 180).\n     */\n    EquirectangularSpace = \"equirectangular-space\"\n}\n\n/**\n * Standard technique parameters.\n */\nexport interface StandardTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.\n     */\n    wireframe?: boolean;\n    /**\n     * If `vertexColors` is `true`, every vertex has color information, which is interpolated\n     * between vertices.\n     * See https://threejs.org/docs/#api/en/materials/Material.vertexColors.\n     */\n    vertexColors?: boolean;\n    /**\n     * How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\n     * diffuse. Default is `1.0`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness.\n     */\n    roughness?: DynamicProperty<number>;\n    /**\n     * How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\n     * metallic ones use `1.0`, with nothing (usually) in between. Default is `0.0`. A value between\n     * `0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\n     * values are multiplied.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness.\n     */\n    metalness?: DynamicProperty<number>;\n    /**\n     * The material will not be rendered if the opacity is lower than this value.\n     * See https://threejs.org/docs/#api/en/materials/Material.alphaTest.\n     */\n    alphaTest?: DynamicProperty<number>;\n    /**\n     * Skip rendering clobbered pixels.\n     * See https://threejs.org/docs/#api/en/materials/Material.depthTest.\n     */\n    depthTest?: boolean;\n    /**\n     * Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     * See https://threejs.org/docs/#api/en/materials/Material.transparent.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     * See https://threejs.org/docs/#api/en/materials/Material.opacity.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Emissive (light) color of the material, essentially a solid color unaffected by other\n     * lighting. Default is black.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.\n     * @format color-hex\n     */\n    emissive?: DynamicProperty<StyleColor>;\n    /**\n     * Intensity of the emissive light. Modulates the emissive color. Default is `1`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity.\n     */\n    emissiveIntensity?: DynamicProperty<number>;\n    /**\n     * The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\n     * the material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n     * `THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n     *  is `0.98`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio.\n     */\n    refractionRatio?: DynamicProperty<number>;\n\n    /**\n     * Whether and how texture coordinates should be generated. No texture coordinates are\n     * generated if `undefined`.\n     * Should be set if any texture assigned (e.g. `map`, `normalMap`, ...).\n     */\n    textureCoordinateType?: TextureCoordinateType;\n\n    /*\n     * URL or texture buffer that should be used as color map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.map\n     */\n    map?: string | TextureBuffer;\n    mapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as normal map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap\n     */\n    normalMap?: string | TextureBuffer;\n    normalMapType?: number;\n    normalMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as displacement map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap\n     */\n    displacementMap?: string | TextureBuffer;\n    displacementMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as roughness map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap\n     */\n    roughnessMap?: string | TextureBuffer;\n    roughnessMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as emissive map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap\n     */\n    emissiveMap?: string | TextureBuffer;\n    emissiveMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as bump map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap\n     */\n    bumpMap?: string | TextureBuffer;\n    bumpMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as metalness map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap\n     */\n    metalnessMap?: string | TextureBuffer;\n    metalnessMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as alpha map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap\n     */\n    alphaMap?: string | TextureBuffer;\n    alphaMapProperties?: TextureProperties;\n}\n\n/**\n * Possible parameters of [[PointTechnique]].\n */\nexport interface PointTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of a point in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * URL of a texture image to be loaded.\n     */\n    texture?: string;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Size of point in pixels.\n     */\n    size?: number;\n    /**\n     * Whether to enable picking on these points.\n     */\n    enablePicking?: boolean;\n}\n\n/**\n * Define the stacking option. Enum values for theme file are in \"kebab-case\".\n */\nexport enum PoiStackMode {\n    /**\n     * Show in a stack.\n     */\n    Show = \"show-in-stack\",\n    /**\n     * Do not show in a stack.\n     */\n    Hide = \"hide-in-stack\",\n    /**\n     * Show category parent in the stack.\n     */\n    ShowParent = \"show-parent\"\n}\n\n/**\n * Technique that describes icons with labels. Used in [[PoiTechnique]] and [[LineMarkerTechnique]]\n * (for road shields).\n */\nexport interface MarkerTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Text to be displayed for feature.\n     *\n     * Defaults to first defined:\n     *  - feature property `label` if present in technique (depreacted)\n     *  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true\n     *  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true\n     *  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language\n     *  - `[\"get\", \"name\"]`\n     *\n     * See [[ExtendedTileInfo.getFeatureText]]\n     */\n    text?: string;\n\n    /**\n     * Field name of object containing the text to be rendered.\n     *\n     * @deprecated, Use `[\"get\", \"FIELD\"]`.\n     */\n    label?: string;\n    /**\n     * If `true`, the abbreviation (field `name:short`) of the elements is used as text.\n     *\n     * @deprecated Use proper expression with [`get`, `name:short`] for this purpose.\n     */\n    useAbbreviation?: boolean;\n    /**\n     * If `true`, the iso code (field 'iso_code') of the elements is used as text.\n     * The `iso_code` field contains the ISO 3166-1 2-letter country code.\n     *\n     * @deprecated Use proper expression with [`get`, `iso_code`] for this purpose.\n     */\n    useIsoCode?: boolean;\n    /**\n     * Priority of marker, defaults to `0`. Markers with highest priority get placed first.\n     */\n    priority?: DynamicProperty<number>;\n    /**\n     * Minimum zoomLevel at which to display the label text. No default.\n     */\n    textMinZoomLevel?: number;\n    /**\n     * Maximum zoomLevel at which to display the label text. No default.\n     */\n    textMaxZoomLevel?: number;\n    /**\n     * Minimum zoomLevel at which to display the label icon. No default.\n     */\n    iconMinZoomLevel?: number;\n    /**\n     * Maximum zoomLevel at which to display the label icon. No default.\n     */\n    iconMaxZoomLevel?: number;\n    /**\n     * Scaling factor of icon. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale?: number;\n    /**\n     * If `false`, text may overlap markers.\n     * @default `false`\n     */\n    textMayOverlap?: boolean;\n    /**\n     * If `false`, the icon may overlap text and other icons of lower priority. If not defined, the\n     * property value from `textMayOverlap` will be used.\n     * @default `false`\n     */\n    iconMayOverlap?: boolean;\n    /**\n     * If `false`, text will not reserve screen space, other markers will be able to overlap.\n     * @default `true`\n     */\n    textReserveSpace?: boolean;\n    /**\n     * If `false`, icon will not reserve screen space, other markers will be able to overlap. If not\n     * defined, the property value from `iconReserveSpace` will be used.\n     * @default `true`\n     */\n    iconReserveSpace?: boolean;\n    /**\n     * If `false`, text will not be rendered during animations. Defaults to `true`.\n     */\n    renderTextDuringMovements?: boolean;\n    /**\n     * If `true`, the label will always be rendered on top. If overlapping with other labels with\n     * this flag set, the render order is undefined.\n     * @default `false`\n     */\n    alwaysOnTop?: boolean;\n    /**\n     * If `true`, icon will appear even if the text part is blocked by other labels. Defaults to\n     * `false`.\n     */\n    textIsOptional?: boolean;\n    /**\n     * Should be displayed on map or not. Defaults to `true`.\n     */\n    showOnMap?: boolean;\n    /**\n     * Specify stack mode. Defaults to `ShowInStack`.\n     */\n    stackMode?: PoiStackMode;\n    /**\n     * Minimal distance between markers in screen pixels.\n     */\n    minDistance?: number;\n    /**\n     * If true, the text will appear even if the icon cannot be rendered because of missing icon\n     * graphics. Defaults to `true`.\n     */\n    iconIsOptional?: boolean;\n    /**\n     * Fading time for labels in seconds.\n     */\n    textFadeTime?: number;\n    /**\n     * Fading time for icons in seconds.\n     */\n    iconFadeTime?: number;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    xOffset?: DynamicProperty<number>;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    yOffset?: DynamicProperty<number>;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    iconXOffset?: DynamicProperty<number>;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    iconYOffset?: DynamicProperty<number>;\n    /**\n     * Scaling factor of icon.\n     */\n    iconScale?: number;\n    /**\n     * Vertical height in pixels, controls vertical scaling. Overrides `iconScale`.\n     */\n    screenHeight?: DynamicProperty<number>;\n    /**\n     * Horizontal height in pixels, controls horizontal scaling. Overrides `iconScale`.\n     */\n    screenWidth?: DynamicProperty<number>;\n    /**\n     * Name of the POI table which should be used for this POI.\n     */\n    poiTable?: string;\n    /**\n     * Fixed name to identify POI options in the POI table. If `poiName` has a value, this value\n     * supercedes any value read from the field referenced in `poiNameField`.\n     */\n    poiName?: string;\n    /**\n     * Name of the field to evaluate to get the name of the POI options in the POI table.\n     */\n    poiNameField?: string;\n    /**\n     * Name of [[ImageTexture]] definition to use.\n     */\n    imageTexture?: string;\n    /**\n     * Field name to extract imageTexture content from.\n     */\n    imageTextureField?: string;\n    /**\n     * Prefix for `imageTexture` if `imageTextureField` is used.\n     */\n    imageTexturePrefix?: string;\n    /**\n     * Postfix for `imageTexture` if `imageTextureField` is used.\n     */\n    imageTexturePostfix?: string;\n    /**\n     * Name of the text style.\n     */\n    style?: string;\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    fontName?: string;\n    /**\n     * Size of the text (pixels).\n     */\n    size?: DynamicProperty<number>;\n    /**\n     * Size of the text background (pixels).\n     */\n    backgroundSize?: DynamicProperty<number>;\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    /**\n     * Glyph local rotation (radians).\n     */\n    rotation?: number;\n    /**\n     * Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    backgroundColor?: DynamicProperty<StyleColor>;\n    /**\n     * For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Background text opacity value.\n     */\n    backgroundOpacity?: DynamicProperty<number>;\n    /**\n     * Inter-glyph spacing (pixels). Scaled by `size`.\n     */\n    tracking?: DynamicProperty<number>;\n    /**\n     * Inter-line spacing (pixels). Scaled by `size`.\n     */\n    leading?: DynamicProperty<number>;\n    /**\n     * Maximum number of lines for this label.\n     */\n    maxLines?: DynamicProperty<number>;\n    /**\n     * Maximum line width (pixels).\n     */\n    lineWidth?: DynamicProperty<number>;\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    canvasRotation?: DynamicProperty<number>;\n    /**\n     * Line typesetting rotation (radians).\n     */\n    lineRotation?: DynamicProperty<number>;\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    wrappingMode?: DynamicProperty<\"None\" | \"Character\" | \"Word\">;\n    /**\n     * Text position regarding the baseline.\n     */\n    hAlignment?: DynamicProperty<\"Left\" | \"Center\" | \"Right\">;\n    /**\n     * Text position inside a line.\n     */\n    vAlignment?: DynamicProperty<\"Above\" | \"Center\" | \"Below\">;\n}\n\nexport interface LineTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to true if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of line in pixels. WebGL implementations will normally render all lines with 1 pixel\n     * width, and ignore this value.\n     */\n    lineWidth: DynamicProperty<number>;\n}\n\n/**\n * Declares a geometry as a segment.\n */\nexport interface SegmentsTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of segments in a hexadecimal notation, for example: `\"#e4e9ec\"` or `\"#fff\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of a line in meters.\n     */\n    lineWidth: DynamicProperty<number>;\n}\n\n/**\n * Declares a a geometry as a polygon.\n */\nexport interface PolygonalTechniqueParams {\n    /**\n     * Whether to use polygon offset. Default is false. This corresponds to the\n     * GL_POLYGON_OFFSET_FILL WebGL feature.\n     *\n     * PolygonOffset is used to raise the geometry towards the geometry (for depth calculation\n     * only). Default is false.\n     *\n     * See here: https://sites.google.com/site/threejstuts/home/polygon_offset\n     *\n     * To activate polygonOffset these values have to be set to pull the line \"forwards\":\n     *\n     * transparent: true\n     *\n     * polygonOffset: true\n     *\n     * polygonOffsetFactor : -1.0, (as an example, see link above)\n     *\n     * polygonOffsetUnits: -1 (as an example, see link above)\n     */\n    polygonOffset?: boolean;\n\n    /**\n     * Sets the polygon offset factor. Default is 0.\n     */\n    polygonOffsetFactor?: DynamicProperty<number>;\n\n    /**\n     * Sets the polygon offset units. Default is 0.\n     */\n    polygonOffsetUnits?: DynamicProperty<number>;\n\n    /**\n     * Sets the polygon outline color.\n     * @format color-hex\n     */\n    lineColor?: DynamicProperty<StyleColor>;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\n     * fading out.\n     */\n    lineFadeNear?: DynamicProperty<number>;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\n     * transparent. A value of <= 0.0 disables fading.\n     */\n    lineFadeFar?: DynamicProperty<number>;\n}\n\n/**\n * Declares a a geometry as a basic extruded line.\n */\nexport interface BasicExtrudedLineTechniqueParams\n    extends BaseTechniqueParams,\n        PolygonalTechniqueParams {\n    /**\n     * A value determining the shading technique. Valid values are \"Basic\" and \"Standard\". Default\n     * is \"Basic\".\n     *\n     * `\"basic\"`   : Simple shading, faster to render. Only simple color and opacity are effective.\n     * `\"standard\"`: Elaborate shading, with metalness, and roughness.\n     *\n     * TODO: is this TechniqueParams or Style prop ?\n     */\n    shading?: \"basic\";\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of line in meters for different zoom levels.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     */\n    wireframe?: boolean;\n    /**\n     * Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n     * `\"Circle\"`.\n     */\n    caps?: \"None\" | \"Circle\";\n}\n\n/**\n * Declares a a geometry as a standard extruded line.\n */\nexport interface StandardExtrudedLineTechniqueParams\n    extends StandardTechniqueParams,\n        PolygonalTechniqueParams {\n    /**\n     * A value determining the shading technique. Valid values are `\"basic\"` and `\"standard\"`.\n     * Default is `\"basic\"`.\n     *\n     * `\"basic\"` : Simple shading, faster to render. Only simple color and opacity are effective.\n     * `\"standard\"` : Elaborate shading, with metalness, and roughness.\n     */\n    shading: \"standard\";\n    /**\n     * Width of a line in meters for different zoom levels.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n     * `\"Circle\"`.\n     */\n    caps?: \"None\" | \"Circle\";\n}\n\n/**\n * Declares a a geometry as a solid line.\n */\nexport interface SolidLineTechniqueParams extends BaseTechniqueParams, PolygonalTechniqueParams {\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Color of a line outline in hexadecimal or CSS-style notation,\n     * for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    outlineColor?: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    // TODO: Make pixel units default.\n    /**\n     * @deprecated Specify metrics units as part of the value instead.\n     * Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.\n     */\n    metricUnit?: string;\n    /**\n     * Width of a line in `metricUnit` for different zoom levels.\n     */\n    lineWidth: DynamicProperty<StyleLength>;\n    /**\n     * Outline width of a line in `metricUnit`s for different zoom levels.\n     */\n    outlineWidth?: DynamicProperty<StyleLength>;\n    /**\n     * Clip the line outside the tile if `true`.\n     */\n    clipping?: boolean;\n    /**\n     * Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    caps?: LineCaps;\n    /**\n     * Color of secondary line geometry in hexadecimal or CSS-style notation, for example:\n     * `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    secondaryColor?: DynamicProperty<StyleColor>;\n    /**\n     * Width of secondary line geometry in `metricUnit`s for different zoom levels.\n     */\n    secondaryWidth?: DynamicProperty<StyleLength>;\n    /**\n     * The render order of the secondary line geometry object created using this technique.\n     */\n    secondaryRenderOrder?: number;\n    /**\n     * Describes secondary line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`,\n     * `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    secondaryCaps?: LineCaps;\n    /**\n     * Describes the category of the secondary geometry object created using this technique.\n     */\n    secondaryCategory?: number;\n    /**\n     * Describes the starting drawing position for the line (in the range [0...1]).\n     * Default is `0.0`.\n     */\n    drawRangeStart?: number;\n    /**\n     * Describes the ending drawing position for the line (in the range [0...1]).\n     * Default is `1.0`.\n     */\n    drawRangeEnd?: number;\n    /**\n     * Describes line dash type (`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\n     * Default is `\"Square\"`.\n     */\n    dashes?: LineDashes;\n    /**\n     * Color of a line dashes in hexadecimal or CSS-style notation,\n     * for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    dashColor?: DynamicProperty<StyleColor>;\n    /**\n     * Length of a line in meters for different zoom levels.\n     */\n    dashSize?: DynamicProperty<StyleLength>;\n    /**\n     * Size of a gap between lines in meters for different zoom levels.\n     */\n    gapSize?: DynamicProperty<StyleLength>;\n}\n\n/**\n * Technique used to draw filled polygons.\n */\nexport interface FillTechniqueParams extends BaseTechniqueParams, PolygonalTechniqueParams {\n    /**\n     * Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     */\n    wireframe?: boolean;\n    /**\n     * Width of the lines. Currently limited to the [0, 1] range.\n     */\n    lineWidth?: DynamicProperty<number>;\n}\n\n/**\n * Technique used to draw a geometry as an extruded polygon, for example extruded buildings.\n */\nexport interface ExtrudedPolygonTechniqueParams extends StandardTechniqueParams {\n    /**\n     * Renders the footprint lines if set to 'true'.\n     */\n    footprint?: boolean;\n    /**\n     * Set to a negative value to remove all the vertical lines, and to a value between 0.0 and 1.0\n     * to modulate the amount of vertical lines rendered.\n     */\n    maxSlope?: number;\n    /**\n     * Width of the lines. Currently limited to the [0, 1] range.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    lineColor?: DynamicProperty<StyleColor>;\n    /**\n     * Mix value between the lineColor(0.0) and the geometry's vertex colors(1.0).\n     */\n    lineColorMix?: number;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\n     * fading out.\n     */\n    lineFadeNear?: DynamicProperty<number>;\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\n     * transparent. A value of <= 0.0 disables fading.\n     */\n    lineFadeFar?: DynamicProperty<number>;\n\n    /**\n     * Height above ground in world units of extruded polygon.\n     *\n     * Usually, unique per feature, so defaults to `[\"get\", \"height\"]`.\n     */\n    height?: number;\n\n    /**\n     * Height of \"floor\" of extruded polygon in world units of extruded polygon.\n     *\n     * Usually, unique per feature, so defaults to `[\"number\", [\"get\", \"min_height\"], 0]`.\n     */\n    floorHeight?: number;\n\n    /**\n     * In some data sources, for example Tilezen, building extrusion information might be missing.\n     * This attribute allows to define a default height of an extruded polygon in the theme.\n     *\n     * @deprecated use [[height]]\n     */\n    defaultHeight?: number;\n\n    /**\n     * Default color used if feature doesn't provide color attribute\n     * and [[MapEnv]] did not return it too.\n     * @format color-hex\n     */\n    defaultColor?: DynamicProperty<StyleColor>;\n\n    /**\n     * If `true`, the height of the extruded buildings will not be modified by the mercator\n     * projection distortion that happens around the poles.\n     *\n     * @default `false`\n     */\n    constantHeight?: boolean;\n\n    /**\n     * If `false`, wall geometry will not be added along the tile boundaries.\n     * @default `true`\n     */\n    boundaryWalls?: boolean;\n\n    /**\n     * Animate the extrusion of the buildings if set to `true`.\n     */\n    animateExtrusion?: DynamicProperty<boolean>;\n\n    /**\n     * Duration of the building's extrusion in milliseconds\n     */\n    animateExtrusionDuration?: number;\n\n    /**\n     * Control rendering of depth prepass before the actual geometry.\n     *\n     * Depth prepass is a method to render translucent meshes, hence only the visible front faces of\n     * a mesh are actually rendered, removing artifacts caused by blending with internal faces of\n     * the mesh. This method is used for drawing translucent buildings over map background.\n     *\n     * By default, each [[DataSource]] determines how/if enable the depth pre-pass. A value of\n     * `false` forcefully disables depth prepass.\n     */\n    enableDepthPrePass?: boolean;\n}\n\nexport interface ShaderTechniqueMaterialParameters {\n    [name: string]: any;\n}\n\n/**\n * Special technique for user-defined shaders. See\n * https://threejs.org/docs/#api/harp-materials/ShaderMaterial for details.\n */\nexport interface ShaderTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Parameters for shader. See `THREE.ShaderMaterialParameters`.\n     */\n    params: ShaderTechniqueMaterialParameters;\n\n    /**\n     * Type of primitive for the shader technique. Valid values are \"point\" | \"line\" | \"segments\" |\n     * \"mesh\"\n     */\n    primitive: \"point\" | \"line\" | \"segments\" | \"mesh\";\n}\n\n/**\n * Technique used to render a terrain geometry with a texture.\n * When using this technique, the datasource will produce texture coordinates in\n * local tile space (i.e. [0,0] at south-west and [1,1] at north-east tile corner).\n */\nexport interface TerrainTechniqueParams extends StandardTechniqueParams {\n    /**\n     * Colors to be applied at different heights (as a results of a `displacementMap`).\n     */\n    heightBasedColors?: HeightBasedColors;\n\n    /**\n     * If `heightBasedColors` is defined, this value defines the interpolation method used to\n     * generate the height-based gradient texture (defaults to `Discrete`).\n     */\n    heightGradientInterpolation?: \"Discrete\" | \"Linear\" | \"Cubic\";\n\n    /**\n     * If `heightBasedColors` is defined, this value defines the width (in pixels) of the generated\n     * gradient texture (defaults to `128`).\n     */\n    heightGradientWidth?: number;\n}\n\n/**\n * Render geometry as a text.\n */\nexport interface TextTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Text to be displayed for feature.\n     *\n     * Defaults to first defined:\n     *  - feature property `label` if present in technique (depreacted);\n     *  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true;\n     *  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true;\n     *  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language;\n     *  - `[\"get\", \"name\"]`.\n     *\n     * See [[ExtendedTileInfo.getFeatureText]].\n     */\n    text?: string;\n\n    /**\n     * Field name of object containing the text to be rendered.\n     *\n     * @deprecated, Use `[\"get\", \"FIELD\"]`.\n     */\n    label?: string;\n    /**\n     * If `true`, the abbreviation (field `name:short`) of the elements is used as text.\n     *\n     * @deprecated Use proper expression with [`get`, `name:short`] for this purpose.\n     */\n    useAbbreviation?: boolean;\n    /**\n     * If `true`, the iso code (field 'iso_code') of the elements is used as text.\n     * The `iso_code` field contains the ISO 3166-1 2-letter country code.\n     *\n     * @deprecated Use proper expression with [`get`, `iso_code`] for this purpose.\n     */\n    useIsoCode?: boolean;\n    /**\n     * Priority of text, defaults to `0`. Elements with highest priority get placed first.\n     */\n    priority?: DynamicProperty<number>;\n    /**\n     * Minimal zoom level. If the current zoom level is smaller, the technique will not be used.\n     */\n    minZoomLevel?: number;\n    /**\n     * Maximum zoom level. If the current zoom level is larger, the technique will not be used.\n     */\n    maxZoomLevel?: number;\n    /**\n     * Scaling factor of the text. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale?: number;\n    /**\n     * If `true`, icon is allowed to overlap other labels or icons of lower priority.\n     * @default `false`\n     */\n    mayOverlap?: boolean;\n    /**\n     * If `true`, element will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     * @default `true`\n     */\n    reserveSpace?: boolean;\n    /**\n     * Fading time for labels in seconds.\n     */\n    textFadeTime?: number;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    xOffset?: number;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    yOffset?: number;\n    /**\n     * Name of the text style.\n     */\n    style?: string;\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    fontName?: string;\n    /**\n     * Size of the text (pixels).\n     */\n    size?: DynamicProperty<number>;\n    /**\n     * Size of the text background (pixels).\n     */\n    backgroundSize?: DynamicProperty<number>;\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    /**\n     * Glyph local rotation (radians).\n     */\n    rotation?: number;\n    /**\n     * Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    backgroundColor?: DynamicProperty<StyleColor>;\n    /**\n     * For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Background text opacity value.\n     */\n    backgroundOpacity?: DynamicProperty<number>;\n    /**\n     * Inter-glyph spacing (pixels). Scaled by `size`.\n     */\n    tracking?: DynamicProperty<number>;\n    /**\n     * Inter-line spacing (pixels). Scaled by `size`.\n     */\n    leading?: DynamicProperty<number>;\n    /**\n     * Maximum number of lines for this label.\n     */\n    maxLines?: DynamicProperty<number>;\n    /**\n     * Maximum line width (pixels).\n     */\n    lineWidth?: DynamicProperty<number>;\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    canvasRotation?: DynamicProperty<number>;\n    /**\n     * Line typesetting rotation (radians).\n     */\n    lineRotation?: DynamicProperty<number>;\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    wrappingMode?: DynamicProperty<\"None\" | \"Character\" | \"Word\">;\n    /**\n     * Text position regarding the baseline.\n     */\n    hAlignment?: DynamicProperty<\"Left\" | \"Center\" | \"Right\">;\n    /**\n     * Text position inside a line.\n     */\n    vAlignment?: DynamicProperty<\"Above\" | \"Center\" | \"Below\">;\n}\n\n/**\n * Buffer holding a texture.\n */\nexport interface TextureBuffer {\n    /**\n     * Buffer containing the (compressed) image or the raw texture data.\n     */\n    buffer: ArrayBuffer;\n\n    /**\n     * Mime type of the image or 'image/raw' in case of raw texture data.\n     */\n    type: string;\n\n    /**\n     * Properties for creating a three.js DataTexture\n     * (https://threejs.org/docs/#api/en/textures/DataTexture).\n     */\n    dataTextureProperties?: DataTextureProperties;\n}\n\n/**\n * Type guard to check if an object is an instance of `TextureBuffer`.\n */\nexport function isTextureBuffer(object: any): object is TextureBuffer {\n    return object && object.buffer && typeof object.type === \"string\";\n}\n\n/**\n * Properties of a DataTexture (https://threejs.org/docs/#api/en/textures/DataTexture).\n */\nexport interface DataTextureProperties {\n    width: number;\n    height: number;\n\n    format?: PixelFormat;\n    type?: TextureDataType;\n}\n\n/**\n * Properties of a Texture (https://threejs.org/docs/#api/en/textures/Texture).\n */\nexport interface TextureProperties {\n    /**\n     * Texture horizontal wrapping mode.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.wrapS.\n     */\n    wrapS?: WrappingMode;\n\n    /**\n     * Texture vertical wrapping mode.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.wrapT.\n     */\n    wrapT?: WrappingMode;\n\n    /**\n     * Texture magnification filter.\n     */\n    magFilter?: MagFilter;\n\n    /**\n     * Texture minification filter.\n     */\n    minFilter?: MinFilter;\n\n    /**\n     * Flip texture vertically.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.flipY.\n     */\n    flipY?: boolean;\n\n    /**\n     * Texture horizontal repetition rate.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.repeat.\n     */\n    repeatU?: number;\n\n    /**\n     * Texture vertical repetition rate.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.repeat.\n     */\n    repeatV?: number;\n}\n\n/**\n * Interface containing the definition of different colors to be used at different heights with the\n * [[TerrainTechnique]].\n */\nexport interface HeightBasedColors {\n    heightArray: number[];\n    colorArray: string[];\n}\n\nexport type PixelFormat =\n    | \"Alpha\"\n    | \"RGB\"\n    | \"RGBA\"\n    | \"Luminance\"\n    | \"LuminanceAlpha\"\n    | \"RGBE\"\n    | \"Depth\"\n    | \"DepthStencil\"\n    | \"Red\";\n\nexport type TextureDataType =\n    | \"UnsignedByte\"\n    | \"Byte\"\n    | \"Short\"\n    | \"UnsignedShort\"\n    | \"Int\"\n    | \"UnsignedInt\"\n    | \"Float\"\n    | \"HalfFloat\";\n\n/**\n * Available texture wrapping modes.\n */\nexport type WrappingMode = \"clamp\" | \"repeat\" | \"mirror\";\n\n/**\n * Available texture magnification filters.\n */\nexport type MagFilter = \"nearest\" | \"linear\";\n\n/**\n * Available texture minification filters.\n */\nexport type MinFilter =\n    | \"nearest\"\n    | \"nearestMipMapNearest\"\n    | \"nearestMipMapLinear\"\n    | \"linear\"\n    | \"linearMipMapNearest\"\n    | \"linearMipMapLinear\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Technique } from \"./Techniques\";\n\nexport enum AttrScope {\n    /**\n     * Attributes that affect generation of feature geometry and thus must be resolved at decoding\n     * time.\n     *\n     * They may have huge variancy as they are implemented as vertex attributes or embedded in\n     * generated meshes.\n     *\n     * These attributes are available only in decoding scope.\n     */\n    FeatureGeometry,\n\n    /**\n     * Attributes that are common to whole group of features drawn with this technique.\n     * These attributes affect generated geometry and  thus must be resolved at decoding time.\n     *\n     * They shouldn't have big variancy and evaluate to at least dozens of values as each\n     * combination of these attributes consitute new technique and material.\n     *\n     * These attributes are available in decoding and rendering scope.\n     */\n    TechniqueGeometry,\n\n    /**\n     * Attributes that are common to whole group of features drawn with this technique.\n     * Attributes that can be changed in resulting object/material from frame to frame. They are\n     * usually implemented as uniforms.\n     *\n     * These attributes may be available only at rendering scope.\n     */\n    TechniqueRendering\n}\n\n/**\n * Extract  property names from [[Technique]]-like interface (excluding `name`) as union of string\n * literals.\n *\n * TechniquePropName<Base\n *\n */\nexport type TechniquePropNames<T> = T extends { name: any } ? keyof Omit<T, \"name\"> : keyof T;\n\nexport type TechniquePropScopes<T> = {\n    [P in TechniquePropNames<T>]?: AttrScope;\n};\n\nexport interface TechniqueDescriptor<T> {\n    attrTransparencyColor?: string;\n    attrScopes: TechniquePropScopes<T>;\n}\n\ntype OneThatMatches<T, P> = T extends P ? T : never;\ntype TechniqueByName<K extends Technique[\"name\"]> = OneThatMatches<Technique, { name: K }>;\n\nexport type TechniqueDescriptorRegistry = {\n    [P in Technique[\"name\"]]?: TechniqueDescriptor<TechniqueByName<P>>;\n};\n\nexport function mergeTechniqueDescriptor<T>(\n    ...descriptors: Array<Partial<TechniqueDescriptor<T>>>\n): TechniqueDescriptor<T> {\n    const result: TechniqueDescriptor<T> = {\n        attrScopes: {}\n    };\n    for (const descriptor of descriptors) {\n        if (descriptor.attrTransparencyColor !== undefined) {\n            result.attrTransparencyColor = descriptor.attrTransparencyColor;\n        }\n        if (descriptor.attrScopes !== undefined) {\n            result.attrScopes = { ...result.attrScopes, ...descriptor.attrScopes };\n        }\n    }\n    return result;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    equirectangularProjection,\n    mercatorProjection,\n    normalizedEquirectangularProjection,\n    OrientedBox3,\n    Projection,\n    sphereProjection,\n    Vector3Like,\n    webMercatorProjection\n} from \"@here/harp-geoutils\";\nimport { IndexedTechnique } from \"./Techniques\";\nimport { TileInfo } from \"./TileInfo\";\n\n/**\n * This object has geometry data in the form of geometries buffers ready to be used by WebGL.\n * These geometries are not `three.js` objects. They are pure data stored as `ArrayBuffer`s and\n * metadata describing these buffers.\n */\nexport interface DecodedTile {\n    techniques: IndexedTechnique[];\n    geometries: Geometry[];\n    pathGeometries?: PathGeometry[];\n    textPathGeometries?: TextPathGeometry[];\n    textGeometries?: TextGeometry[]; // ### deprecate\n    poiGeometries?: PoiGeometry[];\n    tileInfo?: TileInfo;\n    decodeTime?: number; // time used to decode (in ms)\n\n    /**\n     * The default bounding box in [[Tile]] is based on the geo box of the tile.\n     * For data-sources that have 3d data this is not sufficient so the data-source can provide a\n     * more accurate bounding box once the data is decoded.\n     */\n    boundingBox?: OrientedBox3;\n\n    /**\n     * Data sources not defining a bounding box may define alternatively a maximum geometry height\n     * in meters. The bounding box of the resulting tile will be extended to encompass this height.\n     */\n    maxGeometryHeight?: number;\n\n    /**\n     * Tile data Copyright holder identifiers.\n     *\n     * `id`s should be unique. It is recommended to build them from unique identifiers like\n     * registered domain names.\n     *\n     * @see [[CopyrightInfo]]\n     */\n    copyrightHolderIds?: string[];\n}\n\n/**\n * This object keeps the path of the geometry. Space of the path depends on the\n * use case, so could be either world or local tile space.\n */\nexport interface PathGeometry {\n    path: Vector3Like[];\n}\n\n/**\n * Attributes corresponding to some decoded geometry. It may be either a map\n * of multiple attributes or just a number with the geometry's feature id.\n */\nexport type AttributeMap = {} | number;\n\n/**\n * This object keeps textual data together with metadata to place it on the map.\n */\nexport interface TextPathGeometry {\n    path: number[];\n    pathLengthSqr: number;\n    text: string;\n    technique: number;\n    objInfos?: AttributeMap;\n}\n\n/**\n * Returns an array with the data type specified as parameter.\n *\n * @param attr specifies which type of data is being stored in the array\n */\nexport function getArrayConstructor(attr: BufferElementType) {\n    switch (attr) {\n        case \"float\":\n            return Float32Array;\n        case \"uint8\":\n            return Uint8Array;\n        case \"uint16\":\n            return Uint16Array;\n        case \"uint32\":\n            return Uint32Array;\n        case \"int8\":\n            return Int8Array;\n        case \"int16\":\n            return Int16Array;\n        case \"int32\":\n            return Int32Array;\n    }\n}\n\n/**\n * Structured clone compliant WebGL interleaved buffer with its metadata attached.\n */\nexport interface InterleavedBufferAttribute {\n    buffer: ArrayBufferLike;\n    stride: number;\n    type: BufferElementType;\n    attributes: Array<{\n        name: string;\n        itemSize: number;\n        offset: number;\n    }>;\n}\n\n/**\n * Geometry types supported by [[Geometry]] objects.\n */\nexport enum GeometryType {\n    Unspecified = 0,\n    Point,\n    Line,\n    SolidLine,\n    Text,\n    TextPath,\n    ExtrudedLine,\n    Polygon,\n    ExtrudedPolygon,\n    Object3D,\n    Other = 1000\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object, consisting of buffers with\n * metadata for map features and objects for example roads, trees or parks.\n */\nexport interface Geometry {\n    type: GeometryType;\n    vertexAttributes?: BufferAttribute[];\n    interleavedVertexAttributes?: InterleavedBufferAttribute[];\n    index?: BufferAttribute;\n    edgeIndex?: BufferAttribute;\n    groups: Group[];\n    uuid?: string;\n\n    /**\n     * Optional list of feature start indices. The indices point into the index attribute.\n     */\n    featureStarts?: number[];\n\n    /**\n     * Optional array of objects. It can be used to pass user data from the geometry to the mesh.\n     */\n    objInfos?: AttributeMap[];\n\n    /**\n     * Optional [[Array]] of [[Attachment]]s.\n     */\n    attachments?: Attachment[];\n}\n\n/**\n * Attachments together with [[Geometry]] define the meshes and the objects\n * of a [[Scene]].\n */\nexport interface Attachment {\n    /**\n     * The unique uuid of this [[Attachment]].\n     */\n    uuid?: string;\n\n    /**\n     * The name of this [[Attachment]].\n     */\n    name?: string;\n\n    /**\n     * The index [[BufferAttribute]]. If not provided the index\n     * buffer of the [[Geometry]] will be used.\n     */\n    index?: BufferAttribute;\n\n    /**\n     * Optional additional buffer index used to create an edge object.\n     */\n    edgeIndex?: BufferAttribute;\n\n    /**\n     * The draw [[Group]]]s of this [[Attachment]].\n     */\n    groups: Group[];\n}\n\n/**\n * The data stored in Buffers' elements can be of the following elementary types: float, signed or\n * unsigned integers (8-bit, 16-bit or 32-bit long).\n */\nexport type BufferElementType =\n    | \"float\"\n    | \"uint8\"\n    | \"uint16\"\n    | \"uint32\"\n    | \"int8\"\n    | \"int16\"\n    | \"int32\";\n\n/**\n * Structured clone compliant WebGL buffer and its metadata.\n */\nexport interface BufferAttribute {\n    name: string;\n    buffer: ArrayBufferLike;\n    type: BufferElementType;\n    itemCount: number;\n    normalized?: boolean;\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object with text to be rendered.\n * It is composed of buffers with metadata for text objects.\n */\nexport interface TextGeometry {\n    positions: BufferAttribute;\n    texts: number[];\n    technique?: number;\n    stringCatalog?: Array<string | undefined>;\n    objInfos?: AttributeMap[];\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object with points of interest (POIs)\n * to be rendered. It is composed of buffers with metadata for POI objects.\n */\nexport interface PoiGeometry {\n    positions: BufferAttribute;\n    texts: number[];\n    /**\n     * Names of the image texture or the name of the POI as indices into the array `stringCatalog`.\n     */\n    imageTextures?: number[];\n    technique?: number;\n    stringCatalog?: Array<string | undefined>;\n    objInfos?: AttributeMap[];\n}\n\n/**\n * Structured clone compliant WebGL group object and its metadata.\n * Its purpose is to make working with groups of objects easier.\n */\nexport interface Group {\n    start: number;\n    count: number;\n    technique: number;\n\n    /**\n     * Contains tile offsets if its [[Geometry]] has been created.\n     */\n    createdOffsets?: number[];\n}\n\n/**\n * Returns the projection object specified in the parameter.\n *\n * @param projectionName string describing projection to be used\n */\nexport function getProjection(projectionName: string): Projection | never {\n    switch (projectionName) {\n        case \"mercator\":\n            return mercatorProjection;\n        case \"webMercator\":\n            return webMercatorProjection;\n        case \"sphere\":\n            return sphereProjection;\n        case \"normalizedEquirectangular\":\n            return normalizedEquirectangularProjection;\n        case \"equirectangular\":\n            return equirectangularProjection;\n        default:\n            throw new Error(`Unknown projection ${projectionName}`);\n    } // switch\n}\n\n/**\n * String with the projection's name.\n *\n * @param projection `Projection` object containing the name of the projection to retrieve\n */\nexport function getProjectionName(projection: Projection): string | never {\n    if (projection === mercatorProjection) {\n        return \"mercator\";\n    } else if (projection === webMercatorProjection) {\n        return \"webMercator\";\n    } else if (projection === sphereProjection) {\n        return \"sphere\";\n    } else if (projection === normalizedEquirectangularProjection) {\n        return \"normalizedEquirectangular\";\n    } else if (projection === equirectangularProjection) {\n        return \"equirectangular\";\n    }\n    throw new Error(\"Unknown projection\");\n}\n\n/**\n * @returns Feature id from the provided attribute map.\n */\nexport function getFeatureId(attributeMap: AttributeMap | undefined): number {\n    if (attributeMap === undefined) {\n        return 0;\n    }\n\n    if (typeof attributeMap === \"number\") {\n        return attributeMap;\n    }\n\n    if (attributeMap.hasOwnProperty(\"$id\")) {\n        return (attributeMap as any).$id as number;\n    }\n\n    return 0;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    Env,\n    Expr,\n    ExprScope,\n    ExprVisitor,\n    HasAttributeExpr,\n    isJsonExpr,\n    JsonExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    Value,\n    VarExpr\n} from \"./Expr\";\nimport { ExprPool } from \"./ExprPool\";\nimport {} from \"./InterpolatedProperty\";\nimport {\n    interpolatedPropertyDefinitionToJsonExpr,\n    isInterpolatedPropertyDefinition\n} from \"./InterpolatedPropertyDefs\";\nimport { AttrScope, mergeTechniqueDescriptor } from \"./TechniqueDescriptor\";\nimport { IndexedTechnique, Technique, techniqueDescriptors } from \"./Techniques\";\nimport {\n    Definitions,\n    isActualSelectorDefinition,\n    isJsonExprReference,\n    LineStyle,\n    Style,\n    StyleDeclaration,\n    StyleSelector,\n    StyleSet\n} from \"./Theme\";\n\nconst logger = LoggerManager.instance.create(\"StyleSetEvaluator\");\n\nconst emptyTechniqueDescriptor = mergeTechniqueDescriptor<Technique>({});\n\ninterface StyleInternalParams {\n    /**\n     * Optimization: Lazy creation and storage of expression in a style object.\n     */\n    _whenExpr?: Expr;\n    _minZoomLevelExpr?: Expr;\n    _maxZoomLevelExpr?: Expr;\n\n    _staticAttributes?: Array<[string, Value]>;\n\n    /**\n     * These attributes are used to instantiate Technique variants.\n     *\n     * @see [[TechiqueDescriptor.techniquePropNames]]\n     */\n    _dynamicTechniqueAttributes?: Array<[string, Expr]>;\n\n    /**\n     * These attributes must be evaluated basing with feature env.\n     *\n     * They are not propagated to rendering scope.\n     *\n     * @see [[TechniqueAttrScope.Feature]]\n     */\n    _dynamicFeatureAttributes?: Array<[string, Expr]>;\n\n    /**\n     * These attributes are forwarded as serialized by decoder to main thread, so they are resolved\n     * directly in render loop.\n     *\n     * Will contain attributes from these lists\n     *  - interpolants from [[TechiqueDescriptor.techniquePropNames]]\n     *  - expressions [[TechniqueDescriptor.dynamicPropNames]] (Future)\n     */\n    _dynamicForwardedAttributes?: Array<[string, Expr]>;\n    _dynamicTechniques?: Map<string, IndexedTechnique>;\n\n    /**\n     * Optimization: Index into table in StyleSetEvaluator.\n     * @hidden\n     */\n    _staticTechnique?: IndexedTechnique;\n\n    /**\n     * Optimization: StyleSet index.\n     * @hidden\n     */\n    _styleSetIndex?: number;\n\n    /**\n     * Optimization: Requested $geometryType.\n     * @hidden\n     */\n    _geometryType?: string;\n\n    /**\n     * `true` if any of the properties of this technique\n     * requires access to the feature's state.\n     */\n    _usesFeatureState?: boolean;\n}\n\ntype InternalStyle = Style & StyleSelector & StyleInternalParams;\n\n/**\n * [[StyleConditionClassifier]] searches for usages of `$layer` in `when` conditions\n * associated with styling rules.\n *\n * @hidden\n */\nclass StyleConditionClassifier implements ExprVisitor<Expr | undefined, Expr | undefined> {\n    private _style!: InternalStyle;\n\n    classify(style: InternalStyle) {\n        if (style._whenExpr) {\n            const savedStyle = this.switchStyle(style);\n            style._whenExpr = style._whenExpr.accept(this, undefined);\n            this._style = savedStyle;\n        }\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitMatchExpr(expr: MatchExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitCaseExpr(expr: CaseExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitCallExpr(call: CallExpr, enclosingExpr: Expr | undefined): Expr | undefined {\n        if (call.op === \"all\") {\n            // processing of an `[\"all\", e1, e2, ... eN]` expression. In this case\n            // search for expressions matching comparison of `$layer` and string literals\n            // in the sub expressions.\n            const children = call.args\n                .map(childExpr => childExpr.accept(this, call))\n                .filter(childExpr => childExpr !== undefined) as Expr[];\n\n            return new CallExpr(call.op, children);\n        } else if (enclosingExpr) {\n            // `call` is a direct child expression of an `\"all\"` operator.\n            const matched = this.matchVarStringComparison(call);\n\n            if (matched) {\n                if (this._style.layer === undefined && matched.name === \"$layer\") {\n                    // found a subexpression `[\"==\", [\"get\", \"$layer\"], \"some layer name\"]`\n                    // enclosed in an `[\"all\", e1...eN]` expression. Remove it from\n                    // its parent expression and store the value of the expected $layer in\n                    // [[StyleInternalParams]].\n\n                    this._style.layer = matched.value;\n\n                    // return `undefined` to remove this sub expression from its parent.\n                    return undefined;\n                } else if (\n                    this._style._geometryType === undefined &&\n                    matched.name === \"$geometryType\"\n                ) {\n                    // found a subexpression `[\"==\", [\"get\", \"$geometryType\"], \"geometry\"]`\n                    // enclosed in an `[\"all\", e1...eN]` expression. Remove it from\n                    // its parent expression and store the value of the expected $geometryType in\n                    // [[StyleInternalParams]].\n\n                    this._style._geometryType = matched.value;\n\n                    // return `undefined` to remove this sub expression from its parent.\n                    return undefined;\n                }\n            }\n        }\n\n        return call;\n    }\n\n    /**\n     * Tests if the given `call` matches the structure [\"==\", [\"get\", name], value].\n     * If a match is found returns an object containing the `name` and the `value`;\n     *\n     * @param call The expression to match.\n     */\n    private matchVarStringComparison(call: CallExpr) {\n        if (call.op === \"==\") {\n            const left = call.args[0];\n            const right = call.args[1];\n\n            if (left instanceof VarExpr && right instanceof StringLiteralExpr) {\n                return { name: left.name, value: right.value };\n            }\n\n            if (right instanceof VarExpr && left instanceof StringLiteralExpr) {\n                return { name: right.name, value: left.value };\n            }\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sets the given `style` as current.\n     *\n     * @returns The previous `style`.\n     */\n    private switchStyle(style: InternalStyle) {\n        const saved = this._style;\n        this._style = style;\n        return saved;\n    }\n}\n\nclass OptimizedSubSetKey {\n    key: string;\n    layer: string | undefined;\n    geometryType: string | undefined;\n\n    cachedStyleSet?: InternalStyle[];\n\n    constructor(layer?: string | undefined, geometryType?: string | undefined) {\n        this.key = \"\";\n        this.set(layer, geometryType);\n    }\n\n    set(\n        layer: string | undefined,\n        geometryType: string | undefined,\n        env?: Env\n    ): OptimizedSubSetKey {\n        let keyUpdateNeeded: boolean = false;\n        if (layer === undefined) {\n            const envLayer = env !== undefined ? env.lookup(\"$layer\") : undefined;\n            layer = typeof envLayer === \"string\" ? envLayer : undefined;\n        }\n        if (this.layer !== layer) {\n            this.layer = layer;\n            keyUpdateNeeded = true;\n        }\n\n        if (geometryType === undefined) {\n            const envGeometryType = env !== undefined ? env.lookup(\"$geometryType\") : undefined;\n            geometryType = typeof envGeometryType === \"string\" ? envGeometryType : undefined;\n        }\n        if (this.geometryType !== geometryType) {\n            this.geometryType = geometryType;\n            keyUpdateNeeded = true;\n        }\n\n        if (keyUpdateNeeded) {\n            this.updateKey();\n        }\n        return this;\n    }\n\n    private updateKey() {\n        if (this.layer !== undefined) {\n            // tslint:disable-next-line:prefer-conditional-expression\n            if (this.geometryType !== undefined) {\n                this.key = `${this.layer}:${this.geometryType}`;\n            } else {\n                this.key = `${this.layer}:`;\n            }\n        } else {\n            if (this.geometryType !== undefined) {\n                this.key = `:${this.geometryType}`;\n            } else {\n                this.key = \"all\";\n            }\n        }\n        this.cachedStyleSet = undefined;\n    }\n}\n\n/**\n * Combine data from datasource and apply the rules from a specified theme to show it on the map.\n */\nexport class StyleSetEvaluator {\n    readonly styleSet: InternalStyle[];\n\n    private readonly m_techniques: IndexedTechnique[] = [];\n    private readonly m_exprPool = new ExprPool();\n    private readonly m_cachedResults = new Map<Expr, Value>();\n    private readonly m_styleConditionClassifier = new StyleConditionClassifier();\n    private readonly m_subStyleSetCache = new Map<string, InternalStyle[]>();\n    private readonly m_definitions?: Definitions;\n    private readonly m_definitionExprCache = new Map<string, Expr>();\n    private readonly m_tmpOptimizedSubSetKey: OptimizedSubSetKey = new OptimizedSubSetKey();\n    private readonly m_emptyEnv = new Env();\n    private m_featureDependencies: string[] = [];\n    private m_layer: string | undefined;\n    private m_geometryType: string | undefined;\n    private m_zoomLevel: number | undefined;\n    private m_previousResult: IndexedTechnique[] | undefined;\n    private m_previousEnv: Env | undefined;\n\n    constructor(styleSet: StyleSet, definitions?: Definitions) {\n        this.m_definitions = definitions;\n        this.styleSet = resolveReferences(styleSet, definitions);\n        computeDefaultRenderOrder(this.styleSet);\n        this.compileStyleSet();\n    }\n\n    /**\n     * Find all techniques that fit the current objects' environment.\n     * *The techniques in the resulting array may not be modified* since they are being reused for\n     * identical objects.\n     *\n     * @param env The objects environment, i.e. the attributes that are relevant for its\n     * representation.\n     * @param layer The optional layer name used to filter techniques.\n     * @param geometryType The optional geometryType used to filter techniques.\n     */\n    getMatchingTechniques(\n        env: Env,\n        layer?: string | undefined,\n        geometryType?: string | undefined\n    ): IndexedTechnique[] {\n        if (\n            this.m_previousResult &&\n            this.m_previousEnv &&\n            this.m_featureDependencies.every(p => this.m_previousEnv?.lookup(p) === env.lookup(p))\n        ) {\n            return this.m_previousResult;\n        }\n\n        const result: IndexedTechnique[] = [];\n        this.m_cachedResults.clear();\n\n        const optimizedSubSetKey = this.m_tmpOptimizedSubSetKey;\n        optimizedSubSetKey.set(layer, geometryType, env);\n\n        // get the requested $layer and $geometryType, if any.\n        this.m_layer = optimizedSubSetKey.layer;\n        this.m_geometryType = optimizedSubSetKey.geometryType;\n        this.m_zoomLevel = env.lookup(\"$zoom\") as number | undefined;\n\n        const searchedStyleSet = this.getOptimizedStyleSet(optimizedSubSetKey);\n\n        for (const currStyle of searchedStyleSet) {\n            if (this.processStyle(env, currStyle, result)) {\n                break;\n            }\n        }\n\n        this.m_previousResult = result;\n        this.m_previousEnv = env;\n\n        return result;\n    }\n\n    /**\n     * Check if `styleSet` contains any rule related to `layer`.\n     *\n     * @param layer name of layer\n     */\n    wantsLayer(layer: string): boolean {\n        return (\n            this.getOptimizedStyleSet(this.m_tmpOptimizedSubSetKey.set(layer, undefined)).length > 0\n        );\n    }\n\n    /**\n     * Check if `styleSet` contains any rule related to particular `[layer, geometryType]` pair.\n     *\n     * @param layer name of layer\n     * @param geometryType type of layer - `point`, `line` or `polygon`\n     */\n    wantsFeature(layer: string, geometryType?: string): boolean {\n        return (\n            this.getOptimizedStyleSet(this.m_tmpOptimizedSubSetKey.set(layer, geometryType))\n                .length > 0\n        );\n    }\n\n    /**\n     * Get the expression evaluation cache, for further feature processing.\n     *\n     * This object is valid until next `getMatchingTechniques` call.\n     */\n    get expressionEvaluatorCache() {\n        return this.m_cachedResults;\n    }\n\n    /**\n     * Reset array of techniques.\n     *\n     * Cleans technique array and indices, so it doesn't accumulate accross several decoding runs.\n     */\n    resetTechniques() {\n        for (const techinque of this.m_techniques) {\n            techinque._index = undefined!;\n        }\n        this.m_techniques.length = 0;\n        this.m_previousResult = undefined;\n        this.m_previousEnv = undefined;\n    }\n\n    /**\n     * Get the (current) array of techniques that have been created during decoding.\n     */\n    get techniques(): IndexedTechnique[] {\n        return this.m_techniques;\n    }\n\n    /**\n     * Get the (current) array of techniques that have been created during decoding.\n     */\n    get decodedTechniques(): IndexedTechnique[] {\n        return this.m_techniques.map(makeDecodedTechnique);\n    }\n\n    private getOptimizedStyleSet(subSetKey: OptimizedSubSetKey): InternalStyle[] {\n        if (subSetKey.cachedStyleSet !== undefined) {\n            return subSetKey.cachedStyleSet;\n        }\n        let optimizedStyleSet = this.m_subStyleSetCache.get(subSetKey.key);\n        if (optimizedStyleSet !== undefined) {\n            subSetKey.cachedStyleSet = optimizedStyleSet;\n            return optimizedStyleSet;\n        }\n        optimizedStyleSet = this.createPreFilteredStyleSet(subSetKey);\n        this.m_subStyleSetCache.set(subSetKey.key, optimizedStyleSet);\n        subSetKey.cachedStyleSet = optimizedStyleSet;\n        return optimizedStyleSet;\n    }\n\n    private createPreFilteredStyleSet(subSetKey: OptimizedSubSetKey) {\n        const { layer, geometryType } = subSetKey;\n\n        return this.styleSet.filter(style => {\n            if (layer !== undefined && style.layer !== undefined && style.layer !== layer) {\n                return false;\n            }\n            if (\n                geometryType !== undefined &&\n                style._geometryType !== undefined &&\n                style._geometryType !== geometryType\n            ) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    /**\n     * Compile the `when` conditions found when traversting the styling rules.\n     */\n    private compileStyleSet() {\n        this.m_featureDependencies = [\"$layer\", \"$geometryType\", \"$zoom\"];\n\n        this.styleSet.forEach(style => this.compileStyle(style));\n\n        // Create optimized styleSets for each `layer` & `geometryType` tuple.\n        this.styleSet.forEach(style => {\n            this.getOptimizedStyleSet(\n                this.m_tmpOptimizedSubSetKey.set(style.layer, style._geometryType)\n            );\n        });\n    }\n\n    /**\n     * Compile the `when` conditions reachable from the given `style`.\n     *\n     * @param style The current style.\n     */\n    private compileStyle(style: InternalStyle) {\n        this.checkStyleDynamicAttributes(style);\n\n        if (style.when !== undefined) {\n            try {\n                style._whenExpr = Array.isArray(style.when)\n                    ? Expr.fromJSON(style.when, this.m_definitions, this.m_definitionExprCache)\n                    : // tslint:disable-next-line: deprecation\n                      Expr.parse(style.when);\n\n                // search for usages of '$layer' and any other\n                // special symbol that can be used to speed up the evaluation\n                // of the `when` conditions associated to this `style`.\n                this.m_styleConditionClassifier.classify(style);\n\n                if (style._whenExpr !== undefined) {\n                    style._whenExpr = style._whenExpr.intern(this.m_exprPool);\n                }\n\n                const deps = style._whenExpr.dependencies();\n\n                deps?.properties.forEach(prop => {\n                    if (!this.m_featureDependencies.includes(prop)) {\n                        this.m_featureDependencies.push(prop);\n                    }\n                });\n\n                if (isJsonExpr(style.minZoomLevel)) {\n                    style._minZoomLevelExpr = Expr.fromJSON(style.minZoomLevel).intern(\n                        this.m_exprPool\n                    );\n                }\n\n                if (isJsonExpr(style.maxZoomLevel)) {\n                    style._maxZoomLevelExpr = Expr.fromJSON(style.maxZoomLevel).intern(\n                        this.m_exprPool\n                    );\n                }\n            } catch (err) {\n                logger.log(\n                    \"failed to evaluate expression\",\n                    JSON.stringify(style.when),\n                    \"error\",\n                    String(err)\n                );\n            }\n        }\n    }\n\n    /**\n     * Process a style (and its sub-styles) hierarchically to look for the technique that fits the\n     * current objects' environment. The attributes of the styles are assembled to create a unique\n     * technique for every object.\n     *\n     * @param env The objects environment, i.e. the attributes that are relevant for its\n     *            representation.\n     * @param style Current style (could also be top of stack).\n     * @param result The array of resulting techniques. There may be more than one technique per\n     *               object, resulting in multiple graphical objects for representation.\n     * @returns `true` if style has been found and processing is finished. `false` if not found, or\n     *          more than one technique should be applied.\n     */\n    private processStyle(env: Env, style: InternalStyle, result: Technique[]): boolean {\n        if (!this.checkZoomLevel(env, style)) {\n            return false;\n        }\n\n        if (\n            this.m_layer !== undefined &&\n            style.layer !== undefined &&\n            style.layer !== this.m_layer\n        ) {\n            return false;\n        }\n        if (\n            this.m_geometryType !== undefined &&\n            style._geometryType !== undefined &&\n            style._geometryType !== this.m_geometryType\n        ) {\n            return false;\n        }\n\n        if (style._whenExpr) {\n            try {\n                if (!style._whenExpr.evaluate(env, ExprScope.Condition, this.m_cachedResults)) {\n                    // Stop processing this styling rule. The `when` condition\n                    // associated with the current `style` evaluates to false so\n                    // no techinque defined by this style should be applied.\n                    return false;\n                }\n            } catch (error) {\n                logger.error(\n                    `failed to evaluate expression '${JSON.stringify(style.when)}': ${error}`\n                );\n                return false;\n            }\n        }\n\n        if (style.technique === undefined) {\n            return false;\n        }\n        // we found a technique!\n        if (style.technique !== \"none\") {\n            result.push(this.getTechniqueForStyleMatch(env, style));\n        }\n        // stop processing if \"final\" is set\n        return style.final === true;\n    }\n\n    private checkZoomLevel(env: Env, style: InternalStyle) {\n        if (style.minZoomLevel === undefined && style.maxZoomLevel === undefined) {\n            return true;\n        }\n\n        const zoomLevel = this.m_zoomLevel;\n        if (zoomLevel === undefined) {\n            return true;\n        }\n\n        if (style.minZoomLevel !== undefined) {\n            let minZoomLevel: Value = style.minZoomLevel;\n\n            if (style._minZoomLevelExpr) {\n                // the constraint is defined as expression, evaluate it and\n                // use its value\n                try {\n                    minZoomLevel = style._minZoomLevelExpr.evaluate(\n                        env,\n                        ExprScope.Condition,\n                        this.m_cachedResults\n                    );\n                } catch (error) {\n                    logger.error(\n                        `failed to evaluate expression '${JSON.stringify(\n                            style._minZoomLevelExpr\n                        )}': ${error}`\n                    );\n                }\n            }\n\n            if (typeof minZoomLevel === \"number\" && zoomLevel < minZoomLevel) {\n                return false;\n            }\n        }\n\n        if (style.maxZoomLevel !== undefined) {\n            let maxZoomLevel: Value = style.maxZoomLevel;\n\n            if (style._maxZoomLevelExpr) {\n                try {\n                    maxZoomLevel = style._maxZoomLevelExpr.evaluate(\n                        env,\n                        ExprScope.Condition,\n                        this.m_cachedResults\n                    );\n                } catch (error) {\n                    logger.error(\n                        `failed to evaluate expression '${JSON.stringify(\n                            style._maxZoomLevelExpr\n                        )}': ${error}`\n                    );\n                }\n            }\n\n            if (typeof maxZoomLevel === \"number\" && zoomLevel > maxZoomLevel) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private getTechniqueForStyleMatch(env: Env, style: InternalStyle) {\n        let technique: IndexedTechnique | undefined;\n        if (style._dynamicTechniques !== undefined) {\n            const dynamicAttributes = this.evaluateTechniqueProperties(style, env);\n            const key = this.getDynamicTechniqueKey(style, dynamicAttributes);\n            technique = style._dynamicTechniques!.get(key);\n            if (technique === undefined) {\n                technique = this.createTechnique(style, key, dynamicAttributes);\n                style._dynamicTechniques!.set(key, technique);\n            }\n        } else {\n            technique = style._staticTechnique;\n            if (technique === undefined) {\n                style._staticTechnique = technique = this.createTechnique(\n                    style,\n                    `${style._styleSetIndex}`,\n                    []\n                ) as IndexedTechnique;\n            }\n        }\n\n        if (technique._index === undefined) {\n            technique._index = this.m_techniques.length;\n            this.m_techniques.push(technique);\n        }\n        return technique;\n    }\n\n    private getDynamicTechniqueKey(\n        style: InternalStyle,\n        dynamicAttributes: Array<[string, Value]>\n    ) {\n        const dynamicAttrKey = dynamicAttributes\n            .map(([_attrName, attrValue]) => {\n                if (attrValue === undefined) {\n                    return \"U\";\n                } else {\n                    return JSON.stringify(attrValue);\n                }\n            })\n            .join(\":\");\n        return `${style._styleSetIndex!}:${dynamicAttrKey}`;\n    }\n\n    private checkStyleDynamicAttributes(style: InternalStyle) {\n        if (style._dynamicTechniqueAttributes !== undefined || style.technique === \"none\") {\n            return;\n        }\n\n        style._dynamicTechniqueAttributes = [];\n        style._dynamicFeatureAttributes = [];\n        style._dynamicForwardedAttributes = [];\n        style._staticAttributes = [];\n\n        const dynamicFeatureAttributes = style._dynamicFeatureAttributes;\n        const dynamicTechniqueAttributes = style._dynamicTechniqueAttributes;\n        const dynamicForwardedAttributes = style._dynamicForwardedAttributes;\n        const targetStaticAttributes = style._staticAttributes;\n\n        const techniqueDescriptor =\n            techniqueDescriptors[style.technique] || emptyTechniqueDescriptor;\n\n        const processAttribute = (attrName: string, attrValue: Value | JsonExpr | undefined) => {\n            if (attrValue === undefined) {\n                return;\n            }\n\n            if (isJsonExpr(attrValue)) {\n                attrValue = Expr.fromJSON(\n                    attrValue,\n                    this.m_definitions,\n                    this.m_definitionExprCache\n                ).intern(this.m_exprPool);\n            } else if (isInterpolatedPropertyDefinition(attrValue)) {\n                // found a property using an object-like interpolation definition.\n                attrValue = Expr.fromJSON(\n                    interpolatedPropertyDefinitionToJsonExpr(attrValue)\n                ).intern(this.m_exprPool);\n            }\n\n            if (Expr.isExpr(attrValue)) {\n                const deps = attrValue.dependencies();\n\n                if (deps.featureState) {\n                    if (attrName !== \"enabled\") {\n                        logger.log(\"feature-state is not supported in this context\");\n                    } else {\n                        style._usesFeatureState = true;\n                    }\n                }\n\n                if (deps.properties.size === 0 && !attrValue.isDynamic()) {\n                    // no data-dependencies detected.\n                    attrValue = attrValue.evaluate(this.m_emptyEnv);\n                }\n            }\n\n            if (Expr.isExpr(attrValue)) {\n                let attrScope: AttrScope | undefined = (techniqueDescriptor.attrScopes as any)[\n                    attrName as any\n                ];\n\n                if (attrScope === undefined) {\n                    // Use [[AttrScope.TechniqueGeometry]] as default scope for the attribute.\n                    attrScope = AttrScope.TechniqueGeometry;\n                }\n\n                const deps = attrValue.dependencies();\n\n                deps.properties.forEach(prop => {\n                    if (!this.m_featureDependencies.includes(prop)) {\n                        this.m_featureDependencies.push(prop);\n                    }\n                });\n\n                switch (attrScope) {\n                    case AttrScope.FeatureGeometry:\n                        dynamicFeatureAttributes.push([attrName, attrValue]);\n                        break;\n                    case AttrScope.TechniqueGeometry:\n                        dynamicTechniqueAttributes.push([attrName, attrValue]);\n                        break;\n                    case AttrScope.TechniqueRendering:\n                        if (deps.properties.size === 0) {\n                            dynamicForwardedAttributes.push([attrName, attrValue]);\n                        } else {\n                            dynamicTechniqueAttributes.push([attrName, attrValue]);\n                        }\n                        break;\n                }\n            } else if (attrValue !== undefined && attrValue !== null) {\n                targetStaticAttributes.push([attrName, attrValue]);\n            }\n        };\n\n        processAttribute(\"_category\", style.category);\n        processAttribute(\"_secondaryCategory\", (style as LineStyle).secondaryCategory);\n\n        processAttribute(\"renderOrder\", style.renderOrder);\n\n        // TODO: What the heck is that !?\n        processAttribute(\"label\", style.labelProperty);\n\n        // line & solid-line secondaryRenderOrder should be generic attr\n        // TODO: maybe just warn and force move it to `attr` ?\n        processAttribute(\"secondaryRenderOrder\", (style as LineStyle).secondaryRenderOrder);\n\n        if (style.attr !== undefined) {\n            for (const attrName in style.attr) {\n                if (!style.attr.hasOwnProperty(attrName)) {\n                    continue;\n                }\n                processAttribute(attrName, (style.attr as any)[attrName]);\n            }\n        }\n\n        if (dynamicTechniqueAttributes.length > 0) {\n            style._dynamicTechniques = new Map();\n        }\n    }\n\n    private evaluateTechniqueProperties(style: InternalStyle, env: Env): Array<[string, Value]> {\n        if (style._dynamicTechniqueAttributes === undefined) {\n            return [];\n        }\n\n        const instantiationContext = { env };\n\n        return style._dynamicTechniqueAttributes.map(([attrName, attrExpr]) => {\n            try {\n                if (attrExpr.isDynamic()) {\n                    const reducedExpr = attrExpr.instantiate(instantiationContext);\n                    return [attrName, reducedExpr];\n                }\n\n                const evaluatedValue = attrExpr.evaluate(\n                    env,\n                    ExprScope.Value,\n                    this.m_cachedResults\n                );\n                return [attrName, evaluatedValue];\n            } catch (error) {\n                logger.error(`failed to evaluate expression '${attrExpr.toJSON()}': ${error}`);\n                return [attrName, null];\n            }\n        });\n    }\n\n    private createTechnique(\n        style: InternalStyle,\n        key: string,\n        dynamicAttrs: Array<[string, Value]>\n    ) {\n        const technique: any = {};\n        technique.name = style.technique;\n        if (style._staticAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._staticAttributes) {\n                if (attrValue !== null) {\n                    technique[attrName] = attrValue;\n                }\n            }\n        }\n        for (const [attrName, attrValue] of dynamicAttrs) {\n            if (attrValue !== null) {\n                technique[attrName] = attrValue;\n            }\n        }\n\n        if (style._dynamicFeatureAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._dynamicFeatureAttributes) {\n                technique[attrName] = attrValue;\n            }\n        }\n\n        if (style._dynamicForwardedAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._dynamicForwardedAttributes) {\n                // tslint:disable-next-line: prefer-conditional-expression\n                if (Expr.isExpr(attrValue)) {\n                    technique[attrName] = attrValue.toJSON();\n                } else {\n                    technique[attrName] = attrValue;\n                }\n            }\n        }\n\n        technique._index = this.m_techniques.length;\n        technique._styleSetIndex = style._styleSetIndex!;\n        if (style.styleSet !== undefined) {\n            technique._styleSet = style.styleSet;\n        }\n        if (style._usesFeatureState !== undefined) {\n            technique._usesFeatureState = style._usesFeatureState;\n        }\n        this.m_techniques.push(technique as IndexedTechnique);\n        return technique as IndexedTechnique;\n    }\n}\n\nfunction computeDefaultRenderOrder(styleSet: InternalStyle[]) {\n    let techniqueRenderOrder = 0;\n    let styleSetIndex = 0;\n    for (const style of styleSet) {\n        style._styleSetIndex = styleSetIndex++;\n        if (style.technique !== undefined && style.renderOrder === undefined) {\n            style.renderOrder = techniqueRenderOrder++;\n        }\n    }\n}\n\nfunction resolveReferences(styleSet: StyleDeclaration[], definitions: Definitions | undefined) {\n    return styleSet.map(style => resolveStyleReferences(style, definitions));\n}\n\nfunction resolveStyleReferences(\n    style: StyleDeclaration,\n    definitions: Definitions | undefined\n): InternalStyle {\n    if (isJsonExpr(style)) {\n        if (!isJsonExprReference(style)) {\n            throw new Error(\"invalid expression in this context, only 'ref's are supported\");\n        }\n        // expand and instantiate references to style definitions.\n        const definitionName = style[1];\n        const def = definitions && definitions[definitionName];\n        if (!def) {\n            throw new Error(`invalid reference '${definitionName}' - not found`);\n        }\n        if (!isActualSelectorDefinition(def)) {\n            throw new Error(`invalid reference '${definitionName}' - expected style definition`);\n        }\n        // instantiate the style\n        return resolveStyleReferences(def, definitions);\n    }\n\n    return { ...style };\n}\n\n/**\n * Create transferable representation of dynamic technique.\n *\n * Converts  non-transferable [[Expr]]instances back to JSON form.\n */\nexport function makeDecodedTechnique(technique: IndexedTechnique): IndexedTechnique {\n    const result: Partial<IndexedTechnique> = {};\n    for (const attrName in technique) {\n        if (!technique.hasOwnProperty(attrName)) {\n            continue;\n        }\n        let attrValue: any = (technique as any)[attrName];\n        if (Expr.isExpr(attrValue)) {\n            attrValue = attrValue.toJSON();\n        }\n        (result as any)[attrName] = attrValue;\n    }\n    return (result as any) as IndexedTechnique;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { TileKey, TilingScheme, webMercatorTilingScheme } from \"@here/harp-geoutils\";\nimport { DataSource } from \"./DataSource\";\nimport { TileGeometryCreator } from \"./geometry/TileGeometryCreator\";\nimport { Tile } from \"./Tile\";\n\n/**\n * Provides background geometry for all tiles.\n */\nexport class BackgroundDataSource extends DataSource {\n    private static readonly DEFAULT_TILING_SCHEME = webMercatorTilingScheme;\n    private m_tilingScheme: TilingScheme = BackgroundDataSource.DEFAULT_TILING_SCHEME;\n\n    constructor() {\n        super({ name: \"background\" });\n        this.cacheable = true;\n        this.addGroundPlane = true;\n    }\n\n    updateStorageLevelOffset() {\n        let storageLevelOffset: number | undefined;\n\n        this.mapView.dataSources.forEach(ds => {\n            if (ds === this) {\n                return;\n            }\n            const tilingScheme = ds.getTilingScheme();\n            if (tilingScheme === this.m_tilingScheme) {\n                storageLevelOffset =\n                    storageLevelOffset === undefined\n                        ? ds.storageLevelOffset\n                        : Math.max(storageLevelOffset, ds.storageLevelOffset);\n            }\n        });\n\n        if (storageLevelOffset === undefined) {\n            storageLevelOffset = 0;\n        }\n\n        if (storageLevelOffset !== this.storageLevelOffset) {\n            this.storageLevelOffset = storageLevelOffset;\n            this.mapView.clearTileCache(this.name);\n        }\n    }\n\n    /** @override */\n    setTheme(theme: Theme, languages?: string[]) {\n        this.mapView.clearTileCache(this.name);\n    }\n\n    setTilingScheme(tilingScheme?: TilingScheme) {\n        const newScheme = tilingScheme || BackgroundDataSource.DEFAULT_TILING_SCHEME;\n        if (newScheme === this.m_tilingScheme) {\n            return;\n        }\n\n        this.m_tilingScheme = newScheme;\n        this.updateStorageLevelOffset();\n        this.mapView.clearTileCache(this.name);\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_tilingScheme;\n    }\n\n    /** @override */\n    getTile(tileKey: TileKey): Tile | undefined {\n        const tile = new Tile(this, tileKey);\n        tile.forceHasGeometry(true);\n        tile.removeDecodedTile(); // Skip geometry loading.\n        TileGeometryCreator.instance.addGroundPlane(tile, Number.MIN_SAFE_INTEGER);\n\n        return tile;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { BufferAttribute, BufferGeometry, Vector3 } from \"three\";\n\nconst tmpVectorA = new Vector3();\nconst tmpVectorB = new Vector3();\nconst tmpVectorC = new Vector3();\n\n/**\n * The [[SubdivisionModifier]] subdivides triangle mesh geometries.\n */\nexport abstract class SubdivisionModifier {\n    /**\n     * Constructs a new [[SubdivisionModifier]].\n     */\n    constructor() {\n        // nothing to do\n    }\n\n    /**\n     * Subdivides the faces of the given [[THREE.BufferGeometry]].\n     *\n     * This method modifies (in-place) the vertices and the faces of the geometry.\n     * Please note that only the vertex position and their UV coordinates are subdivided.\n     * Normals, vertex colors and other attributes are left unmodified.\n     *\n     * @param geometry The [[THREE.BufferGeometry]] to subdivide.\n     */\n    modify(geometry: BufferGeometry): BufferGeometry {\n        const positionAttr = geometry.getAttribute(\"position\") as BufferAttribute;\n        const position = Array.from(positionAttr.array);\n\n        const uvAttr = geometry.getAttribute(\"uv\") as BufferAttribute;\n        const uv = uvAttr !== undefined ? Array.from(uvAttr.array) : undefined;\n\n        const edgeAttr = geometry.getAttribute(\"edge\") as BufferAttribute;\n        const edge = edgeAttr !== undefined ? Array.from(edgeAttr.array) : undefined;\n\n        const wallAttr = geometry.getAttribute(\"wall\") as BufferAttribute;\n        const wall = wallAttr !== undefined ? Array.from(wallAttr.array) : undefined;\n\n        const indexAttr = geometry.getIndex() as BufferAttribute;\n        const indices = Array.from(indexAttr.array);\n\n        // A cache containing the indices of the vertices added\n        // when subdiving the faces of the geometry.\n        const cache = new Map<string, number>();\n\n        /**\n         * Returns the index of the vertex positioned in the middle of the given vertices.\n         */\n        function middleVertex(i: number, j: number): number {\n            // Build a unique `key` for the pair of indices `(i, j)`.\n            const key = `${Math.min(i, j)}_${Math.max(i, j)}`;\n\n            const h = cache.get(key);\n\n            if (h !== undefined) {\n                // Nothing to do, a vertex in the middle of (i, j) was already created.\n                return h;\n            }\n\n            // The position of the new vertex.\n            tmpVectorA.set(position[i * 3], position[i * 3 + 1], position[i * 3 + 2]);\n            tmpVectorB.set(position[j * 3], position[j * 3 + 1], position[j * 3 + 2]);\n            tmpVectorC.lerpVectors(tmpVectorA, tmpVectorB, 0.5);\n\n            // The index of the new vertex.\n            const index = position.length / 3;\n            position.push(...tmpVectorC.toArray());\n            // Cache the position of the new vertex.\n            cache.set(key, index);\n\n            // The uvs of the new vertex.\n            if (uv !== undefined) {\n                tmpVectorA.set(uv[i * 2], uv[i * 2 + 1], 0);\n                tmpVectorB.set(uv[j * 2], uv[j * 2 + 1], 0);\n                tmpVectorC.lerpVectors(tmpVectorA, tmpVectorB, 0.5);\n                uv.push(tmpVectorC.x, tmpVectorC.y);\n            }\n\n            // The edge and wall attributes of the new vertex.\n            // If a new vertex has been introduced between i and j, connect the elements\n            // accordingly.\n            if (edge !== undefined) {\n                if (edge[i] === j) {\n                    edge.push(j);\n                    edge[i] = index;\n                } else if (edge[j] === i) {\n                    edge.push(i);\n                    edge[j] = index;\n                } else {\n                    edge.push(-1);\n                }\n            }\n            if (wall !== undefined) {\n                if (wall[i] === j) {\n                    wall.push(j);\n                    wall[i] = index;\n                } else if (wall[j] === i) {\n                    wall.push(i);\n                    wall[j] = index;\n                } else {\n                    wall.push(-1);\n                }\n            }\n\n            return index;\n        }\n\n        const newIndices = [];\n        while (indices.length >= 3) {\n            const v0 = indices.shift()!;\n            const v1 = indices.shift()!;\n            const v2 = indices.shift()!;\n\n            tmpVectorA.set(position[v0 * 3], position[v0 * 3 + 1], position[v0 * 3 + 2]);\n            tmpVectorB.set(position[v1 * 3], position[v1 * 3 + 1], position[v1 * 3 + 2]);\n            tmpVectorC.set(position[v2 * 3], position[v2 * 3 + 1], position[v2 * 3 + 2]);\n\n            const edgeToSplit = this.shouldSplitTriangle(tmpVectorA, tmpVectorB, tmpVectorC);\n\n            switch (edgeToSplit) {\n                case 0: {\n                    const v3 = middleVertex(v0, v1);\n                    indices.push(v0, v3, v2, v3, v1, v2);\n                    break;\n                }\n\n                case 1: {\n                    const v3 = middleVertex(v1, v2);\n                    indices.push(v0, v1, v3, v0, v3, v2);\n                    break;\n                }\n\n                case 2: {\n                    const v3 = middleVertex(v2, v0);\n                    indices.push(v0, v1, v3, v3, v1, v2);\n                    break;\n                }\n\n                case undefined: {\n                    newIndices.push(v0, v1, v2);\n                    break;\n                }\n\n                default:\n                    throw new Error(\"failed to subdivide the given geometry\");\n            }\n        }\n\n        positionAttr.array = new Float32Array(position);\n        positionAttr.count = position.length / positionAttr.itemSize;\n        positionAttr.needsUpdate = true;\n\n        geometry.setIndex(newIndices);\n\n        if (uv !== undefined) {\n            uvAttr.array = new Float32Array(uv);\n            uvAttr.count = uv.length / uvAttr.itemSize;\n            uvAttr.needsUpdate = true;\n        }\n\n        if (edge !== undefined) {\n            edgeAttr.array = new Float32Array(edge);\n            edgeAttr.count = edge.length / edgeAttr.itemSize;\n            edgeAttr.needsUpdate = true;\n        }\n\n        return geometry;\n    }\n\n    /**\n     * Returns if the given triangle should be subdivide.\n     *\n     * Implementations of this function should return the index of\n     * the edge of the triangle to split (0, 1, or 2) or undefined if\n     * the triangle doesn't need to be subdivided.\n     *\n     * @param a The position of the first vertex of the triangle.\n     * @param b The position of the second vertex of the triangle.\n     * @param c The position of the third vertex of the triangle.\n     */\n    protected abstract shouldSplitTriangle(a: Vector3, b: Vector3, c: Vector3): number | undefined;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/LRUCache\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst SdfShaderChunks = {\n    sdf_attributes: `\n        attribute vec4 position;\n        attribute vec4 uv;\n        attribute vec4 color;\n        attribute vec4 bgColor;\n        `,\n    sdf_varying: `\n        varying vec4 vColor;\n        varying float vWeight;\n        varying vec2 vUv;\n        varying float vRotation;\n        `,\n    sdf_varying_computation: `\n        #if BG_TEXT\n        vColor = bgColor;\n        vWeight = uv.w;\n        #else\n        vColor = color;\n        vWeight = uv.z;\n        #endif\n        vUv = vec2(uv.xy);\n        vRotation = position.w;\n        `,\n    sdf_frag_uniforms: `\n        uniform sampler2D sdfTexture;\n        uniform vec4 sdfParams;\n        `,\n    sdf_sampling_functions: `\n        float median(float r, float g, float b) {\n            return max(min(r, g), min(max(r, g), b));\n        }\n\n        float getDistance(vec2 uvOffset) {\n            vec3 sample = texture2D(sdfTexture, vUv.xy + uvOffset).rgb;\n            #if MSDF\n            return median(sample.r, sample.g, sample.b);\n            #else\n            return sample.r;\n            #endif\n        }\n\n        float getOpacity(vec2 uvOffset, float weight) {\n            vec2 uv = vUv + uvOffset;\n            vec2 rotatedUVs = abs(vec2(\n                cos(vRotation) * uv.x - sin(vRotation) * uv.y,\n                sin(vRotation) * uv.x + cos(vRotation) * uv.y));\n\n            float dx = dFdx(rotatedUVs.x) * sdfParams.x;\n            float dy = dFdy(rotatedUVs.y) * sdfParams.y;\n            float toPixels = sdfParams.w * inversesqrt( dx * dx + dy * dy );\n\n            float dist = getDistance(uvOffset) + min(weight, 0.5 - 1.0 / sdfParams.w) - 0.5;\n            return clamp(dist * toPixels + 0.5, 0.0, 1.0);\n        }\n        `\n};\nObject.assign(THREE.ShaderChunk, SdfShaderChunks);\n\nconst clearVertexSource: string = `\n    attribute vec2 position;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    void main() {\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xy, 0.0, 1.0);\n    }`;\n\nconst clearFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    void main() {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }`;\n\nconst copyVertexSource: string = `\n    attribute vec3 position;\n    attribute vec2 uv;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    varying vec3 vUv;\n\n    void main() {\n        vUv = vec3(uv.xy, position.z);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xy, 0.0, 1.0);\n    }`;\n\nconst copyFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    uniform float pageOffset;\n    uniform sampler2D page0;\n    uniform sampler2D page1;\n    uniform sampler2D page2;\n    uniform sampler2D page3;\n    uniform sampler2D page4;\n    uniform sampler2D page5;\n    uniform sampler2D page6;\n    uniform sampler2D page7;\n\n    varying vec3 vUv;\n\n    void main() {\n        vec4 sample = vec4(0.0);\n        if (vUv.z < pageOffset || vUv.z > (pageOffset + 7.0)) discard;\n        else if (vUv.z < pageOffset + 1.0) sample = texture2D(page0, vUv.xy);\n        else if (vUv.z < pageOffset + 2.0) sample = texture2D(page1, vUv.xy);\n        else if (vUv.z < pageOffset + 3.0) sample = texture2D(page2, vUv.xy);\n        else if (vUv.z < pageOffset + 4.0) sample = texture2D(page3, vUv.xy);\n        else if (vUv.z < pageOffset + 5.0) sample = texture2D(page4, vUv.xy);\n        else if (vUv.z < pageOffset + 6.0) sample = texture2D(page5, vUv.xy);\n        else if (vUv.z < pageOffset + 7.0) sample = texture2D(page6, vUv.xy);\n        else sample = texture2D(page7, vUv.xy);\n\n        gl_FragColor = sample;\n    }`;\n\nconst sdfTextVertexSource: string = `\n    #include <sdf_attributes>\n    #include <sdf_varying>\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    void main() {\n        #include <sdf_varying_computation>\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\n    }`;\n\nconst sdfTextFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    #include <sdf_varying>\n    #include <sdf_frag_uniforms>\n    #include <sdf_sampling_functions>\n\n    void main() {\n        vec4 color = vColor;\n        color.a *= getOpacity(vec2(0.0), vWeight);\n        if (color.a < 0.05) {\n            discard;\n        }\n        gl_FragColor = color;\n    }`;\n\n/**\n * @hidden\n * Material used for clearing glyphs from a [[GlyphTextureCache]].\n */\nexport class GlyphClearMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `GlyphClearMaterial`.\n     *\n     * @returns New `GlyphClearMaterial`.\n     */\n    constructor() {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"GlyphClearMaterial\",\n            vertexShader: clearVertexSource,\n            fragmentShader: clearFragmentSource,\n            uniforms: {},\n            depthTest: false,\n            depthWrite: false\n        };\n        super(shaderParams);\n    }\n}\n\n/**\n * @hidden\n * Material used for copying glyphs into a [[GlyphTextureCache]].\n */\nexport class GlyphCopyMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `GlyphCopyMaterial`.\n     *\n     * @returns New `GlyphCopyMaterial`.\n     */\n    constructor() {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"GlyphCopyMaterial\",\n            vertexShader: copyVertexSource,\n            fragmentShader: copyFragmentSource,\n            uniforms: {\n                pageOffset: new THREE.Uniform(0.0),\n                page0: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page1: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page2: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page3: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page4: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page5: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page6: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page7: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE)\n            },\n            depthTest: false,\n            depthWrite: false\n        };\n        super(shaderParams);\n    }\n}\n\n/**\n * @hidden\n * Material parameters passed on [[SdfTextMaterial]] creation.\n */\nexport interface SdfTextMaterialParameters {\n    texture: THREE.Texture;\n    textureSize: THREE.Vector2;\n    size: number;\n    distanceRange: number;\n    isMsdf: boolean;\n    isBackground: boolean;\n    vertexSource?: string;\n    fragmentSource?: string;\n}\n\n/**\n * Material designed to render transformable, high quality SDF text.\n */\nexport class SdfTextMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `SdfTextMaterial`.\n     *\n     * @param params Material parameters.\n     *\n     * @returns New `SdfTextMaterial`.\n     */\n    constructor(params: SdfTextMaterialParameters) {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"SdfTextMaterial\",\n            vertexShader:\n                params.vertexSource !== undefined ? params.vertexSource : sdfTextVertexSource,\n            fragmentShader:\n                params.fragmentSource !== undefined ? params.fragmentSource : sdfTextFragmentSource,\n            uniforms: {\n                sdfTexture: new THREE.Uniform(params.texture),\n                sdfParams: new THREE.Uniform(\n                    new THREE.Vector4(\n                        params.textureSize.x,\n                        params.textureSize.y,\n                        params.size,\n                        params.distanceRange\n                    )\n                )\n            },\n            defines: {\n                MSDF: params.isMsdf ? 1.0 : 0.0,\n                BG_TEXT: params.isBackground ? 1.0 : 0.0\n            },\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.DoubleSide,\n            transparent: true\n        };\n        super(shaderParams);\n        this.extensions.derivatives = true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { GlyphData } from \"./GlyphData\";\nimport { TextLayoutStyle, TextRenderStyle } from \"./TextStyle\";\n\n/**\n * Object containing vertex buffer data generated by [[TextCanvas]].\n */\nexport class TextBufferObject {\n    /**\n     * Constructs a new `TextBufferObject`.\n     *\n     * @param glyphs Input glyphs.\n     * @param buffer Buffer containing the data generated by [[TextCanvas]].\n     * @param bounds Optional text bounds.\n     * @param characterBounds Optional character bounds.\n     * @param textRenderStyle [[TextRenderStyle]] applied by [[TextCanvas]].\n     * @param textLayoutStyle [[TextLayoutStyle]] applied by [[TextCanvas]].\n     *\n     * @returns New `TextBufferObject`.\n     */\n    constructor(\n        readonly glyphs: GlyphData[],\n        readonly buffer: Float32Array,\n        readonly bounds?: THREE.Box2,\n        readonly characterBounds?: THREE.Box2[],\n        readonly textRenderStyle?: TextRenderStyle,\n        readonly textLayoutStyle?: TextLayoutStyle\n    ) {}\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { FontCatalog } from \"../rendering/FontCatalog\";\nimport { SdfTextMaterial } from \"../rendering/TextMaterials\";\n\n/**\n * Material parameters passed on [[SdfTextMaterial]] creation when using the `\n * `createSdfTextMaterial` helper function.\n */\nexport interface SdfTextMaterialParameters {\n    fontCatalog: FontCatalog;\n    isBackground?: boolean;\n    vertexSource?: string;\n    fragmentSource?: string;\n}\n\n/**\n * Helper function designed to create [[SdfTextMaterials]] that can be rendered using\n * [[TextCanvas]].\n *\n * @param params Material parameters.\n *\n * @returns New `SdfTextMaterial`.\n */\nexport function createSdfTextMaterial(params: SdfTextMaterialParameters): SdfTextMaterial {\n    return new SdfTextMaterial({\n        texture: params.fontCatalog.texture,\n        textureSize: params.fontCatalog.textureSize,\n        size: params.fontCatalog.size,\n        distanceRange: params.fontCatalog.distanceRange,\n        isMsdf: params.fontCatalog.type === \"msdf\",\n        isBackground: params.isBackground === true,\n        vertexSource: params.vertexSource,\n        fragmentSource: params.fragmentSource\n    });\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport { sampleBilinear } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { VertexCache } from \"./VertexCache\";\n\n/**\n * @internal\n * BufferAttribute decorator that displaces on the fly the coordinates in a given attribute using a\n * specified displacement map.\n */\nexport class DisplacedBufferAttribute extends THREE.BufferAttribute {\n    private static MAX_CACHE_SIZE = 6;\n    private m_texture?: Float32Array;\n    private m_textureWidth: number = 0;\n    private m_textureHeight: number = 0;\n    private m_cache = new VertexCache(DisplacedBufferAttribute.MAX_CACHE_SIZE);\n    private m_lastBufferIndex?: number;\n    private m_lastPos = new THREE.Vector3();\n    private m_tmpNormal = new THREE.Vector3();\n\n    /**\n     * Creates an instance of displaced buffer attribute.\n     * @param originalAttribute The buffer attribute to be displaced (e.g. the position attribute).\n     * @param m_normals The normals along which the coordinates will be displaced.\n     * @param m_uvs The uv coordinates to be used to sample the displacement map.\n     * @param displacementMap A texture with the displacement values in 32bit floats.\n     */\n    constructor(\n        public originalAttribute: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        private m_normals: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        private m_uvs: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        displacementMap: THREE.DataTexture\n    ) {\n        super(originalAttribute.array, originalAttribute.itemSize, originalAttribute.normalized);\n        this.resetTexture(displacementMap);\n    }\n\n    /**\n     * Resets the displaced buffer attribute to use new buffer attributes or displacement map.\n     * @param originalAttribute The buffer attribute to be displaced (e.g. the position attribute).\n     * @param normals The normals along which the coordinates will be displaced.\n     * @param uvs  The uv coordinates to be used to sample the displacement map.\n     * @param displacementMap A texture with the displacement values in 32bit floats.\n     */\n    reset(\n        originalAttribute: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        normals: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        uvs: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        displacementMap: THREE.DataTexture\n    ) {\n        this.array = originalAttribute.array;\n        this.itemSize = originalAttribute.itemSize;\n        this.count = this.array.length / this.itemSize;\n        this.normalized = originalAttribute.normalized;\n        this.originalAttribute = originalAttribute;\n        this.m_normals = normals;\n        this.m_uvs = uvs;\n        this.m_cache.clear();\n        this.m_lastBufferIndex = undefined;\n        this.resetTexture(displacementMap);\n    }\n\n    // HARP-9585: These getters are overrides of the base class ones, however tslint doesn't\n    // recognize them as such.\n    getX(index: number): number {\n        return this.getDisplacedCoordinate(index).x;\n    }\n    getY(index: number): number {\n        return this.getDisplacedCoordinate(index).y;\n    }\n    getZ(index: number): number {\n        return this.getDisplacedCoordinate(index).z;\n    }\n\n    private resetTexture(displacementMap: THREE.DataTexture) {\n        this.m_texture = new Float32Array(displacementMap.image.data.buffer);\n        this.m_textureWidth = displacementMap.image.width;\n        this.m_textureHeight = displacementMap.image.height;\n    }\n    private getDisplacedCoordinate(bufferIndex: number): Vector3Like {\n        if (bufferIndex === this.m_lastBufferIndex) {\n            return this.m_lastPos;\n        }\n        this.m_lastBufferIndex = bufferIndex;\n        if (this.m_cache.get(bufferIndex, this.m_lastPos)) {\n            return this.m_lastPos;\n        }\n        this.displacePosition(bufferIndex);\n        this.m_cache.set(bufferIndex, this.m_lastPos);\n        return this.m_lastPos;\n    }\n    private displacePosition(bufferIndex: number) {\n        this.m_lastPos.set(\n            super.getX(bufferIndex),\n            super.getY(bufferIndex),\n            super.getZ(bufferIndex)\n        );\n        const normals = this.m_normals as THREE.BufferAttribute;\n        this.m_tmpNormal.fromBufferAttribute(normals, bufferIndex);\n        const uvs = this.m_uvs;\n        const u = THREE.MathUtils.clamp(uvs.getX(bufferIndex), 0, 1);\n        const v = THREE.MathUtils.clamp(uvs.getY(bufferIndex), 0, 1);\n        const displacement = sampleBilinear(\n            this.m_texture!,\n            this.m_textureWidth,\n            this.m_textureHeight,\n            u,\n            v\n        );\n        this.m_lastPos.add(this.m_tmpNormal.multiplyScalar(displacement));\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport {\n    Light,\n    MagFilter,\n    MinFilter,\n    PixelFormat,\n    TextureDataType,\n    WrappingMode\n} from \"@here/harp-datasource-protocol\";\n\n/**\n * Returns `three.js` pixel format object basing on a [[PixelFormat]] specified.\n */\nexport function toPixelFormat(format: PixelFormat): THREE.PixelFormat {\n    switch (format) {\n        case \"Alpha\":\n            return THREE.AlphaFormat;\n        case \"RGB\":\n            return THREE.RGBFormat;\n        case \"RGBA\":\n            return THREE.RGBAFormat;\n        case \"Luminance\":\n            return THREE.LuminanceFormat;\n        case \"LuminanceAlpha\":\n            return THREE.LuminanceAlphaFormat;\n        case \"RGBE\":\n            return THREE.RGBEFormat;\n        case \"Depth\":\n            return THREE.DepthFormat;\n        case \"DepthStencil\":\n            return THREE.DepthStencilFormat;\n        case \"Red\":\n            return THREE.RedFormat;\n        default:\n            throw new Error(`invalid pixel format: ${format}`);\n    }\n}\n\n/**\n * Returns `three.js` texture data types based on a [[TextureDataType]] specified.\n */\nexport function toTextureDataType(dataType: TextureDataType): THREE.TextureDataType {\n    switch (dataType) {\n        case \"UnsignedByte\":\n            return THREE.UnsignedByteType;\n        case \"Byte\":\n            return THREE.ByteType;\n        case \"Short\":\n            return THREE.ShortType;\n        case \"UnsignedShort\":\n            return THREE.UnsignedShortType;\n        case \"Int\":\n            return THREE.IntType;\n        case \"UnsignedInt\":\n            return THREE.UnsignedIntType;\n        case \"Float\":\n            return THREE.FloatType;\n        case \"HalfFloat\":\n            return THREE.HalfFloatType;\n        default:\n            throw new Error(`invalid texture data type: ${dataType}`);\n    }\n}\n\n/**\n * Returns `three.js` wrapping mode object based on a [[WrappingMode]] specified.\n */\nexport function toWrappingMode(mode: WrappingMode): THREE.Wrapping {\n    switch (mode) {\n        case \"clamp\":\n            return THREE.ClampToEdgeWrapping;\n        case \"repeat\":\n            return THREE.RepeatWrapping;\n        case \"mirror\":\n            return THREE.MirroredRepeatWrapping;\n        default:\n            throw new Error(`invalid wrapping mode: ${mode}`);\n    }\n}\n\n/**\n * Returns `three.js` texture filter object based on a [[MagFilter]] or [[MinFilter]] specified.\n */\nexport function toTextureFilter(filter: MagFilter | MinFilter): THREE.TextureFilter {\n    switch (filter) {\n        case \"nearest\":\n            return THREE.NearestFilter;\n        case \"nearestMipMapNearest\":\n            return THREE.NearestMipMapNearestFilter;\n        case \"nearestMipMapLinear\":\n            return THREE.NearestMipMapLinearFilter;\n        case \"linear\":\n            return THREE.LinearFilter;\n        case \"linearMipMapNearest\":\n            return THREE.LinearMipMapNearestFilter;\n        case \"linearMipMapLinear\":\n            return THREE.LinearMipMapLinearFilter;\n        default:\n            throw new Error(`invalid texture filter: ${filter}`);\n    }\n}\n\n/**\n * Create a specific light for lightening the map.\n */\nexport function createLight(lightDescription: Light): THREE.Light {\n    switch (lightDescription.type) {\n        case \"ambient\": {\n            const light = new THREE.AmbientLight(\n                lightDescription.color,\n                lightDescription.intensity\n            );\n            light.name = lightDescription.name;\n            return light;\n        }\n        case \"directional\": {\n            const light = new THREE.DirectionalLight(\n                lightDescription.color,\n                lightDescription.intensity\n            );\n            light.name = lightDescription.name;\n            if (lightDescription.castShadow !== undefined) {\n                light.castShadow = lightDescription.castShadow;\n            }\n            if (light.castShadow) {\n                light.shadow.bias = 0.00001;\n                light.shadow.mapSize.width = 1024;\n                light.shadow.mapSize.height = 1024;\n            }\n            light.position.set(\n                lightDescription.direction.x,\n                lightDescription.direction.y,\n                lightDescription.direction.z\n            );\n            light.position.normalize();\n            return light;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { Env, ExtrudedPolygonTechnique } from \"@here/harp-datasource-protocol\";\nimport { ColorUtils } from \"@here/harp-datasource-protocol/lib/ColorUtils\";\nimport { enforceBlending, MapMeshStandardMaterial } from \"@here/harp-materials\";\nimport { evaluateBaseColorProperty } from \"./DecodedTileHelpers\";\n\n/**\n * Bitmask used for the depth pre-pass to prevent multiple fragments in the same screen position\n * from rendering color.\n */\nexport const DEPTH_PRE_PASS_STENCIL_MASK = 0x01;\n\n/**\n * Render order offset for the depth pre-pass to ensure that it's rendered first.\n */\nconst DEPTH_PRE_PASS_RENDER_ORDER_OFFSET = 1e-6;\n\n/**\n * Check if technique requires (and not disables) use of depth prepass.\n *\n * Depth prepass is enabled if correct opacity is specified (in range `(0,1)`) _and_ not explicitly\n * disabled by `enableDepthPrePass` option.\n *\n * @param technique [[BaseStandardTechnique]] instance to be checked\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nexport function isRenderDepthPrePassEnabled(technique: ExtrudedPolygonTechnique, env: Env) {\n    // Depth pass explicitly disabled\n    if (technique.enableDepthPrePass === false) {\n        return false;\n    }\n    let transparent =\n        technique.opacity !== undefined && technique.opacity > 0.0 && technique.opacity < 1.0;\n    // If not opaque then check if transparency may be modified via alpha in base color.\n    // Otherwise we don't need to even test base color because opacity mixed with any base alpha,\n    // will always produce some transparency effect.\n    if (!transparent) {\n        // We do not support switching depth pass during alpha interpolation, ignore zoom level\n        // when calculating base color value.\n        const color = evaluateBaseColorProperty(technique, env);\n        if (color !== undefined) {\n            const alpha = ColorUtils.getAlphaFromHex(color);\n            transparent = alpha > 0.0 && alpha < 1.0;\n        }\n    }\n    return transparent;\n}\n\n/**\n * Creates material for depth prepass.\n *\n * Creates material that writes only to the z-buffer. Updates the original material instance, to\n * support depth prepass.\n *\n * @param baseMaterial The base material of mesh that is updated to work with depth prepass\n *     and then used. This parameter is a template for depth prepass material that is returned.\n * @returns depth prepass material, which is a clone of `baseMaterial` with the adapted settings.\n */\nexport function createDepthPrePassMaterial(baseMaterial: THREE.Material): THREE.Material {\n    baseMaterial.depthWrite = false;\n    baseMaterial.depthFunc = THREE.EqualDepth;\n    baseMaterial.colorWrite = true;\n    enforceBlending(baseMaterial);\n\n    const depthPassMaterial = baseMaterial.clone();\n    depthPassMaterial.depthWrite = true;\n    depthPassMaterial.depthTest = true;\n    depthPassMaterial.depthFunc = THREE.LessDepth;\n    depthPassMaterial.colorWrite = false;\n    depthPassMaterial.opacity = 1.0;\n    depthPassMaterial.blending = THREE.NoBlending;\n    return depthPassMaterial;\n}\n\n// tslint:disable:max-line-length\n/**\n * Clones a given mesh to render it in the depth prepass with another material. Both the original\n * and depth prepass meshes, when rendered in the correct order, create the proper depth prepass\n * effect. The original mesh material is slightly modified by [[createDepthPrePassMaterial]] to\n * support the depth prepass. This method is usable only if the material of this mesh has an\n * opacity value in the range `(0,1)`.\n *\n * The DepthPrePass object is created wis a slightly smaller `renderOrder` as the original mesh\n * to ensure that it's rendered first.\n *\n * @param mesh original mesh\n * @returns `Mesh` depth pre pass\n */\n// tslint:enable:max-line-length\nexport function createDepthPrePassMesh(mesh: THREE.Mesh): THREE.Mesh {\n    const originalGeometry = mesh.geometry;\n\n    if (!(originalGeometry instanceof THREE.BufferGeometry)) {\n        throw new Error(\"#createDepthPassMesh only BufferGeometry is supported\");\n    }\n    const positionAttribute = originalGeometry.getAttribute(\"position\");\n    if (!positionAttribute) {\n        throw new Error(\"#createDepthPassMesh position attribute not found\");\n    }\n\n    const depthPassGeometry = new THREE.BufferGeometry();\n    depthPassGeometry.setAttribute(\"position\", positionAttribute);\n    const uvAttribute = originalGeometry.getAttribute(\"uv\");\n    if (uvAttribute) {\n        depthPassGeometry.setAttribute(\"uv\", uvAttribute);\n    }\n    const normalAttribute = originalGeometry.getAttribute(\"normal\");\n    if (normalAttribute) {\n        depthPassGeometry.setAttribute(\"normal\", normalAttribute);\n    }\n    const extrusionAxisAttribute = originalGeometry.getAttribute(\"extrusionAxis\");\n    if (extrusionAxisAttribute) {\n        depthPassGeometry.setAttribute(\"extrusionAxis\", extrusionAxisAttribute);\n    }\n\n    if (originalGeometry.index) {\n        depthPassGeometry.setIndex(originalGeometry.index);\n    }\n\n    for (const group of originalGeometry.groups) {\n        const { start, count, materialIndex } = group;\n        depthPassGeometry.addGroup(start, count, materialIndex);\n    }\n\n    const depthPassMaterial =\n        mesh.material instanceof Array\n            ? mesh.material.map(createDepthPrePassMaterial)\n            : createDepthPrePassMaterial(mesh.material);\n\n    const depthPassMesh = new THREE.Mesh(depthPassGeometry, depthPassMaterial);\n    depthPassMesh.renderOrder = mesh.renderOrder - DEPTH_PRE_PASS_RENDER_ORDER_OFFSET;\n\n    return depthPassMesh;\n}\n\n/**\n * Sets up all the needed stencil logic needed for the depth pre-pass.\n *\n * This logic is in place to avoid z-fighting artifacts that can appear in geometries that have\n * coplanar triangles inside the same mesh.\n *\n * @param depthMesh Mesh created by `createDepthPrePassMesh`.\n * @param colorMesh Original mesh.\n */\nexport function setDepthPrePassStencil(depthMesh: THREE.Mesh, colorMesh: THREE.Mesh) {\n    // Set up depth mesh stencil logic.\n    // Set the depth pre-pass stencil bit for all processed fragments. We use\n    // `THREE.AlwaysStencilFunc` and not `THREE.NotEqualStencilFunc` to force all fragments to pass\n    // the stencil test and write the correct depth value.\n    const depthMaterial = depthMesh.material as MapMeshStandardMaterial;\n    depthMaterial.stencilWrite = true;\n    depthMaterial.stencilFail = THREE.KeepStencilOp;\n    depthMaterial.stencilZFail = THREE.KeepStencilOp;\n    depthMaterial.stencilZPass = THREE.ReplaceStencilOp;\n    depthMaterial.stencilFunc = THREE.AlwaysStencilFunc;\n    depthMaterial.stencilRef = 0xff;\n    (depthMaterial as any).stencilFuncMask = DEPTH_PRE_PASS_STENCIL_MASK;\n\n    // Set up color mesh stencil logic.\n    // Only write color for pixels with the depth pre-pass stencil bit set. Also, once a pixel is\n    // rendered, set the stencil bit to 0 to prevent subsequent pixels in the same clip position\n    // from rendering color again.\n    const colorMaterial = colorMesh.material as MapMeshStandardMaterial;\n    colorMaterial.stencilWrite = true;\n    colorMaterial.stencilFail = THREE.KeepStencilOp;\n    colorMaterial.stencilZFail = THREE.KeepStencilOp;\n    colorMaterial.stencilZPass = THREE.ZeroStencilOp;\n    colorMaterial.stencilFunc = THREE.EqualStencilFunc;\n    colorMaterial.stencilRef = 0xff;\n    (colorMaterial as any).stencilFuncMask = DEPTH_PRE_PASS_STENCIL_MASK;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryKind } from \"@here/harp-datasource-protocol\";\nimport { Projection } from \"@here/harp-geoutils\";\nimport { hasDisplacementFeature } from \"@here/harp-materials\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { TileDisplacementMap } from \"../DisplacementMap\";\nimport { ElevationProvider } from \"../ElevationProvider\";\nimport { TextElement } from \"../text/TextElement\";\nimport { Tile, TileObject } from \"../Tile\";\n\n/**\n * Overlays the specified object's geometry on the elevation represented by the given displacement\n * map .\n *\n * @param object The object to be overlaid.\n * @param displacementMap Texture representing the elevation data used to overlay the object.\n */\nfunction overlayObject(object: TileObject, displacementMap: THREE.DataTexture): void {\n    if (!(\"material\" in object)) {\n        return;\n    }\n\n    const material = (object as any).material as THREE.Mesh[\"material\"];\n\n    if (Array.isArray(material)) {\n        material.forEach(mat => {\n            if (hasDisplacementFeature(mat)) {\n                mat.displacementMap = displacementMap;\n            }\n        });\n    } else if (material && hasDisplacementFeature(material)) {\n        material.displacementMap = displacementMap;\n    }\n}\n\n/**\n * Overlays the specified coordinates on top of elevation data if available.\n *\n * @param worldCoords World coordinates to overlay.\n * @param elevationProvider Used to sample elevation data.\n * @param displacementMap Elevation data to be sampled.\n * @param projection Projection from geo to world space.\n * @returns `true` if the position was successfully overlaid, `false` otherwise (e.g. elevation\n * data not available).\n */\nfunction overlayPosition(\n    worldCoords: THREE.Vector3,\n    elevationProvider: ElevationProvider,\n    displacementMap: TileDisplacementMap,\n    projection: Projection\n): boolean {\n    // TODO: Move calculation of text element geoCoordinates to decoder.\n    const geoCoords = projection.unprojectPoint(worldCoords);\n\n    if (displacementMap.geoBox.contains(geoCoords)) {\n        geoCoords.altitude = elevationProvider.sampleHeight(geoCoords, displacementMap);\n    } else {\n        geoCoords.altitude = elevationProvider.getHeight(geoCoords, displacementMap.tileKey.level);\n        if (geoCoords.altitude === undefined) {\n            return false;\n        }\n    }\n    projection.projectPoint(geoCoords, worldCoords);\n    return true;\n}\n\n/**\n * Overlays the specified coordinates on top of elevation data if available.\n *\n * @param path World coordinates to overlay.\n * @param elevationProvider Used to sample elevation data.\n * @param displacementMap Elevation data to be sampled.\n * @param projection Projection from geo to world space.\n * @returns `true` if the position was successfully overlaid, `false` otherwise (e.g. elevation\n * data not available).\n */\nfunction overlayPath(\n    path: THREE.Vector3[],\n    elevationProvider: ElevationProvider,\n    displacementMap: TileDisplacementMap,\n    projection: Projection\n): boolean {\n    for (const position of path) {\n        if (!overlayPosition(position, elevationProvider, displacementMap, projection)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Overlays a text element on top of elevation data if available.\n *\n * @param textElement The text element whose geometry will be overlaid.\n * @param elevationProvider  Used to sample elevation data.\n * @param displacementMap Elevation data to be sampled.\n * @param projection Projection from geo to world space.\n */\nexport function overlayTextElement(\n    textElement: TextElement,\n    elevationProvider: ElevationProvider,\n    displacementMap: TileDisplacementMap,\n    projection: Projection\n) {\n    assert(!textElement.elevated);\n    if (!displacementMap) {\n        return;\n    }\n\n    textElement.elevated = textElement.path\n        ? overlayPath(textElement.path, elevationProvider, displacementMap, projection)\n        : overlayPosition(textElement.position, elevationProvider, displacementMap, projection);\n}\n\n/**\n * Overlays the geometry in the given tile on top of elevation data if available. The tile's\n * elevation may be updated with a more precise range.\n *\n * @param tile The tile whose geometry will be overlaid.\n */\nexport function overlayOnElevation(tile: Tile): void {\n    const elevationProvider = tile.mapView.elevationProvider;\n\n    if (elevationProvider === undefined || tile.objects.length === 0) {\n        return;\n    }\n    const firstObject = tile.objects[0];\n    if (\n        !firstObject.userData ||\n        !firstObject.userData.kind ||\n        !firstObject.userData.kind.find((kind: GeometryKind) => {\n            return kind !== GeometryKind.All && kind !== GeometryKind.Terrain;\n        })\n    ) {\n        return;\n    }\n\n    const displacementMap = elevationProvider.getDisplacementMap(tile.tileKey);\n    if (displacementMap === undefined) {\n        return;\n    }\n\n    // Refine tile elevation range, which is initially set to the broader range given by\n    // [[ElevationRangeSource]].\n    const geoBox = displacementMap.geoBox;\n    tile.elevationRange = {\n        minElevation: geoBox.minAltitude ?? 0,\n        maxElevation: geoBox.maxAltitude ?? 0\n    };\n\n    // TODO: HARP-8808 Apply displacement maps once per material.\n    for (const object of tile.objects) {\n        overlayObject(object, displacementMap.texture);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    ExtendedTileInfo,\n    getPropertyValue,\n    LineTechnique,\n    SolidLineTechnique\n} from \"@here/harp-datasource-protocol\";\nimport { Expr } from \"@here/harp-datasource-protocol/lib/Expr\";\nimport { assert, LoggerManager, Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { compileTechniques } from \"./DecodedTileHelpers\";\nimport { MapView } from \"./MapView\";\nimport { PickObjectType, PickResult } from \"./PickHandler\";\nimport { RoadIntersectionData, Tile } from \"./Tile\";\n\nconst logger = LoggerManager.instance.create(\"RoadPicker\");\n\nexport interface RoadPickResult extends PickResult {\n    distFromCenter: number;\n    positions: number[];\n}\n\nconst MAX_DISTANCE_ERROR = 0.01;\n\n/**\n * Optional flags in the style that can be used to optimize the evaluation.\n */\ninterface CustomLineTechnique extends LineTechnique {\n    isBackground?: boolean;\n}\n\n/**\n * The `RoadPicker` class manages picking of roads, which may not be pickable in THREE.js, since\n * their geometry is generated in the vertex shader.\n */\nexport class RoadPicker {\n    constructor(private m_mapView: MapView) {}\n    /**\n     * Registers a tile with the `RoadPicker`. This function extracts line data from the [[Tile]],\n     * but only if the tile has the necessary [[ExtendedTileInfo]] that allows for road features to\n     * be reconstructed.\n     *\n     * @param tile The tile to register.\n     */\n    registerTile(tile: Tile): RoadIntersectionData | undefined {\n        assert(tile.decodedTile !== undefined);\n        if (tile.decodedTile === undefined || tile.decodedTile.tileInfo === undefined) {\n            return undefined;\n        }\n        const extendedTileInfo: ExtendedTileInfo = tile.decodedTile.tileInfo as ExtendedTileInfo;\n        const lineFeatures = extendedTileInfo.lineGroup;\n\n        if (lineFeatures === undefined || lineFeatures.numFeatures === 0) {\n            // tileInfo not of expected type [[ExtendedTileInfo]]\n            return undefined;\n        }\n\n        const widths: RoadIntersectionData[\"widths\"] = [];\n        widths.length = lineFeatures.numFeatures;\n\n        compileTechniques(extendedTileInfo.techniqueCatalog);\n\n        const mapView = this.m_mapView;\n        for (let i = 0; i < lineFeatures.numFeatures; i++) {\n            const technique = extendedTileInfo.techniqueCatalog[\n                lineFeatures.techniqueIndex[i]\n            ] as SolidLineTechnique;\n\n            const isDynamic =\n                // tslint:disable-next-line: deprecation\n                technique.metricUnit === \"Pixel\" ||\n                Expr.isExpr(technique.lineWidth) ||\n                typeof technique.lineWidth === \"string\";\n\n            widths[i] =\n                technique.lineWidth !== undefined\n                    ? isDynamic\n                        ? () => {\n                              const unitFactor =\n                                  // tslint:disable-next-line: deprecation\n                                  technique.metricUnit === \"Pixel\" ? mapView.pixelToWorld : 1.0;\n                              return (\n                                  getPropertyValue(technique.lineWidth, mapView.env) *\n                                  unitFactor *\n                                  0.5\n                              );\n                          }\n                        : (technique.lineWidth as number)\n                    : 1.0;\n        }\n        const objInfos = extendedTileInfo.lineGroup.userData;\n\n        const roadIntersectionData = {\n            ids: lineFeatures.featureIds,\n            techniqueIndex: lineFeatures.techniqueIndex,\n            starts: lineFeatures.positionIndex,\n            widths,\n            positions: lineFeatures.positions,\n            techniques: extendedTileInfo.techniqueCatalog,\n            objInfos\n        };\n\n        return roadIntersectionData;\n    }\n\n    /**\n     * Tests the `pickPos` point for intersection with all roads on a tile.\n     *\n     * @param tile The tile to pick.\n     * @param eyePos The WorldPosition of eye or camera to compute distances.\n     * @param pickPos The WorldPosition of the picked point, on the plane.\n     * @param results The existing array of [[PickResult]]; new results should be appended.\n     */\n    intersectRoads(\n        tile: Tile,\n        eyePos: THREE.Vector3,\n        pickPos: THREE.Vector3,\n        results: PickResult[]\n    ): boolean {\n        if (tile.boundingBox.distanceToPoint(pickPos) > MAX_DISTANCE_ERROR) {\n            // outside of bounding box of tile\n            return false;\n        }\n\n        const roadIntersectionData = tile.roadIntersectionData;\n        if (roadIntersectionData === undefined) {\n            return false;\n        }\n\n        const ids = roadIntersectionData.ids;\n        const techniques = roadIntersectionData.techniques;\n        const techniqueIndices = roadIntersectionData.techniqueIndex;\n        const numFeatures = ids.length;\n        const positions = roadIntersectionData.positions;\n        const widths = roadIntersectionData.widths;\n        const px = pickPos.x - tile.center.x;\n        const py = pickPos.y - tile.center.y;\n        const pickDistance = pickPos.distanceTo(eyePos);\n\n        if (\n            widths.length !== ids.length ||\n            ids.length !== techniqueIndices.length ||\n            techniqueIndices.length !== roadIntersectionData.starts.length\n        ) {\n            logger.error(\n                \"The amount of widths, ids, techniqueIndices and starts has to be the same\"\n            );\n            return false;\n        }\n\n        for (let i = 0; i < numFeatures; i++) {\n            const technique = techniques[techniqueIndices[i]] as CustomLineTechnique;\n\n            // if the technique is marked as background or as transient, we ignore it for picking\n            if (/*technique.isBackground === true ||*/ technique.transient === true) {\n                continue;\n            }\n\n            const featureStart = roadIntersectionData.starts[i];\n            const featureEnd =\n                i < numFeatures - 1\n                    ? roadIntersectionData.starts[i + 1]\n                    : roadIntersectionData.positions.length;\n\n            let startX = positions[featureStart];\n            let startY = positions[featureStart + 1];\n\n            const widthEntry = widths[i];\n            const actualWidth = Math.max(\n                1,\n                typeof widthEntry === \"function\" ? widthEntry() : widthEntry\n            );\n            const lineWidthSqr = actualWidth * actualWidth;\n\n            let closestDistSqr = Number.MAX_VALUE;\n\n            for (let j = featureStart + 2; j < featureEnd; j += 2) {\n                const endX = positions[j];\n                const endY = positions[j + 1];\n\n                const distSqr = Math2D.distToSegmentSquared(px, py, startX, startY, endX, endY);\n                if (distSqr < lineWidthSqr) {\n                    if (distSqr < closestDistSqr) {\n                        closestDistSqr = distSqr;\n                    }\n                }\n\n                startX = endX;\n                startY = endY;\n            }\n\n            if (closestDistSqr < Number.MAX_VALUE) {\n                const roadPickResult: RoadPickResult = {\n                    type: PickObjectType.Line,\n                    point: pickPos,\n                    distance: pickDistance,\n                    distFromCenter: Math.sqrt(closestDistSqr),\n                    featureId: ids[i],\n                    positions: positions.slice(featureStart, featureEnd),\n                    technique\n                };\n                this.addUserData(roadPickResult, i, roadIntersectionData.objInfos);\n                results.push(roadPickResult);\n            }\n        }\n\n        return false;\n    }\n\n    private addUserData(\n        roadPickResult: RoadPickResult,\n        index: number,\n        objInfos?: Array<{} | undefined>\n    ) {\n        if (objInfos !== undefined && objInfos.length > 0) {\n            roadPickResult.userData = { ...objInfos[index] };\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env } from \"@here/harp-datasource-protocol\";\nimport { ProjectionType } from \"@here/harp-geoutils\";\nimport {\n    HorizontalAlignment,\n    MeasurementParameters,\n    TextCanvas,\n    VerticalAlignment\n} from \"@here/harp-text-canvas\";\nimport { assert, Math2D, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { PoiManager } from \"../poi/PoiManager\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { CollisionBox, DetailedCollisionBox, IBox, ScreenCollisions } from \"../ScreenCollisions\";\nimport { ScreenProjector } from \"../ScreenProjector\";\nimport { RenderState } from \"./RenderState\";\nimport { PoiInfo, poiIsRenderable, TextElement } from \"./TextElement\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementType } from \"./TextElementType\";\nimport { ViewState } from \"./ViewState\";\n\n/**\n * Minimum number of pixels per character. Used during estimation if there is enough screen space\n * available to render a text.\n */\nconst MIN_AVERAGE_CHAR_WIDTH = 5;\n\n/**\n * Functions related to text element placement.\n */\n\nconst tmpPosition = new THREE.Vector3(0, 0, 0);\nconst tmpCameraDir = new THREE.Vector3(0, 0, 0);\nconst COS_TEXT_ELEMENT_FALLOFF_ANGLE = 0.5877852522924731; // Math.cos(0.3 * Math.PI)\n\n/**\n * Checks whether the distance of the specified text element to the center of the given view is\n * lower than a maximum threshold.\n * @param textElement The textElement of which the view distance will be checked, with coordinates\n * in world space.\n * @param mapView The view that will be used as reference to calculate the distance.\n * @param maxViewDistance The maximum distance value.\n * @returns The text element view distance if it's lower than the maximum value, otherwise\n * `undefined`.\n */\nfunction checkViewDistance(\n    worldCenter: THREE.Vector3,\n    textElement: TextElement,\n    projectionType: ProjectionType,\n    camera: THREE.Camera,\n    maxViewDistance: number\n): number | undefined {\n    const textDistance = computeViewDistance(worldCenter, textElement);\n\n    if (projectionType !== ProjectionType.Spherical) {\n        return textDistance <= maxViewDistance ? textDistance : undefined;\n    }\n\n    // For sphere projection: Filter labels that are close to the horizon\n    tmpPosition.copy(textElement.position).normalize();\n    camera.getWorldPosition(tmpCameraDir).normalize();\n    const cosAlpha = tmpPosition.dot(tmpCameraDir);\n    const viewDistance =\n        cosAlpha > COS_TEXT_ELEMENT_FALLOFF_ANGLE && textDistance <= maxViewDistance\n            ? textDistance\n            : undefined;\n\n    return viewDistance;\n}\n\n/**\n * Computes the distance of the specified text element to the given position.\n * @param refPosition The world coordinates used a reference position to calculate the distance.\n * @param textElement The textElement of which the view distance will be checked. It must have\n * coordinates in world space.\n * @returns The text element view distance.\n * `undefined`.\n */\nexport function computeViewDistance(refPosition: THREE.Vector3, textElement: TextElement): number {\n    let viewDistance: number;\n\n    if (Array.isArray(textElement.points) && textElement.points.length > 1) {\n        const viewDistance0 = refPosition.distanceTo(textElement.points[0]);\n        const viewDistance1 = refPosition.distanceTo(\n            textElement.points[textElement.points.length - 1]\n        );\n\n        viewDistance = Math.min(viewDistance0, viewDistance1);\n    } else {\n        viewDistance = refPosition.distanceTo(textElement.points as THREE.Vector3);\n    }\n\n    return viewDistance;\n}\n\n/**\n * Computes the maximum view distance for text elements as a ratio of the given view's maximum far\n * plane distance.\n * @param viewState The view for which the maximum view distance will be calculated.\n * @param farDistanceLimitRatio The ratio to apply to the maximum far plane distance.\n * @returns Maximum view distance.\n */\nexport function getMaxViewDistance(viewState: ViewState, farDistanceLimitRatio: number): number {\n    return viewState.maxVisibilityDist * farDistanceLimitRatio;\n}\n\n/**\n * State of fading.\n */\nexport enum PrePlacementResult {\n    Ok = 0,\n    NotReady,\n    Invisible,\n    TooFar,\n    Duplicate,\n    Count\n}\n\n/**\n * Defines possible text placement relative to anchor.\n */\ninterface AnchorPlacement {\n    h: HorizontalAlignment;\n    v: VerticalAlignment;\n}\n\n/**\n * @hidden\n * Possible placement scenarios in clock-wise order, based on centered placements.\n *\n * TODO: HARP-6487 This array should be parsed from the theme style definition.\n */\nconst anchorPlacementsCentered: AnchorPlacement[] = [\n    { h: HorizontalAlignment.Center, v: VerticalAlignment.Above },\n    { h: HorizontalAlignment.Left, v: VerticalAlignment.Center },\n    { h: HorizontalAlignment.Center, v: VerticalAlignment.Below },\n    { h: HorizontalAlignment.Right, v: VerticalAlignment.Center }\n];\n\n/**\n * @hidden\n * Placement anchors in clock-wise order, for corner based placements.\n *\n * TODO: HARP-6487 This array should be parsed from the theme style definition.\n */\nconst anchorPlacementsCornered: AnchorPlacement[] = [\n    { h: HorizontalAlignment.Left, v: VerticalAlignment.Above },\n    { h: HorizontalAlignment.Left, v: VerticalAlignment.Below },\n    { h: HorizontalAlignment.Right, v: VerticalAlignment.Below },\n    { h: HorizontalAlignment.Right, v: VerticalAlignment.Above }\n];\n\nconst tmpPlacementPosition = new THREE.Vector3();\nconst tmpPlacementBounds = new THREE.Box2();\n\n/**\n * Applies early rejection tests for a given text element meant to avoid trying to place labels\n * that are not visible, not ready, duplicates etc...\n * @param textElement The Text element to check.\n * @param viewState The view for which the text element will be placed.\n * @param viewCamera The view's camera.\n * @param m_poiManager To prepare pois for rendering.\n * @param [maxViewDistance] If specified, text elements farther than this max distance will be\n * rejected.\n * @returns An object with the result code and the text element view distance\n * ( or `undefined` of the checks failed) as second.\n */\nexport function checkReadyForPlacement(\n    textElement: TextElement,\n    viewState: ViewState,\n    viewCamera: THREE.Camera,\n    poiManager: PoiManager,\n    maxViewDistance?: number\n): { result: PrePlacementResult; viewDistance: number | undefined } {\n    let viewDistance: number | undefined;\n\n    if (!textElement.visible) {\n        return { result: PrePlacementResult.Invisible, viewDistance };\n    }\n\n    // If a PoiTable is specified in the technique, the table is required to be\n    // loaded before the POI can be rendered.\n    if (!poiManager.updatePoiFromPoiTable(textElement)) {\n        // PoiTable has not been loaded, but is required to determine\n        // visibility.\n        return { result: PrePlacementResult.NotReady, viewDistance };\n    }\n\n    // Text element visibility and zoom level ranges must be checked after calling\n    // updatePoiFromPoiTable, since that function may change those values.\n    if (\n        !textElement.visible ||\n        !MathUtils.isClamped(\n            viewState.zoomLevel,\n            textElement.minZoomLevel,\n            textElement.maxZoomLevel\n        )\n    ) {\n        return { result: PrePlacementResult.Invisible, viewDistance };\n    }\n\n    viewDistance =\n        maxViewDistance === undefined\n            ? computeViewDistance(viewState.worldCenter, textElement)\n            : checkViewDistance(\n                  viewState.worldCenter,\n                  textElement,\n                  viewState.projection.type,\n                  viewCamera,\n                  maxViewDistance\n              );\n\n    if (viewDistance === undefined) {\n        return { result: PrePlacementResult.TooFar, viewDistance };\n    }\n\n    return { result: PrePlacementResult.Ok, viewDistance };\n}\n\n/**\n * Computes the offset for a point text accordingly to text alignment (and icon, if any).\n * @param textElement The text element of which the offset will computed. It must be a point\n * label with [[layoutStyle]] and [[bounds]] already computed.\n * @param hAlign Text horizontal alignment.\n * @param vAlign The vertical alignment.\n * @param scale The scaling factor (due to distance, etc.).\n * @param offset The offset result.\n */\nfunction computePointTextOffset(\n    textElement: TextElement,\n    hAlign: HorizontalAlignment,\n    vAlign: VerticalAlignment,\n    scale: number,\n    offset: THREE.Vector2 = new THREE.Vector2()\n): THREE.Vector2 {\n    assert(textElement.type === TextElementType.PoiLabel);\n    assert(textElement.layoutStyle !== undefined);\n    assert(textElement.bounds !== undefined);\n\n    switch (hAlign) {\n        case HorizontalAlignment.Right:\n            offset.x = -textElement.xOffset;\n            break;\n        default:\n            offset.x = textElement.xOffset;\n            break;\n    }\n\n    switch (vAlign) {\n        case VerticalAlignment.Below:\n            offset.y = -textElement.yOffset;\n            break;\n        case VerticalAlignment.Above:\n            offset.y = textElement.yOffset - textElement.bounds!.min.y;\n            break;\n        default:\n            offset.y =\n                textElement.yOffset - 0.5 * (textElement.bounds!.max.y + textElement.bounds!.min.y);\n            break;\n    }\n\n    if (textElement.poiInfo !== undefined && poiIsRenderable(textElement.poiInfo)) {\n        assert(textElement.poiInfo.computedWidth !== undefined);\n        assert(textElement.poiInfo.computedHeight !== undefined);\n\n        offset.x += textElement.poiInfo.computedWidth! * (0.5 + hAlign);\n        offset.y += textElement.poiInfo.computedHeight! * (0.5 + vAlign);\n    }\n\n    offset.multiplyScalar(scale);\n    return offset;\n}\n\nconst tmpBox = new THREE.Box2();\nconst tmpBoxes: THREE.Box2[] = [];\nconst tmpMeasurementParams: MeasurementParameters = {};\nconst tmpCollisionBoxes: CollisionBox[] = [];\nconst tmpCollisionBox = new CollisionBox();\nconst tmpScreenPosition = new THREE.Vector2();\nconst tmpTextOffset = new THREE.Vector2();\nconst tmp2DBox = new Math2D.Box();\nconst pointLabelMargin = new THREE.Vector2(4, 2);\n\nexport enum PlacementResult {\n    Ok,\n    Rejected,\n    Invisible\n}\n\n/**\n * Places an icon on screen.\n * @param iconRenderState The icon state.\n * @param poiInfo Icon information necessary to compute its dimensions.\n * @param screenPosition Screen position of the icon.\n * @param scaleFactor Scaling factor to apply to the icon dimensions.\n * @param screenCollisions Used to check the icon visibility and collisions.\n * @param env Current map env.\n * @returns `PlacementResult.Ok` if icon can be placed, `PlacementResult.Rejected` if there's\n * a collision, `PlacementResult.Invisible` if it's not visible.\n */\nexport function placeIcon(\n    iconRenderState: RenderState,\n    poiInfo: PoiInfo,\n    screenPosition: THREE.Vector2,\n    scaleFactor: number,\n    env: Env,\n    screenCollisions: ScreenCollisions\n): PlacementResult {\n    PoiRenderer.computeIconScreenBox(poiInfo, screenPosition, scaleFactor, env, tmp2DBox);\n    if (!screenCollisions.isVisible(tmp2DBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    const iconSpaceAvailable =\n        poiInfo.mayOverlap === true || !screenCollisions.isAllocated(tmp2DBox);\n\n    if (!iconSpaceAvailable) {\n        return iconRenderState.isVisible() ? PlacementResult.Rejected : PlacementResult.Invisible;\n    }\n    return PlacementResult.Ok;\n}\n\n/**\n * Place a point label text using single or multiple optional placements.\n *\n * @param labelState State of the point label to place.\n * @param screenPosition Position of the label in screen coordinates.\n * @param scale Scale factor to be applied to label dimensions.\n * @param isRejected Whether the label is already rejected (e.g. because its icon was rejected). If\n * `true`, text won't be checked for collision, result will be either `PlacementResult.Invisible`\n * for newly placed (upcoming) label or `PlacementResult.Rejected` if the label was persistent.\n * @param textCanvas The text canvas where the label will be placed.\n * @param screenCollisions Used to check collisions with other labels.\n * @param outScreenPosition The final label screen position after applying any offsets.\n * @param multiAnchor The parameter decides if multi-anchor placement algorithm should be\n * used, be default [[false]] meaning try to place label using current alignment settings only.\n * @returns `PlacementResult.Ok` if point __label can be placed__ at the base or any optional\n * anchor point. `PlacementResult.Rejected` if there's a collision for all placements or it's\n * __persistent label with icon rejected and text visible__. Finally `PlacementResult.Invisible`\n * if it's text is not visible at any placement position or it's __new label with text or icon__\n * __rejected__.\n */\nexport function placePointLabel(\n    labelState: TextElementState,\n    screenPosition: THREE.Vector2,\n    scale: number,\n    textCanvas: TextCanvas,\n    screenCollisions: ScreenCollisions,\n    isRejected: boolean,\n    outScreenPosition: THREE.Vector3,\n    multiAnchor: boolean = false\n): PlacementResult {\n    assert(labelState.element.layoutStyle !== undefined);\n\n    const layoutStyle = labelState.element.layoutStyle!;\n\n    // For the new labels with rejected icons we don't need to go further.\n    // Make them invisible.\n    const newLabel = !labelState.visible;\n    if (isRejected && newLabel) {\n        return PlacementResult.Invisible;\n    }\n    // For centered point labels and labels with icon rejected, do only current anchor testing.\n    // TODO: HARP-6487 Placements options should be provided from theme style definition.\n    if (\n        !multiAnchor ||\n        isRejected ||\n        (layoutStyle.verticalAlignment === VerticalAlignment.Center &&\n            layoutStyle.horizontalAlignment === HorizontalAlignment.Center)\n    ) {\n        return placePointLabelAtCurrentAnchor(\n            labelState,\n            screenPosition,\n            scale,\n            textCanvas,\n            screenCollisions,\n            isRejected,\n            false,\n            outScreenPosition\n        );\n    }\n    // Otherwise test also alternative text placements.\n    else {\n        return placePointLabelChoosingAnchor(\n            labelState,\n            screenPosition,\n            scale,\n            textCanvas,\n            screenCollisions,\n            outScreenPosition\n        );\n    }\n}\n\n/**\n * Try to place a point label text using multiple optional placements.\n *\n * @note Function should be called only for labels with icons not rejected and for text alignments\n * different then [[HorizontalAlignment.Center]] and [[VerticalAlignment.Center]].\n *\n * @param labelState State of the point label to place.\n * @param screenPosition Position of the label in screen coordinates.\n * @param scale Scale factor to be applied to label dimensions.\n * @param textCanvas The text canvas where the label will be placed.\n * @param screenCollisions Used to check collisions with other labels.\n * @param outScreenPosition The final label screen position after applying any offsets.\n * @returns `PlacementResult.Ok` if label can be placed at the base or optional anchor point,\n * `PlacementResult.Rejected` if there's a collision for all placements, `PlacementResult.Invisible`\n * if it's not visible at any placement position.\n *\n * @internal\n * @hidden\n */\nfunction placePointLabelChoosingAnchor(\n    labelState: TextElementState,\n    screenPosition: THREE.Vector2,\n    scale: number,\n    textCanvas: TextCanvas,\n    screenCollisions: ScreenCollisions,\n    outScreenPosition: THREE.Vector3\n): PlacementResult {\n    assert(labelState.element.layoutStyle !== undefined);\n\n    const label = labelState.element;\n    // Store label state - persistent or new label.\n    const persistent = labelState.visible;\n\n    // Text elements with multi-anchor placement require their own layout style.\n    // Provide private copy of label layout and attach it to current label and text canvas.\n    label.layoutStyle = label.layoutStyle!.clone();\n    textCanvas.textLayoutStyle = label.layoutStyle!;\n\n    // The current implementation does not provide placements options via theme style yet,\n    // so function tries the anchor placements from pre-defined placements arrays.\n    // TODO: HARP-6487 Placements options should be loaded from the theme.\n\n    // Start with currently set alignment settings.\n    const basePlacement = {\n        h: label.layoutStyle!.horizontalAlignment,\n        v: label.layoutStyle!.verticalAlignment\n    };\n    const placementCentered =\n        basePlacement.h === HorizontalAlignment.Center ||\n        basePlacement.v === VerticalAlignment.Center;\n    // Placements options will be read from label.layoutStyle.placements in final solution.\n    const placements = placementCentered ? anchorPlacementsCentered : anchorPlacementsCornered;\n    const placementsNum = placements.length;\n    // Find current anchor placement on the optional placements list.\n    // Index of exact match.\n    const matchIdx = placements.findIndex(p => p.h === basePlacement.h && p.v === basePlacement.v);\n    assert(matchIdx >= 0);\n    // Will be true if all text placements are invisible.\n    let allInvisible: boolean = true;\n    // Iterate all placements starting from current one.\n    for (let i = matchIdx, tryIdx = 0; tryIdx < placementsNum; ++i, ++tryIdx) {\n        const anchorPlacement = placements[i % placementsNum];\n        // Override label text alignment for measurements and leave it so if passed collisions test.\n        // NOTE: This actually writes also to:\n        // textCanvas.textLayoutStyle.verticalAlignment/horizontalAlignment.\n        // which is needed for text measurements being done on canvas.\n        label.layoutStyle!.horizontalAlignment = anchorPlacement.h;\n        label.layoutStyle!.verticalAlignment = anchorPlacement.v;\n\n        // Bounds may be already calculated for persistent label, force re-calculation for\n        // for alternative placements.\n        const basePlacementTest = tryIdx === 0;\n        // Compute label bounds, visibility or collision according to new layout settings.\n        const placementResult = placePointLabelAtCurrentAnchor(\n            labelState,\n            screenPosition,\n            scale,\n            textCanvas,\n            screenCollisions,\n            false,\n            !basePlacementTest,\n            outScreenPosition\n        );\n\n        if (basePlacementTest) {\n            assert(label.bounds !== undefined);\n            tmpPlacementPosition.copy(outScreenPosition);\n            tmpPlacementBounds.copy(label.bounds!);\n        }\n        // Check the text allocation\n        if (placementResult === PlacementResult.Invisible) {\n            // Persistent label out of screen or the new label that is colliding - next iteration.\n            continue;\n        } else {\n            // This placement is visible, but surely colliding.\n            allInvisible = false;\n        }\n\n        // If text rejected (label collides), proceed to test further placements.\n        if (placementResult === PlacementResult.Rejected) {\n            continue;\n        }\n\n        // Glyphs arrangement have been changed remove text buffer object and apply\n        // new text layout to the label.\n        if (i !== 0) {\n            label.textBufferObject = undefined;\n        }\n        // Proper placement found.\n        return PlacementResult.Ok;\n    }\n    // Revert recent screen position.\n    outScreenPosition.copy(tmpPlacementPosition);\n    label.bounds!.copy(tmpPlacementBounds);\n\n    // No placement found - revert back the original alignment.\n    label.layoutStyle!.horizontalAlignment = basePlacement.h;\n    label.layoutStyle!.verticalAlignment = basePlacement.v;\n\n    return allInvisible\n        ? // All text's placements out of the screen.\n          PlacementResult.Invisible\n        : persistent\n        ? // All placements are either colliding or out of screen for persistent label.\n          PlacementResult.Rejected\n        : // No placement found for the new label.\n          PlacementResult.Invisible;\n}\n\n/**\n * Places a point label on a specified text canvas using the alignment (anchor) currently set.\n *\n * @param labelState State of the point label to place.\n * @param screenPosition Position of the label in screen coordinates.\n * @param scale Scale factor to be applied to label dimensions.\n * @param isRejected Whether the label is already rejected (e.g. because its icon was rejected). If\n * `true`, text won't be checked for collision, result will be either `PlacementResult.Invisible` or\n * `PlacementResult.Rejected`.\n * @param textCanvas The text canvas where the label will be placed.\n * @param screenCollisions Used to check collisions with other labels.\n * @param forceMeasurement Set to true if you need label bounds invalidation (recalculation), this\n * may be required due to text layout or render style changes.\n * @param outScreenPosition The final label screen position after applying any offsets.\n * @returns `PlacementResult.Ok` if point label can be placed, `PlacementResult.Rejected` if there's\n * a collision, `PlacementResult.Invisible` if it's not visible.\n *\n * @internal\n * @hidden\n */\nfunction placePointLabelAtCurrentAnchor(\n    labelState: TextElementState,\n    screenPosition: THREE.Vector2,\n    scale: number,\n    textCanvas: TextCanvas,\n    screenCollisions: ScreenCollisions,\n    isRejected: boolean,\n    forceMeasurement: boolean,\n    outScreenPosition: THREE.Vector3\n): PlacementResult {\n    const label = labelState.element;\n    assert(label.glyphs !== undefined);\n    assert(label.layoutStyle !== undefined);\n\n    const measureText = label.bounds === undefined || forceMeasurement;\n    if (label.bounds === undefined) {\n        label.bounds = new THREE.Box2();\n    }\n\n    if (measureText) {\n        // Setup measurements parameters for textCanvas.measureText().\n        tmpMeasurementParams.outputCharacterBounds = undefined;\n        tmpMeasurementParams.path = undefined;\n        tmpMeasurementParams.pathOverflow = false;\n        tmpMeasurementParams.letterCaseArray = label.glyphCaseArray!;\n        // Compute label bounds according to layout settings.\n        textCanvas.measureText(label.glyphs!, label.bounds, tmpMeasurementParams);\n    }\n\n    // Compute text offset from the anchor point\n    const hAlign = label.layoutStyle!.horizontalAlignment;\n    const vAlign = label.layoutStyle!.verticalAlignment;\n    const textOffset = computePointTextOffset(label, hAlign, vAlign, scale, tmpTextOffset);\n    textOffset.add(screenPosition);\n    tmpBox.copy(label.bounds!);\n    tmpBox.min.multiplyScalar(scale);\n    tmpBox.max.multiplyScalar(scale);\n    // Add margin after scaling, this ensures the margin is consistent across all\n    // labels - regardless of distance scaling (or any other) factor.\n    // TODO: Make the margin configurable\n    tmpBox.expandByVector(pointLabelMargin);\n    tmpBox.translate(textOffset);\n    tmp2DBox.set(\n        tmpBox.min.x,\n        tmpBox.min.y,\n        tmpBox.max.x - tmpBox.min.x,\n        tmpBox.max.y - tmpBox.min.y\n    );\n\n    // Update output screen position.\n    outScreenPosition.set(textOffset.x, textOffset.y, labelState.renderDistance);\n\n    // Check the text visibility if invisible finish immediately\n    // regardless of the persistence state - no fading required.\n    if (!screenCollisions.isVisible(tmp2DBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    const persistent = labelState.visible;\n    // Check if icon's label was already rejected.\n    if (isRejected) {\n        // Allows to fade out persistent label and simply ignore new one.\n        // NOTE:\n        // It might be changed if we would like to render text without icon (at border, etc.).\n        return persistent ? PlacementResult.Rejected : PlacementResult.Invisible;\n    }\n    // Check label's text collision.\n    if (!label.textMayOverlap && screenCollisions.isAllocated(tmp2DBox)) {\n        // Allows to fade persistent and ignore new label.\n        return persistent ? PlacementResult.Rejected : PlacementResult.Invisible;\n    }\n\n    // Don't allocate space for rejected text. When zooming, this allows placement of a\n    // lower priority text element that was displaced by a higher priority one (not\n    // present in the new zoom level) before an even lower priority one takes the space.\n    // Otherwise the lowest priority text will fade in and back out.\n    // TODO: Add a unit test for this scenario.\n    if (label.textReservesSpace) {\n        screenCollisions.allocate(tmp2DBox);\n    }\n\n    return PlacementResult.Ok;\n}\n\n/**\n * Places a path label along a given path on a specified text canvas.\n * @param labelState The state of the path label to place.\n * @param textPath The text path along which the label will be placed.\n * @param screenPosition Position of the label in screen coordinates.\n * @param textCanvas The text canvas where the label will be placed.\n * @param screenCollisions Used to check collisions with other labels.\n * @returns `PlacementResult.Ok` if path label can be placed, `PlacementResult.Rejected` if there's\n * a collision or text doesn't fit into path, `PlacementResult.Invisible` if it's not visible.\n */\nexport function placePathLabel(\n    labelState: TextElementState,\n    textPath: THREE.Path,\n    screenPosition: THREE.Vector2,\n    textCanvas: TextCanvas,\n    screenCollisions: ScreenCollisions\n): PlacementResult {\n    // Recalculate the text bounds for this path label. If measurement fails, the whole\n    // label doesn't fit the path and should be discarded.\n    tmpMeasurementParams.path = textPath;\n    tmpMeasurementParams.outputCharacterBounds = tmpBoxes;\n    tmpMeasurementParams.letterCaseArray = labelState.element.glyphCaseArray!;\n\n    // TODO: HARP-7648. TextCanvas.measureText does the placement as in TextCanvas.addText but\n    // without storing the result. If the measurement succeeds, the placement work is done\n    // twice.\n    // This could be done in one step (e.g measureAndAddText). Collision test could be injected\n    // in the middle as a function.\n    if (!textCanvas.measureText(labelState.element.glyphs!, tmpBox, tmpMeasurementParams)) {\n        return PlacementResult.Rejected;\n    }\n\n    // Coarse collision check.\n    tmpCollisionBox.copy(tmpBox.translate(screenPosition));\n    if (!screenCollisions.isVisible(tmpCollisionBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    let checkGlyphCollision = false;\n    let candidateBoxes: IBox[] | undefined;\n    if (!labelState.element.textMayOverlap) {\n        candidateBoxes = screenCollisions.search(tmpCollisionBox);\n        checkGlyphCollision = candidateBoxes.length > 0;\n    }\n\n    const checkGlyphVisible = !screenCollisions.isFullyVisible(tmpCollisionBox);\n\n    // Perform per-character collision checks.\n    tmpCollisionBoxes.length = tmpBoxes.length;\n    for (let i = 0; i < tmpBoxes.length; ++i) {\n        const glyphBox = tmpBoxes[i].translate(screenPosition);\n        let collisionBox = tmpCollisionBoxes[i];\n        if (collisionBox === undefined) {\n            collisionBox = new CollisionBox(glyphBox);\n            tmpCollisionBoxes[i] = collisionBox;\n        } else {\n            collisionBox.copy(glyphBox);\n        }\n        if (checkGlyphVisible && !screenCollisions.isVisible(collisionBox)) {\n            return PlacementResult.Invisible;\n        }\n\n        if (\n            checkGlyphCollision &&\n            screenCollisions.intersectsDetails(collisionBox, candidateBoxes!)\n        ) {\n            return PlacementResult.Rejected;\n        }\n    }\n    // Allocate collision info if needed.\n    if (labelState.element.textReservesSpace) {\n        const collisionBox = new DetailedCollisionBox(tmpCollisionBox, tmpCollisionBoxes.slice());\n        tmpCollisionBoxes.length = 0;\n        screenCollisions.allocate(collisionBox);\n    }\n    return PlacementResult.Ok;\n}\n\n/**\n * Check if a given path label is too small to be rendered.\n * @param textElement The text element to check.\n * @param screenProjector Used to project coordinates from world to screen space.\n * @param outScreenPoints Label path projected to screen space.\n * @returns `true` if label is too small, `false` otherwise.\n */\nexport function isPathLabelTooSmall(\n    textElement: TextElement,\n    screenProjector: ScreenProjector,\n    outScreenPoints: THREE.Vector2[]\n): boolean {\n    assert(textElement.type === TextElementType.PathLabel);\n\n    // Get the screen points that define the label's segments and create a path with\n    // them.\n    outScreenPoints.length = 0;\n    let anyPointVisible = false;\n\n    for (const pt of textElement.points as THREE.Vector3[]) {\n        // Skip invisible points at the beginning of the path.\n        const screenPoint = anyPointVisible\n            ? screenProjector.project(pt, tmpScreenPosition)\n            : screenProjector.projectOnScreen(pt, tmpScreenPosition);\n        if (screenPoint === undefined) {\n            continue;\n        }\n        anyPointVisible = true;\n\n        outScreenPoints.push(tmpScreenPosition.clone());\n    }\n\n    // TODO: (HARP-3515)\n    //      The rendering of a path label that contains just a single point that is not\n    //      visible is impossible, which is problematic with long paths.\n    //      Fix: Skip/clip the invisible points at beginning and end of the path to get\n    //      the visible part of the path.\n\n    // If not a single point is visible, skip the path\n    if (!anyPointVisible) {\n        return true;\n    }\n\n    // Check/guess if the screen box can hold a string of that length. It is important\n    // to guess that value without measuring the font first to save time.\n    const minScreenSpace = textElement.text.length * MIN_AVERAGE_CHAR_WIDTH;\n\n    tmpBox.setFromPoints(outScreenPoints);\n    const boxDiagonalSq = tmpBox.max.sub(tmpBox.min).lengthSq();\n\n    if (boxDiagonalSq < minScreenSpace * minScreenSpace) {\n        textElement.dbgPathTooSmall = true;\n        return true;\n    }\n\n    return false;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, getPropertyValue, ImageTexture } from \"@here/harp-datasource-protocol\";\nimport { IconMaterial } from \"@here/harp-materials\";\nimport { MemoryUsage, TextCanvas } from \"@here/harp-text-canvas\";\nimport { assert, LoggerManager, Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { ColorCache } from \"../ColorCache\";\nimport { ImageItem } from \"../image/Image\";\nimport { MapView } from \"../MapView\";\nimport { ScreenCollisions } from \"../ScreenCollisions\";\nimport { PoiInfo, TextElement } from \"../text/TextElement\";\nimport { BoxBuffer } from \"./BoxBuffer\";\nimport { IconTexture } from \"./Poi\";\n\nconst logger = LoggerManager.instance.create(\"PoiRenderer\");\n\nconst INVALID_RENDER_BATCH = -1;\n\nconst tempPos = new THREE.Vector3(0);\n\n/**\n * The `PoiRenderBufferBatch` contains the geometry and the material for all POIs that share the\n * same icon image ([[ImageTexture]]). If the image is the same, all the objects in this batch can\n * share the same material, which makes them renderable in the same draw call, whatever the number\n * of actual objects (WebGL limits apply!).\n *\n * There is a `PoiRenderBufferBatch` for every icon in a texture atlas, since the size of the icon\n * in the atlas as well as the texture coordinates are specified in the `PoiRenderBufferBatch`.\n */\nclass PoiRenderBufferBatch {\n    color: THREE.Color = ColorCache.instance.getColor(\"#000000\");\n\n    boxBuffer: BoxBuffer | undefined;\n\n    private m_material?: THREE.Material | THREE.Material[];\n\n    /**\n     * Create the `PoiRenderBufferBatch`.\n     *\n     * @param mapView The [[MapView]] instance.\n     * @param scene The three.js scene to add the POIs to.\n     * @param imageItem The icon that will have his material shared.\n     * @param renderOrder RenderOrder of the batch geometry's [[Mesh]].\n     */\n    constructor(\n        readonly mapView: MapView,\n        readonly scene: THREE.Scene,\n        readonly imageItem: ImageItem,\n        readonly renderOrder: number\n    ) {}\n\n    /**\n     * Initialize with the [[ImageTexture]]. Loads the image and sets up the icon size, the texture\n     * coordinates and material of the batch. Since image loading is done asynchronously, this\n     * batch cannot be rendered right away. MapView#update is being triggered if it loaded\n     * successfully.\n     */\n    init() {\n        if (this.boxBuffer === undefined) {\n            this.setup();\n        }\n    }\n\n    /**\n     * Clean the `PoiRenderBufferBatch`, remove all icon boxes. Called before starting a new frame.\n     */\n    reset(): void {\n        if (this.boxBuffer === undefined) {\n            this.init();\n        }\n        this.boxBuffer!.reset();\n    }\n\n    /**\n     * Update the geometry with all the added boxes during the frame.\n     */\n    update(): void {\n        if (this.boxBuffer === undefined) {\n            this.init();\n        }\n        this.boxBuffer!.updateBufferGeometry();\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the\n     * `PoiRenderBufferBatch`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderBufferBatch`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        if (this.boxBuffer !== undefined) {\n            this.boxBuffer.updateMemoryUsage(info);\n        }\n    }\n\n    /**\n     * Setup texture and material for the batch.\n     */\n    private setup() {\n        // Enable trilinear filtering to reduce flickering due to distance scaling\n        const trilinear = true;\n\n        // Texture images should be generated with premultiplied alpha\n        const premultipliedAlpha = true;\n\n        const iconTexture = new IconTexture(this.imageItem);\n        const texture = new THREE.Texture(\n            iconTexture.image.imageData as any,\n            THREE.UVMapping,\n            undefined,\n            undefined,\n            trilinear ? THREE.LinearFilter : THREE.NearestFilter,\n            trilinear ? THREE.LinearMipMapLinearFilter : THREE.NearestFilter,\n            THREE.RGBAFormat\n        );\n        texture.needsUpdate = true;\n        texture.premultiplyAlpha = premultipliedAlpha;\n        // Generate mipmaps for distance scaling of icon\n        // TODO: Implement custom mip map generation if support for texture atlas\n        // with icons that are not power of two or have different sizes is necessary.\n        texture.generateMipmaps = true;\n        texture.flipY = false;\n\n        this.m_material = new IconMaterial({\n            map: texture\n        });\n\n        this.boxBuffer = new BoxBuffer(this.m_material, this.renderOrder);\n\n        const mesh = this.boxBuffer.mesh;\n\n        mesh.frustumCulled = false;\n\n        this.scene.add(mesh);\n\n        this.mapView.update();\n    }\n}\n\n/**\n * Contains all [[PoiRenderBufferBatch]]es. Selects (and initializes) the correct batch for a POI.\n */\nclass PoiRenderBuffer {\n    readonly batches: PoiRenderBufferBatch[] = [];\n    private readonly m_batchMap: Map<string, Map<number, number>> = new Map();\n\n    /**\n     * Create the `PoiRenderBuffer`.\n     *\n     * @param mapView The [[MapView]] to be rendered to.\n     * @param textCanvas The [[TextCanvas]] to which scenes this `PoiRenderBuffer` adds geometry to.\n     * The actual scene a [[TextElement]] is added to is specified by the renderOrder of the\n     * [[TextElement]].\n     */\n    constructor(readonly mapView: MapView, readonly textCanvas: TextCanvas) {}\n\n    /**\n     * Register the POI and prepare the [[PoiRenderBufferBatch]] for the POI at first usage.\n     *\n     * @param poiInfo Describes the POI icon.\n     */\n    registerPoi(poiInfo: PoiInfo): number {\n        const { imageItem, imageTexture, imageTextureName } = poiInfo;\n\n        if (\n            imageItem === undefined ||\n            imageTextureName === undefined ||\n            imageTexture === undefined\n        ) {\n            // No image -> invisible -> ignore\n            return INVALID_RENDER_BATCH;\n        }\n\n        const renderOrder = poiInfo.renderOrder!;\n\n        // There is a batch for every ImageDefinition, which could be a texture atlas with many\n        // ImageTextures in it.\n        const batchKey = imageTexture.image;\n        let batchSet = this.m_batchMap.get(batchKey);\n        let mappedIndex: number | undefined;\n        let bufferBatch: PoiRenderBufferBatch;\n\n        if (batchSet === undefined) {\n            batchSet = new Map<number, number>();\n            this.m_batchMap.set(batchKey, batchSet);\n        }\n\n        mappedIndex = batchSet.get(renderOrder);\n        if (mappedIndex !== undefined) {\n            return mappedIndex;\n        }\n        mappedIndex = this.batches.length;\n\n        let layer = this.textCanvas.getLayer(renderOrder);\n        if (layer === undefined) {\n            this.textCanvas.addText(\"\", tempPos, { layer: renderOrder });\n            layer = this.textCanvas.getLayer(renderOrder);\n        }\n\n        bufferBatch = new PoiRenderBufferBatch(\n            this.mapView,\n            layer!.storage.scene,\n            imageItem,\n            renderOrder\n        );\n        bufferBatch.init();\n        batchSet.set(renderOrder, mappedIndex);\n        this.batches.push(bufferBatch);\n        return mappedIndex;\n    }\n\n    /**\n     * Render a POI image at the specified location.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenBox Box to render icon into in 2D coordinates.\n     * @param viewDistance Box's distance to camera.\n     * @param opacity Opacity of icon to allow fade in/out.\n     */\n    addPoi(poiInfo: PoiInfo, screenBox: Math2D.Box, viewDistance: number, opacity: number): number {\n        const poiRegistered =\n            poiInfo.poiRenderBatch !== undefined && poiInfo.poiRenderBatch !== INVALID_RENDER_BATCH;\n        const batchIndex = poiRegistered ? poiInfo.poiRenderBatch! : this.registerPoi(poiInfo);\n        if (batchIndex === INVALID_RENDER_BATCH) {\n            return INVALID_RENDER_BATCH;\n        }\n        assert(batchIndex >= 0);\n        assert(batchIndex < this.batches.length);\n        assert(poiInfo.uvBox !== undefined);\n\n        if (this.batches[batchIndex].boxBuffer === undefined) {\n            this.batches[batchIndex].init();\n        }\n\n        this.batches[batchIndex].boxBuffer!.addBox(\n            screenBox,\n            poiInfo.uvBox!,\n            this.batches[batchIndex].color,\n            opacity,\n            viewDistance,\n            poiInfo.textElement\n        );\n\n        return batchIndex;\n    }\n\n    /**\n     * Retrieve the [[PoiRenderBufferBatch]] from the array at the specified index. May be invalid\n     * if the imageTexture could not be found\n     *\n     * @param index Index into batch array.\n     */\n    getBatch(index: number): PoiRenderBufferBatch | undefined {\n        if (index >= 0) {\n            assert(index < this.batches.length);\n            return this.batches[index];\n        }\n        // may be invalid if the imageTexture could not be found\n        return undefined;\n    }\n\n    /**\n     * Reset all batches, removing all content from the [[PoiRenderBufferBatch]]es. Called at the\n     * beginning of a frame before the POIs are placed.\n     */\n    reset(): void {\n        for (const batch of this.batches) {\n            batch.reset();\n        }\n    }\n\n    /**\n     * Update the geometry of all [[PoiRenderBufferBatch]]es. Called before rendering.\n     */\n    update(): void {\n        for (const batch of this.batches) {\n            batch.update();\n        }\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[PoiInfo]]s are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickTextElements(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void\n    ) {\n        for (const batch of this.batches) {\n            if (batch.boxBuffer === undefined) {\n                batch.init();\n            }\n            batch.boxBuffer!.pickBoxes(screenPosition, pickCallback, batch.imageItem.imageData);\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `PoiRenderBuffer`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderBuffer`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        for (const batch of this.batches) {\n            if (batch.imageItem.imageData !== undefined) {\n                const imageBytes =\n                    batch.imageItem.imageData.width * batch.imageItem.imageData.height * 4;\n                info.heapSize += imageBytes;\n                info.gpuSize += imageBytes;\n            }\n            if (batch.boxBuffer !== undefined) {\n                batch.boxBuffer.updateMemoryUsage(info);\n            }\n        }\n    }\n}\n\n/**\n * Manage POI rendering. Uses a [[PoiRenderBuffer]] to actually create the geometry that is being\n * rendered.\n */\nexport class PoiRenderer {\n    /**\n     * Compute screen box for icon. It is required that `prepareRender` has been successfully called\n     * before `computeScreenBox` may be called.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenPosition Position on screen (2D).\n     * @param scale Scale to apply to icon.\n     * @param env Current zoom level.\n     * @param screenBox Box that will be used to store the result.\n     * @returns The computed screen box for the icon.\n     */\n    static computeIconScreenBox(\n        poiInfo: PoiInfo,\n        screenPosition: THREE.Vector2,\n        scale: number,\n        env: Env,\n        /* out */ screenBox: Math2D.Box = new Math2D.Box()\n    ): Math2D.Box {\n        assert(poiInfo.poiRenderBatch !== undefined);\n        assert(poiInfo.poiRenderBatch !== INVALID_RENDER_BATCH);\n\n        const width = poiInfo.computedWidth! * scale;\n        const height = poiInfo.computedHeight! * scale;\n        const technique = poiInfo.technique;\n        const iconXOffset = getPropertyValue(technique.iconXOffset, env);\n        const iconYOffset = getPropertyValue(technique.iconYOffset, env);\n\n        const centerX =\n            screenPosition.x + (typeof iconXOffset === \"number\" ? iconXOffset : 0) * scale;\n        const centerY =\n            screenPosition.y + (typeof iconYOffset === \"number\" ? iconYOffset : 0) * scale;\n\n        screenBox.x = centerX - width / 2;\n        screenBox.y = centerY - height / 2;\n        screenBox.w = width;\n        screenBox.h = height;\n\n        return screenBox;\n    }\n    // keep track of the missing textures, but only warn once\n    private static m_missingTextureName: Map<string, boolean> = new Map();\n\n    // the render buffer containing all batches, one batch per texture/material.\n    private m_renderBuffer: PoiRenderBuffer;\n\n    // temporary variable to save allocations\n    private m_tempScreenBox = new Math2D.Box();\n\n    /**\n     * Create the `PoiRenderer` for the specified [[MapView]].\n     *\n     * @param mapView The MapView to be rendered to.\n     * @param textCanvas The [[TextCanvas]] this `PoiRenderer` is associated to. POIs are added to\n     * the different layers of this [[TextCanvas]] based on renderOrder.\n     */\n    constructor(readonly mapView: MapView, readonly textCanvas: TextCanvas) {\n        this.m_renderBuffer = new PoiRenderBuffer(mapView, textCanvas);\n    }\n\n    /**\n     * Prepare the POI for rendering, and determine which `poiRenderBatch` should be used. If a\n     * `poiRenderBatch` is assigned, the POI is ready to be rendered.\n     *\n     * @param pointLabel TextElement with PoiInfo for rendering the POI icon.\n     * @param env TODO! The current zoomLevel level of [[MapView]]\n     *\n     * @returns `True` if the space is not already allocated by another object (text label or POI)\n     */\n    prepareRender(pointLabel: TextElement, env: Env): boolean {\n        const poiInfo = pointLabel.poiInfo;\n        if (poiInfo === undefined) {\n            return false;\n        }\n        if (poiInfo.poiRenderBatch === undefined) {\n            this.preparePoi(pointLabel, env);\n        }\n        return poiInfo.poiRenderBatch !== undefined;\n    }\n\n    /**\n     * Reset all batches, removing all content from the [[PoiRenderBuffer]]es. Called at the\n     * beginning of a frame before the POIs are placed.\n     */\n    reset(): void {\n        this.m_renderBuffer.reset();\n    }\n\n    /**\n     * Render the icon.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenPosition Position on screen (2D):\n     * @param screenCollisions Object handling the collision checks for screen-aligned 2D boxes.\n     * @param viewDistance Box's distance to camera.\n     * @param scale Scaling factor to apply to text and icon.\n     * @param allocateScreenSpace If `true` screen space will be allocated for the icon.\n     * @param opacity Opacity of icon to allow fade in/out.\n     */\n    renderPoi(\n        poiInfo: PoiInfo,\n        screenPosition: THREE.Vector2,\n        screenCollisions: ScreenCollisions,\n        viewDistance: number,\n        scale: number,\n        allocateScreenSpace: boolean,\n        opacity: number,\n        env: Env\n    ): void {\n        assert(poiInfo.poiRenderBatch !== undefined);\n\n        PoiRenderer.computeIconScreenBox(poiInfo, screenPosition, scale, env, this.m_tempScreenBox);\n\n        if (allocateScreenSpace) {\n            screenCollisions.allocate(this.m_tempScreenBox);\n        }\n\n        this.m_renderBuffer.addPoi(poiInfo, this.m_tempScreenBox, viewDistance, opacity);\n    }\n\n    /**\n     * Update the geometry of all [[PoiRenderBuffer]]es. Called before rendering.\n     */\n    update(): void {\n        this.m_renderBuffer.update();\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[PoiInfo]]s are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickTextElements(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void\n    ) {\n        this.m_renderBuffer.pickTextElements(screenPosition, pickCallback);\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `PoiRenderer`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderer`.\n     */\n    getMemoryUsage(info: MemoryUsage) {\n        this.m_renderBuffer.updateMemoryUsage(info);\n    }\n\n    /**\n     * Register the POI at the [[PoiRenderBuffer]] which may require some setup, for example loading\n     * of the actual image.\n     */\n    private preparePoi(pointLabel: TextElement, env: Env): void {\n        const poiInfo = pointLabel.poiInfo;\n        if (poiInfo === undefined || !pointLabel.visible) {\n            return;\n        }\n\n        if (poiInfo.poiRenderBatch !== undefined || poiInfo.isValid === false) {\n            // Already set up, nothing to be done here.\n            return;\n        }\n\n        if (poiInfo.poiTableName !== undefined) {\n            if (this.mapView.poiManager.updatePoiFromPoiTable(pointLabel)) {\n                if (!pointLabel.visible) {\n                    // PoiTable set this POI to not visible.\n                    return;\n                }\n            } else {\n                // PoiTable has not been loaded, but is required to determine visibility.\n                return;\n            }\n        }\n\n        const imageTextureName = poiInfo.imageTextureName;\n\n        const imageTexture = this.mapView.poiManager.getImageTexture(imageTextureName);\n        if (imageTexture === undefined) {\n            // Warn about a missing texture, but only once.\n            if (PoiRenderer.m_missingTextureName.get(imageTextureName) === undefined) {\n                PoiRenderer.m_missingTextureName.set(imageTextureName, true);\n                logger.error(`preparePoi: No imageTexture with name '${imageTextureName}' found`);\n            }\n            poiInfo.isValid = false;\n            return;\n        }\n\n        const imageDefinition = imageTexture.image;\n\n        let imageItem = this.mapView.imageCache.findImageByName(imageDefinition);\n        if (imageItem === undefined) {\n            logger.error(`init: No imageItem found with name '${imageDefinition}'`);\n            poiInfo.isValid = false;\n            return;\n        }\n\n        if (!imageItem.loaded) {\n            if (imageItem.loadingPromise !== undefined) {\n                // already being loaded, will be rendered once available\n                return;\n            }\n            const imageUrl = imageItem.url;\n            const loading = this.mapView.imageCache.loadImage(imageItem);\n            if (loading instanceof Promise) {\n                loading\n                    .then(loadedImageItem => {\n                        if (loadedImageItem === undefined) {\n                            logger.error(`preparePoi: Failed to load imageItem: '${imageUrl}`);\n                            return;\n                        }\n                        this.setupPoiInfo(poiInfo, imageTexture, loadedImageItem, env);\n                    })\n                    .catch(error => {\n                        logger.error(`preparePoi: Failed to load imageItem: '${imageUrl}`, error);\n                        poiInfo.isValid = false;\n                    });\n                return;\n            } else {\n                imageItem = loading;\n            }\n        }\n\n        this.setupPoiInfo(poiInfo, imageTexture, imageItem, env);\n    }\n\n    /**\n     * Setup texture and material for the batch.\n     *\n     * @param poiInfo [[PoiInfo]] to initialize.\n     * @param imageTexture Shared [[ImageTexture]], defines used area in atlas.\n     * @param imageItem Shared [[ImageItem]], contains cached image for texture.\n     * @param env The current zoom level of [[MapView]]\n     */\n    private setupPoiInfo(\n        poiInfo: PoiInfo,\n        imageTexture: ImageTexture,\n        imageItem: ImageItem,\n        env: Env\n    ) {\n        assert(poiInfo.uvBox === undefined);\n\n        if (imageItem === undefined || imageItem.imageData === undefined) {\n            logger.error(\"setupPoiInfo: No imageItem/imageData found\");\n            // invalid render batch number\n            poiInfo.poiRenderBatch = INVALID_RENDER_BATCH;\n            poiInfo.isValid = false;\n            return;\n        }\n\n        const technique = poiInfo.technique;\n\n        const imageWidth = imageItem.imageData.width;\n        const imageHeight = imageItem.imageData.height;\n\n        const iconWidth = imageTexture.width !== undefined ? imageTexture.width : imageWidth;\n        const iconHeight = imageTexture.height !== undefined ? imageTexture.height : imageHeight;\n\n        let minS = 0;\n        let maxS = 1;\n        let minT = 0;\n        let maxT = 1;\n\n        let iconScaleH = technique.iconScale !== undefined ? technique.iconScale : 1;\n        let iconScaleV = technique.iconScale !== undefined ? technique.iconScale : 1;\n\n        const width = imageTexture.width !== undefined ? imageTexture.width : imageWidth;\n        const height = imageTexture.height !== undefined ? imageTexture.height : imageHeight;\n        const xOffset = imageTexture.xOffset !== undefined ? imageTexture.xOffset : 0;\n        const yOffset = imageTexture.yOffset !== undefined ? imageTexture.yOffset : 0;\n\n        minS = xOffset / imageWidth;\n        maxS = (xOffset + width) / imageWidth;\n\n        const flipY = false;\n        if (flipY) {\n            minT = (imageHeight - yOffset) / imageHeight;\n            maxT = (imageHeight - yOffset - height) / imageHeight;\n        } else {\n            minT = yOffset / imageHeight;\n            maxT = (yOffset + height) / imageHeight;\n        }\n\n        // minS += 0.5 / imageWidth;\n        // maxS += 0.5 / imageWidth;\n        // minT += 0.5 / imageHeight;\n        // maxT += 0.5 / imageHeight;\n\n        // By default, iconScaleV should be equal to iconScaleH, whatever is set in the style.\n        const screenWidth = getPropertyValue(technique.screenWidth, env);\n        if (screenWidth !== undefined) {\n            iconScaleV = iconScaleH = screenWidth / iconWidth;\n        }\n\n        const screenHeight = getPropertyValue(technique.screenHeight, env);\n        if (screenHeight !== undefined) {\n            iconScaleV = screenHeight / iconHeight;\n            if (screenWidth !== undefined) {\n                iconScaleH = iconScaleV;\n            }\n        }\n\n        // compute stored values in imageTexture\n        poiInfo.computedWidth = iconWidth * iconScaleH;\n        poiInfo.computedHeight = iconHeight * iconScaleV;\n        poiInfo.uvBox = {\n            s0: minS,\n            t0: maxT,\n            s1: maxS,\n            t1: minT\n        };\n        poiInfo.imageItem = imageItem;\n        poiInfo.imageTexture = imageTexture;\n        poiInfo.poiRenderBatch = this.m_renderBuffer.registerPoi(poiInfo);\n        poiInfo.isValid = true;\n\n        assert(poiInfo.poiRenderBatch !== undefined);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ImageItem } from \"../image/Image\";\n\nimport * as THREE from \"three\";\n\nexport type ExtendedMesh = THREE.Mesh & {\n    /**\n     * Distance of this object from the Tile's center.\n     */\n    displacement?: THREE.Vector3;\n};\n\n/**\n * This enum defines the possible origin points for an image.\n */\nexport enum ImageOrigin {\n    TopLeft,\n    BottomLeft\n}\n\n/**\n * Available rendering parameters for the POIs.\n */\nexport interface ImageOptions {\n    /**\n     * The point of origin of the texture as supported in [[ImageOrigin]].\n     */\n    origin?: ImageOrigin;\n\n    /**\n     * Missing Typedoc\n     */\n    width: number;\n\n    /**\n     * Missing Typedoc\n     */\n    height: number;\n\n    /**\n     * Missing Typedoc\n     */\n    xOffset?: number;\n\n    /**\n     * Missing Typedoc\n     */\n    yOffset?: number;\n\n    /**\n     * Missing Typedoc\n     */\n    flipH?: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    flipV?: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    opacity?: number;\n}\n\n/**\n * Defines a part (or all) of an image as a texture.\n */\nexport class IconTexture {\n    /**\n     * The constructor of an `IconTexture`.\n     *\n     * @param image An [[ImageItem]] instance.\n     * @param options The rendering parameters.\n     */\n    constructor(public image: ImageItem) {}\n}\n\n// export enum TextAlign {\n//     Center,\n//     Left,\n//     Right,\n\n//     // ??? expands lines to have same length.\n//     Justify\n// }\n\n// export interface LayoutOptions {\n//     paddingH?: number;\n//     paddingV: number;\n//     transFormCenterX?: number;\n//     transFormCenterY?: number;\n//     rotation?: number;\n//     /** Set to `true` to enlarge the box after rotation to include all rotated corners. */\n//     rotationEnlargesBox: boolean;\n// }\n\n// export interface TextOptions {\n//     bgColor?: THREE.Color;\n//     wrapWords?: boolean;\n//     maxNumLines?: number;\n//     maxWidth?: number;\n//     /** Replace with ellipsis if wider than maxWidth. */\n//     addEllipsis?: boolean;\n//     /** Handle right-to-left texts */\n//     isRightToLeft?: boolean;\n\n//     textAlignH?: AlignH; // = AlignH.Center;\n//     textAlignV?: AlignV; // = AlignV.Center;\n// }\n\n// export class IconLabel {\n//     constructor(text: string, options: LayoutOptions | TextOptions) {}\n\n//     /**\n//      * Setup a box with size and padding.\n//      *\n//      * @param box Target box to set up.\n//      */\n//     getBox(box: THREE.Box2) {}\n\n//     /**\n//      * Compute width and height from text and font.\n//      */\n//     computeBox() {}\n\n//     /**\n//      * Generate the glyphs and keep them in a buffer. Generates a fixed layout.\n//      */\n//     prepareRendering() {}\n// }\n\n// export enum AlignH {\n//     Center,\n//     Left,\n//     Right\n// }\n\n// export enum AlignV {\n//     Center,\n//     Top,\n//     Bottom\n// }\n\n// export enum AnchorTarget {\n//     /** Anchor point relative to Icon */\n//     Icon,\n//     /** Anchor point is transform center of icon */\n//     IconCenter,\n//     /** Anchor point relative to Icon including padding */\n//     IconBox,\n//     /** Anchor point relative to Label */\n//     Label,\n//     /** Anchor point relative to combination of Icon and Label */\n//     Box\n// }\n\n// export class AnchorPosition {\n//     targetH: AnchorTarget = AnchorTarget.Icon;\n//     targetV: AnchorTarget = AnchorTarget.Icon;\n//     alignH: AlignH = AlignH.Center;\n//     alignV: AlignV = AlignV.Center;\n// }\n\n// export enum IconPinMode {\n//     /** Pinned down, anchor point is the same at all angles. */\n//     PinDown,\n//     /**\n//      * Icon stands up. \"StreetLevel\"-style. The anchor point moves to the bottom of the icon when\n//      * the view direction gets parallel to the ground.\n//      */\n//     StandUp\n// }\n\n// export interface IconScaleOptions {\n//     depthScale?: boolean;\n//     minimumScale?: number;\n// }\n\n// export interface IconOptions {\n//     useScreenSpace?: boolean; // = true\n//     priority?: number;\n\n//     scaleOptions?: IconScaleOptions;\n\n//     /** Optional offset in screen space */\n//     screenOffsetX?: number;\n//     screenOffsetY?: number;\n\n//     /** Optional 3D height above terrain. */\n//     heightAboveGround?: number;\n// }\n\n// export class SimplePoiIcon {\n//     constructor(\n//         readonly pos: THREE.Vector3,\n//         readonly image ?: IconTexture,\n//         options ?: IconOptions\n//     ) { }\n// }\n\n// export class PoiIcon {\n//     constructor(\n//         readonly pos: THREE.Vector3,\n//         readonly image?: IconTexture,\n//         readonly label?: IconLabel,\n//         options?: IconOptions\n//     ) {}\n// }\n\n// export interface PoiOptions {\n//     featureId?: number;\n//     minZoomLevel?: number;\n// }\n\n// export class SimplePoi {\n//     private m_featureId?: number;\n//     private m_minZoomLevel: number = 0;\n\n//     constructor(readonly icon: SimplePoiIcon, options?: PoiOptions) {\n//         if (options !== undefined) {\n//             this.m_featureId = options.featureId;\n//             this.m_minZoomLevel = options.minZoomLevel !== undefined ? options.minZoomLevel : 0;\n//         }\n//     }\n// }\n\n// export class Poi {\n//     /** store multiple icons, one for every LOD */\n//     private m_icons: PoiIcon[] = [];\n//     private m_lod = 0;\n//     private m_featureId?: number;\n//     private m_minZoomLevel: number = 0;\n\n//     constructor(icon: PoiIcon, options?: PoiOptions) {\n//         this.m_icons.push(icon);\n\n//         if (options !== undefined) {\n//             this.m_featureId = options.featureId;\n//             this.m_minZoomLevel = options.minZoomLevel !== undefined ? options.minZoomLevel : 0;\n//         }\n//     }\n\n//     icon(): PoiIcon | undefined {\n//         return this.m_icons[this.m_lod];\n//     }\n\n//     /**\n//      * Select the level of detail that should be used.\n//      *\n//      * @param levelOfDetail Level of detail to render.\n//      */\n//     selectIcon(levelOfDetail: number) {}\n// }\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager, Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { debugContext } from \"./DebugContext\";\n\ndeclare const require: any;\n\n// tslint:disable-next-line:no-var-requires\nconst RBush = require(\"rbush\");\n\nconst logger = LoggerManager.instance.create(\"ScreenCollissions\");\n\nexport interface IBox {\n    minX: number;\n    minY: number;\n    maxX: number;\n    maxY: number;\n}\n\nexport class CollisionBox extends Math2D.Box implements IBox {\n    constructor(box?: Math2D.Box | THREE.Box2 | IBox) {\n        super();\n        if (box !== undefined) {\n            this.copy(box);\n        }\n    }\n\n    copy(box: Math2D.Box | THREE.Box2 | IBox): CollisionBox {\n        if (box instanceof Math2D.Box) {\n            this.set(box.x, box.y, box.w, box.h);\n        } else if (box instanceof THREE.Box2) {\n            this.set(box.min.x, box.min.y, box.max.x - box.min.x, box.max.y - box.min.y);\n        } else {\n            this.set(box.minX, box.minY, box.maxX - box.minX, box.maxY - box.minY);\n        }\n        return this;\n    }\n    get minX(): number {\n        return this.x;\n    }\n    set minX(minX: number) {\n        this.x = minX;\n    }\n    get maxX(): number {\n        return this.x + this.w;\n    }\n    set maxX(maxX: number) {\n        this.w = maxX - this.x;\n    }\n    get minY(): number {\n        return this.y;\n    }\n    set minY(minY: number) {\n        this.y = minY;\n    }\n    get maxY(): number {\n        return this.y + this.h;\n    }\n    set maxY(maxY: number) {\n        this.h = maxY - this.y;\n    }\n}\n\n/**\n * Collision box with additional boxes defining tighter bounds for the enclosed feature\n * (e.g.glyph bounds for text).\n */\nexport class DetailedCollisionBox extends CollisionBox {\n    constructor(box: Math2D.Box | THREE.Box2 | IBox, readonly detailBoxes: CollisionBox[]) {\n        super(box);\n    }\n}\n\nexport interface LineWithBound extends IBox {\n    line: THREE.Line3;\n}\n\nexport function isLineWithBound(box: IBox): box is LineWithBound {\n    return (box as LineWithBound).line !== undefined;\n}\n\nconst tmpCollisionBox = new CollisionBox();\n\nexport class ScreenCollisions {\n    /** The screen bounding box. */\n    readonly screenBounds = new Math2D.Box();\n\n    /** Tree of allocated bounds. */\n\n    private rtree = new RBush();\n\n    /**\n     * Constructs a new ScreenCollisions object.\n     */\n    constructor() {\n        //\n    }\n\n    /**\n     * Resets the list of allocated screen bounds.\n     */\n    reset() {\n        this.rtree.clear();\n    }\n\n    /**\n     * Updates the screen bounds that are used to check if bounding boxes are visible.\n     *\n     * @param width The width of the container.\n     * @param height The height of the container.\n     */\n    update(width: number, height: number) {\n        this.screenBounds.set(width / -2, height / -2, width, height);\n        this.reset();\n    }\n\n    /**\n     * Marks the region of the screen intersecting with the given bounding box as allocated.\n     *\n     * @param bounds The bounding box in NDC scaled coordinates (i.e. top left is -width/2,\n     * -height/2)\n     */\n    allocate(bounds: Math2D.Box | CollisionBox | DetailedCollisionBox): void {\n        const bbox = !(bounds instanceof CollisionBox) ? new CollisionBox(bounds) : bounds;\n        this.rtree.insert(bbox);\n    }\n\n    /**\n     * Inserts the given bounds into the rtree.\n     *\n     * @param bounds The bounding boxes (the bounding boxes must be in the space returned from the\n     * ScreenProjector.project method).\n     */\n    allocateIBoxes(bounds: IBox[]) {\n        this.rtree.load(bounds);\n    }\n\n    /**\n     * Search for all bounds in the tree intersecting with the given box.\n     * @param box The box used for the search.\n     * @returns An array of all IBoxes intersecting with the given box.\n     */\n    search(box: CollisionBox): IBox[] {\n        return this.rtree.search(box);\n    }\n\n    /**\n     * Checks if the given bounding box is already allocated.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isAllocated(bounds: Math2D.Box | CollisionBox): boolean {\n        const collisionBox = bounds instanceof CollisionBox ? bounds : tmpCollisionBox.copy(bounds);\n        const results = this.search(collisionBox);\n        return this.intersectsDetails(collisionBox, results);\n    }\n\n    /**\n     * Checks if the given screen bounds intersects with the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isVisible(bounds: Math2D.Box): boolean {\n        return this.screenBounds.intersects(bounds);\n    }\n\n    /**\n     * Checks if the given screen bounds is contained within the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isFullyVisible(bounds: Math2D.Box): boolean {\n        return this.screenBounds.containsBox(bounds);\n    }\n\n    /**\n     * Test whether a given [[CollisionBox]] intersects with any of the details in the specified\n     * [[IBox]]es.\n     *\n     * @param testBox The box to test for intersection.\n     * @param boxes The candidate boxes the test box may intersect with. It's assumed that the\n     * global bounds of these boxes intersect with the given test box.\n     * @returns `true` if any intersection found.\n     */\n    intersectsDetails(testBox: CollisionBox, boxes: IBox[]): boolean {\n        for (const box of boxes) {\n            if (box instanceof DetailedCollisionBox) {\n                for (const detailBox of box.detailBoxes) {\n                    if (detailBox.intersects(testBox)) {\n                        return true;\n                    }\n                }\n            } else if (isLineWithBound(box)) {\n                const boundedLine = box as LineWithBound;\n                if (this.intersectsLine(testBox, boundedLine)) {\n                    return true;\n                }\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Computes the intersection between the supplied CollisionBox and the LineWithBound.\n     * @note The [[CollisionBox]] is in Screen Bounds space, whereas the line must be\n     * in Screen Coordinate space\n     */\n    private intersectsLine(bbox: CollisionBox, boundedLine: LineWithBound): boolean {\n        const line = boundedLine.line;\n\n        // Note, these aren't normalized, but it doesn't matter, we are just interested\n        // in the sign.\n        const lineXDiffTransformed = line.end.x - line.start.x;\n\n        // Sign of bottom left, bottom right, top left and top right corners.\n        let signBL: number;\n        let signBR: number;\n        let signTL: number;\n        let signTR: number;\n        if (lineXDiffTransformed !== 0) {\n            const lineYDiffTransformed = line.end.y - line.start.y;\n            const normalX = lineYDiffTransformed;\n            const normalY = -lineXDiffTransformed;\n            const D = line.start.y - (lineYDiffTransformed / lineXDiffTransformed) * line.start.x;\n\n            signBL = Math.sign(bbox.minX * normalX + (bbox.minY - D) * normalY);\n            signBR = Math.sign(bbox.maxX * normalX + (bbox.minY - D) * normalY);\n            signTL = Math.sign(bbox.minX * normalX + (bbox.maxY - D) * normalY);\n            signTR = Math.sign(bbox.maxX * normalX + (bbox.maxY - D) * normalY);\n        } else {\n            signBL = Math.sign(bbox.minX - line.start.x);\n            signBR = Math.sign(bbox.maxX - line.start.x);\n            signTL = Math.sign(bbox.minX - line.start.x);\n            signTR = Math.sign(bbox.maxX - line.start.x);\n        }\n        return signBL !== signBR || signBL !== signTL || signBL !== signTR;\n    }\n}\n\n/**\n * @hidden\n *\n * Shows requests for screen space during labelling in an HTML canvas, which should be sized like\n * the actual map canvas. It can be placed on top of the map canvas to show exactly which requests\n * for screen space were done.\n *\n * Also logs statistics.\n */\nexport class ScreenCollisionsDebug extends ScreenCollisions {\n    /** 2D rendering context. */\n    private m_renderContext: CanvasRenderingContext2D | null = null;\n    private m_renderingEnabled = false;\n    private m_numAllocations = 0;\n    private m_numSuccessfulTests = 0;\n    private m_numFailedTests = 0;\n    private m_numSuccessfulVisibilityTests = 0;\n    private m_numFailedVisibilityTests = 0;\n\n    /**\n     * Constructs a new ScreenCollisions object which renders its state to a 2D canvas.\n     */\n    constructor(debugCanvas: HTMLCanvasElement) {\n        super();\n\n        if (debugCanvas !== undefined && debugCanvas !== null) {\n            this.m_renderContext = debugCanvas.getContext(\"2d\");\n        }\n    }\n\n    /**\n     * Resets the list of allocated bounds and clears the debug canvas.\n     * @override\n     */\n    reset() {\n        super.reset();\n\n        this.m_numAllocations = 0;\n        this.m_numSuccessfulTests = 0;\n        this.m_numFailedTests = 0;\n        this.m_numSuccessfulVisibilityTests = 0;\n        this.m_numFailedVisibilityTests = 0;\n    }\n\n    /**\n     * Updates the screen bounds used to check if bounding boxes are visible.\n     *\n     * @param width The width of the container.\n     * @param height The height of the container.\n     * @override\n     */\n    update(width: number, height: number) {\n        if (this.m_renderingEnabled) {\n            logger.log(\n                // tslint:disable-next-line: max-line-length\n                `Allocations: ${this.m_numAllocations} Successful Tests: ${this.m_numSuccessfulTests} Failed Tests: ${this.m_numFailedTests}  Successful Visibility Tests: ${this.m_numSuccessfulVisibilityTests}  Failed Visibility Tests: ${this.m_numFailedVisibilityTests} `\n            );\n        }\n\n        super.update(width, height);\n\n        if (this.m_renderContext !== null) {\n            this.m_renderContext.canvas.width = width;\n            this.m_renderContext.canvas.height = height;\n        }\n\n        // activate in the browser with:\n        // window.__debugContext.setValue(\"DEBUG_SCREEN_COLLISIONS\", true)\n        this.m_renderingEnabled = debugContext.getValue(\"DEBUG_SCREEN_COLLISIONS\");\n    }\n\n    /**\n     * Marks the region of the screen intersecting with the given bounding box as allocated.\n     *\n     * @param bounds the bounding box in world coordinates.\n     * @override\n     */\n    allocate(bounds: Math2D.Box | CollisionBox): void {\n        super.allocate(bounds);\n\n        this.m_numAllocations++;\n\n        if (this.m_renderingEnabled && this.m_renderContext !== null) {\n            this.m_renderContext.strokeStyle = \"#6666ff\";\n            this.m_renderContext.strokeRect(\n                bounds.x - this.screenBounds.x,\n                this.screenBounds.y + this.screenBounds.h - bounds.y - 1,\n                bounds.w,\n                -bounds.h\n            );\n        }\n    }\n\n    /** @override */\n    allocateIBoxes(boundsArray: IBox[]) {\n        for (const bounds of boundsArray) {\n            this.m_numAllocations++;\n\n            if (this.m_renderingEnabled && this.m_renderContext !== null) {\n                this.m_renderContext.strokeStyle = \"#aa2222\";\n                this.m_renderContext.strokeRect(\n                    bounds.minX - this.screenBounds.x,\n                    this.screenBounds.y + this.screenBounds.h - bounds.minY - 1,\n                    bounds.maxX - bounds.minX,\n                    -(bounds.maxY - bounds.minY)\n                );\n            }\n        }\n        super.allocateIBoxes(boundsArray);\n    }\n\n    /** @override */\n    intersectsDetails(testBox: CollisionBox, boxes: IBox[]): boolean {\n        const collisionFound = super.intersectsDetails(testBox, boxes);\n        if (this.m_renderingEnabled && this.m_renderContext !== null) {\n            const offset = collisionFound ? 2 : 0;\n            this.m_renderContext.strokeStyle = collisionFound ? \"#FF0000\" : \"#00ff00\";\n            this.m_renderContext.strokeRect(\n                testBox.x - this.screenBounds.x - offset,\n                this.screenBounds.y + this.screenBounds.h - testBox.y - 1 + offset,\n                testBox.w + 2 * offset,\n                -testBox.h - 2 * offset\n            );\n        }\n\n        if (collisionFound) {\n            this.m_numFailedTests++;\n        } else {\n            this.m_numSuccessfulTests++;\n        }\n\n        return collisionFound;\n    }\n\n    /**\n     * Checks if the given screen bounds intersects with the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     * @override\n     */\n    isVisible(bounds: Math2D.Box): boolean {\n        const visible = super.isVisible(bounds);\n\n        if (visible) {\n            this.m_numSuccessfulVisibilityTests++;\n        } else {\n            this.m_numFailedVisibilityTests++;\n        }\n        return visible;\n    }\n}\n","!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(t=t||self).RBush=i()}(this,function(){\"use strict\";function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h)}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1)}}(t,r,e||0,a||t.length-1,h||n)}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return-1}function a(t,i){h(t,0,t.children.length,i,t)}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h)}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h))}i=e.pop()}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return!1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return!0;n.push(e)}}i=n.pop()}return!1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0])}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1))}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s)}i=h||i.children[0]}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i)},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p)}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r)},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a)}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s)}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t)},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox)},r});\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    ColorUtils,\n    getPropertyValue,\n    LineMarkerTechnique,\n    MapEnv,\n    PoiTechnique,\n    TextStyleDefinition,\n    TextTechnique,\n    Theme\n} from \"@here/harp-datasource-protocol\";\nimport {\n    DefaultTextStyle,\n    FontStyle,\n    FontUnit,\n    FontVariant,\n    HorizontalAlignment,\n    TextCanvas,\n    TextLayoutParameters,\n    TextLayoutStyle,\n    TextRenderParameters,\n    TextRenderStyle,\n    VerticalAlignment,\n    WrappingMode\n} from \"@here/harp-text-canvas\";\nimport { getOptionValue, LoggerManager } from \"@here/harp-utils\";\nimport { ColorCache } from \"../ColorCache\";\nimport { evaluateColorProperty } from \"../DecodedTileHelpers\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { Tile } from \"../Tile\";\nimport { TextCanvasRenderer } from \"./TextCanvasRenderer\";\n\nconst logger = LoggerManager.instance.create(\"TextStyleCache\");\n\nconst defaultTextRenderStyle = new TextRenderStyle({\n    fontSize: {\n        unit: FontUnit.Pixel,\n        size: 32,\n        backgroundSize: 8\n    },\n    color: ColorCache.instance.getColor(\"#6d7477\"),\n    opacity: 1.0,\n    backgroundColor: ColorCache.instance.getColor(\"#f7fbfd\"),\n    backgroundOpacity: 0.5\n});\n\nconst defaultTextLayoutStyle = new TextLayoutStyle({\n    verticalAlignment: VerticalAlignment.Center,\n    horizontalAlignment: HorizontalAlignment.Center\n});\n\nconst DEFAULT_STYLE_NAME = \"default\";\n\n/**\n * [[TextElementsRenderer]] representation of a [[Theme]]'s TextStyle.\n */\nexport interface TextElementStyle {\n    name: string;\n    fontCatalog: string;\n    renderParams: TextRenderParameters;\n    layoutParams: TextLayoutParameters;\n    textCanvas?: TextCanvas;\n    poiRenderer?: PoiRenderer;\n}\n\nexport class TextStyleCache {\n    private m_textStyles: Map<string, TextElementStyle> = new Map();\n    private m_defaultStyle: TextElementStyle = {\n        name: DEFAULT_STYLE_NAME,\n        fontCatalog: \"\",\n        renderParams: defaultTextRenderStyle.params,\n        layoutParams: defaultTextLayoutStyle.params\n    };\n\n    constructor(private m_theme: Theme) {}\n\n    initializeDefaultTextElementStyle(defaultFontCatalogName: string) {\n        if (this.m_theme.textStyles === undefined) {\n            this.m_theme.textStyles = [];\n        }\n        const styles = this.m_theme.textStyles;\n\n        const themedDefaultStyle = styles.find(style => style.name === DEFAULT_STYLE_NAME);\n        if (themedDefaultStyle !== undefined) {\n            this.m_defaultStyle = this.createTextElementStyle(\n                themedDefaultStyle,\n                DEFAULT_STYLE_NAME\n            );\n        } else if (this.m_theme.defaultTextStyle !== undefined) {\n            this.m_defaultStyle = this.createTextElementStyle(\n                this.m_theme.defaultTextStyle,\n                DEFAULT_STYLE_NAME\n            );\n        } else if (styles.length > 0) {\n            this.m_defaultStyle = this.createTextElementStyle(styles[0], DEFAULT_STYLE_NAME);\n        }\n        this.m_defaultStyle.fontCatalog = defaultFontCatalogName;\n    }\n\n    initializeTextElementStyles(\n        defaultPoiRenderer: PoiRenderer,\n        defaultTextCanvas: TextCanvas,\n        textRenderers: TextCanvasRenderer[]\n    ) {\n        // Initialize default text style.\n        if (this.m_defaultStyle.fontCatalog !== undefined) {\n            const styledTextRenderer = textRenderers.find(\n                textRenderer => textRenderer.fontCatalog === this.m_defaultStyle.fontCatalog\n            );\n            this.m_defaultStyle.textCanvas =\n                styledTextRenderer !== undefined ? styledTextRenderer.textCanvas : undefined;\n            this.m_defaultStyle.poiRenderer =\n                styledTextRenderer !== undefined ? styledTextRenderer.poiRenderer : undefined;\n        }\n        if (this.m_defaultStyle.textCanvas === undefined) {\n            if (this.m_defaultStyle.fontCatalog !== undefined) {\n                logger.warn(\n                    `FontCatalog '${this.m_defaultStyle.fontCatalog}' set in TextStyle '${\n                        this.m_defaultStyle.name\n                    }' not found, using default fontCatalog(${\n                        defaultTextCanvas!.fontCatalog.name\n                    }).`\n                );\n            }\n            this.m_defaultStyle.textCanvas = defaultTextCanvas;\n            this.m_defaultStyle.poiRenderer = defaultPoiRenderer;\n        }\n\n        // Initialize theme text styles.\n        this.m_theme.textStyles!.forEach(element => {\n            this.m_textStyles.set(\n                element.name!,\n                this.createTextElementStyle(element, element.name!)\n            );\n        });\n        // tslint:disable-next-line:no-unused-variable\n        for (const [, style] of this.m_textStyles) {\n            if (style.textCanvas === undefined) {\n                if (style.fontCatalog !== undefined) {\n                    const styledTextRenderer = textRenderers.find(\n                        textRenderer => textRenderer.fontCatalog === style.fontCatalog\n                    );\n                    style.textCanvas =\n                        styledTextRenderer !== undefined\n                            ? styledTextRenderer.textCanvas\n                            : undefined;\n                    style.poiRenderer =\n                        styledTextRenderer !== undefined\n                            ? styledTextRenderer.poiRenderer\n                            : undefined;\n                }\n                if (style.textCanvas === undefined) {\n                    if (style.fontCatalog !== undefined) {\n                        logger.warn(\n                            `FontCatalog '${style.fontCatalog}' set in TextStyle '${\n                                style.name\n                            }' not found, using default fontCatalog(${\n                                defaultTextCanvas!.fontCatalog.name\n                            }).`\n                        );\n                    }\n                    style.textCanvas = defaultTextCanvas;\n                    style.poiRenderer = defaultPoiRenderer;\n                }\n            }\n        }\n    }\n\n    /**\n     * Retrieves a [[TextElementStyle]] for [[Theme]]'s [[TextStyle]] id.\n     */\n    getTextElementStyle(styleId?: string): TextElementStyle {\n        let result;\n        if (styleId === undefined) {\n            result = this.m_defaultStyle;\n        } else {\n            result = this.m_textStyles.get(styleId);\n            if (result === undefined) {\n                result = this.m_defaultStyle;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Gets the appropriate [[TextRenderStyle]] to use for a label. Depends heavily on the label's\n     * [[Technique]] and the current zoomLevel.\n     */\n    createRenderStyle(\n        tile: Tile,\n        technique: TextTechnique | PoiTechnique | LineMarkerTechnique\n    ): TextRenderStyle {\n        const mapView = tile.mapView;\n        const zoomLevel = mapView.zoomLevel;\n        const discreteZoomLevel = Math.floor(zoomLevel);\n\n        // Environment with $zoom forced to integer to achieve stable interpolated values.\n        const discreteZoomEnv = new MapEnv({ $zoom: discreteZoomLevel }, mapView.env);\n\n        const defaultRenderParams = this.m_defaultStyle.renderParams;\n\n        // Sets opacity to 1.0 if default and technique attribute are undefined.\n        const defaultOpacity = getOptionValue(defaultRenderParams.opacity, 1.0);\n        // Interpolate opacity but only on discreet zoom levels (step interpolation).\n        let opacity = getPropertyValue(\n            getOptionValue(technique.opacity, defaultOpacity),\n            discreteZoomEnv\n        );\n\n        let color: THREE.Color | undefined;\n        // Store color (RGB) in cache and multiply opacity value with the color alpha channel.\n        if (technique.color !== undefined) {\n            let hexColor = evaluateColorProperty(technique.color, discreteZoomEnv);\n            if (hexColor !== undefined) {\n                if (ColorUtils.hasAlphaInHex(hexColor)) {\n                    const alpha = ColorUtils.getAlphaFromHex(hexColor);\n                    opacity = opacity * alpha;\n                    hexColor = ColorUtils.removeAlphaFromHex(hexColor);\n                }\n                color = ColorCache.instance.getColor(hexColor);\n            }\n        }\n\n        // Sets background size to 0.0 if default and technique attribute is undefined.\n        const defaultBackgroundSize = getOptionValue(\n            defaultRenderParams.fontSize!.backgroundSize,\n            0\n        );\n        const backgroundSize = getPropertyValue(\n            getOptionValue(technique.backgroundSize, defaultBackgroundSize),\n            discreteZoomEnv\n        );\n\n        const hasBackgroundDefined =\n            technique.backgroundColor !== undefined &&\n            technique.backgroundSize !== undefined &&\n            backgroundSize > 0;\n\n        // Sets background opacity to 1.0 if default and technique value is undefined while\n        // background size and color is specified, otherwise set value in default render\n        // params or 0.0 if neither set. Makes label opaque when backgroundColor and\n        // backgroundSize are set.\n        const defaultBackgroundOpacity = getOptionValue(defaultRenderParams.backgroundOpacity, 0.0);\n        let backgroundOpacity = getPropertyValue(\n            getOptionValue(\n                technique.backgroundOpacity,\n                hasBackgroundDefined ? 1.0 : defaultBackgroundOpacity\n            ),\n            discreteZoomEnv\n        );\n\n        let backgroundColor: THREE.Color | undefined;\n        // Store background color (RGB) in cache and multiply backgroundOpacity by its alpha.\n        if (technique.backgroundColor !== undefined) {\n            let hexBgColor = evaluateColorProperty(technique.backgroundColor, discreteZoomEnv);\n            if (hexBgColor !== undefined) {\n                if (ColorUtils.hasAlphaInHex(hexBgColor)) {\n                    const alpha = ColorUtils.getAlphaFromHex(hexBgColor);\n                    backgroundOpacity = backgroundOpacity * alpha;\n                    hexBgColor = ColorUtils.removeAlphaFromHex(hexBgColor);\n                }\n                backgroundColor = ColorCache.instance.getColor(hexBgColor);\n            }\n        }\n\n        const renderParams = {\n            fontName: getOptionValue(technique.fontName, defaultRenderParams.fontName),\n            fontSize: {\n                unit: FontUnit.Pixel,\n                size: getPropertyValue(\n                    getOptionValue(technique.size, defaultRenderParams.fontSize!.size),\n                    discreteZoomEnv\n                ),\n                backgroundSize\n            },\n            fontStyle:\n                technique.fontStyle === \"Regular\" ||\n                technique.fontStyle === \"Bold\" ||\n                technique.fontStyle === \"Italic\" ||\n                technique.fontStyle === \"BoldItalic\"\n                    ? FontStyle[technique.fontStyle]\n                    : defaultRenderParams.fontStyle,\n            fontVariant:\n                technique.fontVariant === \"Regular\" ||\n                technique.fontVariant === \"AllCaps\" ||\n                technique.fontVariant === \"SmallCaps\"\n                    ? FontVariant[technique.fontVariant]\n                    : defaultRenderParams.fontVariant,\n            rotation: getOptionValue(technique.rotation, defaultRenderParams.rotation),\n            color: getOptionValue(\n                color,\n                getOptionValue(defaultRenderParams.color, DefaultTextStyle.DEFAULT_COLOR)\n            ),\n            backgroundColor: getOptionValue(\n                backgroundColor,\n                getOptionValue(\n                    defaultRenderParams.backgroundColor,\n                    DefaultTextStyle.DEFAULT_BACKGROUND_COLOR\n                )\n            ),\n            opacity,\n            backgroundOpacity\n        };\n\n        const themeRenderParams = this.getTextElementStyle(technique.style).renderParams;\n        const renderStyle = new TextRenderStyle({\n            ...themeRenderParams,\n            ...renderParams\n        });\n\n        return renderStyle;\n    }\n\n    /**\n     * Create the appropriate [[TextRenderStyle]] to use for a label. Depends heavily on the label's\n     * [[Technique]] and the current zoomLevel.\n     *\n     * @param tile The [[Tile]] to process.\n     * @param technique Label's technique.\n     */\n    createLayoutStyle(\n        tile: Tile,\n        technique: TextTechnique | PoiTechnique | LineMarkerTechnique\n    ): TextLayoutStyle {\n        const mapView = tile.mapView;\n        const floorZoomLevel = Math.floor(tile.mapView.zoomLevel);\n\n        const discreteZoomEnv = new MapEnv({ $zoom: floorZoomLevel }, mapView.env);\n\n        const defaultLayoutParams = this.m_defaultStyle.layoutParams;\n\n        const hAlignment = getPropertyValue(technique.hAlignment, discreteZoomEnv) as\n            | string\n            | undefined;\n        const vAlignment = getPropertyValue(technique.vAlignment, discreteZoomEnv) as\n            | string\n            | undefined;\n        const wrapping = getPropertyValue(technique.wrappingMode, discreteZoomEnv) as\n            | string\n            | undefined;\n\n        const horizontalAlignment: HorizontalAlignment | undefined =\n            hAlignment === \"Left\" || hAlignment === \"Center\" || hAlignment === \"Right\"\n                ? HorizontalAlignment[hAlignment]\n                : defaultLayoutParams.horizontalAlignment;\n\n        const verticalAlignment: VerticalAlignment | undefined =\n            vAlignment === \"Above\" || vAlignment === \"Center\" || vAlignment === \"Below\"\n                ? VerticalAlignment[vAlignment]\n                : defaultLayoutParams.verticalAlignment;\n\n        const layoutParams = {\n            tracking:\n                getPropertyValue(technique.tracking, discreteZoomEnv) ??\n                defaultLayoutParams.tracking,\n            leading:\n                getPropertyValue(technique.leading, discreteZoomEnv) ?? defaultLayoutParams.leading,\n            maxLines:\n                getPropertyValue(technique.maxLines, discreteZoomEnv) ??\n                defaultLayoutParams.maxLines,\n            lineWidth:\n                getPropertyValue(technique.lineWidth, discreteZoomEnv) ??\n                defaultLayoutParams.lineWidth,\n            canvasRotation:\n                getPropertyValue(technique.canvasRotation, discreteZoomEnv) ??\n                defaultLayoutParams.canvasRotation,\n            lineRotation:\n                getPropertyValue(technique.lineRotation, discreteZoomEnv) ??\n                defaultLayoutParams.lineRotation,\n            wrappingMode:\n                wrapping === \"None\" || wrapping === \"Character\" || wrapping === \"Word\"\n                    ? WrappingMode[wrapping]\n                    : defaultLayoutParams.wrappingMode,\n            horizontalAlignment,\n            verticalAlignment\n        };\n\n        const themeLayoutParams = this.getTextElementStyle(technique.style);\n        const layoutStyle = new TextLayoutStyle({\n            ...themeLayoutParams,\n            ...layoutParams\n        });\n\n        return layoutStyle;\n    }\n\n    private createTextElementStyle(\n        style: TextStyleDefinition,\n        styleName: string\n    ): TextElementStyle {\n        return {\n            name: styleName,\n            fontCatalog: getOptionValue(style.fontCatalogName, this.m_defaultStyle.fontCatalog),\n            renderParams: {\n                fontName: style.fontName,\n                fontSize: {\n                    unit: FontUnit.Pixel,\n                    size: 32,\n                    backgroundSize: style.backgroundSize || 8\n                },\n                fontStyle:\n                    style.fontStyle === \"Regular\" ||\n                    style.fontStyle === \"Bold\" ||\n                    style.fontStyle === \"Italic\" ||\n                    style.fontStyle === \"BoldItalic\"\n                        ? FontStyle[style.fontStyle]\n                        : undefined,\n                fontVariant:\n                    style.fontVariant === \"Regular\" ||\n                    style.fontVariant === \"AllCaps\" ||\n                    style.fontVariant === \"SmallCaps\"\n                        ? FontVariant[style.fontVariant]\n                        : undefined,\n                rotation: style.rotation,\n                color:\n                    style.color !== undefined\n                        ? ColorCache.instance.getColor(style.color)\n                        : undefined,\n                backgroundColor:\n                    style.backgroundColor !== undefined\n                        ? ColorCache.instance.getColor(style.backgroundColor)\n                        : undefined,\n                opacity: style.opacity,\n                backgroundOpacity: style.backgroundOpacity\n            },\n            layoutParams: {\n                tracking: style.tracking,\n                leading: style.leading,\n                maxLines: style.maxLines,\n                lineWidth: style.lineWidth,\n                canvasRotation: style.canvasRotation,\n                lineRotation: style.lineRotation,\n                wrappingMode:\n                    style.wrappingMode === \"None\" ||\n                    style.wrappingMode === \"Character\" ||\n                    style.wrappingMode === \"Word\"\n                        ? WrappingMode[style.wrappingMode]\n                        : WrappingMode.Word,\n                verticalAlignment:\n                    style.vAlignment === \"Above\" ||\n                    style.vAlignment === \"Center\" ||\n                    style.vAlignment === \"Below\"\n                        ? VerticalAlignment[style.vAlignment]\n                        : VerticalAlignment.Center,\n                horizontalAlignment:\n                    style.hAlignment === \"Left\" ||\n                    style.hAlignment === \"Center\" ||\n                    style.hAlignment === \"Right\"\n                        ? HorizontalAlignment[style.hAlignment]\n                        : HorizontalAlignment.Center\n            }\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * A mesh that can store multiple versions of a geometry with differents level of detail.\n * The rendered level of detail can be adapted during runtime.\n * @internal\n * @hidden\n */\nexport class LodMesh extends THREE.Mesh {\n    private m_geometries: Array<THREE.Geometry | THREE.BufferGeometry> | undefined;\n\n    /**\n     * Creates a [[LodMesh]] with given geometries and materials\n     * @param geometries A list of geometries with different levels of detail\n     * @param material Material for the mesh\n     */\n    constructor(\n        geometries?: Array<THREE.Geometry | THREE.BufferGeometry>,\n        material?: THREE.Material | THREE.Material[] | undefined\n    ) {\n        super(undefined, material);\n\n        this.geometries = geometries;\n    }\n\n    /**\n     * Update geometries of mesh\n     */\n    set geometries(geometries: Array<THREE.Geometry | THREE.BufferGeometry> | undefined) {\n        // dispose previous geometries\n        if (this.m_geometries !== geometries) {\n            this.disposeGeometries();\n        }\n\n        this.m_geometries = geometries;\n        if (this.geometries && this.m_geometries!.length > 0) {\n            this.geometry = this.m_geometries![0];\n        }\n    }\n\n    /**\n     * Get geometries of mesh\n     */\n    get geometries() {\n        return this.m_geometries;\n    }\n\n    /**\n     * Change the rendered level of detail of the mesh\n     * @param level The level of detail (index of the geometry in the list).\n     */\n    setLevelOfDetail(level: number): void {\n        if (!this.m_geometries || this.m_geometries.length === 0) {\n            return;\n        }\n        level = THREE.MathUtils.clamp(level, 0, this.m_geometries.length - 1);\n\n        this.geometry = this.m_geometries[level];\n    }\n\n    /**\n     * Dispose all geometries of mesh\n     */\n    private disposeGeometries(): void {\n        if (this.m_geometries) {\n            for (const geometry of this.m_geometries!) {\n                geometry.dispose();\n            }\n        }\n        this.geometry.dispose();\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3 } from \"three\";\n\nimport { MapView } from \"./MapView\";\nimport { MapViewUtils } from \"./Utils\";\n\n/**\n * The default value for camera movement throttling, in milliseconds.\n */\nconst DEFAULT_THROTTLING_TIMEOUT = 300;\n\n/**\n * The `CameraMovementDetector` class checks for changes in camera position and orientation, to\n * detect continuous movements without the animation mode activated in [[MapView]]. If the\n * interaction is not continuous enough, you can use a throttling timer to reduce the number of\n * callbacks.\n */\nexport class CameraMovementDetector {\n    private m_lastAttitude?: MapViewUtils.Attitude;\n    private m_lastCameraPos = new Vector3();\n    private m_newCameraPos = new Vector3();\n    private m_cameraMovedLastFrame: boolean | undefined;\n    private m_throttlingTimerId?: number = undefined;\n    private m_movementDetectorDeadline: number = 0;\n\n    /**\n     * Initializes the detector with timeout value and callbacks. [[MapView]] also provides\n     * events for client code to be notified when these cues occur.\n     *\n     * @param m_throttlingTimeout The delay, in milliseconds, between the last user interaction\n     * detected and the call to `m_movementFinishedFunc`; the default is `300`.\n     * @param m_movementStartedFunc Callback function, called when the user starts interacting.\n     * @param m_movementFinishedFunc Callback function, called when the user stops interacting.\n     */\n    constructor(\n        private m_throttlingTimeout: number | undefined,\n        private m_movementStartedFunc: (() => void) | undefined,\n        private m_movementFinishedFunc: (() => void) | undefined\n    ) {\n        if (this.m_throttlingTimeout === undefined) {\n            this.m_throttlingTimeout = DEFAULT_THROTTLING_TIMEOUT;\n        }\n    }\n\n    /**\n     * Checks if the camera has moved since the last time it was checked. The\n     * `m_movementStartedFunc` is called when a movement starts. If no movement\n     * is detected, a timer for `m_movementFinishedFunc` starts.\n     *\n     * @param mapView [[Mapview]]'s position and camera are checked for modifications.\n     */\n    checkCameraMoved(mapView: MapView, now: number): boolean {\n        const newAttitude = MapViewUtils.extractAttitude(mapView, mapView.camera);\n        const newCameraPos = mapView.camera.getWorldPosition(this.m_newCameraPos);\n\n        if (this.m_lastAttitude === undefined) {\n            this.m_lastCameraPos.copy(newCameraPos);\n            this.m_lastAttitude = newAttitude;\n            return false;\n        }\n        const cameraMoved =\n            !this.m_lastCameraPos.equals(newCameraPos) ||\n            newAttitude.yaw !== this.m_lastAttitude.yaw ||\n            newAttitude.pitch !== this.m_lastAttitude.pitch ||\n            newAttitude.roll !== this.m_lastAttitude.roll;\n\n        if (cameraMoved) {\n            this.m_lastCameraPos.copy(newCameraPos);\n            this.m_lastAttitude = newAttitude;\n        }\n\n        if (cameraMoved !== this.m_cameraMovedLastFrame) {\n            if (cameraMoved) {\n                this.movementStarted();\n            }\n            this.m_cameraMovedLastFrame = cameraMoved;\n        }\n        if (cameraMoved) {\n            // Start timer\n            this.m_movementDetectorDeadline = now + this.m_throttlingTimeout!;\n            this.startMovementFinishedTimer(now);\n        }\n\n        return this.m_cameraMovedLastFrame;\n    }\n\n    /**\n     * Reset the saved camera position. Next time checkCameraMoved is called, it will return\n     * `false`.\n     */\n    clear(mapView: MapView) {\n        const newCameraPos = mapView.camera.getWorldPosition(this.m_newCameraPos);\n        this.m_lastCameraPos.set(newCameraPos.x, newCameraPos.y, newCameraPos.z);\n\n        const newAttitude = MapViewUtils.extractAttitude(mapView, mapView.camera);\n        this.m_lastAttitude = newAttitude;\n    }\n\n    /**\n     * Force change of camera position. Next time checkCameraMoved is called, it will return `true`.\n     */\n    forceMoved() {\n        this.m_lastCameraPos.set(Number.NaN, Number.NaN, Number.NaN);\n    }\n\n    /**\n     * Returns `true` if the camera of this [[MapView]] is currently moving. In this case the\n     * `m_movementFinishedFunc` is waiting to be called after the throttling timer runs out.\n     */\n    get cameraIsMoving() {\n        return this.m_throttlingTimerId !== undefined;\n    }\n\n    /**\n     * Disposes resources and kills the throttling timer.\n     */\n    dispose() {\n        this.removeMovementFinishedTimer();\n        this.m_movementStartedFunc = undefined;\n        this.m_movementFinishedFunc = undefined;\n    }\n\n    /**\n     * Returns `true` if the camera has moved in the last frame.\n     */\n    get cameraMovedLastFrame(): boolean {\n        return this.m_cameraMovedLastFrame === true;\n    }\n\n    private movementStarted() {\n        if (this.m_movementStartedFunc !== undefined) {\n            this.m_movementStartedFunc();\n        }\n    }\n\n    private movementFinished() {\n        this.removeMovementFinishedTimer();\n        if (this.m_movementFinishedFunc !== undefined) {\n            this.m_movementFinishedFunc();\n        }\n    }\n\n    private startMovementFinishedTimer(now: number) {\n        if (this.m_throttlingTimerId === undefined) {\n            const remainingTime = Math.max(0, this.m_movementDetectorDeadline - now);\n            this.m_throttlingTimerId = setTimeout(this.onDeadlineTimer, remainingTime) as any;\n        }\n    }\n\n    private onDeadlineTimer = () => {\n        this.m_throttlingTimerId = undefined;\n        const now = performance.now();\n        if (now >= this.m_movementDetectorDeadline) {\n            this.movementFinished();\n        } else {\n            this.startMovementFinishedTimer(now);\n        }\n    };\n\n    private removeMovementFinishedTimer() {\n        if (this.m_throttlingTimerId !== undefined) {\n            clearTimeout(this.m_throttlingTimerId);\n            this.m_throttlingTimerId = undefined;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport { EarthConstants, Projection, ProjectionType } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { ElevationProvider } from \"./ElevationProvider\";\nimport { MapViewUtils } from \"./Utils\";\n\nconst epsilon = 0.000001;\n\nexport interface ClipPlanesEvaluator {\n    /**\n     * Minimum elevation to be rendered, values beneath the sea level are negative.\n     */\n    minElevation: number;\n\n    /**\n     * Set maximum elevation to be rendered, values above sea level are positive.\n     */\n    maxElevation: number;\n\n    /**\n     * Compute near and far clipping planes distance.\n     *\n     * Evaluation method should be called on every frame  and camera clip planes updated.\n     * This is related to evaluator implementation and its input data, that may suddenly change\n     * such as camera position or angle, projection type or so.\n     * Some evaluators may not depend on all or even any of input objects, but to preserve\n     * compatibility with any evaluator type it is strongly recommended to update on every frame.\n     * @note The camera clipping planes (near/far properties) aren't automatically updated\n     * via #evaluateClipPlanes() call, user should do it manually if needed.\n     * @param camera The [[THREE.Camera]] in use.\n     * @param projection The geo-projection currently used for encoding geographic data.\n     * @param elevationProvider The optional elevation provider for fine tuned range calculation,\n     * taking into account terrain variability and unevenness.\n     *\n     */\n    evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges;\n}\n\n/**\n * Simplest camera clip planes evaluator, interpolates near/far planes based on ground distance.\n *\n * At general ground distance to camera along the surface normal is used as reference point for\n * planes evaluation, where near plane distance is set as fraction of this distance refereed as\n * [[nearMultiplier]]. Far plane equation has its own multiplier - [[nearFarMultiplier]],\n * which is applied to near plane and offset giving finally far plane distance.\n * This evaluator supports both planar and spherical projections, although it's behavior is\n * slightly different in each case. General algorithm sets near plane between camera and\n * ground level, while far plane is just calculated using scale and bias approach with far offset\n * and multiplier.\n * @deprecated Class contains the legacy (first and original) clip planes evaluation method, which\n * is widelly used in examples thus is still kept for backward compatibility and comparisons.\n */\nexport class InterpolatedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    readonly farMin: number;\n\n    protected m_tmpVectors: THREE.Vector3[] = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n    protected m_tmpQuaternion: THREE.Quaternion = new THREE.Quaternion();\n\n    constructor(\n        readonly nearMin: number = 0.1,\n        readonly nearMultiplier: number = 0.1,\n        readonly nearFarMultiplier = 50.0,\n        readonly farOffset = 200.0\n    ) {\n        assert(nearMin > 0);\n        assert(nearFarMultiplier >= 0);\n        assert(farOffset >= 0);\n        this.farMin = nearMin * nearFarMultiplier + farOffset;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set minElevation(elevation: number) {}\n\n    get minElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set maxElevation(elevation: number) {}\n\n    get maxElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.farMin;\n        if (projection.type === ProjectionType.Spherical) {\n            // near and far plane for a set up where\n            // the camera is looking at the center of the scene.\n            const r = EarthConstants.EQUATORIAL_RADIUS;\n            const d = camera.position.length();\n            const alpha = Math.asin(r / d);\n            // Extract X, Y, Z axes into tmp vectors array.\n            camera.matrixWorld.extractBasis(\n                this.m_tmpVectors[0],\n                this.m_tmpVectors[1],\n                this.m_tmpVectors[2]\n            );\n            // Setup quaternion based on X axis.\n            this.m_tmpQuaternion.setFromAxisAngle(this.m_tmpVectors[0], alpha);\n            // Acquire forward vector based on Z axis reversed (keep it in tmpVectors[2]).\n            const fwd = this.m_tmpVectors[2].negate();\n            // Apply quaternion rotation to forward vector, store it in tmpVectors[1].\n            const fwdRot = this.m_tmpVectors[1].copy(fwd).applyQuaternion(this.m_tmpQuaternion);\n            // Store camera position tmpVectors[0] and reference it with p.\n            const p = this.m_tmpVectors[0].copy(camera.position);\n            p.addScaledVector(fwdRot, Math.sqrt(d * d - r * r));\n            farPlane = p.sub(camera.position).dot(fwd);\n            nearPlane = Math.max(\n                this.nearMin,\n                projection.groundDistance(camera.position) * this.nearMultiplier\n            );\n        } else if (projection.type === ProjectionType.Planar) {\n            const groundDistance = projection.groundDistance(camera.position);\n            nearPlane = Math.max(this.nearMin, groundDistance * this.nearMultiplier);\n            // Will be already clamped to minFar due to clamping above.\n            farPlane = nearPlane * this.nearFarMultiplier + this.farOffset;\n        } else {\n            assert(false, \"Unsupported projection type\");\n        }\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: farPlane\n        };\n        return viewRanges;\n    }\n}\n\n/**\n * Abstract evaluator class that adds support for elevation constraints.\n *\n * Classes derived from this should implement algorithms that takes into account rendered\n * features height (elevations), such as ground plane is no more flat (or spherical), but\n * contains geometry that should be overlapped by frustum planes.\n */\nexport abstract class ElevationBasedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    private m_maxElevation: number;\n    private m_minElevation: number;\n\n    constructor(maxElevation: number, minElevation: number) {\n        assert(maxElevation >= minElevation);\n        this.m_minElevation = minElevation;\n        this.m_maxElevation = maxElevation;\n    }\n\n    abstract evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges;\n\n    /**\n     * Set maximum elevation above sea level to be rendered.\n     *\n     * @param elevation the elevation (altitude) value in world units (meters).\n     * @note If you set this exactly to the maximum rendered feature height (altitude above\n     * the sea, you may notice some flickering or even polygons disappearing related to rounding\n     * errors or depth buffer precision. In such cases increase [[nearFarMargin]] or add a little\n     * bit offset to your assumed maximum elevation.\n     * @note Reasonable values are in between (-DeadSeeDepression, MtEverestHeight>, both values\n     * are defined in [[EarthConstant]] as [[EarthConstant.MIN_ELEVATION]] and\n     * [[EarthConstant.MAX_ELEVATION]] respectively.\n     * @see minElevation for more information about precision and rounding errors.\n     */\n    set maxElevation(elevation: number) {\n        this.m_maxElevation = elevation;\n        // Min elevation should be at least equal or smaller to max elevation.\n        this.m_minElevation = Math.min(elevation, this.m_minElevation);\n    }\n\n    /**\n     * Get maximum elevation to be covered by camera frustum.\n     */\n    get maxElevation(): number {\n        return this.m_maxElevation;\n    }\n\n    /**\n     * Set minimum elevation to be rendered, values beneath the sea level are negative.\n     *\n     * @param elevation the minimum elevation (depression) in world units (meters).\n     * @note If you set this parameter to zero you may not see any features rendered if they are\n     * just below the sea level more than half of [[nearFarMargin]] assumed. Similarly if set to\n     * -100m and rendered features lays exactly in such depression, you may notice that problem.\n     * The errors usually come from projection precision loss and depth buffer nature (significant\n     * precision loss closer to far plane). Thus is such cases either increase the margin (if you\n     * are sure features are just at this elevation, or setup bigger offset for [[minElevation]].\n     * Reasonable values are between <-DeadSeaDepression, MtEverestHeight), where the first denotes\n     * lowest depression on the Earth defined as [[EarthConstants.MIN_ELEVATION]] and the second is\n     * the highest point our planet.\n     * @see https://developer.nvidia.com/content/depth-precision-visualized\n     */\n    set minElevation(elevation: number) {\n        this.m_minElevation = elevation;\n        // Max elevation should be at least equal or bigger than min elevation.\n        this.m_maxElevation = Math.max(elevation, this.m_maxElevation);\n    }\n\n    /**\n     * Get minimum elevation to be covered by camera frustum.\n     */\n    get minElevation(): number {\n        return this.m_minElevation;\n    }\n}\n\n/**\n * Top view, clip planes evaluator that computes view ranges based on ground distance and elevation.\n *\n * This evaluator supports both planar and spherical projections, although it behavior is\n * slightly different in each case. General algorithm sets near plane and far plane close\n * to ground level, but taking into account maximum and minimum elevation of features on the ground.\n *\n * @note This evaluator supports only cameras which are always looking down the ground surface\n * (top-down view) along surface normal and does not preserve correct clip planes when\n * modifying camera pitch (tilt) angle. In simple words it is suitable only for top view camera\n * settings.\n */\nexport class TopViewClipPlanesEvaluator extends ElevationBasedClipPlanesEvaluator {\n    /**\n     * Helper for reducing number of objects created at runtime.\n     */\n    protected m_tmpVectors: THREE.Vector3[] = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n    /**\n     * Helper object for reducing performance impact.\n     */\n    protected m_tmpQuaternion: THREE.Quaternion = new THREE.Quaternion();\n    private m_minimumViewRange: ViewRanges;\n\n    /**\n     * Allows to setup near/far offsets (margins), rendered geometry elevation relative to sea\n     * level as also minimum near plane and maximum far plane distance constraints.\n     * It is strongly recommended to set some reasonable [[nearFarMargin]] (offset) between near\n     * and far planes to avoid flickering.\n     * @param maxElevation defines near plane offset from the ground in the surface normal\n     * direction, positive values allows to render elevated terrain features (mountains,\n     * buildings). Defaults to Burj Khalifa building height.\n     * @param minElevation defines far plane offset from the ground surface, negative values moves\n     * far plane below the ground level (use it to render depressions). Default zero - sea level.\n     * @param nearMin minimum allowable near plane distance from camera, must be bigger than zero.\n     * @param nearFarMarginRatio minimum distance between near and far plane, as a ratio of average\n     * near/far plane distance, it have to be significantly bigger than zero (especially if\n     * [[maxElevation]] and [[minElevation]] are equal), otherwise you may notice flickering when\n     * rendering, or even render empty scene if frustum planes are almost equal.\n     * @param farMaxRatio maximum ratio between ground and far plane distance, allows to limit\n     * viewing distance at overall. Have to be bigger than 1.0.\n     * @note Keep in mind that this evaluator does not evaluate terrain (or building) elevation\n     * automatically, to keep such features rendered (between frustum planes) use [[minElevation]],\n     * [[maxElevation]] constraints. You may change this parameters at any time, but it requires\n     * repeating [[evaluatePlanes]] step, if your camera is moving you need to evaluate planes\n     * anyway.\n     * @note You may treat [[minElevation]] and [[maxElevation]] parameters as the maximum and\n     * minimum renderable elevation respectively along the surface normal, when camera is\n     * constantly looking downwards (top-down view). If you need [[ClipPlanesEvaluator]] for\n     * cameras that support tilt or yaw please use [[TiltViewClipPlanesEvaluator]].\n     * @note [[nearFarMaxRatio]] does not limit far plane when spherical projection is in use,\n     * the algorithm used there estimates distance to point on tangent where line from camera\n     * touches the sphere horizon and there is no reason to clamp it.\n     */\n    constructor(\n        maxElevation: number = EarthConstants.MAX_BUILDING_HEIGHT,\n        minElevation: number = 0,\n        readonly nearMin: number = 1.0,\n        readonly nearFarMarginRatio: number = 0.05,\n        readonly farMaxRatio = 6.0\n    ) {\n        super(maxElevation, minElevation);\n        assert(nearMin > 0);\n        assert(nearFarMarginRatio > epsilon);\n        assert(farMaxRatio > 1.0);\n        const nearFarMargin = nearFarMarginRatio * nearMin;\n        this.m_minimumViewRange = {\n            near: nearMin,\n            far: nearMin + nearFarMargin,\n            minimum: this.nearMin,\n            maximum: Math.max(nearMin * farMaxRatio, nearMin + nearFarMargin)\n        };\n    }\n\n    /** @override */\n    evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        if (projection.type === ProjectionType.Spherical) {\n            return this.evaluateDistanceSphericalProj(camera, projection, elevationProvider);\n        } else if (projection.type === ProjectionType.Planar) {\n            return this.evaluateDistancePlanarProj(camera, projection, elevationProvider);\n        }\n        assert(false, \"Unsupported projection type\");\n        return { ...this.minimumViewRange };\n    }\n\n    /**\n     * Get minimum view range that is possible to achieve with current evaluator settings.\n     * @note This value will not change after evaluator is constructed.\n     */\n    protected get minimumViewRange(): ViewRanges {\n        return this.m_minimumViewRange;\n    }\n\n    /**\n     * Calculate camera altitude (closest distance) to ground level in world units.\n     * @param camera\n     * @param projection\n     */\n    protected getCameraAltitude(camera: THREE.Camera, projection: Projection): number {\n        return projection.groundDistance(camera.position);\n    }\n\n    protected evaluateDistancePlanarProj(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        assert(projection.type !== ProjectionType.Spherical);\n\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.nearMin * this.farMaxRatio;\n\n        // Calculate distance to closest point on the ground.\n        const groundDistance = this.getCameraAltitude(camera, projection);\n        const farMax = groundDistance * this.farMaxRatio;\n        // We could at least try to keep margins along the eye vector (center of the view) in\n        // tact with pitch angle changes, but this does not solve all tilt angle problems,\n        // rather use more sophisticated evaluator.\n        nearPlane = groundDistance - this.maxElevation;\n        farPlane = groundDistance - this.minElevation;\n\n        // Apply the constraints.\n        nearPlane = Math.max(nearPlane, this.nearMin);\n        farPlane = Math.min(farPlane, farMax);\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (nearPlane + farPlane)) / 2;\n        nearPlane = Math.max(nearPlane - nearFarMargin / 2, this.nearMin);\n        farPlane = Math.max(farPlane + nearFarMargin / 2, nearPlane + nearFarMargin);\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: Math.max(farMax, farPlane)\n        };\n        return viewRanges;\n    }\n\n    protected evaluateDistanceSphericalProj(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        assert(projection.type === ProjectionType.Spherical);\n\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.nearMin * this.farMaxRatio;\n\n        // The near plane calculus is quite straight forward and works the same as for planar\n        // projections. We simply search for the closest point of the ground just above\n        // the camera, then we apply margin (elevation) to it along the sphere surface normal:\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        nearPlane = cameraAltitude - this.maxElevation;\n\n        // Far plane calculation requires different approaches depending from camera projection:\n        // - perspective\n        // - orthographic\n\n        const r = EarthConstants.EQUATORIAL_RADIUS;\n        let d = camera.position.length();\n        d = d === 0 ? epsilon : d;\n        if (camera.type === \"PerspectiveCamera\") {\n            // This solution computes near and far plane for a set up where\n            // the camera is looking at the center of the scene.\n\n            // The far plane distance calculus requires finding the sphere tangent line that is\n            // co-linear with (goes thru) camera position, such tangent creates right angle\n            // with sphere diameter where it touches its surface (point T). Given that sphere is\n            // always at world origin and camera orbits around it we have (see\n            // #getTangentBasedFarPlane):\n            // angle(OTC) = 90\n            // sin(OCT) = sin(alpha) = r / d\n            // alpha = asin(r / d)\n            const alpha = Math.asin(r / d);\n            // If alpha it bigger than half fov angle, our visibility limit is set by tangent\n            // line, otherwise we need to find top (or right) plane intersection with sphere,\n            // which is definitely closer than the tangent point mentioned above.\n            const cam = camera as THREE.PerspectiveCamera;\n            // Take fov directly if it is vertical, otherwise we translate it using aspect ratio:\n            const aspect = cam.aspect > 1 ? cam.aspect : 1 / cam.aspect;\n            const halfFovAngle = THREE.MathUtils.degToRad((cam.fov * aspect) / 2);\n\n            const farTangent = this.getTangentBasedFarPlane(cam, d, r, alpha);\n            farPlane =\n                halfFovAngle > alpha\n                    ? farTangent\n                    : this.getFovBasedFarPlane(cam, d, r, 2 * halfFovAngle, projection);\n        }\n        // Orthographic camera projection\n        else {\n            farPlane = this.getOrthoBasedFarPlane(d, r);\n        }\n\n        // In extreme cases the largest depression assumed may be further than tangent\n        // based far plane distance, take it into account\n        const farMin = cameraAltitude - this.minElevation;\n        const farMax = cameraAltitude * this.farMaxRatio;\n        // Apply the constraints.\n        nearPlane = Math.max(nearPlane, this.nearMin);\n        farPlane = Math.max(farPlane, farMin);\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (nearPlane + farPlane)) / 2;\n        nearPlane = Math.max(nearPlane - nearFarMargin / 2, this.nearMin);\n        farPlane = Math.max(farPlane + nearFarMargin / 2, nearPlane + nearFarMargin);\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: farMax\n        };\n        return viewRanges;\n    }\n\n    /**\n     * Calculate distance from a point to the tangent point of a sphere.\n     *\n     * Returns zero if point is below surface or only very slightly above surface of sphere.\n     * @param d Distance from point to center of sphere\n     * @param r Radius of sphere\n     */\n    protected getTangentDistance(d: number, r: number): number {\n        // There may be situations when maximum elevation still remains below sea level\n        // (elevation < 0) or it is negligible (elevation ~ epsilon)\n        if (d - r < epsilon) {\n            return 0;\n        }\n\n        // The distance to tangent point may be described as:\n        // t = sqrt(d^2 - r^2)\n        return Math.sqrt(d * d - r * r);\n    }\n\n    /**\n     * Calculate far plane depending on furthest visible distance from camera position.\n     *\n     * Furthest visible distance is assumed to be distance from camera to horizon\n     * plus distance from elevated geometry to horizon(so that high objects behind horizon\n     * remain visible).\n     * @param camera The camera of the mapview\n     * @param d Distance from camera to origin\n     * @param r Radius of earth\n     * @param alpha Angle between camera eye vector and tangent\n     */\n    protected getTangentBasedFarPlane(\n        camera: THREE.PerspectiveCamera,\n        d: number,\n        r: number,\n        alpha: number\n    ): number {\n        // Find tangent point intersection distance\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,        E\n        //   ,           .           ,    . ' far + elev\n        //  ,            .   r + e   , '   /\n        // ,             .     ,  '    ,  /\n        // ,             . O '         , / te\n        // ,             | .           ,/\n        //  ,            |   .  r     ,/\n        //   ,           |      .    ,\n        //     ,         |        , '_____ far\n        //       ' -_, _ | _ ,  ' / T\n        //     near      |      /\n        //               |    / t\n        //             d |  /\n        //               |/\n        //               C\n        const t = this.getTangentDistance(d, r);\n\n        // Because we would like to see elevated geometry that may be visible beyond\n        // the tangent point on ground surface, we need to extend viewing distance along\n        // the tangent line by te (see graph above).\n        const te = this.getTangentDistance(r + this.maxElevation, r);\n\n        // Next step is to project CE vector(length t + te) onto camera eye (forward) vector\n        // to get maximum camera far plane distance.\n        //\n        // Knowing that:\n        // tangentVec.dot(cameraFwdVec) = cos(alpha) * len(tangentVec) * len(cameraFwdVec).\n        // where:\n        // ||cameraFwdVec|| == 1 ^ ||tangentVec|| == t + te\n        // Formula simplifies to:\n        const far = Math.cos(alpha) * (t + te);\n\n        return far;\n    }\n\n    protected getFovBasedFarPlane(\n        camera: THREE.PerspectiveCamera,\n        d: number,\n        r: number,\n        fovAngle: number,\n        projection: Projection\n    ) {\n        // Find intersection point that is closer to tangent point.\n        //\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,\n        //   ,           .           ,\n        //  ,            .     r     ,' T1\n        // ,             .     ,  '  / ,\n        // ,             . O.'  a   /  ,\n        // ,             | .  `  . /   ,\n        //  ,            |   .  r / TA,\n        //   ,           |    .  /   ,\n        //     ,         |     ./  ,'_____ far\n        //       ' -_, _ | _ , /' T0\n        //     near      |    /\n        //               |   / t\n        //             d | /\n        //               |/\n        //               C\n        //\n        // See:\n        // tslint:disable-next-line: max-line-length\n        // https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection\n\n        // Vector from camera to world center\n        const dVec = camera.position;\n        // Extract camera X, Y, Z orientation axes into tmp vectors array.\n        camera.matrixWorld.extractBasis(\n            this.m_tmpVectors[0],\n            this.m_tmpVectors[1],\n            this.m_tmpVectors[2]\n        );\n        // Setup quaternion (X axis based) for angle between frustum plane and camera eye.\n        this.m_tmpQuaternion.setFromAxisAngle(this.m_tmpVectors[0], fovAngle / 2);\n        // Acquire camera (eye) forward vector from Z axis (keep it in tmpVectors[2]).\n        const cameraFwdVec = this.m_tmpVectors[2];\n        // Apply quaternion to forward vector, creating intersection vector, which is\n        // parallel to top or right frustum plane (depending on the aspect ratio).\n        const tVec = this.m_tmpVectors[1].copy(cameraFwdVec).applyQuaternion(this.m_tmpQuaternion);\n        // Calculate camera to origin vector projection onto frustum plane (top or right).\n        // This gives us the length of CTA segment:\n        const cta = dVec.dot(tVec);\n        // If it is negative, it means that the dVec and the tVec points in\n        // opposite directions - there is no intersection - or intersection could\n        // potentially be behind the intersection ray's origin (camera position).\n        if (cta < 0) {\n            // Intersection points are behind camera, camera looks in wrong direction.\n            const groundDistance = this.getCameraAltitude(camera, projection);\n            // Setup far plane to maximum distance.\n            return groundDistance * this.farMaxRatio;\n        }\n        // Knowing the length of |CTA| we just need to subtract the length of |T0TA|\n        // segment from it to get far plane distance.\n        // In order to calculate |T0TA| we firstly need to use use Pythagorean theorem to\n        // find length of |OTA| = a. Here we use the right triangle formed by O-C-TA points:\n        // |OC|^2 = |CTA|^2 + |OTA|^2, where |OTA| = a, |OC| = d, |CTA| = cta\n        // a^2 = d^2 - cta^2\n        const a2 = dVec.dot(dVec) - cta * cta;\n        // Note that if a is greater than sphere radius the ray misses the sphere and\n        // thus there is no intersection at all.\n        const r2 = r * r;\n        assert(a2 <= r2, \"Please use this evaluator only for top view camera poses.\");\n        // Now to find the length of |T0TA| == |T1TA| we use the second right triangle\n        // formed by O-T0-TA points. Of course we know that |T0TA| segment length is\n        // equal to |T1TA|, and |OT0| segment is simply sphere radius.\n        // In order to find |T0TA| length we again use Pythagorean theorem, which says:\n        // |OT0|^2 = |OTA|^2 + |T0TA|^2, where |OTO| = r, |OTA| = a\n        // |T0TA|^2 = r^2 - a^2\n        const tota = Math.sqrt(r2 - a2);\n        // Finally our far plane (intersection point) is defined as:\n        return cta - tota;\n    }\n\n    protected getOrthoBasedFarPlane(d: number, r: number): number {\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,     E\n        //   ,            .--------- ,-.'- far + elev\n        // | ,            .   r + e , `, |\n        // |,             .     , '     ,| te\n        // |,             . O '.........,|..\n        // |,             |        r    ,|  far\n        // | ,            |            , |\n        // |  ,           |           ,  | t\n        // |    ,         |        , '   |\n        // |      ' -_, _ | _ ,  '       |\n        // |    near      | \\/___________| near - elev\n        // |              |              |\n        // |            d |              |\n        // |              |              |\n        //                C\n        // The distance to tangent point may be described as:\n        const t = d;\n        // Tangent extension due to terrain elevation behind the horizon may be calculated\n        // based on the right triangle:\n        // (r+maxElev)^2 = r^2 + te^2\n        // te = sqrt((r+maxElev)^2 - r^2)\n        // although we may not calculate it if elevation is negligible:\n        const te =\n            this.maxElevation < epsilon\n                ? 0\n                : Math.sqrt(r + this.maxElevation) * (r + this.maxElevation) - r * r;\n        // Both near and far planes distances are directly applied to frustum, because tangents'\n        // lines are parallel to camera look at vector.\n        // Now far plane distance is constituted with:\n        return t + te;\n    }\n}\n\n/**\n * Evaluates camera clipping planes taking into account ground distance and camera angles.\n *\n * This evaluator provides support for camera with varying tilt (pitch) angle, the angle\n * between camera __look at__ vector and the ground surface normal.\n */\nexport class TiltViewClipPlanesEvaluator extends TopViewClipPlanesEvaluator {\n    /**\n     * Calculate the lengths of frustum planes intersection with the ground plane.\n     * This evaluates distances between eye vector (or eye plane in orthographic projection) and\n     * ground intersections of top and bottom frustum planes.\n     * @note This method assumes the world surface (ground) to be flat and\n     * works only with planar projections.\n     *\n     * @param camera The [[THREE.Camera]] instance in use,\n     * @param projection The geo-projection used to convert geographic to world coordinates.\n     */\n    protected getFrustumGroundIntersectionDist(\n        camera: THREE.Camera,\n        projection: Projection\n    ): { top: number; bottom: number } {\n        assert(projection.type !== ProjectionType.Spherical);\n        // This algorithm computes the length of frustum planes before intersecting with a flat\n        // ground surface. Entire computation is split over two projections method and performed\n        // for top and bottom plane, with addition of terrain (ground) elevation which is taken\n        // into account.\n        // The following diagram may help explain the algorithm below.\n        //   🎥\n        //   C\n        //   |\\\n        //   |.\\ .\n        //   | . \\  . t\n        // z |  .  \\   .c2\n        //   |  c1.  \\e ___. max elev\n        //   |     .   \\      .\n        //___|a___D1.____\\E1_____.D2______ g\n        //   C1      .     \\ __. min elev\n        //            .      \\.E2\n        //          b  .    .\n        //              . .\n        //               .\n        // Where:\n        // - C gives the camera position.\n        // - z is the height of the camera above the ground.\n        // - z1 == z2 == z, for perspective camera all planes origin its the same\n        // - a is a right angle.\n        // - e is the look at vector of the camera.\n        // - t and b are the frustum planes of the camera (top and bottom respectively).\n        // - angle between c1 to c2 is the fov.\n        // - c1, c2 - vectors from camera to the ground along frustum planes.\n        // - angles between c1 and e or e and c2 splits fov on equal halves.\n        // - d1 and d2 are the intersection points of the frustum with the world/ground plane.\n        // - angle between z and e is the pitch of the camera.\n        // - angle between g and e is the tilt angle.\n        // - g is the ground/world surface\n        //\n        // The goal is to find distance for top/bottom planes intersections of frustum with ground\n        // plane.\n        // This are the distances from C->D1 and C->D2, and are described as\n        // c1 and c2. Then we may compensate/correct those distances with actual\n        // ground elevations, which is done by simply offsetting camera altitude, as it is\n        // opposite to elevating ground level.\n        const halfPiLimit = Math.PI / 2 - epsilon;\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        // tslint:disable-next-line: deprecation\n        const cameraTilt = MapViewUtils.extractCameraTilt(camera, projection);\n        // Angle between z and c2\n        let topAngleRad: number;\n        // Angle between z and c1\n        let bottomAngleRad: number;\n        // Bottom plane origin altitude\n        let z1: number;\n        // Top plane origin altitude\n        let z2: number;\n        // For perspective projection:\n        if (camera.type === \"PerspectiveCamera\") {\n            const cam = (camera as any) as THREE.PerspectiveCamera;\n            // Angle between z and c2, note, the fov is vertical, otherwise we would need to\n            // translate it using aspect ratio:\n            // let aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n            const aspect = 1;\n            // Half fov angle in radians\n            const halfFovAngle = THREE.MathUtils.degToRad((cam.fov * aspect) / 2);\n            topAngleRad = THREE.MathUtils.clamp(\n                cameraTilt + halfFovAngle,\n                -halfPiLimit,\n                halfPiLimit\n            );\n            bottomAngleRad = THREE.MathUtils.clamp(\n                cameraTilt - halfFovAngle,\n                -halfPiLimit,\n                halfPiLimit\n            );\n            z1 = z2 = cameraAltitude;\n        }\n        // For orthographic projection:\n        else {\n            const cam = (camera as any) as THREE.OrthographicCamera;\n            // For orthogonal camera projections we may simply ignore FOV and use 0 for FOV\n            // the top/bottom planes are simply parallel to the eye vector:\n            topAngleRad = bottomAngleRad = cameraTilt;\n            // Although the ray origin is not always the same (eye position) as for\n            // the perspective projections, thus we need to compensate for ortho-cube\n            // dimensions:\n            // sin(tilt) = zc2 / top\n            // sin(tilt) = zc1 / bottom\n            // zc2 = sin(tilt) * top\n            // zc1 = sin(tilt) * bottom\n            const sinBeta = Math.sin(cameraTilt);\n            z2 = cameraAltitude + sinBeta * cam.top;\n            z1 = cameraAltitude - sinBeta * cam.bottom;\n        }\n        // Distance along the top plane to the ground - c2\n        // cos(topAngle) = (z2 - minElev) / |c2|\n        // |c2| = (z2 - minElev) / cos(topAngle)\n        const topDist = (z2 - this.minElevation) / Math.cos(topAngleRad);\n        // Distance along the bottom plane to the ground - c1\n        // cos(bottomAngle) = (z - minElev) / |c1|\n        // |c1| = (z - minElev) / cos(bottomAngle)\n        const bottomDist = (z1 - this.maxElevation) / Math.cos(bottomAngleRad);\n\n        return {\n            top: Math.max(topDist, 0),\n            bottom: Math.max(bottomDist, 0)\n        };\n    }\n\n    /** @override */\n    protected evaluateDistancePlanarProj(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        assert(projection.type !== ProjectionType.Spherical);\n        const viewRanges = { ...this.minimumViewRange };\n\n        // Generally near/far planes are set to keep top/bottom planes intersection distance.\n        // Then elevations margins are applied. Here margins (min/max elevations) are meant to\n        // be defined as distance along the ground normal vector thus during camera\n        // tilt they may affect near/far planes positions differently.\n        const planesDist = this.getFrustumGroundIntersectionDist(camera, projection);\n\n        // Project clipping plane distances for the top/bottom frustum planes (edges), but\n        // only if we deal with perspective camera type, this step is not required\n        // for orthographic projections, cause all clip planes are parallel to eye vector.\n        if (camera.type === \"PerspectiveCamera\") {\n            const cam = camera as THREE.PerspectiveCamera;\n            // Angle between z and c2, note, the fov is vertical, otherwise we would need to\n            // translate it using aspect ratio:\n            // let aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n            const aspect = 1;\n            // Half fov angle in radians\n            const halfFovAngle = THREE.MathUtils.degToRad((cam.fov * aspect) / 2);\n            const cosHalfFov = Math.cos(halfFovAngle);\n            // cos(halfFov) = near / bottomDist\n            // near = cos(halfFov) * bottomDist\n            viewRanges.near = planesDist.bottom * cosHalfFov;\n            // cos(halfFov) = far / topDist\n            // far = cos(halfFov) * topDist\n            viewRanges.far = planesDist.top * cosHalfFov;\n        }\n        // Orthographic camera projection.\n        else {\n            viewRanges.near = planesDist.bottom;\n            viewRanges.far = planesDist.top;\n        }\n\n        // Compute target (focus) point distance.\n        // tslint:disable-next-line: deprecation\n        const { distance } = MapViewUtils.getTargetAndDistance(\n            projection,\n            camera,\n            elevationProvider\n        );\n        // Clamp values to constraints.\n        const farMax = distance * this.farMaxRatio;\n        viewRanges.near = Math.max(viewRanges.near, this.nearMin);\n        viewRanges.far = Math.min(viewRanges.far, farMax);\n\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (viewRanges.near + viewRanges.far)) / 2;\n        viewRanges.near = Math.max(viewRanges.near - nearFarMargin / 2, this.nearMin);\n        viewRanges.far = Math.max(\n            viewRanges.far + nearFarMargin / 2,\n            viewRanges.near + nearFarMargin\n        );\n        viewRanges.minimum = this.nearMin;\n        viewRanges.maximum = farMax;\n\n        return viewRanges;\n    }\n\n    /** @override */\n    protected evaluateDistanceSphericalProj(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        assert(projection.type === ProjectionType.Spherical);\n        const viewRanges = { ...this.minimumViewRange };\n\n        // Near plane calculus is pretty straightforward and does not depend on camera tilt:\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        viewRanges.near = cameraAltitude - this.maxElevation;\n\n        let halfFovAngle: number = 0;\n        if (camera instanceof THREE.PerspectiveCamera) {\n            // Take fov directly if it is vertical, otherwise we translate it using aspect ratio:\n            const aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n            halfFovAngle = THREE.MathUtils.degToRad((camera.fov * aspect) / 2);\n\n            // Now we need to account for camera tilt and frustum volume, so the longest\n            // frustum edge does not intersects with sphere, it takes the worst case\n            // scenario regardless of camera tilt, so may be improved little bit with more\n            // sophisticated algorithm.\n            viewRanges.near *= Math.cos(halfFovAngle);\n        }\n\n        // Far plane calculation requires different approaches depending from camera projection:\n        // - perspective\n        // - orthographic\n        const cameraToOrigin = this.m_tmpVectors[0].copy(camera.position).negate();\n        const r = EarthConstants.EQUATORIAL_RADIUS;\n        const d = cameraToOrigin.length();\n        let farPlane: number;\n        if (camera instanceof THREE.PerspectiveCamera) {\n            // Step-wise calculate angle between camera eye vector and tangent\n\n            // Calculate angle between surface normal(below camera position) and tangent.\n            const alpha = Math.asin(r / d);\n\n            // Calculate angle between look at and surface normal(below camera position)\n            const cameraPitch = this.getCameraPitch(cameraToOrigin, camera);\n\n            // Calculate angle between camera eye vector and tangent.\n            const modifiedAlpha = Math.abs(alpha - cameraPitch);\n\n            // Use tangent based far plane if horizon is within field of view\n            const farTangent = this.getTangentBasedFarPlane(camera, d, r, modifiedAlpha);\n            farPlane =\n                halfFovAngle >= modifiedAlpha\n                    ? farTangent\n                    : this.getTiltedFovBasedFarPlane(d, r, halfFovAngle, cameraPitch);\n        } else {\n            farPlane = this.getOrthoBasedFarPlane(d, r);\n        }\n        viewRanges.far = farPlane;\n\n        // Compute the focus point (target) distance for current camera and projection setup,\n        // in a same way the MapView component does.\n        // tslint:disable-next-line: deprecation\n        const { distance } = MapViewUtils.getTargetAndDistance(\n            projection,\n            camera,\n            elevationProvider\n        );\n        // Apply the constraints.\n        const farMin = cameraAltitude - this.minElevation;\n        const farMax = distance * this.farMaxRatio;\n        viewRanges.near = Math.max(viewRanges.near, this.nearMin);\n        viewRanges.far = THREE.MathUtils.clamp(viewRanges.far, farMin, farMax);\n\n        // Apply margins.\n        const nearFarMargin = (this.nearFarMarginRatio * (viewRanges.near + viewRanges.far)) / 2;\n        viewRanges.near = Math.max(viewRanges.near - nearFarMargin / 2, this.nearMin);\n        viewRanges.far = Math.max(\n            viewRanges.far + nearFarMargin / 2,\n            viewRanges.near + nearFarMargin\n        );\n\n        // Set minimum and maximum view range.\n        viewRanges.minimum = this.nearMin;\n        viewRanges.maximum = farMax;\n\n        return viewRanges;\n    }\n\n    protected getTiltedFovBasedFarPlane(\n        d: number,\n        r: number,\n        halfFovAngle: number,\n        cameraPitch: number\n    ) {\n        // Find intersection point that is closer to tangent point.\n        //\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,\n        //   ,           .           ,\n        //  ,            .     r     ,' T1\n        // ,             .     ,  '  / ,\n        // ,             . O.'  a   /  ,\n        // ,             | .  `  . /   ,\n        //  ,            |   .  r / TA,\n        //   ,           |    .  /   ,\n        //     ,         |     ./  ,'_____ far\n        //       ' -_, _ | _ , /' T0\n        //     near      |    /\n        //               |   / t\n        //             d | /\n        //               |/\n        //               C\n        //\n        // See:\n        // tslint:disable-next-line: max-line-length\n        // https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection\n\n        // compute length of t (distance to fov intersection with sphere)\n        // with law of cosines:\n        // r² = d² + t² - 2dt * cos(alpha)\n        // solved for t:\n        // t0 = d * cos(alpha) - sqrt(d²*cos²(alpha) - d² + r²)  <-- first intersection\n        // t1 = d * cos(alpha) + sqrt(d²*cos²(alpha) - d² + r²)  <-- second intersection\n        // Use first intersection:\n        const cosAlpha = Math.cos(cameraPitch + halfFovAngle);\n        const dSqr = d * d;\n        const t = d * cosAlpha - Math.sqrt(dSqr * cosAlpha * cosAlpha - dSqr + r * r);\n\n        assert(\n            !isNaN(t),\n            \"Field of view does not intersect sphere. Use tangent based far plane instead.\"\n        );\n\n        // project t onto camera fwd vector\n        const far = Math.cos(halfFovAngle) * t;\n\n        return far;\n    }\n\n    private getCameraPitch(cameraToOrigin: THREE.Vector3, camera: THREE.PerspectiveCamera) {\n        cameraToOrigin.normalize();\n        const lookAt = camera.getWorldDirection(this.m_tmpVectors[1]).normalize();\n        const cosAlpha1 = cameraToOrigin.dot(lookAt);\n        const cameraPitch = Math.acos(THREE.MathUtils.clamp(cosAlpha1, -1.0, 1.0));\n\n        return cameraPitch;\n    }\n}\n\n/**\n * Provides the most basic evaluation concept giving fixed values with some constraints.\n */\nexport class FixedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    readonly minFar: number;\n    private m_nearPlane: number;\n    private m_farPlane: number;\n\n    constructor(readonly minNear: number = 1, readonly minFarOffset: number = 10) {\n        this.minFar = minNear + minFarOffset;\n        this.m_nearPlane = minNear;\n        this.m_farPlane = this.minFar;\n    }\n\n    get nearPlane(): number {\n        return this.m_nearPlane;\n    }\n\n    set nearPlane(fixedNear: number) {\n        this.invalidatePlanes(fixedNear, this.m_farPlane);\n    }\n\n    get farPlane(): number {\n        return this.m_farPlane;\n    }\n\n    set farPlane(fixedFar: number) {\n        this.invalidatePlanes(this.m_nearPlane, fixedFar);\n    }\n\n    // tslint:disable-next-line: no-empty\n    set minElevation(elevation: number) {}\n\n    get minElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set maxElevation(elevation: number) {}\n\n    get maxElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    /** @override */\n    evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        // We do not need to perform actual evaluation cause results are precomputed and\n        // kept stable until somebody changes the properties.\n        const viewRanges: ViewRanges = {\n            near: this.m_nearPlane,\n            far: this.m_farPlane,\n            minimum: this.minNear,\n            maximum: this.m_farPlane\n        };\n        return viewRanges;\n    }\n\n    private invalidatePlanes(near: number, far: number) {\n        // When clamping prefer to extend far plane at about minimum distance, giving\n        // near distance setup priority over far.\n        const nearDist: number = Math.max(this.minNear, near);\n        const farDist: number = Math.max(this.minFar, far, nearDist + this.minFarOffset);\n        this.m_nearPlane = nearDist;\n        this.m_farPlane = farDist;\n    }\n}\n\n/**\n * Factory function that creates default [[ClipPlanesEvaluator]] that calculates near plane based\n * on ground distance and camera orientation.\n *\n * Creates [[TiltViewClipPlanesEvaluator]].\n */\nexport const createDefaultClipPlanesEvaluator = () => new TiltViewClipPlanesEvaluator();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport { IPassManager } from \"./IPassManager\";\nexport {\n    IMapAntialiasSettings,\n    IMapRenderingManager,\n    MapRenderingManager\n} from \"./MapRenderingManager\";\nexport { IPass, Pass } from \"./Pass\";\nexport { MSAARenderPass, MSAASampling } from \"./MSAARenderPass\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CopyShader, MSAAMaterial } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\n\nimport { Pass } from \"./Pass\";\n\n/**\n * This enum represents the sampling level to apply to a [[MSAARenderPass]] instance. At level 0,\n * only one sample is performed, which is like disabling the MSAA pass.\n */\nexport enum MSAASampling {\n    \"Level_0\",\n    \"Level_1\",\n    \"Level_2\",\n    \"Level_3\",\n    \"Level_4\",\n    \"Level_5\"\n}\n\n/**\n * [[MapView]]'s MSAA implementation. MSAA stands for Multi Sampling Anti-Aliasing, and its concept\n * is to provide a rendering engine with additional color values for each pixel, so they can include\n * the missing bits between them on a screen. WebGL already comes with a native MSAA implementation\n * with four samples. Because of its native nature, it is more efficient and one may not want to use\n * MapView's MSAA implementation when these four samples are satisfying. However in some situations\n * they are not: on low devices, MSAA can impact the framerate and we may desire to reduce the\n * number of samples at runtime. On the other hand, when the interaction stops, the engine also\n * stops rendering the map, and because a map relies on many line-like patterns, aliasing can then\n * turn very noticeable. In such static renders, the number of samples could be dramatically\n * increased on a last frame to render.\n */\nexport class MSAARenderPass extends Pass {\n    /**\n     * The sampling level determines the number of samples that will be performed per frame.\n     * Renders will happen `2 ^ samplingLevel` time(s). `samplingLevel` stands between `0` and `5`.\n     * Therefore there can be between 1 and 32 samples.\n     *\n     * @default `SamplingLevel.Level_1`\n     */\n    samplingLevel: MSAASampling = MSAASampling.Level_1;\n\n    private m_renderTarget: THREE.WebGLRenderTarget | null = null;\n    private readonly m_localCamera: THREE.OrthographicCamera = new THREE.OrthographicCamera(\n        -1,\n        1,\n        1,\n        -1,\n        0,\n        1\n    );\n    private readonly m_quadScene: THREE.Scene = new THREE.Scene();\n    private readonly m_quadUniforms: { [uniformName: string]: THREE.IUniform } =\n        CopyShader.uniforms;\n    private readonly m_quadMaterial: THREE.ShaderMaterial = new MSAAMaterial(this.m_quadUniforms);\n    private readonly m_quad: THREE.Mesh = new THREE.Mesh(\n        new THREE.PlaneBufferGeometry(2, 2),\n        this.m_quadMaterial\n    );\n\n    /**\n     * The constructor for `MSAARenderPass`. It builds an internal scene with a camera looking at a\n     * quad.\n     *\n     * @param m_scene The scene to render.\n     * @param m_camera The camera to render the scene through.\n     */\n    constructor() {\n        super();\n        this.m_quad.frustumCulled = false;\n        this.m_quadScene.add(this.m_quad);\n    }\n\n    /**\n     * Releases all used resources.\n     */\n    dispose() {\n        if (this.m_renderTarget !== null) {\n            this.m_renderTarget.dispose();\n            this.m_renderTarget = null;\n        }\n    }\n\n    /**\n     * The render function of `MSAARenderPass`. At each call of this method, and for each sample,\n     * the [[MapView]] camera provided in the `render` method is offset within the dimension of a\n     * pixel on screen. It then renders the whole scene with this offset to a local\n     * `WebGLRenderTarget` instance, via a `WebGLRenderer` instance. Finally the local camera\n     * created in the constructor shoots the quad and renders to the write buffer or to the frame\n     * buffer. The quad material's opacity is modified so the renders can accumulate in the\n     * targetted buffer.\n     *\n     * The number of samples can be modified at runtime through the enum [[SamplingLevel]].\n     *\n     * If there is no further pass, the [[Pass.renderToScreen]] flag can be set to `true` to\n     * output directly to the framebuffer.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the scene with.\n     * @param scene The ThreeJS Scene instance to render the scene with.\n     * @param camera The ThreeJS Camera instance to render the scene with.\n     * @param writeBuffer A ThreeJS WebGLRenderTarget instance to render the scene to.\n     * @param readBuffer A ThreeJS WebGLRenderTarget instance to render the scene.\n     * @override\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        if (!this.enabled) {\n            return;\n        }\n\n        // Initiates the local render target with the read buffer's dimensions, if not available.\n        if (this.m_renderTarget === null) {\n            this.m_renderTarget = new THREE.WebGLRenderTarget(readBuffer.width, readBuffer.height, {\n                minFilter: THREE.LinearFilter,\n                magFilter: THREE.LinearFilter,\n                format: THREE.RGBAFormat\n            });\n            this.m_renderTarget.texture.name = \"MSAARenderPass.sample\";\n        }\n        this.m_quadUniforms.tDiffuse.value = this.m_renderTarget.texture;\n\n        const offsets = MSAARenderPass.OffsetVectors[this.samplingLevel];\n\n        const rendererClearColor = renderer.getClearColor();\n        const oldClearColor = rendererClearColor !== undefined ? rendererClearColor.getHex() : 0;\n\n        // The method `camera.setViewOffset` will be called in the next loop. In order to maintain\n        // its usability externally (like for the triple view in mosaic demo) we must cache the\n        // previous values stored in `camera.view` and re-assign them at the end of the pass.\n\n        // 1. Create a default cache object, with default dimensions the size of our read buffer.\n        const oldView = {\n            enabled: camera.view !== null && camera.view.enabled,\n            fullWidth: readBuffer.width,\n            fullHeight: readBuffer.height,\n            x: 0,\n            y: 0,\n            width: readBuffer.width,\n            height: readBuffer.height\n        };\n\n        // 2. If `camera.view` has been enabled previously, then `setViewOffset` has been called\n        // externally: copy the existing `camera.view` values in the cache. Override the cache\n        // object with the values provided externally.\n        if (oldView.enabled && camera.view !== null) {\n            oldView.fullWidth = camera.view.fullWidth;\n            oldView.fullHeight = camera.view.fullHeight;\n            oldView.x = camera.view.offsetX;\n            oldView.y = camera.view.offsetY;\n            oldView.width = camera.view.width;\n            oldView.height = camera.view.height;\n        }\n\n        const oldRenderTarget = renderer.getRenderTarget();\n        for (let i = 0; i < offsets.length; i++) {\n            // 4. Then for each sample, call `setViewOffset` with our object. This also updates the\n            // `camera.view` object in Three.js.\n            const offset = offsets[i];\n            camera.setViewOffset(\n                oldView.fullWidth,\n                oldView.fullHeight,\n                oldView.x + offset[0] / 16,\n                oldView.y + offset[1] / 16,\n                oldView.width,\n                oldView.height\n            );\n\n            // 5. Divide the opacity of the quad by the number of samples to accumulate on the\n            // target buffer, and reduce the impact of the offset on color to reduce banding. Then\n            // render.\n            const uniformCenteredDistribution = -0.5 + (i + 0.5) / offsets.length;\n            const sampleWeight = 1.0 / offsets.length + uniformCenteredDistribution / 32;\n\n            this.m_quadUniforms.opacity.value = sampleWeight;\n\n            renderer.setRenderTarget(this.m_renderTarget);\n            renderer.clear();\n            renderer.render(scene, camera);\n\n            // 6. Render the quad on top of the previous renders.\n\n            // NOTE: three.js doesn't like undefined as renderTarget, but works with `null`\n            renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n            if (i === 0) {\n                renderer.setClearColor(0x000000);\n                renderer.clear();\n            }\n            renderer.render(this.m_quadScene, this.m_localCamera);\n            if (i === 0 && rendererClearColor !== undefined) {\n                renderer.setClearColor(oldClearColor);\n            }\n        }\n        renderer.setRenderTarget(oldRenderTarget);\n\n        // 7. Restore `camera.view` as set externally (or not).\n        if (camera.view !== null) {\n            camera.view.enabled = oldView.enabled;\n            camera.view.offsetX = oldView.x;\n            camera.view.offsetY = oldView.y;\n        }\n    }\n\n    /**\n     * Resize the internal render target to match the new size specified.\n     *\n     * @param width New width to apply to the render target.\n     * @param height New height to apply to the render target.\n     * @override\n     */\n    setSize(width: number, height: number) {\n        if (this.m_renderTarget) {\n            this.m_renderTarget.setSize(width, height);\n        }\n    }\n\n    // tslint:disable:max-line-length\n    /**\n     * The list of offsets to apply to the camera, per sampling level, adapted from :\n     *\n     * @see https://msdn.microsoft.com/en-us/library/windows/desktop/ff476218%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396\n     */\n    // tslint:enable:max-line-length\n    // tslint:disable-next-line:member-ordering\n    static readonly OffsetVectors: number[][][] = [\n        [[0, 0]],\n        [\n            [4, 4],\n            [-4, -4]\n        ],\n        [\n            [-2, -6],\n            [6, -2],\n            [-6, 2],\n            [2, 6]\n        ],\n        [\n            [1, -3],\n            [-1, 3],\n            [5, 1],\n            [-3, -5],\n            [-5, 5],\n            [-7, -1],\n            [3, 7],\n            [7, -7]\n        ],\n        [\n            [1, 1],\n            [-1, -3],\n            [-3, 2],\n            [4, -1],\n            [-5, -2],\n            [2, 5],\n            [5, 3],\n            [3, -5],\n            [-2, 6],\n            [0, -7],\n            [-4, -6],\n            [-6, 4],\n            [-8, 0],\n            [7, -4],\n            [6, 7],\n            [-7, -8]\n        ],\n        [\n            [-4, -7],\n            [-7, -5],\n            [-3, -5],\n            [-5, -4],\n            [-1, -4],\n            [-2, -2],\n            [-6, -1],\n            [-4, 0],\n            [-7, 1],\n            [-1, 2],\n            [-6, 3],\n            [-3, 3],\n            [-7, 6],\n            [-3, 6],\n            [-5, 7],\n            [-1, 7],\n            [5, -7],\n            [1, -6],\n            [6, -5],\n            [4, -4],\n            [2, -3],\n            [7, -2],\n            [1, -1],\n            [4, -1],\n            [2, 1],\n            [6, 2],\n            [0, 4],\n            [4, 4],\n            [2, 5],\n            [7, 5],\n            [5, 6],\n            [3, 7]\n        ]\n    ];\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { RequestController, WorkerServiceProtocol } from \"@here/harp-datasource-protocol\";\nimport {\n    getOptionValue,\n    IWorkerChannelMessage,\n    LoggerManager,\n    LogLevel,\n    WORKERCHANNEL_MSG_TYPE\n} from \"@here/harp-utils\";\n\nimport { WorkerLoader } from \"./workers/WorkerLoader\";\n\nimport * as THREE from \"three\";\n\nconst logger = LoggerManager.instance.create(\"ConcurrentWorkerSet\");\n\nexport function isLoggingMessage(message: IWorkerChannelMessage): message is IWorkerChannelMessage {\n    return message && typeof message.level === \"number\" && message.type === WORKERCHANNEL_MSG_TYPE;\n}\n\ninterface ReadyPromise {\n    count: number;\n    promise?: Promise<void>;\n    resolve: () => void;\n    reject: (reason: any) => void;\n    error?: any;\n}\n\ninterface RequestEntry {\n    promise: Promise<any>;\n    resolver: (error?: Error, response?: object) => void;\n}\n\nexport interface ConcurrentWorkerSetOptions {\n    /**\n     * The URL of the script for each worker to start.\n     */\n    scriptUrl: string;\n\n    /**\n     * The number of Web Workers for processing data.\n     *\n     * Defaults to CLAMP(`navigator.hardwareConcurrency` - 1, 1, 4) or [[DEFAULT_WORKER_COUNT]].\n     */\n    workerCount?: number;\n\n    /**\n     * Timeout in milliseconds, in which each worker should set initial message.\n     *\n     * @default 10 seconds, see [[DEFAULT_WORKER_INITIALIZATION_TIMEOUT]]\n     */\n    workerConnectionTimeout?: number;\n}\n\n/**\n * Interface for an item in the started worker list queue.\n */\ninterface WorkerEntry {\n    worker: Worker;\n    listener: EventListener;\n}\n\n/**\n * Interface for an item in the request queue. Stores the data to be decoded along with an\n * [[AbortController]].\n */\ninterface WorkerRequestEntry {\n    message: WorkerServiceProtocol.RequestMessage;\n    buffers?: ArrayBuffer[] | undefined;\n    requestController?: RequestController;\n}\n\n/**\n * The default number of Web Workers to use if `navigator.hardwareConcurrency` is unavailable.\n */\nconst DEFAULT_WORKER_COUNT = 2;\n\n/**\n * The default timeout for first message from worker.\n *\n * @see [[WorkerLoader.startWorker]]\n */\nexport const DEFAULT_WORKER_INITIALIZATION_TIMEOUT = 10000;\n\n/**\n * A set of concurrent Web Workers. Acts as a Communication Peer for [[WorkerService]] instances\n * running in Web Workers.\n *\n * Starts and manages a certain number of web workers and provides a means to communicate\n * with them using various communication schemes, such as:\n *  - [[addEventListener]] : receive a unidirectional messages\n *  - [[broadcastMessage]] : send unidirectional broadcast message\n *  - [[invokeRequest]] : send a request that waits for a response, with load balancing\n *  - [[postMessage]] : send a unidirectional message, with load balancing\n *\n * The request queue holds all requests before they are stuffed into the event queue, allows for\n * easy (and early) cancelling of requests. The workers now only get a single new RequestMessage\n * when they return their previous result, or if they are idle. When they are idle, they are stored\n * in m_availableWorkers.\n */\nexport class ConcurrentWorkerSet {\n    private m_workerChannelLogger = LoggerManager.instance.create(\"WorkerChannel\");\n    private readonly m_eventListeners = new Map<string, (message: any) => void>();\n    private m_workers = new Array<Worker>();\n\n    // List of idle workers that can be given the next job. It is using a LIFO scheme to reduce\n    // memory consumption in idle workers.\n    private m_availableWorkers = new Array<Worker>();\n    private m_workerPromises = new Array<Promise<WorkerEntry | undefined>>();\n    private m_workerCount: number | undefined;\n\n    private readonly m_readyPromises = new Map<string, ReadyPromise>();\n    private readonly m_requests: Map<number, RequestEntry> = new Map();\n    private m_workerRequestQueue: WorkerRequestEntry[] = [];\n\n    private m_nextMessageId: number = 0;\n    private m_stopped: boolean = true;\n\n    private m_referenceCount: number = 0;\n\n    /**\n     * Creates a new `ConcurrentWorkerSet`.\n     *\n     * Creates as many Web Workers as specified in `options.workerCount`, from the script provided\n     * in `options.scriptUrl`. If `options.workerCount` is not specified, the value specified in\n     * `navigator.hardwareConcurrency` is used instead.\n     *\n     * The worker set is implicitly started when constructed.\n     */\n    constructor(private m_options: ConcurrentWorkerSetOptions) {\n        this.start();\n    }\n\n    /**\n     * Adds an external reference and increments the internal reference counter by one.\n     *\n     * To implement a reference-count based automatic resource cleanup, use this function with\n     * [[removeReference]].\n     */\n    addReference() {\n        this.m_referenceCount += 1;\n        if (this.m_referenceCount === 1 && this.m_stopped) {\n            this.start();\n        }\n    }\n\n    /**\n     * Decrements the internal reference counter by 1.\n     *\n     * When the internal reference counter reaches 0, this function calls [[dispose]] to clear the\n     * resources.\n     *\n     * Use with [[addReference]] to implement reference-count based automatic resource cleanup.\n     */\n    removeReference() {\n        this.m_referenceCount -= 1;\n        if (this.m_referenceCount === 0) {\n            this.destroy();\n        }\n    }\n\n    /**\n     * Starts workers.\n     *\n     * Use to start workers already stopped by [[stop]] or [[destroy]] calls.\n     *\n     * Note: The worker set is implicitly started on construction - no need to call [[start]] on\n     * fresh instance.\n     *\n     * @param options optional, new worker set options\n     */\n    start(options?: ConcurrentWorkerSetOptions) {\n        if (options !== undefined) {\n            this.m_options = options;\n        }\n        if (!this.m_stopped) {\n            throw new Error(\"ConcurrentWorker set already started\");\n        }\n\n        this.m_workerCount = getOptionValue(\n            this.m_options.workerCount,\n            typeof navigator !== \"undefined\" && navigator.hardwareConcurrency !== undefined\n                ? // We need to have at least one worker\n                  THREE.MathUtils.clamp(navigator.hardwareConcurrency - 1, 1, 2)\n                : undefined,\n            DEFAULT_WORKER_COUNT\n        );\n\n        // Initialize the workers. The workers now have an ID to identify specific workers and\n        // handle their busy state.\n        const timeout = getOptionValue(\n            this.m_options.workerConnectionTimeout,\n            DEFAULT_WORKER_INITIALIZATION_TIMEOUT\n        );\n        for (let workerId = 0; workerId < this.m_workerCount; ++workerId) {\n            const workerPromise = WorkerLoader.startWorker(this.m_options.scriptUrl, timeout).then(\n                worker => {\n                    const listener = (evt: Event): void => {\n                        this.onWorkerMessage(workerId, evt as MessageEvent);\n                    };\n\n                    worker.addEventListener(\"message\", listener);\n                    this.m_workers.push(worker);\n                    this.m_availableWorkers.push(worker);\n                    return {\n                        worker,\n                        listener\n                    };\n                }\n            );\n            this.m_workerPromises.push(workerPromise);\n        }\n        this.m_stopped = false;\n    }\n\n    /**\n     * The number of workers started for this worker set. The value is `undefined` until the workers\n     * have been created.\n     */\n    get workerCount(): number | undefined {\n        return this.m_workerCount;\n    }\n\n    /**\n     * Stops workers.\n     *\n     * Waits for all pending requests to be finished and stops all workers.\n     *\n     * Use [[start]] to start this worker again.\n     *\n     * @returns `Promise` that resolves when all workers are destroyed.\n     */\n    async stop() {\n        this.m_stopped = true;\n\n        await this.waitForAllResponses().then(() => {\n            this.terminateWorkers();\n        });\n    }\n\n    /**\n     * Destroys all workers immediately.\n     *\n     * Resolves all pending request promises with a `worker destroyed` error.\n     *\n     * Use [[start]] to start this worker again.\n     */\n    destroy() {\n        this.m_stopped = true;\n\n        // respond with all pending request\n        this.m_requests.forEach(entry => {\n            entry.resolver(new Error(\"worker destroyed\"));\n        });\n        this.m_requests.clear();\n        this.m_workerRequestQueue = [];\n\n        this.terminateWorkers();\n\n        // clean other stuff\n        this.m_eventListeners.clear();\n    }\n\n    /**\n     * Waits for `service` to be initialized in all workers.\n     *\n     * Each service that starts in a worker sends an [[isInitializedMessage]] to confirm that\n     * it has started successfully. This method resolves when all workers in a set have\n     * `service` initialized.\n     *\n     * Promise is rejected if any of worker fails to start.\n     *\n     * @param serviceId The service identifier.\n     */\n    async connect(serviceId: string): Promise<void> {\n        this.ensureStarted();\n        await Promise.all(this.m_workerPromises);\n        return this.getReadyPromise(serviceId).promise as Promise<void>;\n    }\n\n    /**\n     * Registers an event listener for events that originated in a web worker, for a given\n     * `serviceId`. You can only set one event listener per `serviceId`.\n     *\n     * @param serviceId The service to listen to.\n     * @param callback The callback to invoke for matching events.\n     */\n    addEventListener(serviceId: string, callback: (message: any) => void) {\n        this.m_eventListeners.set(serviceId, callback);\n    }\n\n    /**\n     * Removes a previously set event listener for the given `serviceId`.\n     *\n     * @param serviceId The service from which to remove the event listeners.\n     */\n    removeEventListener(serviceId: string) {\n        this.m_eventListeners.delete(serviceId);\n    }\n\n    /**\n     * Invokes a request that expects a response from a random worker.\n     *\n     * Sends [[RequestMessage]] and resolves when a matching [[ResponseMessage]] is received from\n     * workers. Use this function when interfacing with \"RPC-like\" calls to services.\n     *\n     * @param serviceId The name of service, as registered with the [[WorkerClient]] instance.\n     * @param request The request to process.\n     * @param transferList An optional array of `ArrayBuffer`s to transfer to the worker context.\n     * @param requestController An optional [[RequestController]] to store state of cancelling.\n     *\n     * @returns A `Promise` that resolves with a response from the service.\n     */\n    invokeRequest<Res>(\n        serviceId: string,\n        request: WorkerServiceProtocol.ServiceRequest,\n        transferList?: ArrayBuffer[],\n        requestController?: RequestController\n    ): Promise<Res> {\n        this.ensureStarted();\n\n        const messageId = this.m_nextMessageId++;\n        let resolver: ((error?: any, response?: any) => void) | undefined;\n\n        const promise = new Promise<Res>((resolve, reject) => {\n            resolver = (error?: Error, response?: Res) => {\n                this.m_requests.delete(messageId);\n\n                if (error !== undefined) {\n                    reject(error);\n                } else {\n                    resolve(response as Res);\n                }\n            };\n        });\n        this.m_requests.set(messageId, {\n            promise,\n            resolver: resolver!\n        });\n\n        const message: WorkerServiceProtocol.RequestMessage = {\n            service: serviceId,\n            type: WorkerServiceProtocol.ServiceMessageName.Request,\n            messageId,\n            request\n        };\n        this.postRequestMessage(message, transferList, requestController);\n        return promise;\n    }\n\n    /**\n     * Invokes a request that expects responses from all workers.\n     *\n     * Send [[RequestMessage]]  to all workers and resolves when all workers have sent a matching\n     * [[ResponseMessage]]. Use this function to wait on request that need to happen on all workers\n     * before proceeding (like synchronous worker service creation).\n     *\n     * @param serviceId The name of service, as registered with the [[WorkerClient]] instance.\n     * @param request The request to process.\n     * @param transferList An optional array of `ArrayBuffer`s to transfer to the worker context.\n     *\n     * @returns Array of `Promise`s that resolves with a response from each worker (unspecified\n     * order).\n     */\n    broadcastRequest<Res>(\n        serviceId: string,\n        request:\n            | WorkerServiceProtocol.WorkerServiceManagerRequest\n            | WorkerServiceProtocol.ServiceRequest,\n        transferList?: ArrayBuffer[]\n    ): Promise<Res[]> {\n        this.ensureStarted();\n\n        const promises = [];\n        for (const worker of this.m_workers) {\n            const messageId = this.m_nextMessageId++;\n\n            let resolver: ((error?: any, response?: any) => void) | undefined;\n            const promise = new Promise<Res>((resolve, reject) => {\n                resolver = (error: Error, response: Res) => {\n                    this.m_requests.delete(messageId);\n\n                    if (error !== undefined) {\n                        reject(error);\n                    } else {\n                        resolve(response as Res);\n                    }\n                };\n            });\n            promises.push(promise);\n\n            this.m_requests.set(messageId, {\n                promise,\n                resolver: resolver!\n            });\n\n            const message: WorkerServiceProtocol.RequestMessage = {\n                service: serviceId,\n                type: WorkerServiceProtocol.ServiceMessageName.Request,\n                messageId,\n                request\n            };\n            if (transferList !== undefined) {\n                worker.postMessage(message, transferList);\n            } else {\n                worker.postMessage(message);\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Posts a message to all workers.\n     *\n     * @param message The message to send.\n     * @param buffers Optional buffers to transfer to the workers.\n     */\n    broadcastMessage(message: any, buffers?: ArrayBuffer[] | undefined) {\n        this.ensureStarted();\n\n        if (buffers !== undefined) {\n            this.m_workers.forEach(worker => worker.postMessage(message, buffers));\n        } else {\n            this.m_workers.forEach(worker => worker.postMessage(message));\n        }\n    }\n\n    /**\n     * The size of the request queue for debugging and profiling.\n     */\n    get requestQueueSize() {\n        return this.m_workerRequestQueue.length;\n    }\n\n    /**\n     * The number of workers for debugging and profiling.\n     */\n    get numWorkers() {\n        return this.m_workers.length;\n    }\n\n    /**\n     * The number of workers for debugging and profiling.\n     */\n    get numIdleWorkers() {\n        return this.m_availableWorkers.length;\n    }\n\n    /**\n     * Subclasses must call this function when a worker emits an event.\n     *\n     * @param event The event to dispatch.\n     */\n    protected eventHandler(event: any) {\n        if (typeof event.data.type !== \"string\") {\n            return; // not an event generated by us, ignore.\n        }\n\n        this.dispatchEvent(event.data.type, event);\n    }\n\n    /**\n     * Handles messages received from workers. This method is protected so that the message\n     * reception can be simulated through an extended class, to avoid relying on real workers.\n     *\n     * @param workerId The workerId of the web worker.\n     * @param event The event to dispatch.\n     */\n    private onWorkerMessage = (workerId: number, event: MessageEvent) => {\n        if (WorkerServiceProtocol.isResponseMessage(event.data)) {\n            const response = event.data;\n            if (response.messageId === null) {\n                logger.error(`[${this.m_options.scriptUrl}]: Bad ResponseMessage: no messageId`);\n                return;\n            }\n            const entry = this.m_requests.get(response.messageId);\n            if (entry === undefined) {\n                logger.error(\n                    `[${this.m_options.scriptUrl}]: Bad ResponseMessage: invalid messageId`\n                );\n                return;\n            }\n\n            if (workerId >= 0 && workerId < this.m_workers.length) {\n                const worker = this.m_workers[workerId];\n                this.m_availableWorkers.push(worker);\n                // Check if any new work has been put into the queue.\n                this.checkWorkerRequestQueue();\n            } else {\n                logger.error(`[${this.m_options.scriptUrl}]: onWorkerMessage: invalid workerId`);\n            }\n            if (response.errorMessage !== undefined) {\n                const error = new Error(response.errorMessage);\n                if (response.errorStack !== undefined) {\n                    error.stack = response.errorStack;\n                }\n                entry.resolver(error);\n            } else {\n                entry.resolver(undefined, response.response);\n            }\n        } else if (WorkerServiceProtocol.isInitializedMessage(event.data)) {\n            const readyPromise = this.getReadyPromise(event.data.service);\n            if (++readyPromise.count === this.m_workerPromises.length) {\n                readyPromise.resolve();\n            }\n        } else if (isLoggingMessage(event.data)) {\n            switch (event.data.level) {\n                case LogLevel.Trace:\n                    this.m_workerChannelLogger.trace(...event.data.message);\n                    break;\n                case LogLevel.Debug:\n                    this.m_workerChannelLogger.debug(...event.data.message);\n                    break;\n                case LogLevel.Log:\n                    this.m_workerChannelLogger.log(...event.data.message);\n                    break;\n                case LogLevel.Info:\n                    this.m_workerChannelLogger.info(...event.data.message);\n                    break;\n                case LogLevel.Warn:\n                    this.m_workerChannelLogger.warn(...event.data.message);\n                    break;\n                case LogLevel.Error:\n                    this.m_workerChannelLogger.error(...event.data.message);\n                    break;\n            }\n        } else {\n            this.eventHandler(event);\n        }\n    };\n\n    /**\n     * Posts a [[WorkerServiceProtocol.RequestMessage]] to an available worker. If no worker is\n     * available, the request is put into a queue.\n     *\n     * @param message The message to send.\n     * @param buffers Optional buffers to transfer to the worker.\n     * @param requestController An optional [[RequestController]] to store state of cancelling.\n     */\n    private postRequestMessage(\n        message: WorkerServiceProtocol.RequestMessage,\n        buffers?: ArrayBuffer[] | undefined,\n        requestController?: RequestController\n    ) {\n        this.ensureStarted();\n        if (this.m_workers.length === 0) {\n            throw new Error(\"ConcurrentWorkerSet#postMessage: no workers started\");\n        }\n\n        // Check if the requestController has received the abort signal, in which case the request\n        // is ignored.\n        if (requestController !== undefined && requestController.signal.aborted) {\n            const entry = this.m_requests.get(message.messageId);\n            if (entry === undefined) {\n                logger.error(\n                    `[${this.m_options.scriptUrl}]: Bad RequestMessage: invalid messageId`\n                );\n                return;\n            }\n\n            const err = new Error(\"Aborted\");\n            err.name = \"AbortError\";\n\n            entry.resolver(err, undefined);\n            return;\n        }\n\n        if (this.m_availableWorkers.length > 0) {\n            const worker = this.m_availableWorkers.pop()!;\n\n            if (buffers !== undefined) {\n                worker.postMessage(message, buffers);\n            } else {\n                worker.postMessage(message);\n            }\n        } else {\n            // We need a priority to keep sorting stable, so we have to add a RequestController.\n            if (requestController === undefined) {\n                requestController = new RequestController(0);\n            }\n            if (requestController.priority === 0) {\n                // If the requests do not get a priority, they should keep their sorting order.\n                requestController.priority = -this.m_nextMessageId;\n            }\n            this.m_workerRequestQueue.unshift({\n                message,\n                buffers,\n                requestController\n            });\n        }\n    }\n\n    private ensureStarted() {\n        if (this.m_stopped) {\n            throw new Error(\"ConcurrentWorkerSet stopped\");\n        }\n    }\n\n    private async waitForAllResponses(): Promise<any> {\n        const promises = new Array<Promise<void>>();\n        this.m_requests.forEach(entry => {\n            promises.push(entry.promise);\n        });\n        await Promise.all(promises);\n    }\n\n    private dispatchEvent(id: string, message: any) {\n        const callback = this.m_eventListeners.get(id);\n        if (callback === undefined) {\n            return;\n        } // unknown event, ignore.\n        callback(message);\n    }\n\n    private terminateWorkers() {\n        // terminate all workers\n        this.m_workerPromises.forEach(workerPromise => {\n            workerPromise.then(workerEntry => {\n                if (workerEntry === undefined) {\n                    return;\n                }\n                workerEntry.worker.removeEventListener(\"message\", workerEntry.listener);\n                workerEntry.worker.terminate();\n            });\n        });\n        this.m_workers = [];\n        this.m_workerPromises = [];\n        this.m_availableWorkers = [];\n        this.m_readyPromises.clear();\n    }\n\n    private getReadyPromise(id: string): ReadyPromise {\n        const readyPromise = this.m_readyPromises.get(id);\n        if (readyPromise !== undefined) {\n            return readyPromise;\n        }\n\n        const newPromise: ReadyPromise = {\n            count: 0,\n            promise: undefined,\n            resolve: () => {\n                /* placeholder */\n            },\n            reject: (error: any) => {\n                newPromise.error = error;\n            },\n            error: undefined\n        };\n\n        newPromise.promise = new Promise<void>((resolve, reject) => {\n            const that = newPromise;\n\n            if (that.error !== undefined) {\n                reject(that.error);\n            } else if (that.count === this.m_workerPromises.length) {\n                resolve();\n            }\n\n            that.resolve = resolve;\n            that.reject = reject;\n        });\n\n        this.m_readyPromises.set(id, newPromise);\n        return newPromise;\n    }\n\n    /**\n     * Check the worker request queue, if there are any queued up decoding jobs and idle workers,\n     * they will be executed with postRequestMessage. The requests in the queue are sorted before\n     * the request with the highest priority is selected for processing.\n     */\n    private checkWorkerRequestQueue() {\n        if (this.m_workerRequestQueue.length === 0 || this.m_availableWorkers.length === 0) {\n            return;\n        }\n        this.m_workerRequestQueue.sort((a: WorkerRequestEntry, b: WorkerRequestEntry) => {\n            return a.requestController!.priority - b.requestController!.priority;\n        });\n\n        // Get the request with the highest priority and send it (again).\n        while (this.m_availableWorkers.length > 0 && this.m_workerRequestQueue.length > 0) {\n            const request = this.m_workerRequestQueue.pop()!;\n            this.postRequestMessage(request.message, request.buffers, request.requestController);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport \"@here/harp-fetch\";\n\nimport { getUrlOrigin, LoggerManager } from \"@here/harp-utils\";\nimport { isWorkerBootstrapRequest, WorkerBootstrapResponse } from \"./WorkerBootstrapDefs\";\n\nconst logger = LoggerManager.instance.create(\"WorkerLoader\");\n\n/**\n * Set of `Worker` loading and initialization helpers:\n *  - starting Worker from URL with fallback to XHR+blob [[WorkerLoader.startWorker]]\n *  - waiting for proper worker initialization, see [[WorkerLoader.waitWorkerInitialized]]\n */\nexport class WorkerLoader {\n    static directlyFallbackToBlobBasedLoading: boolean = false;\n    static sourceLoaderCache = new Map<string, Promise<string>>();\n    static dependencyUrlMapping: { [name: string]: string } = {};\n\n    /**\n     * Starts worker by first attempting load from `scriptUrl` using native `Worker` constructor.\n     * Then waits (using [[waitWorkerInitialized]]) for first message that indicates successful\n     * initialization.\n     * If `scriptUrl`'s origin is different than `baseUrl`, then in case of error falls back to\n     * [[startWorkerBlob]].\n     *\n     * We must resolve/reject promise at some time, so it is expected that any sane application will\n     * be able to load worker code in some amount of time.\n     * By default, this method timeouts after 10 seconds (configurable using `timeout` argument).\n     *\n     * This method is needed as browsers in general forbid to load worker if it's not on 'same\n     * origin' regardless of Content-Security-Policy.\n     *\n     * For blob-based fallback work, one need to ensure that Content Security Policy (CSP) allows\n     * loading web worker code from `Blob`s. By default browsers, allow 'blob:' for workers, but\n     * this may change.\n     *\n     * Following snippet setups CSP, so workers can be started from blob urls:\n     *\n     *     <head>\n     *         <meta http-equiv=\"Content-Security-Policy\" content=\"child-src blob:\">\n     *     </head>\n     *\n     * Tested on:\n     *   * Chrome 67 / Linux, Window, OSX, Android\n     *   * Firefox 60 / Linux, Windows, OSX\n     *   * Edge 41 / Windows\n     *   * Safari 11 / OSX\n     *   * Samsung Internet 7.2\n     *\n     * See\n     *  * https://benohead.com/cross-domain-cross-browser-web-workers/\n     *  * MapBox\n     *    * https://stackoverflow.com/questions/21913673/execute-web-worker-from-different-origin\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/2658\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/559\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/6058\n     *\n     * Findings:\n     *\n     * * Chrome reports CSP by exception when constructing [[Worker]] instance.\n     * * Firefox reports CSP errors when loading in first event:\n     *   https://bugzilla.mozilla.org/show_bug.cgi?id=1241888\n     * * Firefox 62, Chrome 67 obeys `<meta http-equiv=\"Content-Security-Policy\">` with\n     *   `worker-src blob:` but doesn't obey `worker-src URL` when used\n     * * Chrome 67 doesn't obey CSP `worker-src URL` despite it's documented as supported\n     *   (https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Security-Policy/worker-src)\n     *\n     * @param scriptUrl web worker script URL\n     * @param timeout timeout in milliseconds, in which worker should set initial message\n     *    (default 10 seconds)\n     */\n    static startWorker(scriptUrl: string, timeout: number = 10000): Promise<Worker> {\n        if (scriptUrl.startsWith(\"blob:\")) {\n            return this.startWorkerImmediately(scriptUrl, timeout);\n        }\n\n        if (this.directlyFallbackToBlobBasedLoading) {\n            return this.startWorkerBlob(scriptUrl, timeout);\n        }\n        return this.startWorkerImmediately(scriptUrl, timeout).catch(error => {\n            if (typeof window !== \"undefined\") {\n                const pageUrl = window.location.href;\n                const fullScriptUrl = new URL(scriptUrl, pageUrl).href;\n                if (getUrlOrigin(fullScriptUrl) === getUrlOrigin(pageUrl)) {\n                    throw error;\n                }\n                logger.log(\n                    \"#startWorker: cross-origin worker construction failed, trying load with blob\"\n                );\n                this.directlyFallbackToBlobBasedLoading = true;\n                return WorkerLoader.startWorkerBlob(scriptUrl, timeout);\n            } else {\n                throw error;\n            }\n        });\n    }\n\n    /**\n     * Start worker, loading it immediately from `scriptUrl`. Waits (using\n     * [[waitWorkerInitialized]]) for successful worker start.\n     *\n     * @param scriptUrl web worker script URL\n     */\n    static startWorkerImmediately(scriptUrl: string, timeout: number): Promise<Worker> {\n        try {\n            const worker = new Worker(scriptUrl);\n            return this.waitWorkerInitialized(worker, timeout);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    /**\n     * Start worker \"via blob\" by first loading worker script code with [[fetch]], creating `Blob`\n     * and attempting to start worker from blob url. Waits (using [[waitWorkerInitialized]]) for\n     * successful worker start.\n     *\n     * @param scriptUrl web worker script URL\n     */\n    static startWorkerBlob(scriptUrl: string, timeout: number): Promise<Worker> {\n        return this.fetchScriptSourceToBlobUrl(scriptUrl).then(blobUrl => {\n            return this.startWorkerImmediately(blobUrl, timeout);\n        });\n    }\n\n    /**\n     * Fetch script source as `Blob` url.\n     *\n     * Reuses results, if there are many simultaneous requests.\n     *\n     * @param scriptUrl web worker script URL\n     * @return promise that resolves to url of a `Blob` with script source code\n     */\n    static fetchScriptSourceToBlobUrl(scriptUrl: string): Promise<string> {\n        let loadingPromise = this.sourceLoaderCache.get(scriptUrl);\n        if (loadingPromise !== undefined) {\n            return loadingPromise;\n        }\n        loadingPromise = fetch(scriptUrl)\n            .then(response => response.text())\n            .catch(error => {\n                throw new Error(\n                    `WorkerLoader#fetchScriptSourceToBlob: failed to load worker script: ${error}`\n                );\n            })\n            .then(scriptSource => {\n                this.sourceLoaderCache.delete(scriptUrl);\n                const blob = new Blob([scriptSource], { type: \"application/javascript\" });\n                return URL.createObjectURL(blob);\n            });\n        this.sourceLoaderCache.set(scriptUrl, loadingPromise);\n        return loadingPromise;\n    }\n\n    /**\n     * Waits for successful Web Worker start.\n     *\n     * Expects that worker script sends initial message.\n     *\n     * If first event is `message` then assumes that worker has been loaded sussesfully and promise\n     * resolves to `worker` object passed as argument.\n     *\n     * If first event is 'error', then it is assumed that worker failed to load and promise is\n     * rejected.\n     *\n     * (NOTE: The initial 'message' - if received - is immediately replayed using worker's\n     * `dispatchEvent`, so application code can also consume it as confirmation of successful\n     * worker initialization.\n     *\n     * We must resolve/reject promise at some time, so it is expected that any sane application will\n     * be able to load worker code in some amount of time.\n     *\n     * @param worker [[Worker]] instance to be checked\n     * @param timeout timeout in milliseconds, in which worker should set initial message\n     * @returns `Promise` that resolves to `worker` on success\n     */\n    static waitWorkerInitialized(worker: Worker, timeout: number): Promise<Worker> {\n        return new Promise<Worker>((resolve, reject) => {\n            const firstMessageCallback = (event: MessageEvent) => {\n                const message = event.data;\n                if (isWorkerBootstrapRequest(message)) {\n                    const dependencies = message.dependencies;\n                    const resolvedDependencies: string[] = [];\n                    for (const dependency of dependencies) {\n                        const resolved = this.dependencyUrlMapping[dependency];\n                        if (!resolved) {\n                            cleanup();\n                            reject(\n                                new Error(\n                                    `#waitWorkerInitialized: Unable to resolve '${dependency}'` +\n                                        ` as needed by worker script.`\n                                )\n                            );\n                            return;\n                        }\n                        resolvedDependencies.push(resolved);\n                    }\n                    const response: WorkerBootstrapResponse = {\n                        type: \"worker-bootstrap-response\",\n                        resolvedDependencies\n                    };\n                    worker.postMessage(response);\n                    return;\n                }\n\n                cleanup();\n                resolve(worker);\n\n                // We've just consumed first message from worker before client has any chance to\n                // even call `addEventListener` on it, so here after resolve, we wait next tick and\n                // replay message so user has chance to intercept it in its own handler.\n                setTimeout(() => {\n                    worker.dispatchEvent(event);\n                }, 0);\n            };\n            const errorCallback = (error: ErrorEvent) => {\n                cleanup();\n                // Error events do not carry any useful information on tested browsers, so we assume\n                // that any error before 'firstMessageCallback' as failed Worker initialization.\n                let message = \"Error during worker initialization\";\n                if (error.message) {\n                    message = message + `: ${error.message}`;\n                }\n                if (typeof error.filename === \"string\" && typeof error.lineno === \"number\") {\n                    message = message + ` in ${error.filename}:${error.lineno}`;\n                }\n                reject(new Error(message));\n            };\n            const cleanup = () => {\n                clearTimeout(timerId);\n                worker.removeEventListener(\"message\", firstMessageCallback);\n                worker.removeEventListener(\"error\", errorCallback);\n            };\n\n            worker.addEventListener(\"error\", errorCallback);\n            worker.addEventListener(\"message\", firstMessageCallback);\n            const timerId = setTimeout(() => {\n                cleanup();\n                reject(new Error(\"Timeout exceeded when waiting for first message from worker.\"));\n            }, timeout);\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    Definitions,\n    getProjectionName,\n    ITileDecoder,\n    OptionsMap,\n    RequestController,\n    StyleSet,\n    TileInfo,\n    WorkerDecoderProtocol,\n    WorkerServiceProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { Projection, TileKey } from \"@here/harp-geoutils\";\n\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\n\n/**\n * Identifier of next decoder worker-service. Used to ensure uniqueness of service ids of decoders\n * dedicated to different datasources.\n */\nlet nextUniqueServiceId = 0;\n\n/**\n * Decoder based on [[ConcurrentWorkerSet]].\n *\n * Decodes tiles using workers running in separate contexts (also known as `WebWorkers`):\n * - connection establishment,\n * - sends decode requests,\n * - configuration.\n */\nexport class WorkerBasedDecoder implements ITileDecoder {\n    private serviceId: string;\n    private m_serviceCreated: boolean = false;\n\n    /**\n     * Creates a new `WorkerBasedDecoder`.\n     *\n     * @param workerSet [[ConcurrentWorkerSet]] this tiler will live in.\n     * @param decoderServiceType Service type identifier.\n     */\n    constructor(\n        private readonly workerSet: ConcurrentWorkerSet,\n        private readonly decoderServiceType: string\n    ) {\n        this.workerSet.addReference();\n        this.serviceId = `${this.decoderServiceType}-${nextUniqueServiceId++}`;\n    }\n\n    /**\n     * Dispose of dedicated tile decoder services in workers and remove reference to underlying\n     * [[ConcurrentWorkerSet]].\n     */\n    dispose() {\n        if (this.m_serviceCreated) {\n            this.workerSet\n                .broadcastRequest(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID, {\n                    type: WorkerServiceProtocol.Requests.DestroyService,\n                    targetServiceId: this.serviceId\n                })\n                .catch(() => {\n                    /* Ignoring these errors as underlying workers possibly do not exist anymore. */\n                });\n        }\n\n        this.workerSet.removeReference();\n    }\n\n    /**\n     * Connects to [[WorkerServiceManager]]s in underlying [[ConcurrentWorkerSet]] and creates\n     * dedicated [[TileDecoderService]]s in all workers to serve decode requests.\n     */\n    async connect(): Promise<void> {\n        await this.workerSet.connect(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID);\n        if (!this.m_serviceCreated) {\n            await this.workerSet.broadcastRequest(\n                WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID,\n                {\n                    type: WorkerServiceProtocol.Requests.CreateService,\n                    targetServiceType: this.decoderServiceType,\n                    targetServiceId: this.serviceId\n                }\n            );\n            this.m_serviceCreated = true;\n        }\n    }\n\n    /**\n     * Get [[Tile]] from tile decoder service in worker.\n     *\n     * Invokes [[DecodeTileRequest]] on [[TileDecoderService]] running in worker pool.\n     */\n    decodeTile(\n        data: ArrayBufferLike,\n        tileKey: TileKey,\n        projection: Projection,\n        requestController?: RequestController\n    ): Promise<DecodedTile> {\n        const tileKeyCode = tileKey.mortonCode();\n\n        const message: WorkerDecoderProtocol.DecodeTileRequest = {\n            type: WorkerDecoderProtocol.Requests.DecodeTileRequest,\n            tileKey: tileKeyCode,\n            data,\n            projection: getProjectionName(projection)\n        };\n\n        const transferList = data instanceof ArrayBuffer ? [data] : undefined;\n\n        return this.workerSet.invokeRequest(\n            this.serviceId,\n            message,\n            transferList,\n            requestController\n        );\n    }\n\n    /**\n     * Get [[TileInfo]] from tile decoder service in worker.\n     *\n     * Invokes [[TileInfoRequest]] on [[TileDecoderService]] running in worker pool.\n     */\n    getTileInfo(\n        data: ArrayBufferLike,\n        tileKey: TileKey,\n        projection: Projection,\n        requestController?: RequestController\n    ): Promise<TileInfo | undefined> {\n        const tileKeyCode = tileKey.mortonCode();\n\n        const message: WorkerDecoderProtocol.TileInfoRequest = {\n            type: WorkerDecoderProtocol.Requests.TileInfoRequest,\n            tileKey: tileKeyCode,\n            data,\n            projection: getProjectionName(projection)\n        };\n\n        const transferList = data instanceof ArrayBuffer ? [data] : undefined;\n        return this.workerSet.invokeRequest(\n            this.serviceId,\n            message,\n            transferList,\n            requestController\n        );\n    }\n\n    /**\n     * Configure tile decoder service in workers.\n     *\n     * Broadcasts [[ConfigurationMessage]] to all [[TileDecoderService]]s running in worker pool.\n     *\n     * @param styleSet  new [[StyleSet]], undefined means no change\n     * @param languages new list of languages\n     * @param options   new options, undefined options are not changed\n     */\n    configure(\n        styleSet?: StyleSet,\n        definitions?: Definitions,\n        languages?: string[],\n        options?: OptionsMap\n    ): void {\n        const message: WorkerDecoderProtocol.ConfigurationMessage = {\n            service: this.serviceId,\n            type: WorkerDecoderProtocol.DecoderMessageName.Configuration,\n            styleSet,\n            definitions,\n            options,\n            languages\n        };\n\n        this.workerSet.broadcastMessage(message);\n    }\n\n    /**\n     * The number of workers started for this decoder. The value is `undefined` until the workers\n     * have been created.\n     */\n    get workerCount(): number | undefined {\n        return this.workerSet.workerCount;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TilingScheme } from \"@here/harp-geoutils\";\nimport { TileKey } from \"@here/harp-geoutils/lib/tiling/TileKey\";\n\n/**\n * Status of the elevation range calculation.\n */\nexport enum CalculationStatus {\n    // Calculated approximately. A more precise result may be available later.\n    PendingApproximate,\n    // Calculation completed. The result is final, won't improve upon retrying.\n    FinalPrecise\n}\n\n/**\n * Elevation range with an optional calculation status.\n */\nexport interface ElevationRange {\n    minElevation: number;\n    maxElevation: number;\n    calculationStatus?: CalculationStatus;\n}\n\n/**\n * Source for elevation ranges per tile. The returned elevation ranges will be used in the visible\n * tile computation to calculate proper bounding boxes.\n */\nexport interface ElevationRangeSource {\n    /**\n     * Compute the elevation range for a given [[TileKey]].\n     * @param tileKey The tile for which the elevation range should be computed.\n     */\n    getElevationRange(tileKey: TileKey): ElevationRange;\n\n    /**\n     * The tiling scheme of this [[ElevationRangeSource]]. [[MapView]] will only apply the elevation\n     * ranges returned by [[getElevationRange]] that have the same [[TilingScheme]].\n     */\n    getTilingScheme(): TilingScheme;\n\n    /**\n     * Connects to the underlying data.\n     */\n    connect(): Promise<void>;\n\n    /**\n     * Returns `true` if this `ElevationRangeSource` is ready and the [[MapView]] can invoke\n     * `getElevationRange()` to start requesting data.\n     */\n    ready(): boolean;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MapView } from \"../MapView\";\nimport { ImageItem } from \"./Image\";\nimport { ImageCache } from \"./ImageCache\";\n\n/**\n * Cache images wrapped into [[ImageItem]]s for a [[MapView]]. An image may have multiple names in\n * a theme, the `MapViewImageCache` will take care of that. Registering multiple images with the\n * same name is invalid.\n *\n * The `MapViewImageCache` uses a global [[ImageCache]] to actually store (and generate) the\n * image data.\n */\nexport class MapViewImageCache {\n    private m_name2Url: Map<string, string> = new Map();\n    private m_url2Name: Map<string, string[]> = new Map();\n\n    /**\n     * The constructor for `MapViewImageCache`.\n     *\n     * @param mapView a [[MapView]] instance.\n     */\n    constructor(public mapView: MapView) {}\n\n    /**\n     * Register an existing image by name.\n     *\n     * @param name Name of the image from [[Theme]].\n     * @param url URL of image.\n     * @param image Optional [[ImageData]] of image.\n     */\n    registerImage(\n        name: string | undefined,\n        url: string,\n        image: ImageData | ImageBitmap | undefined\n    ): ImageItem {\n        if (name !== undefined) {\n            if (this.hasName(name)) {\n                throw new Error(\"duplicate name in cache\");\n            }\n\n            const oldNames = this.m_url2Name.get(url);\n            if (oldNames !== undefined) {\n                if (oldNames.indexOf(name) < 0) {\n                    oldNames.push(name);\n                }\n            } else {\n                this.m_url2Name.set(url, [name]);\n            }\n            this.m_name2Url.set(name, url);\n        }\n\n        const imageItem = ImageCache.instance.findImage(url);\n        if (imageItem === undefined) {\n            return ImageCache.instance.registerImage(this.mapView, url, image);\n        }\n        return imageItem;\n    }\n\n    /**\n     * Add an image and optionally start loading it. Once done, the [[ImageData]] or [[ImageBitmap]]\n     * will be stored in the [[ImageItem]].\n     *\n     * @param name Name of image from [[Theme]].\n     * @param url URL of image.\n     * @param startLoading Optional. Pass `true` to start loading the image in the background.\n     */\n    addImage(\n        name: string,\n        url: string,\n        startLoading = true\n    ): ImageItem | Promise<ImageItem | undefined> {\n        const imageItem = this.registerImage(name, url, undefined);\n        if (startLoading === true) {\n            return ImageCache.instance.loadImage(imageItem);\n        }\n\n        return imageItem;\n    }\n\n    /**\n     * Find [[ImageItem]] by its name.\n     *\n     * @param name Name of image.\n     */\n    findImageByName(name: string): ImageItem | undefined {\n        const url = this.m_name2Url.get(name);\n        if (url === undefined) {\n            return undefined;\n        }\n        return ImageCache.instance.findImage(url);\n    }\n\n    /**\n     * Find [[ImageItem]] by URL.\n     *\n     * @param url Url of image.\n     */\n    findImageByUrl(url: string): ImageItem | undefined {\n        return ImageCache.instance.findImage(url);\n    }\n\n    /**\n     * Load an [[ImageItem]]. Returns a promise or a loaded [[ImageItem]].\n     *\n     * @param imageItem ImageItem to load.\n     */\n    loadImage(imageItem: ImageItem): ImageItem | Promise<ImageItem | undefined> {\n        return ImageCache.instance.loadImage(imageItem);\n    }\n\n    /**\n     * Remove all [[ImageItem]]s from the cache. Also removes all [[ImageItem]]s that belong to this\n     * [[MapView]] from the global [[ImageCache]].\n     */\n    clear() {\n        ImageCache.instance.clear(this.mapView);\n        this.m_name2Url = new Map();\n        this.m_url2Name = new Map();\n    }\n\n    /**\n     * Returns number of image names stored in the cache.\n     */\n    get numberOfNames(): number {\n        return this.m_name2Url.size;\n    }\n\n    /**\n     * Returns number of image URLs in the cache.\n     */\n    get numberOfUrls(): number {\n        return this.m_url2Name.size;\n    }\n\n    /**\n     * Return `true` if an image with the given name is known.\n     *\n     * @param name Name of the image.\n     */\n    hasName(name: string): boolean {\n        return this.m_name2Url.get(name) !== undefined;\n    }\n\n    /**\n     * Return `true` if an image with the given URL is known.\n     * @param url URL of image.\n     */\n    hasUrl(url: string): boolean {\n        return this.m_url2Name.get(url) !== undefined;\n    }\n\n    /**\n     * Return the names under which an image with the given URL is saved.\n     */\n    findNames(url: string): string[] | undefined {\n        return this.m_url2Name.get(url);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { MapView } from \"../MapView\";\nimport { ImageItem } from \"./Image\";\n\nconst logger = LoggerManager.instance.create(\"ImageCache\");\n\n// override declaration of createImageBitmap, add optional options parameter that\n// was removed in typings for TypeScript 3.1\ndeclare function createImageBitmap(\n    image: ImageBitmapSource,\n    sx: number,\n    sy: number,\n    sw: number,\n    sh: number,\n    options?: any\n): Promise<ImageBitmap>;\n\n/**\n * Combines an [[ImageItem]] with a list of [[MapViews]] that reference it.\n */\nclass ImageCacheItem {\n    /**\n     * The list of [[MapView]]s referencing the [[ImageItem]].\n     */\n    mapViews: MapView[] = [];\n\n    /**\n     * Instantiates `ImageCacheItem`.\n     *\n     * @param imageItem The [[ImageItem]] referenced by the associated [[MapView]]s instances.\n     * @param mapView An optional first [[MapView]] referencing the [[ImageItem]].\n     */\n    constructor(public imageItem: ImageItem, mapView?: MapView) {\n        if (mapView !== undefined) {\n            this.mapViews.push(mapView);\n        }\n    }\n}\n\n/**\n * `ImageCache` is a singleton, so it can be used with multiple MapViews on a single page. This\n * allows to have an image loaded only once for multiple views. THREE is doing something similar,\n * but does not allow to share images that have been loaded from a canvas (which we may need to do\n * if we use SVG images for textures).\n *\n * One application that makes our own cache necessary is the generation of our own textures from\n * data that is not an URL.\n *\n * The `ImageCache` can be improved by adding satistics for memory footprint as well.\n */\nexport class ImageCache {\n    /**\n     * Returns the singleton `instance` of the `ImageCache`.\n     */\n    static get instance(): ImageCache {\n        if (ImageCache.m_instance === undefined) {\n            ImageCache.m_instance = new ImageCache();\n        }\n        return ImageCache.m_instance;\n    }\n\n    /**\n     * Dispose the singleton object. Not normally implemented for singletons, but good for\n     * debugging.\n     */\n    static dispose(): void {\n        ImageCache.m_instance = undefined;\n    }\n\n    private static m_instance: ImageCache | undefined;\n\n    private m_images: Map<string, ImageCacheItem> = new Map();\n\n    /**\n     * Add an image definition to the global cache. Useful when the image data is already loaded.\n     *\n     * @param mapView Specifiy which [[MapView]] requests the image.\n     * @param url URL of image.\n     * @param imageData Optional [ImageData]] containing the image content.\n     */\n    registerImage(\n        mapView: MapView,\n        url: string,\n        imageData: ImageData | ImageBitmap | undefined\n    ): ImageItem {\n        let imageCacheItem = this.findImageCacheItem(url);\n        if (imageCacheItem !== undefined) {\n            if (mapView !== undefined && imageCacheItem.mapViews.indexOf(mapView) < 0) {\n                imageCacheItem.mapViews.push(mapView);\n            }\n            return imageCacheItem.imageItem;\n        }\n\n        imageCacheItem = this.findImageCacheItem(url);\n        if (imageCacheItem !== undefined) {\n            if (mapView !== undefined && imageCacheItem.mapViews.indexOf(mapView) < 0) {\n                imageCacheItem.mapViews.push(mapView);\n            }\n            return imageCacheItem.imageItem;\n        }\n\n        const mapViews: MapView[] = [];\n        if (mapView !== undefined) {\n            mapViews.push(mapView);\n        }\n\n        imageCacheItem = {\n            imageItem: {\n                url,\n                imageData,\n                loaded: false\n            },\n            mapViews\n        };\n\n        this.m_images.set(url, imageCacheItem);\n\n        return imageCacheItem.imageItem;\n    }\n\n    /**\n     * Add an image definition, and optionally start loading the content.\n     *\n     * @param mapView [[MapView]] requesting the image.\n     * @param url URL of image.\n     * @param startLoading Optional flag. If `true` the image will be loaded in the background.\n     */\n    addImage(\n        mapView: MapView,\n        url: string,\n        startLoading = true\n    ): ImageItem | Promise<ImageItem | undefined> | undefined {\n        const imageItem = this.registerImage(mapView, url, undefined);\n        if (imageItem !== undefined && startLoading === true) {\n            return this.loadImage(imageItem);\n        }\n\n        return imageItem;\n    }\n\n    /**\n     * Find [[ImageItem]] for the specified URL.\n     *\n     * @param url URL of image.\n     * @returns `ImageItem` for the URL if the URL is registered, `undefined` otherwise.\n     */\n    findImage(url: string): ImageItem | undefined {\n        const imageItem = this.m_images.get(url);\n        if (imageItem !== undefined) {\n            return imageItem.imageItem;\n        }\n        return undefined;\n    }\n\n    /**\n     * Clear all [[ImageItem]]s belonging to a [[MapView]]. May remove cached items if no\n     * [[MapView]] are registered anymore.\n     *\n     * @param mapView MapView to remove all [[ImageItem]]s from.\n     */\n    clear(mapView: MapView) {\n        const itemsToRemove: string[] = [];\n\n        this.m_images.forEach(imageItem => {\n            const mapViewIndex = imageItem.mapViews.indexOf(mapView);\n            if (mapViewIndex >= 0) {\n                imageItem.mapViews.splice(mapViewIndex, 1);\n            }\n            if (imageItem.mapViews.length === 0) {\n                itemsToRemove.push(imageItem.imageItem.url);\n            }\n        });\n\n        for (const keyToDelete of itemsToRemove) {\n            this.m_images.delete(keyToDelete);\n        }\n    }\n\n    /**\n     * Clear all [[ImageItem]]s from all [[MapView]]s.\n     */\n    clearAll() {\n        this.m_images = new Map();\n    }\n\n    /**\n     * Returns the number of all cached [[ImageItem]]s.\n     */\n    get size(): number {\n        return this.m_images.size;\n    }\n\n    /**\n     * Load an [[ImageItem]]. If the loading process is already running, it returns the current\n     * promise.\n     *\n     * @param imageItem `ImageItem` containing the URL to load image from.\n     * @returns An [[ImageItem]] if the image has already been loaded, a promise otherwise.\n     */\n    loadImage(imageItem: ImageItem): ImageItem | Promise<ImageItem | undefined> {\n        if (imageItem.imageData !== undefined) {\n            return imageItem;\n        }\n\n        if (imageItem.loadingPromise !== undefined) {\n            return imageItem.loadingPromise;\n        }\n\n        const imageLoader = new THREE.ImageLoader();\n\n        imageItem.loadingPromise = new Promise(resolve => {\n            logger.debug(`Loading image: ${imageItem.url}`);\n            imageLoader.load(\n                imageItem.url,\n                image => {\n                    logger.debug(`... finished loading image: ${imageItem.url}`);\n                    this.renderImage(imageItem, image)\n                        .then(() => {\n                            imageItem.loadingPromise = undefined;\n                            resolve(imageItem);\n                        })\n                        .catch(ex => {\n                            logger.error(`... loading image failed: ${imageItem.url} : ${ex}`);\n                            resolve(undefined);\n                        });\n                },\n                // Loading events no longer supported\n                undefined,\n                errorEvent => {\n                    logger.error(`... loading image failed: ${imageItem.url} : ${errorEvent}`);\n\n                    imageItem.loadingPromise = undefined;\n                    resolve(undefined);\n                }\n            );\n        });\n        return imageItem.loadingPromise;\n    }\n\n    /**\n     * Find the cached [[ImageItem]] by URL.\n     *\n     * @param url URL of image.\n     */\n    private findImageCacheItem(url: string): ImageCacheItem | undefined {\n        return this.m_images.get(url);\n    }\n\n    /**\n     * Render the `ImageItem` by using `createImageBitmap()` or by rendering the image into a\n     * [[HTMLCanvasElement]].\n     *\n     * @param imageItem [[ImageItem]] to assign image data to.\n     * @param image [[HTMLImageElement]] to\n     */\n    private renderImage(\n        imageItem: ImageItem,\n        image: HTMLImageElement\n    ): Promise<ImageData | ImageBitmap | undefined> {\n        return new Promise((resolve, reject) => {\n            // use createImageBitmap if it is available. It should be available in webworkers as\n            // well\n            if (typeof createImageBitmap === \"function\") {\n                const options: ImageBitmapOptions = {\n                    premultiplyAlpha: \"default\"\n                };\n\n                logger.debug(`Creating bitmap image: ${imageItem.url}`);\n                createImageBitmap(image, 0, 0, image.width, image.height, options)\n                    .then(imageBitmap => {\n                        logger.debug(`... finished creating bitmap image: ${imageItem.url}`);\n\n                        imageItem.loadingPromise = undefined;\n                        imageItem.imageData = imageBitmap;\n                        imageItem.loaded = true;\n                        resolve(imageBitmap);\n                    })\n                    .catch(ex => {\n                        logger.error(`... loading image failed: ${imageItem.url} : ${ex}`);\n                        resolve(undefined);\n                    });\n            } else {\n                try {\n                    if (typeof document === \"undefined\") {\n                        logger.error(\"Error: document is not available, cannot generate image\");\n                        reject(\n                            new Error(\n                                \"ImageCache#renderImage: document is not available, cannot \" +\n                                    \"render image to create texture\"\n                            )\n                        );\n                    }\n\n                    // TODO: Extract the rendering to the canvas part and make it configurable for\n                    // the client, so it does not rely on the `document`.\n\n                    // use the image, e.g. draw part of it on a canvas\n                    const canvas = document.createElement(\"canvas\");\n                    canvas.width = image.width;\n                    canvas.height = image.height;\n\n                    const context = canvas.getContext(\"2d\");\n                    if (context !== null) {\n                        logger.debug(\n                            // tslint:disable-next-line: max-line-length\n                            `... finished creating bitmap image in canvas: ${imageItem.url} ${image}`\n                        );\n                        context.drawImage(\n                            image,\n                            0,\n                            0,\n                            image.width,\n                            image.height,\n                            0,\n                            0,\n                            canvas.width,\n                            canvas.height\n                        );\n                        const imageData = context.getImageData(0, 0, image.width, image.height);\n                        imageItem.imageData = imageData;\n                        imageItem.loaded = true;\n                        resolve(imageData);\n                    } else {\n                        logger.error(`renderImage: no context found`);\n                        reject(new Error(`ImageCache#renderImage: no context found`));\n                    }\n                } catch (ex) {\n                    logger.error(`renderImage failed: ${ex}`);\n                    imageItem.imageData = undefined;\n                    imageItem.loaded = true;\n                    reject(new Error(`ImageCache#renderImage failed: ${ex}`));\n                }\n            }\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { HighPrecisionLineMaterial } from \"@here/harp-materials\";\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"./MapView\";\n\n/**\n * Manages the fog display in [[MapView]].\n */\nexport class MapViewFog {\n    private m_enabled: boolean = true;\n    private m_fog: THREE.Fog = new THREE.Fog(0x000000); // Default color asked by DefinitelyTyped.\n    private m_fogIsDefined: boolean = false;\n    private m_cachedTheme: Theme = { styles: {} };\n\n    /**\n     * Constructs a `MapViewFog` instance.\n     *\n     * @param m_scene The scene used in [[MapView]] that contains the map objects.\n     */\n    constructor(private m_scene: THREE.Scene) {}\n\n    /**\n     * Allows for disabling the fog, even if it is defined in the theme. Use this property for\n     * custom views like the demo app's debug camera. However, if the theme does not define a\n     * fog, enabling this property here has no effect.\n     *\n     * @param value A boolean that specifies whether the fog should be enabled or disabled.\n     */\n    set enabled(enableFog: boolean) {\n        this.m_enabled = enableFog;\n        if (enableFog && this.m_fogIsDefined && this.m_scene.fog === null) {\n            this.add();\n        } else if (!enableFog && this.m_scene.fog !== null) {\n            this.remove();\n        }\n    }\n\n    /**\n     * Returns the current fog status, enabled or disabled.\n     */\n    get enabled(): boolean {\n        return this.m_enabled;\n    }\n\n    /**\n     * Sets the fog depending on the [[Theme]] instance provided. This function is called when a\n     * theme is loaded. Fog is added only if the theme contains a fog definition with a:\n     * - `color` property, used to set the fog color.\n     * - `startRatio` property, used to set the start distance of the fog as a ratio of the far\n     * clipping plane distance.\n     *\n     * @param theme A [[Theme]] instance.\n     */\n    reset(theme: Theme) {\n        this.m_cachedTheme = theme;\n        if (\n            theme !== undefined &&\n            theme.fog !== undefined &&\n            theme.fog.color !== undefined &&\n            theme.fog.startRatio !== undefined\n        ) {\n            this.m_fogIsDefined = true;\n            this.m_fog.color.set(theme.fog.color);\n            if (this.m_enabled && this.m_scene.fog === null) {\n                this.add();\n            }\n        } else {\n            this.m_fogIsDefined = false;\n            if (this.m_scene.fog !== null) {\n                this.remove();\n            }\n        }\n    }\n\n    /**\n     * Updates the fog at runtime, depending on the camera.\n     *\n     * @param camera An instance of a `THREE.Camera` with a `far` property.\n     */\n    update(mapView: MapView, viewDistance?: number) {\n        if (\n            this.m_scene.fog !== null &&\n            this.m_cachedTheme !== undefined &&\n            this.m_cachedTheme.fog &&\n            this.m_cachedTheme.fog.startRatio !== undefined &&\n            (mapView.camera.far !== undefined || viewDistance !== undefined)\n        ) {\n            // If maximum visibility range is available use it instead of camera.far distance,\n            // this makes fog independent from dynamic camera planes and keeps consistent\n            // distance based \"melting\" (fog) effect during a tilt.\n            const viewRange = viewDistance !== undefined ? viewDistance : mapView.camera.far;\n            // TODO: We may move below constants to theme Fog definition\n            // Density of the fog when viewing straight along the horizon line.\n            const horizontalDensity = 1.0;\n            // Theoretical density of the fog when viewing straight from top to down.\n            const verticalDensity = 0.0;\n            // The fraction of the maximum viewing distance along the eye vector\n            // to start applying the fog.\n            const startRatio = this.m_cachedTheme.fog.startRatio;\n            // The fraction of maximum viewing range at which fog fully covers geometry.\n            const endRatio = 1.0;\n            assert(startRatio <= endRatio);\n            const t = Math.abs(Math.cos(mapView.tilt));\n            const density = MathUtils.smoothStep(horizontalDensity, verticalDensity, t);\n            this.m_fog.near = MathUtils.lerp(viewRange * startRatio, viewRange, 1.0 - density);\n            this.m_fog.far = MathUtils.lerp(viewRange * endRatio, viewRange, density);\n            this.m_fog.near = Math.min(this.m_fog.near, mapView.camera.far);\n            this.m_fog.far = Math.min(this.m_fog.far, mapView.camera.far);\n        }\n    }\n\n    /**\n     * Handles fog addition.\n     */\n    private add() {\n        // When the fog is changed, ThreeJS takes care of recompiling its built-in materials...\n        this.m_scene.fog = this.m_fog;\n        // ...except the `RawShaderMaterial`, on purpose, so it needs to be updated from the app.\n        this.setFogInRawShaderMaterials(true);\n    }\n\n    /**\n     * Handles fog removal.\n     */\n    private remove() {\n        // When the fog is changed, ThreeJS takes care of recompiling its built-in materials...\n        this.m_scene.fog = null;\n        // ...except the `RawShaderMaterial`, on purpose, so it needs to be updated from the app.\n        this.setFogInRawShaderMaterials(false);\n    }\n\n    /**\n     * ThreeJS lets users manage the `RawShaderMaterial` themselves, so they need to be modified\n     * explicitly.\n     *\n     * @see https://github.com/mrdoob/three.js/blob/dev/src/renderers/webgl/WebGLProgram.js#L298\n     */\n    private setFogInRawShaderMaterials(enableFog: boolean) {\n        this.m_scene.traverse(object => {\n            if (!(object instanceof THREE.Mesh)) {\n                return;\n            }\n            if (!(object.material instanceof THREE.Material)) {\n                return;\n            }\n            // HighPrecisionLineMaterial does not support fog\n            if (object.material instanceof HighPrecisionLineMaterial) {\n                return;\n            }\n            // We may skip redundant updates.\n            if (object.material.fog === enableFog) {\n                return;\n            }\n            object.material.fog = enableFog;\n            // Fog properties can't be easily changed at runtime (once the material\n            // is rendered at least once) and thus requires building of new shader\n            // program - force material update.\n            object.material.needsUpdate = true;\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    AttributeMap,\n    composeTechniqueTextureName,\n    DecodedTile,\n    getFeatureId,\n    getPropertyValue,\n    ImageTexture,\n    IndexedTechnique,\n    IndexedTechniqueParams,\n    isLineMarkerTechnique,\n    isPoiTechnique,\n    LineMarkerTechnique,\n    PoiGeometry,\n    PoiTechnique\n} from \"@here/harp-datasource-protocol\";\nimport { ContextualArabicConverter } from \"@here/harp-text-canvas\";\nimport { assert, assertExists, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"../MapView\";\nimport { TextElement } from \"../text/TextElement\";\nimport { DEFAULT_TEXT_DISTANCE_SCALE } from \"../text/TextElementsRenderer\";\nimport { Tile } from \"../Tile\";\nimport { PoiTable } from \"./PoiTableManager\";\n\nconst logger = LoggerManager.instance.create(\"PoiManager\");\n\n/**\n * Interface for the [[ImageTexture]]s that are defined in the atlas.\n */\ninterface ImageTextureDef {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    pixelRatio?: number;\n}\n\n/**\n * POI manager class, responsible for loading the [[PoiGeometry]] objects from the [[DecodedTile]],\n * and preparing them for rendering. Also loads and manages the texture atlases for the icons.\n */\nexport class PoiManager {\n    // Keep track of the missing POI table names, but only warn once.\n    private static m_missingPoiTableName: Map<string, boolean> = new Map();\n    private static m_missingPoiName: Map<string, boolean> = new Map();\n\n    /**\n     * Warn about a missing POI table name, but only once.\n     * @param poiTableName POI mapping table name.\n     * @param poiTable POI table instance.\n     */\n    private static notifyMissingPoiTable(\n        poiTableName: string,\n        poiTable: PoiTable | undefined\n    ): void {\n        if (poiTableName === undefined) {\n            poiTableName = \"undefined\";\n        }\n        if (PoiManager.m_missingPoiTableName.get(poiTableName) === undefined) {\n            PoiManager.m_missingPoiTableName.set(poiTableName, true);\n            if (poiTable !== undefined && !poiTable.loadedOk) {\n                logger.error(`updatePoiFromPoiTable: Could not load POI table '${poiTableName}'!`);\n            } else {\n                logger.error(\n                    `updatePoiFromPoiTable: No POI table with name '${poiTableName}' found!`\n                );\n            }\n        }\n    }\n\n    /**\n     * Warn about a missing POI name, but only once.\n     * @param poiName name of POI.\n     * @param poiTableName POI mapping table name.\n     */\n    private static notifyMissingPoi(poiName: string, poiTableName: string): void {\n        if (poiName === undefined) {\n            poiName = \"undefined\";\n        }\n        const key: string = `${poiTableName}[${poiName}]`;\n        if (PoiManager.m_missingPoiName.get(key) === undefined) {\n            PoiManager.m_missingPoiName.set(key, true);\n            logger.warn(\n                `updatePoiFromPoiTable: ` +\n                    `Cannot find POI info for '${poiName}' in table '${poiTableName}'.`\n            );\n        }\n    }\n\n    private m_imageTextures: Map<string, ImageTexture> = new Map();\n    private m_poiShieldGroups: Map<string, number> = new Map();\n\n    /**\n     * The constructor of the `PoiManager`.\n     *\n     * @param mapView The [[MapView]] instance that should display the POIs.\n     */\n    constructor(readonly mapView: MapView) {}\n\n    /**\n     * Add all POIs from a decoded tile and store them as [[TextElement]]s in the [[Tile]].\n     *\n     * Also handles LineMarkers, which is a recurring marker along a line (road).\n     *\n     * @param tile Tile to add POIs to.\n     * @param decodedTile DecodedTile containing the raw [[PoiGeometry]] objects describing the\n     *  POIs.\n     */\n    addPois(tile: Tile, decodedTile: DecodedTile): void {\n        const poiGeometries = assertExists(decodedTile.poiGeometries);\n        const worldOffsetX = tile.computeWorldOffsetX();\n\n        for (const poiGeometry of poiGeometries) {\n            assert(poiGeometry.technique !== undefined);\n            const techniqueIndex = assertExists(poiGeometry.technique);\n            const technique = decodedTile.techniques[techniqueIndex] as IndexedTechnique;\n\n            if (\n                technique._kindState === false ||\n                (!isLineMarkerTechnique(technique) && !isPoiTechnique(technique))\n            ) {\n                continue;\n            }\n\n            // The POI may be in the data, and there may be a Technique, but the technique may\n            // specify to not show it.\n            if (technique.showOnMap === false) {\n                continue;\n            }\n\n            const positions = new THREE.BufferAttribute(\n                new Float32Array(poiGeometry.positions.buffer),\n                poiGeometry.positions.itemCount\n            );\n\n            if (isLineMarkerTechnique(technique) && positions.count > 0) {\n                this.addLineMarker(tile, poiGeometry, technique, positions, worldOffsetX);\n            } else if (isPoiTechnique(technique)) {\n                this.addPoi(tile, poiGeometry, technique, positions, worldOffsetX);\n            }\n        }\n    }\n\n    /**\n     * Load the texture atlas that defines the segments of the texture that should be used for\n     * specific icons. Creates an [[ImageTexture]] for every element in the atlas, such that it can\n     * be addressed in the theme file.\n     *\n     * @param imageName Name of the image from the theme (NOT the url!).\n     * @param atlas URL of the JSON file defining the texture atlas.\n     */\n    addTextureAtlas(imageName: string, atlas: string) {\n        fetch(atlas)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(\n                        `addTextureAtlas: Cannot load textureAtlas: ${response.statusText}`\n                    );\n                }\n\n                return response.json();\n            })\n            .then((jsonAtlas: any | undefined) => {\n                if (jsonAtlas === undefined) {\n                    logger.info(`addTextureAtlas: TextureAtlas empty: ${atlas}`);\n                    return;\n                }\n\n                try {\n                    logger.debug(\n                        `addTextureAtlas: Loading textureAtlas '${atlas}' for image '${imageName}'`\n                    );\n                    for (const textureName of Object.getOwnPropertyNames(jsonAtlas)) {\n                        const imageTextureDef = jsonAtlas[textureName] as ImageTextureDef;\n\n                        const imageTexture: ImageTexture = {\n                            name: textureName,\n                            image: imageName,\n                            xOffset: imageTextureDef.x,\n                            yOffset: imageTextureDef.y,\n                            width: imageTextureDef.width,\n                            height: imageTextureDef.height\n                        };\n\n                        this.addImageTexture(imageTexture);\n                    }\n                } catch (ex) {\n                    logger.error(\n                        `addTextureAtlas: Failed to load textureAtlas ` + `'${atlas}' : ${ex}`\n                    );\n                }\n                this.mapView.update();\n            })\n\n            .catch((reason: any) => {\n                logger.error(`addTextureAtlas: Failed to load textureAtlas '${atlas}' : ${reason}`);\n            });\n    }\n\n    /**\n     * Add an [[ImageTexture]] such that it is available as a named entity for techniques in theme\n     * files.\n     *\n     * @param imageTexture [[ImageTexture]] that should be available for POIs.\n     */\n    addImageTexture(imageTexture: ImageTexture) {\n        if (imageTexture.name === undefined) {\n            logger.error(\"addImageTexture: Name required\", imageTexture);\n            return;\n        }\n        if (this.m_imageTextures.get(imageTexture.name) !== undefined) {\n            logger.warn(\n                `addImageTexture: Name already used: ${imageTexture.name}` + ` (overriding it)`\n            );\n        }\n\n        this.m_imageTextures.set(imageTexture.name, imageTexture);\n    }\n\n    /**\n     * Return the [[ImageTexture]] registered under the specified name.\n     *\n     * @param name Name of the [[ImageTexture]].\n     */\n    getImageTexture(name: string): ImageTexture | undefined {\n        return this.m_imageTextures.get(name);\n    }\n\n    /**\n     * Update the [[TextElement]] with the information taken from the [[PoiTable]] which is\n     * referenced in the [[PoiInfo]] of the pointLabel.\n     *\n     * If the requested [[PoiTable]] is not available yet, the function returns `false`.\n     * If the [[PoiTable]] is not defined, or if the references POI has no entry in\n     * the [[PoiTable]], no action is taken, and the function returns `false`.\n     *\n     * If the [[PoiTable]] has been processed, it returns `true`, indicating that this function\n     * doesn't have to be called again.\n     *\n     * @param pointLabel The [[TextElement]] to update.\n     *\n     * @returns `true` if the [[PoiTable]] has been processed, and the function does not have to be\n     *          called again.\n     */\n    updatePoiFromPoiTable(pointLabel: TextElement): boolean {\n        const poiInfo = pointLabel.poiInfo;\n        // PoiTable requires poiName to be defined otherwise mapping via PoiTable is\n        // not possible, such as table key is not defined.\n        if (\n            poiInfo === undefined ||\n            poiInfo.poiTableName === undefined ||\n            poiInfo.poiName === undefined\n        ) {\n            return true;\n        }\n\n        // Try to acquire PoiTable\n        const poiTableName = poiInfo.poiTableName;\n        const poiTable = this.mapView.poiTableManager.getPoiTable(poiTableName);\n\n        // Check if PoiTable is found, but its still loading.\n        if (poiTable !== undefined && poiTable.isLoading) {\n            // The PoiTable is still loading, we have to try again.\n            return false;\n        }\n\n        // Remove poiTableName to mark this POI as processed.\n        poiInfo.poiTableName = undefined;\n\n        // PoiTable not found or can not be loaded.\n        if (poiTable === undefined || !poiTable.loadedOk) {\n            PoiManager.notifyMissingPoiTable(poiTableName, poiTable);\n            return true;\n        }\n\n        // Try to acquire PoiTableEntry.\n        const poiName = poiInfo.poiName;\n        const poiTableEntry = poiTable.getEntry(poiName);\n        if (poiTableEntry === undefined) {\n            PoiManager.notifyMissingPoi(poiName, poiTableName);\n            return true;\n        }\n\n        if (poiTableEntry.iconName !== undefined && poiTableEntry.iconName.length > 0) {\n            poiInfo.imageTextureName = composeTechniqueTextureName(\n                poiTableEntry.iconName,\n                poiInfo.technique\n            );\n        }\n\n        pointLabel.visible =\n            poiTableEntry.visible !== undefined ? poiTableEntry.visible : pointLabel.visible;\n        pointLabel.priority =\n            poiTableEntry.priority !== undefined ? poiTableEntry.priority : pointLabel.priority;\n        poiInfo.iconMinZoomLevel =\n            poiTableEntry.iconMinLevel !== undefined\n                ? poiTableEntry.iconMinLevel\n                : poiInfo.iconMinZoomLevel;\n        poiInfo.iconMaxZoomLevel =\n            poiTableEntry.iconMaxLevel !== undefined\n                ? poiTableEntry.iconMaxLevel\n                : poiInfo.iconMaxZoomLevel;\n        poiInfo.textMinZoomLevel =\n            poiTableEntry.textMinLevel !== undefined\n                ? poiTableEntry.textMinLevel\n                : poiInfo.textMinZoomLevel;\n        poiInfo.textMaxZoomLevel =\n            poiTableEntry.textMaxLevel !== undefined\n                ? poiTableEntry.textMaxLevel\n                : poiInfo.textMaxZoomLevel;\n\n        pointLabel.updateMinMaxZoomLevelsFromPoiInfo();\n\n        return true;\n    }\n\n    /**\n     * Clear internal state. Applicable when switching themes.\n     */\n    clear() {\n        this.m_imageTextures.clear();\n        this.m_poiShieldGroups.clear();\n    }\n\n    /**\n     * Add the LineMarker as a POI with a series of positions. Make sure that the LineMarkers\n     * having the same visual all get their `shieldGroupIndex` set appropriately, so it can be taken\n     * care of later that not too many of them are rendered (obey `minDistance` attribute).\n     */\n    private addLineMarker(\n        tile: Tile,\n        poiGeometry: PoiGeometry,\n        technique: LineMarkerTechnique & IndexedTechniqueParams,\n        positions: THREE.BufferAttribute,\n        worldOffsetX: number\n    ) {\n        let imageTextureName: string | undefined =\n            technique.imageTexture !== undefined\n                ? composeTechniqueTextureName(technique.imageTexture, technique)\n                : undefined;\n\n        let text: string = \"\";\n        let userData: AttributeMap | undefined;\n        let featureId: number | undefined;\n\n        if (poiGeometry.stringCatalog !== undefined) {\n            assert(poiGeometry.texts.length > 0);\n            text = poiGeometry.stringCatalog[poiGeometry.texts[0]] || \"\";\n            if (poiGeometry.objInfos !== undefined) {\n                userData = poiGeometry.objInfos[0];\n                featureId = getFeatureId(userData);\n            }\n\n            if (poiGeometry.imageTextures !== undefined) {\n                assert(poiGeometry.imageTextures.length > 0);\n                imageTextureName = poiGeometry.stringCatalog[poiGeometry.imageTextures[0]];\n            }\n        }\n\n        // let the combined image texture name (name of image in atlas, not the URL) and\n        // text of the shield be the group key, at worst scenario it may be:\n        // \"undefined-\"\n        const groupKey = String(imageTextureName) + \"-\" + text;\n        let shieldGroupIndex = this.m_poiShieldGroups.get(groupKey);\n        if (shieldGroupIndex === undefined) {\n            shieldGroupIndex = this.m_poiShieldGroups.size;\n            this.m_poiShieldGroups.set(groupKey, shieldGroupIndex);\n        }\n\n        // Debugging help to identify the group of a shield :\n        // text = groupKey + \": \" + text;\n\n        const positionArray: THREE.Vector3[] = [];\n        for (let i = 0; i < positions.count; i += 3) {\n            const x = positions.getX(i) + worldOffsetX;\n            const y = positions.getY(i);\n            const z = positions.getZ(i);\n            positionArray.push(new THREE.Vector3(x, y, z));\n        }\n        const textElement = this.checkCreateTextElement(\n            tile,\n            text,\n            technique,\n            imageTextureName,\n            undefined, // TBD for road shields\n            undefined,\n            shieldGroupIndex,\n            featureId,\n            positionArray,\n            undefined,\n            undefined,\n            userData\n        );\n\n        // If the poi icon is rendered, the label that shows text should also be rendered.\n        // The distance rule of the icon should apply, not the one for text (only) labels.\n        textElement.ignoreDistance = false;\n        tile.addTextElement(textElement);\n    }\n\n    /**\n     * Create and add POI [[TextElement]]s to tile with a series of positions.\n     */\n    private addPoi(\n        tile: Tile,\n        poiGeometry: PoiGeometry,\n        technique: PoiTechnique & IndexedTechniqueParams,\n        positions: THREE.BufferAttribute,\n        worldOffsetX: number\n    ) {\n        if (poiGeometry.stringCatalog === undefined) {\n            return;\n        }\n\n        const techniqueTextureName: string | undefined =\n            technique.imageTexture !== undefined\n                ? composeTechniqueTextureName(technique.imageTexture, technique)\n                : undefined;\n\n        const poiTechnique = technique as PoiTechnique;\n        const poiTableName = poiTechnique.poiTable;\n        let poiName = poiTechnique.poiName;\n\n        for (let i = 0; i < positions.count; ++i) {\n            const x = positions.getX(i) + worldOffsetX;\n            const y = positions.getY(i);\n            const z = positions.getZ(i);\n\n            assert(poiGeometry.texts.length > i);\n            let imageTextureName = techniqueTextureName;\n            const text: string = poiGeometry.stringCatalog[poiGeometry.texts[i]] || \"\";\n            const userData =\n                poiGeometry.objInfos !== undefined ? poiGeometry.objInfos[i] : undefined;\n            const featureId = getFeatureId(userData);\n            if (poiGeometry.imageTextures !== undefined && poiGeometry.imageTextures[i] >= 0) {\n                assert(poiGeometry.imageTextures.length > i);\n                imageTextureName = poiGeometry.stringCatalog[poiGeometry.imageTextures[i]];\n            }\n            if (poiTableName !== undefined) {\n                // The POI name to be used is taken from the data, since it will\n                // specify the name of the texture to use.\n\n                // The POI name in the technique may override the POI name from the\n                // data.\n                poiName =\n                    poiTechnique.poiName === undefined ? imageTextureName : poiTechnique.poiName;\n\n                imageTextureName = undefined;\n            }\n\n            const textElement = this.checkCreateTextElement(\n                tile,\n                text,\n                technique,\n                imageTextureName,\n                poiTableName,\n                poiName,\n                0,\n                featureId,\n                x,\n                y,\n                z,\n                userData\n            );\n\n            tile.addTextElement(textElement);\n        }\n    }\n\n    /**\n     * Create the [[TextElement]] for a POI. Even if the POI has no text, it is required that there\n     * is a [[TextElement]], since POIs are hooked onto [[TextElement]]s for sorting.(Sorted by\n     * priority attribute).\n     */\n    private checkCreateTextElement(\n        tile: Tile,\n        text: string,\n        technique: (PoiTechnique | LineMarkerTechnique) & IndexedTechniqueParams,\n        imageTextureName: string | undefined,\n        poiTableName: string | undefined,\n        poiName: string | undefined,\n        shieldGroupIndex: number,\n        featureId: number | undefined,\n        x: number | THREE.Vector3[],\n        y: number | undefined,\n        z: number | undefined,\n        userData?: {}\n    ): TextElement {\n        const priority = technique.priority !== undefined ? technique.priority : 0;\n        const positions = Array.isArray(x) ? (x as THREE.Vector3[]) : new THREE.Vector3(x, y, z);\n\n        // The current zoomlevel of mapview. Since this method is called for all tiles in the\n        // VisibleTileSet we can be sure that the current zoomlevel matches the zoomlevel where\n        // the tile should be shown.\n        const env = this.mapView.env;\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, env)\n                : technique.fadeNear;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, env)\n                : technique.fadeFar;\n        const xOffset = getPropertyValue(technique.xOffset, env);\n        const yOffset = getPropertyValue(technique.yOffset, env);\n\n        const textElement: TextElement = new TextElement(\n            ContextualArabicConverter.instance.convert(text),\n            positions,\n            tile.textStyleCache.getRenderStyle(technique),\n            tile.textStyleCache.getLayoutStyle(technique),\n            getPropertyValue(priority, env),\n            xOffset !== undefined ? xOffset : 0.0,\n            yOffset !== undefined ? yOffset : 0.0,\n            featureId,\n            technique.style,\n            fadeNear,\n            fadeFar,\n            tile.offset\n        );\n\n        textElement.mayOverlap = technique.textMayOverlap === true;\n        textElement.reserveSpace = technique.textReserveSpace !== false;\n        textElement.alwaysOnTop = technique.alwaysOnTop === true;\n        textElement.userData = userData;\n\n        // imageTextureName may be undefined if a poiTable is used.\n        if (imageTextureName === undefined && poiTableName !== undefined) {\n            imageTextureName = \"\";\n        } else if (imageTextureName !== undefined && poiTableName !== undefined) {\n            logger.warn(\n                \"Possible duplicate POI icon definition via imageTextureName and poiTable!\"\n            );\n        }\n\n        if (imageTextureName !== undefined) {\n            const textIsOptional = technique.textIsOptional === true;\n            const iconIsOptional = technique.iconIsOptional !== false;\n            const renderTextDuringMovements = !(technique.renderTextDuringMovements === false);\n            const iconMayOverlap =\n                technique.iconMayOverlap === undefined\n                    ? textElement.textMayOverlap\n                    : technique.iconMayOverlap === true;\n            const iconReserveSpace =\n                technique.iconReserveSpace === undefined\n                    ? textElement.textReservesSpace\n                    : technique.iconReserveSpace !== false;\n\n            textElement.poiInfo = {\n                technique,\n                imageTextureName,\n                poiTableName,\n                poiName,\n                shieldGroupIndex,\n                textElement,\n                textIsOptional,\n                iconIsOptional,\n                renderTextDuringMovements,\n                mayOverlap: iconMayOverlap,\n                reserveSpace: iconReserveSpace,\n                featureId,\n                iconMinZoomLevel: technique.iconMinZoomLevel,\n                iconMaxZoomLevel: technique.iconMaxZoomLevel,\n                textMinZoomLevel: technique.textMinZoomLevel,\n                textMaxZoomLevel: technique.textMaxZoomLevel\n            };\n            textElement.updateMinMaxZoomLevelsFromPoiInfo();\n        } else {\n            // Select the smaller/larger one of the two min/max values, because the TextElement\n            // is a container for both.\n            if (textElement.minZoomLevel === undefined) {\n                textElement.minZoomLevel = technique.textMinZoomLevel;\n            }\n\n            if (textElement.maxZoomLevel === undefined) {\n                textElement.maxZoomLevel = technique.textMaxZoomLevel;\n            }\n        }\n\n        textElement.distanceScale =\n            technique.distanceScale !== undefined\n                ? technique.distanceScale\n                : DEFAULT_TEXT_DISTANCE_SCALE;\n\n        // tslint:disable-next-line: deprecation\n        textElement.kind = technique.kind;\n        return textElement;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    PoiStackMode,\n    PoiTableDef,\n    PoiTableEntryDef,\n    PoiTableRef,\n    Theme\n} from \"@here/harp-datasource-protocol\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport { MapView } from \"../MapView\";\n\nconst logger = LoggerManager.instance.create(\"PoiTable\");\n\n/**\n * Class to store and maintain individual POI information for the [[PoiTable]].\n */\nclass PoiTableEntry implements PoiTableEntryDef {\n    /**\n     * Verify that the JSON description of the POI table entry is valid.\n     *\n     * @param jsonEntry JSON description of the POI table entry.\n     *\n     * @returns `true` if the `jsonEntry` is valid.\n     */\n    static verifyJSON(jsonEntry: PoiTableEntryDef): boolean {\n        let isOK =\n            typeof jsonEntry.name === \"string\" &&\n            jsonEntry.name.length > 0 &&\n            (jsonEntry.altNames === undefined || Array.isArray(jsonEntry.altNames)) &&\n            (jsonEntry.stackMode === undefined ||\n                jsonEntry.stackMode === \"yes\" ||\n                jsonEntry.stackMode === \"no\" ||\n                jsonEntry.stackMode === \"parent\") &&\n            (jsonEntry.visible === undefined || typeof jsonEntry.visible === \"boolean\") &&\n            (jsonEntry.priority === undefined || typeof jsonEntry.priority === \"number\") &&\n            (jsonEntry.iconMinLevel === undefined || typeof jsonEntry.iconMinLevel === \"number\") &&\n            (jsonEntry.iconMaxLevel === undefined || typeof jsonEntry.iconMaxLevel === \"number\") &&\n            (jsonEntry.textMinLevel === undefined || typeof jsonEntry.textMinLevel === \"number\") &&\n            (jsonEntry.textMaxLevel === undefined || typeof jsonEntry.textMaxLevel === \"number\");\n\n        if (isOK && jsonEntry.altNames !== undefined) {\n            const altNames = jsonEntry.altNames as string[];\n            for (const str in altNames) {\n                if (typeof str !== \"string\") {\n                    isOK = false;\n                    break;\n                }\n            }\n        }\n\n        return isOK;\n    }\n\n    /** Default name of the POI as the key for looking it up. */\n    name?: string;\n    /** Alternative names of the POI. */\n    altNames?: string[];\n    /** Visibility of the POI. If `false`, the POI will not be rendered. */\n    visible?: boolean;\n    /** Name of the icon, defined in the the texture atlases. */\n    iconName?: string;\n    /** Stacking mode of the POI. For future use. */\n    stackMode?: PoiStackMode;\n    /**\n     * Priority of the POI to select the visible set in case there are more POIs than can be\n     * handled.\n     */\n    priority?: number;\n    /** Minimum zoom level to render the icon on. */\n    iconMinLevel?: number;\n    /** Maximum zoom level to render the icon on. */\n    iconMaxLevel?: number;\n    /** Minimum zoom level to render the text label on. */\n    textMinLevel?: number;\n    /** Maximum zoom level to render the text label on. */\n    textMaxLevel?: number;\n\n    /**\n     * Setup the [[PoiTableEntry]] from the JSON description. It is assumed that the jsonEntry has\n     * been verified with [[PoiTableEntry#verifyJSON]].\n     *\n     * @param jsonEntry JSON description of the POI table entry. Expected to have been verified with\n     *          [[PoiTableEntry#verifyJSON]].\n     */\n    setup(jsonEntry: PoiTableEntryDef) {\n        this.name = jsonEntry.name;\n        this.altNames = jsonEntry.altNames;\n        this.iconName = jsonEntry.iconName;\n        this.visible = jsonEntry.visible;\n        this.priority = jsonEntry.priority;\n        this.iconMinLevel = jsonEntry.iconMinLevel;\n        this.iconMaxLevel = jsonEntry.iconMaxLevel;\n        this.textMinLevel = jsonEntry.textMinLevel;\n        this.textMaxLevel = jsonEntry.textMaxLevel;\n\n        switch (jsonEntry.stackMode) {\n            case \"yes\":\n                this.stackMode = PoiStackMode.Show;\n                break;\n            case \"no\":\n                this.stackMode = PoiStackMode.Hide;\n                break;\n            case \"parent\":\n                this.stackMode = PoiStackMode.ShowParent;\n                break;\n            default:\n        }\n    }\n}\n\n/**\n * The `PoiTable` stores individual information for each POI type. If a [[TextElement]] has a\n * reference to a PoiTable (if TextElement.poiInfo.poiTableName is set), information for the\n * TextElement and its icon are read from the PoiTable.\n *\n * The key to look up the POI is taken from the data, in case of OSM data with TileZen data, the\n * `poiNameField` is set to `kind`, which makes the content of the field `kind` in the data the key\n * to look up the POIs in the [[PoiTable]].\n *\n * On the side of the [[PoiTable]], the key to look up the PoiTableEntry is either the property\n * \"name\" of the [[PoiTableEntry]] (which should be unique), or the alternative list of names\n * `altNames`, where each value should also be unique. If the property `useAltNamesForKey` is set to\n * `true`, the `altNames` will be used.\n */\nexport class PoiTable {\n    /**\n     * Stores the list of [[PoiTableEntry]]s.\n     */\n    private readonly poiList: PoiTableEntry[] = new Array();\n    /**\n     * Dictionary to look up for [[PoiTableEntry]] quickly. The dictionary is either created for\n     * the `name` property of the [[PoiTableEntry]], which will identify POI, or for all of\n     * alternative the names defined in `altNames` of [[PoiTableEntry]] JSON object.\n     * Value assigned to key it is the index to [[poiList]] array which contain actual\n     * [[PoiTabelEntry]] objects.\n     */\n    private readonly poiDict: Map<string, number> = new Map();\n    private m_isLoading = false;\n    private m_loadedOk: boolean | undefined = undefined;\n\n    /**\n     * Creates an instance of PoiTable.\n     *\n     * @param {string} name Name of the `PoiTable`. Must be unique.\n     * @param {boolean} useAltNamesForKey Pass `true` to use the contents of the property `altNames`\n     *          to find a [[PoiTableEntry]] in the table.\n     */\n    constructor(readonly name: string, readonly useAltNamesForKey: boolean) {}\n\n    /**\n     * Returns `true` if the table is currently being loaded, `false` otherwise.\n     *\n     * @readonly\n     */\n    get isLoading(): boolean {\n        return this.m_isLoading;\n    }\n\n    /**\n     * Returns `true` if the table has been loaded correctly, `false` otherwise.\n     *\n     * @readonly\n     */\n    get loadedOk(): boolean {\n        return this.m_loadedOk === true;\n    }\n\n    /**\n     * Gets [[PoiTableEntry]] for poi name specified.\n     *\n     * @param poiName poi name or one of its alternative names if [[useAltNamesForKey]] is\n     * set to `true`.\n     * @returns [[PoiTableEntry]] object or undefined if name was not found in dictionary.\n     */\n    getEntry(poiName: string): PoiTableEntry | undefined {\n        const entryIdx: number | undefined = this.poiDict.get(poiName);\n        if (entryIdx !== undefined) {\n            if (entryIdx < this.poiList.length) {\n                return this.poiList[entryIdx];\n            } else {\n                throw new Error(\"Poi table entry index out of stored list!\");\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Start to load the PoiTable from the specified URL. Can only be called once per table.\n     *\n     * @param {string} poiTableUrl URL that points to the JSON file.\n     *\n     * @returns {Promise<boolean>} Promise is being resolved once the JSON file has been fetched and\n     *          the `PoiTable` has been set up.\n     */\n    async load(poiTableUrl: string): Promise<boolean> {\n        if (this.m_loadedOk !== undefined) {\n            // Only load once.\n            return true;\n        }\n\n        this.m_loadedOk = false;\n\n        const response = await fetch(poiTableUrl);\n\n        if (!response.ok) {\n            throw new Error(\n                `load: Cannot load POI table at ${poiTableUrl}:` + ` ${response.statusText}`\n            );\n        }\n\n        const jsonPoiTable = (await response.json()) as PoiTableDef;\n        if (jsonPoiTable === undefined) {\n            logger.info(`load: TextureAtlas empty: ${poiTableUrl}`);\n            return true;\n        }\n\n        this.startLoading();\n\n        try {\n            logger.debug(`load: Loading POI table '${poiTableUrl}' for table '${this.name}'`);\n\n            if (jsonPoiTable.poiList !== undefined && Array.isArray(jsonPoiTable.poiList)) {\n                for (const tableEntry of jsonPoiTable.poiList) {\n                    if (PoiTableEntry.verifyJSON(tableEntry)) {\n                        const newPoiEntry = new PoiTableEntry();\n                        newPoiEntry.setup(tableEntry);\n                        const entryIdx = this.poiList.push(newPoiEntry) - 1;\n\n                        if (!this.useAltNamesForKey) {\n                            // Use actual name of entry as the key\n                            if (newPoiEntry.name === undefined) {\n                                logger.warn(\n                                    `load: Invalid entry in POI table '${poiTableUrl}' : ` +\n                                        `. No name set in entry: ${tableEntry}.`\n                                );\n                            } else {\n                                this.poiDict.set(newPoiEntry.name, entryIdx);\n                            }\n                        } else {\n                            if (\n                                newPoiEntry.altNames !== undefined &&\n                                newPoiEntry.altNames.length > 0\n                            ) {\n                                // Use the list of alternative names as keys.\n                                for (const altName of newPoiEntry.altNames) {\n                                    this.poiDict.set(altName, entryIdx);\n                                }\n                            } else {\n                                logger.debug(\n                                    `load: Invalid entry in POI table '${poiTableUrl}' : ` +\n                                        `No alternative names set in entry: ${JSON.stringify(\n                                            tableEntry\n                                        )}.`\n                                );\n                            }\n                        }\n                    } else {\n                        logger.warn(\n                            `load: Invalid entry in POI table '${poiTableUrl}' : ${JSON.stringify(\n                                tableEntry\n                            )}`\n                        );\n                    }\n                }\n            }\n            this.m_loadedOk = true;\n            this.finishedLoading();\n        } catch (ex) {\n            logger.error(`load: Failed to load POI table ` + `'${poiTableUrl}' : ${ex}`);\n            this.m_loadedOk = false;\n            this.finishedLoading();\n            return false;\n        }\n        return true;\n    }\n\n    private startLoading() {\n        this.m_isLoading = true;\n    }\n\n    private finishedLoading() {\n        this.m_isLoading = false;\n    }\n}\n\n/**\n * The `PoiTableManager` manages the list of [[PoiTables]] that can be defined in the [[Theme]]\n * file.\n */\nexport class PoiTableManager {\n    private m_isLoading = false;\n    private m_poiTables: Map<string, PoiTable> = new Map();\n\n    /**\n     * Creates an instance of PoiTableManager.\n     * @param {MapView} mapView Owning [[MapView]].\n     */\n    constructor(readonly mapView: MapView) {}\n\n    /**\n     * Load the [[PoiTable]]s that are stored in the [[MapView]]s [[Theme]]. Note that duplicate\n     * names of [[PoiTable]]s in the [[Theme]] will lead to inaccessible [[PoiTable]]s.\n     *\n     * @param {Theme} theme [[Theme]] containing all [[PoiTable]]s to load.\n     *\n     * @returns {Promise<void>} Resolved once all the [[PoiTable]]s in the [[Theme]] have been\n     *          loaded.\n     */\n    async loadPoiTables(theme: Theme): Promise<void> {\n        const finished = new Promise<void>(resolve => {\n            this.clear();\n\n            // Add the POI tables defined in the theme.\n            if (theme.poiTables !== undefined) {\n                this.startLoading();\n\n                // Gather promises to signal the success of having loaded them all\n                const loadPromises: Array<Promise<boolean>> = new Array();\n\n                theme.poiTables.forEach((poiTableRef: PoiTableRef) => {\n                    if (\n                        poiTableRef !== undefined &&\n                        poiTableRef.name !== undefined &&\n                        typeof poiTableRef.name === \"string\"\n                    ) {\n                        const poiTable = new PoiTable(\n                            poiTableRef.name,\n                            poiTableRef.useAltNamesForKey !== false\n                        );\n                        if (poiTableRef.url !== undefined && typeof poiTableRef.url === \"string\") {\n                            this.addTable(poiTable);\n                            loadPromises.push(poiTable.load(poiTableRef.url));\n                        } else {\n                            logger.error(`POI table definition has no valid url: ${poiTableRef}`);\n                        }\n                    } else {\n                        logger.error(`POI table definition has no valid name: ${poiTableRef}`);\n                    }\n                });\n\n                if (loadPromises.length > 0) {\n                    Promise.all(loadPromises).finally(() => {\n                        this.finishLoading();\n                        resolve();\n                    });\n                } else {\n                    this.finishLoading();\n                    resolve();\n                }\n            } else {\n                this.finishLoading();\n                resolve();\n            }\n        });\n\n        return finished;\n    }\n\n    /**\n     * Clear the list of [[PoiTable]]s.\n     */\n    clear() {\n        this.m_poiTables = new Map();\n    }\n\n    /**\n     * Return the map of [[PoiTable]]s.\n     */\n    get poiTables(): Map<string, PoiTable> {\n        return this.m_poiTables;\n    }\n\n    /**\n     * Manually add a [[PoiTable]]. Normally, the [[PoiTables]]s are specified in the [[Theme]].\n     * Ensure that the name is unique.\n     */\n    addTable(poiTable: PoiTable) {\n        this.m_poiTables.set(poiTable.name, poiTable);\n    }\n\n    /**\n     * Retrieve a [[PoiTable]] by name.\n     *\n     * @param {(string | undefined)} poiTableName Name of the [[PoiTable]].\n     *\n     * @returns {(PoiTable | undefined)} The found [[poiTable]] if it could be found, `undefined`\n     *          otherwise.\n     */\n    getPoiTable(poiTableName: string | undefined): PoiTable | undefined {\n        return poiTableName === undefined ? undefined : this.m_poiTables.get(poiTableName);\n    }\n\n    /**\n     * Return `true` if the [[PoiTable]]s have finished loading.\n     *\n     * @readonly\n     */\n    get finishedLoading(): boolean {\n        return !this.m_isLoading;\n    }\n\n    private startLoading() {\n        this.m_isLoading = true;\n    }\n\n    private finishLoading() {\n        this.m_isLoading = false;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { Definitions, StyleSet, Theme } from \"@here/harp-datasource-protocol\";\nimport { MapEnv, StyleSetEvaluator } from \"@here/harp-datasource-protocol/index-decoder\";\nimport {\n    GeoCoordinates,\n    MercatorConstants,\n    polarTilingScheme,\n    TileKey,\n    TilingScheme,\n    TransverseMercatorUtils\n} from \"@here/harp-geoutils\";\n\nimport { DataSource, DataSourceOptions } from \"./DataSource\";\nimport { createMaterial } from \"./DecodedTileHelpers\";\nimport { Tile } from \"./Tile\";\n\nexport interface PolarTileDataSourceOptions extends DataSourceOptions {\n    /**\n     * Optional level offset of regular tiles from reference datasource to align tiles to.\n     * Default is -1.\n     */\n    geometryLevelOffset?: number;\n\n    /**\n     * Enable debug display for generated tiles.\n     * Default is false.\n     */\n    debugTiles?: boolean;\n}\n\n/**\n * [[DataSource]] providing geometry for poles\n */\nexport class PolarTileDataSource extends DataSource {\n    private m_tilingScheme: TilingScheme = polarTilingScheme;\n    private m_maxLatitude = THREE.MathUtils.radToDeg(MercatorConstants.MAXIMUM_LATITUDE);\n    private m_geometryLevelOffset: number;\n    private m_debugTiles: boolean;\n\n    private m_styleSetEvaluator?: StyleSetEvaluator;\n    private m_northPoleMaterial?: THREE.Material;\n    private m_southPoleMaterial?: THREE.Material;\n\n    constructor({\n        name = \"polar\",\n        styleSetName,\n        minDataLevel,\n        maxDataLevel,\n        minDisplayLevel,\n        maxDisplayLevel,\n        storageLevelOffset = -2,\n        geometryLevelOffset = 1,\n        debugTiles = false\n    }: PolarTileDataSourceOptions) {\n        super({\n            name,\n            styleSetName,\n            minDataLevel,\n            maxDataLevel,\n            minDisplayLevel,\n            maxDisplayLevel,\n            storageLevelOffset\n        });\n\n        this.m_geometryLevelOffset = geometryLevelOffset;\n        this.m_debugTiles = debugTiles;\n        this.cacheable = false;\n    }\n\n    /** @override */\n    dispose() {\n        if (this.m_northPoleMaterial) {\n            this.m_northPoleMaterial.dispose();\n            delete this.m_northPoleMaterial;\n        }\n        if (this.m_southPoleMaterial) {\n            this.m_southPoleMaterial.dispose();\n            delete this.m_southPoleMaterial;\n        }\n        if (this.m_styleSetEvaluator) {\n            delete this.m_styleSetEvaluator;\n        }\n    }\n\n    createMaterial(kind: string, styleSetEvaluator: StyleSetEvaluator): THREE.Material | undefined {\n        const env = new MapEnv({\n            $geometryType: \"polygon\",\n            $layer: \"earth\",\n            kind\n        });\n\n        const techniques = styleSetEvaluator.getMatchingTechniques(env);\n\n        return techniques.length !== 0\n            ? createMaterial({ technique: techniques[0], env })\n            : undefined;\n    }\n\n    /** @override */\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        this.dispose();\n\n        if (styleSet !== undefined) {\n            this.m_styleSetEvaluator = new StyleSetEvaluator(styleSet, definitions);\n\n            this.m_northPoleMaterial = this.createMaterial(\"north_pole\", this.m_styleSetEvaluator);\n            this.m_southPoleMaterial = this.createMaterial(\"south_pole\", this.m_styleSetEvaluator);\n        }\n\n        this.mapView.markTilesDirty(this);\n    }\n\n    /** @override */\n    setTheme(theme: Theme, languages?: string[]): void {\n        const styleSet =\n            (this.styleSetName !== undefined && theme.styles && theme.styles[this.styleSetName]) ||\n            [];\n\n        this.setStyleSet(styleSet, theme.definitions, languages);\n    }\n\n    /** @override */\n    canGetTile(zoomLevel: number, tileKey: TileKey): boolean {\n        if (zoomLevel !== tileKey.level || tileKey.level < 1) {\n            return false;\n        }\n\n        const { north, south } = this.m_tilingScheme.getGeoBox(tileKey);\n\n        return north > this.m_maxLatitude || south < -this.m_maxLatitude;\n    }\n\n    /** @override */\n    shouldSubdivide(zoomLevel: number, tileKey: TileKey): boolean {\n        if (zoomLevel <= tileKey.level) {\n            return false;\n        }\n\n        const { north, south } = this.m_tilingScheme.getGeoBox(tileKey);\n\n        return north > this.m_maxLatitude || south < -this.m_maxLatitude;\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_tilingScheme;\n    }\n\n    /** @override */\n    getTile(tileKey: TileKey): Tile {\n        const tile = new Tile(this, tileKey);\n\n        this.createTileGeometry(tile);\n\n        return tile;\n    }\n\n    get geometryLevelOffset(): number {\n        return this.m_geometryLevelOffset;\n    }\n\n    set geometryLevelOffset(geometryLevelOffset: number) {\n        this.m_geometryLevelOffset = geometryLevelOffset;\n    }\n\n    private intersectEdge(latitude: number, a: GeoCoordinates, b: GeoCoordinates): GeoCoordinates {\n        const latA = a.latitude;\n        const latB = b.latitude;\n\n        let lonA = a.longitude;\n        let lonB = b.longitude;\n\n        if (Math.abs(latA) === 90) {\n            lonA = lonB;\n        }\n        if (Math.abs(latB) === 90) {\n            lonB = lonA;\n        }\n        const deltaLat = latB - latA;\n        const deltaLon = lonB - lonA;\n        const scale = (latitude - latA) / deltaLat;\n\n        return new GeoCoordinates(latitude, lonA + deltaLon * scale, 0);\n    }\n\n    private createTileGeometry(tile: Tile): void {\n        const { north, south } = tile.geoBox;\n\n        const isNorthPole = north > 0 && south >= 0;\n        const material = isNorthPole ? this.m_northPoleMaterial : this.m_southPoleMaterial;\n        if (material === undefined) {\n            tile.forceHasGeometry(true);\n            return;\n        }\n\n        const srcProjection = this.m_tilingScheme.projection;\n        const dstProjection = this.projection;\n\n        const maxLat = this.m_maxLatitude;\n        const poleLat = isNorthPole ? maxLat : -maxLat;\n\n        const box = this.m_tilingScheme.boundingBoxGenerator.getWorldBox(tile.tileKey);\n\n        const pBL = srcProjection.unprojectPoint(new THREE.Vector3(box.min.x, box.min.y, 0));\n        const pBR = srcProjection.unprojectPoint(new THREE.Vector3(box.max.x, box.min.y, 0));\n        const pTR = srcProjection.unprojectPoint(new THREE.Vector3(box.max.x, box.max.y, 0));\n        const pTL = srcProjection.unprojectPoint(new THREE.Vector3(box.min.x, box.max.y, 0));\n\n        let points: GeoCoordinates[];\n        let needsGeometryCut = false;\n\n        // special case where tile contains half of the hemisphere\n        if (tile.tileKey.level === 1) {\n            const isLeftHalf = box.min.x === 0;\n\n            const poleX = isLeftHalf ? box.max.x : box.min.x;\n            const poleY = (box.max.y + box.min.y) / 2;\n            const pPole = srcProjection.unprojectPoint(new THREE.Vector3(poleX, poleY, 0));\n\n            // coordinates are not used, needed for right position\n            const pXX = isLeftHalf ? pBL : pBR;\n\n            points = isNorthPole\n                ? isLeftHalf\n                    ? [pPole, pTR, pXX, pBR]\n                    : [pPole, pBL, pXX, pTL]\n                : isLeftHalf\n                ? [pPole, pBR, pXX, pTR]\n                : [pPole, pTL, pXX, pBL];\n\n            needsGeometryCut = true;\n        } else {\n            // ccw for north, cw for south\n            points = isNorthPole ? [pBL, pBR, pTR, pTL] : [pBL, pTL, pTR, pBR];\n\n            const lats = points.map(p => p.latitude);\n            const lmax = Math.max(...lats);\n            const lmin = Math.min(...lats);\n\n            const isAllPointsOut = isNorthPole ? lmax < poleLat : lmin > poleLat;\n            if (isAllPointsOut) {\n                return;\n            }\n\n            const isSomePointsOut = isNorthPole ? lmin < poleLat : lmax > poleLat;\n            needsGeometryCut = isSomePointsOut;\n\n            if (needsGeometryCut) {\n                const nearest = lats.indexOf(isNorthPole ? lmax : lmin);\n                if (nearest !== 0) {\n                    for (let i = 0; i < nearest; i++) {\n                        points.push(points.shift() as GeoCoordinates);\n                    }\n                }\n            }\n        }\n\n        if (needsGeometryCut) {\n            const centerX = (box.min.x + box.max.x) / 2;\n            const centerY = (box.min.y + box.max.y) / 2;\n            const center = srcProjection.unprojectPoint(new THREE.Vector3(centerX, centerY, 0));\n\n            TransverseMercatorUtils.alignLongitude(points, center);\n\n            // points aligned as follows:\n            // a - nearest to the pole, always in\n            // b - next to nearest\n            // c - farthes from the pole, always out\n            // d - prev from nearest\n            const a = points[0];\n            const b = points[1];\n            const c = points[2];\n            const d = points[3];\n\n            const inPointB = Math.abs(b.latitude) >= maxLat;\n            const inPointD = Math.abs(d.latitude) >= maxLat;\n\n            const cutStart = inPointB\n                ? this.intersectEdge(poleLat, b, c)\n                : this.intersectEdge(poleLat, a, b);\n\n            const cutEnd = inPointD\n                ? this.intersectEdge(poleLat, d, c)\n                : this.intersectEdge(poleLat, a, d);\n\n            points.splice(inPointB ? 2 : 1, 4, cutStart);\n\n            const level = tile.tileKey.level - this.storageLevelOffset + this.m_geometryLevelOffset;\n            // tslint:disable-next-line:no-bitwise\n            const subdivisions = 1 << Math.max(0, level);\n            const step = 360 / subdivisions;\n\n            const cutIndexStart = Math.floor((cutStart.longitude + 180) / step);\n            const cutIndexEnd = Math.ceil((cutEnd.longitude + 180) / step);\n\n            for (let i = cutIndexStart + 1; i < cutIndexEnd; i++) {\n                points.push(new GeoCoordinates(poleLat, i * step - 180, 0));\n            }\n\n            points.push(cutEnd);\n            if (inPointD) {\n                points.push(d);\n            }\n        }\n\n        const g = new THREE.Geometry();\n\n        for (const point of points) {\n            const projected = dstProjection.projectPoint(point, new THREE.Vector3());\n            g.vertices.push(projected.sub(tile.center));\n        }\n\n        for (let i = 1; i < points.length - 1; i++) {\n            g.faces.push(isNorthPole ? new THREE.Face3(0, i, i + 1) : new THREE.Face3(0, i + 1, i));\n        }\n\n        const geometry = new THREE.BufferGeometry();\n        geometry.fromGeometry(g);\n        g.dispose();\n\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.userData = {\n            dataSource: this.name,\n            tileKey: tile.tileKey\n        };\n\n        if (this.m_debugTiles) {\n            const color = Math.round(Math.abs(Math.sin(11 * tile.tileKey.mortonCode())) * 0xffffff);\n            mesh.material = new THREE.MeshBasicMaterial({ color, transparent: true, opacity: 0.5 });\n\n            tile.objects.push(\n                new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ color, wireframe: true }))\n            );\n        }\n\n        tile.objects.push(mesh);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CubemapSky } from \"@here/harp-datasource-protocol\";\nimport { LoggerManager } from \"@here/harp-utils\";\nimport { CubeTexture, CubeTextureLoader, Texture } from \"three\";\n\nconst logger = LoggerManager.instance.create(\"SkyCubemapTexture\");\n\n/**\n * Number of faces that form a [[SkyCubemapTexture]].\n */\nexport const SKY_CUBEMAP_FACE_COUNT = 6;\n\n/**\n * Maps the faceId to the expected position in the threejs faces array.\n */\nexport enum SkyCubemapFaceId {\n    \"positiveX\",\n    \"negativeX\",\n    \"positiveY\",\n    \"negativeY\",\n    \"positiveZ\",\n    \"negativeZ\"\n}\n\n/**\n * Class that handles loading all 6 faces of a [[CubeTexture]], to be used with [[SkyBackground]].\n */\nexport class SkyCubemapTexture {\n    private m_skybox: CubeTexture;\n\n    /**\n     * Constructs a new `SkyCubemapTexture`.\n     *\n     * @param sky Initial [[CubemapSky]] configuration.\n     */\n    constructor(sky: CubemapSky) {\n        const faces = this.createCubemapFaceArray(sky);\n        this.m_skybox =\n            faces !== undefined ? new CubeTextureLoader().load(faces) : new CubeTexture();\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        this.m_skybox.dispose();\n    }\n\n    /**\n     * `SkyCubemapTexture`'s texture resource.\n     */\n    get texture(): Texture {\n        return this.m_skybox;\n    }\n\n    /**\n     * Updates the `SkyCubemapTexture` with new parameters.\n     *\n     * @param params New [[CubemapSky]] configuration.\n     */\n    updateTexture(sky: CubemapSky) {\n        const faces = this.createCubemapFaceArray(sky);\n        if (faces === undefined) {\n            return;\n        }\n        this.m_skybox = new CubeTextureLoader().load(faces);\n    }\n\n    private createCubemapFaceArray(sky: CubemapSky): string[] | undefined {\n        const faces: Array<string | undefined> = [\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            undefined\n        ];\n        for (let i = 0; i < SKY_CUBEMAP_FACE_COUNT; ++i) {\n            const face: string | undefined = (sky as any)[SkyCubemapFaceId[i]];\n            if (face === undefined) {\n                logger.error(`Face \"${SkyCubemapFaceId[i]}\" was not defined.`);\n                return;\n            }\n            faces[i] = face;\n        }\n\n        return faces as string[];\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { isJsonExpr } from \"@here/harp-datasource-protocol\";\nimport {\n    Definitions,\n    FlatTheme,\n    isActualSelectorDefinition,\n    isBoxedDefinition,\n    isJsonExprReference,\n    isLiteralDefinition,\n    ResolvedStyleDeclaration,\n    ResolvedStyleSet,\n    StyleDeclaration,\n    Styles,\n    StyleSet,\n    Theme\n} from \"@here/harp-datasource-protocol/lib/Theme\";\nimport {\n    cloneDeep,\n    composeUriResolvers,\n    ContextLogger,\n    getAppBaseUrl,\n    getOptionValue,\n    IContextLogger,\n    ISimpleChannel,\n    RelativeUriResolver,\n    resolveReferenceUri,\n    UriResolver\n} from \"@here/harp-utils\";\nimport { SKY_CUBEMAP_FACE_COUNT, SkyCubemapFaceId } from \"./SkyCubemapTexture\";\n\nimport \"@here/harp-fetch\";\n\nexport const DEFAULT_MAX_THEME_INTHERITANCE_DEPTH = 4;\n\n/**\n * Options to customize [[Theme]] loading process.\n *\n * @see [[ThemeLoader.load]]\n */\nexport interface ThemeLoadOptions {\n    /**\n     * Whether to resolve `ref` expressions in `definition` and `styles` elements.\n     *\n     * @default `false`, as datasources resolve definitions in [[StyleSetEvaluator]].\n     */\n    resolveDefinitions?: boolean;\n\n    /**\n     * Resolve the URIs to resources like fonts, icons, ...\n     * If true, [[uriResolver]] will be used to resolve the URI\n     * @default true\n     */\n    resolveResourceUris?: boolean;\n\n    /**\n     * Resolve the URIs of inherited themes (using `extends` feature).\n     * If true, [[uriResolver]] will be used to resolve the URI\n     * @default true\n     */\n    resolveIncludeUris?: boolean;\n\n    /**\n     * An `AbortSignal` object instance; allows you to communicate with a loading process\n     * (including fetch requests) request and abort it if desired via an `AbortController`.\n     *\n     * Modeled after Web APIs `fetch`s `init.signal`.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n     */\n    signal?: AbortSignal;\n\n    /**\n     * Maximum recursion depth when resolving base themes through [[[Theme]]s `extends` property.\n     *\n     * @default [[DEFAULT_MAX_THEME_INTHERITANCE_DEPTH]]\n     */\n    maxInheritanceDepth?: number;\n\n    /**\n     * Custom logging channel on which diagnostics and warnings will be reported.\n     *\n     * If not specified, [[ThemeLoader.load]] will log to `console`.\n     */\n    logger?: ISimpleChannel;\n\n    /**\n     * Resolve asset `URI`s referenced in `Theme` assets using this resolver.\n     */\n    uriResolver?: UriResolver;\n}\n\n/**\n * Loads and validates a theme from URL objects.\n */\nexport class ThemeLoader {\n    /**\n     * Loads a [[Theme]] from a remote resource, provided as a URL that points to a\n     * JSON-encoded theme.\n     *\n     * By default, resolves following features of theme:\n     *\n     *  -  `extends` - loads and merges all inherited themes (see [[resolveBaseTheme]])\n     *  -  `ref` - resolves all `ref` instances to their values defined in `definitions` section\n     *     of theme (see [[resolveThemeReferences]])\n     *\n     * Relative URIs of reference resources are resolved to full URL using the document's base URL\n     * (see [[resolveUrls]]).\n     *\n     * Custom URIs (of theme itself and of resources referenced by theme) may be resolved with by\n     * providing [[UriResolver]] using [[ThemeLoadOptions.uriResolver]] option.\n     *\n     * @param theme [[Theme]] instance or theme URL to the theme.\n     * @param options Optional, a [[ThemeLoadOptions]] objects containing any custom settings for\n     *    this load request.\n     */\n    static async load(\n        theme: string | Theme | FlatTheme,\n        options?: ThemeLoadOptions\n    ): Promise<Theme> {\n        options = options || {};\n        if (typeof theme === \"string\") {\n            const uriResolver = options.uriResolver;\n            const themeUrl = uriResolver !== undefined ? uriResolver.resolveUri(theme) : theme;\n            const response = await fetch(themeUrl, { signal: options.signal });\n            if (!response.ok) {\n                throw new Error(`ThemeLoader#load: cannot load theme: ${response.statusText}`);\n            }\n            theme = (await response.json()) as Theme;\n            theme.url = resolveReferenceUri(getAppBaseUrl(), themeUrl);\n            theme = this.resolveUrls(theme, options);\n        } else if (theme.url === undefined) {\n            // assume that theme url is same as baseUrl\n            theme.url = getAppBaseUrl();\n            theme = this.resolveUrls(theme, options);\n        }\n\n        if (theme === null || theme === undefined) {\n            throw new Error(\"ThemeLoader#load: loaded resource is not valid JSON\");\n        }\n        theme = theme as Theme;\n\n        ThemeLoader.checkTechniqueSupport(theme);\n\n        const resolveDefinitions = getOptionValue<boolean>(options.resolveDefinitions, false);\n        theme = await ThemeLoader.resolveBaseThemes(theme, options);\n        if (resolveDefinitions) {\n            const contextLoader = new ContextLogger(\n                options.logger || console,\n                `when processing Theme ${theme.url}:`\n            );\n            ThemeLoader.resolveThemeReferences(theme, contextLoader);\n        }\n        return theme;\n    }\n\n    /**\n     * Checks if `theme` instance is completely loaded, meaning that `extends` property is resolved.\n     *\n     * @param theme\n     */\n    static isThemeLoaded(theme: Theme | FlatTheme): boolean {\n        return theme.extends === undefined;\n    }\n\n    /**\n     * @deprecated Please use `ThemeLoader.load`\n     *\n     * Loads a [[Theme]] from a remote resource, provided as a URL that points to a JSON-encoded\n     * theme.\n     *\n     * @param themeUrl The URL to the theme.\n     *\n     */\n    static async loadAsync(themeUrl: string): Promise<Theme> {\n        return ThemeLoader.load(themeUrl);\n    }\n\n    /**\n     * Resolves all [[Theme]]'s relatives URLs to full URL using the [[Theme]]'s URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     *\n     * This method mutates original `theme` instance.\n     *\n     * @param theme The [[Theme]] to resolve.\n     */\n    private static resolveUrls(theme: Theme | FlatTheme, options?: ThemeLoadOptions): Theme {\n        // Ensure that all resources referenced in theme by relative URIs are in fact relative to\n        // theme.\n        if (theme.url === undefined) {\n            return theme;\n        }\n\n        const childUrlResolver = composeUriResolvers(\n            options?.uriResolver,\n            new RelativeUriResolver(theme.url)\n        );\n\n        const resolveIncludes = options === undefined || !(options.resolveIncludeUris === false);\n        if (theme.extends && resolveIncludes) {\n            theme.extends = (Array.isArray(theme.extends) ? theme.extends : [theme.extends]).map(\n                baseTheme => {\n                    if (typeof baseTheme === \"string\") {\n                        return childUrlResolver.resolveUri(baseTheme);\n                    } else {\n                        if (baseTheme.url !== undefined) {\n                            return baseTheme;\n                        } else {\n                            baseTheme.url = theme.url;\n                            return this.resolveUrls(baseTheme, options);\n                        }\n                    }\n                }\n            );\n        }\n\n        if (!ThemeLoader.convertFlatTheme(theme)) {\n            return theme;\n        }\n\n        const resolveResources = options === undefined || !(options.resolveResourceUris === false);\n        if (resolveResources) {\n            ThemeLoader.resolveResources(theme, childUrlResolver);\n        }\n\n        return theme;\n    }\n    private static checkTechniqueSupport(theme: Theme) {\n        if (theme.styles !== undefined) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                for (const style of theme.styles[styleSetName]) {\n                    switch ((style as any).technique) {\n                        // TODO: Re-enable this once \"dashed-line\" is deprecated.\n                        /* case \"dashed-line\":\n                            console.warn(\n                                `Using deprecated \"dashed-line\" technique.\n                                Use \"solid-line\" technique instead`\n                            ); */\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Expand all `ref` expressions in [[Theme]] basing on `definitions`.\n     *\n     * This method mutates original `theme` instance.\n     */\n    private static resolveThemeReferences(theme: Theme, contextLogger: IContextLogger): Theme {\n        if (theme.definitions !== undefined) {\n            contextLogger.pushAttr(\"definitions\");\n            /**\n             * First, try to resolve all internal references in definitions, so if we may save few\n             * CPU cycles if some definition is used many times in actual style sets.\n             */\n            for (const definitionName in theme.definitions) {\n                if (!theme.definitions.hasOwnProperty(definitionName)) {\n                    continue;\n                }\n\n                const def = theme.definitions[definitionName];\n                if (isActualSelectorDefinition(def)) {\n                    contextLogger.pushAttr(definitionName);\n                    const resolvedDef = ThemeLoader.resolveStyle(\n                        def,\n                        theme.definitions,\n                        contextLogger\n                    );\n                    contextLogger.pop();\n                    if (resolvedDef === undefined) {\n                        contextLogger.pushAttr(definitionName);\n                        contextLogger.warn(\"skipping invalid style in definition\");\n                        contextLogger.pop();\n                        delete theme.definitions[definitionName];\n                    } else {\n                        theme.definitions[definitionName] = resolvedDef;\n                    }\n                }\n            }\n            contextLogger.pop();\n        }\n        if (theme.styles !== undefined) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                contextLogger.pushAttr(\"styles\");\n                contextLogger.pushAttr(styleSetName);\n\n                theme.styles[styleSetName] = ThemeLoader.resolveStyleSet(\n                    theme.styles[styleSetName],\n                    theme.definitions,\n                    contextLogger\n                );\n                contextLogger.pop();\n                contextLogger.pop();\n            }\n        }\n        return theme;\n    }\n\n    /**\n     * Expand all `ref` in [[StyleSet]] basing on `definitions`.\n     */\n    private static resolveStyleSet(\n        styleSet: StyleSet,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): ResolvedStyleSet {\n        const result: ResolvedStyleSet = [];\n\n        for (let index = 0; index < styleSet.length; ++index) {\n            const currentStyle = styleSet[index];\n            contextLogger.pushIndex(index);\n            const resolvedStyle = ThemeLoader.resolveStyle(\n                currentStyle,\n                definitions,\n                contextLogger\n            );\n            if (resolvedStyle !== undefined) {\n                result.push(resolvedStyle);\n            } else {\n                contextLogger.warn(\"invalid style, ignored\");\n            }\n            contextLogger.pop();\n        }\n        return result;\n    }\n\n    /**\n     * Expand all `ref` in [[Style]] instance basing on `definitions`.\n     */\n    private static resolveStyle(\n        style: StyleDeclaration,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): ResolvedStyleDeclaration | undefined {\n        if (isJsonExprReference(style)) {\n            // expand and instantiate references to style definitions.\n\n            const def = definitions && definitions[style[1]];\n\n            if (!def) {\n                contextLogger.warn(`invalid reference '${style[1]}' - not found`);\n                return undefined;\n            }\n            if (!isActualSelectorDefinition(def)) {\n                contextLogger.warn(`invalid reference '${style[1]}' - expected style definition`);\n                return undefined;\n            }\n\n            // instantiate the style\n            style = cloneDeep(def);\n        }\n        style = style as ResolvedStyleDeclaration;\n\n        if (Array.isArray(style.when)) {\n            contextLogger.pushAttr(\"when\");\n            const resolvedWhen = this.resolveExpressionReferences(\n                style.when,\n                definitions,\n                contextLogger\n            );\n            contextLogger.pop();\n            if (resolvedWhen === undefined) {\n                return undefined;\n            }\n            style.when = resolvedWhen;\n        }\n\n        if (style.attr !== undefined) {\n            const attr = style.attr as any;\n\n            contextLogger.pushAttr(\"attr\");\n            for (const prop in attr) {\n                if (!attr.hasOwnProperty(prop)) {\n                    continue;\n                }\n\n                const value = attr[prop];\n\n                if (!Array.isArray(value)) {\n                    continue; // nothing to do\n                }\n\n                contextLogger.pushAttr(prop);\n                const resolvedValue = this.resolveExpressionReferences(\n                    value,\n                    definitions,\n                    contextLogger\n                );\n                contextLogger.pop();\n\n                if (resolvedValue !== undefined) {\n                    attr[prop] = resolvedValue;\n                } else {\n                    delete attr[prop];\n                }\n            }\n            contextLogger.pop();\n        }\n        return style;\n    }\n\n    /**\n     * Resolve `[ref, ...]` in expressions.\n     *\n     * Returns `undefined` some reference was invalid (missing or wrong type).\n     */\n    private static resolveExpressionReferences<T>(\n        value: T,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): T | undefined {\n        let failed = false;\n        function resolveInternal(node: any) {\n            if (isJsonExprReference(node)) {\n                const defName = node[1];\n                const def = definitions && definitions[defName];\n                if (def === undefined) {\n                    contextLogger.warn(`invalid reference '${defName}' - not found`);\n                    failed = true;\n                    return undefined;\n                }\n                if (isLiteralDefinition(def) || isJsonExpr(def)) {\n                    return def;\n                }\n                if (isBoxedDefinition(def)) {\n                    return def.value;\n                }\n                contextLogger.warn(`invalid reference '${defName}' - expected value definition`);\n                failed = true;\n                return undefined;\n            } else if (Array.isArray(node)) {\n                const result = [...node];\n                for (let i = 1; i < result.length; ++i) {\n                    result[i] = resolveInternal(result[i]);\n                }\n                return result;\n            } else {\n                return node;\n            }\n        }\n        const r = resolveInternal(value);\n        if (failed) {\n            return undefined;\n        }\n        return r;\n    }\n\n    /**\n     * Realize `extends` clause by merging `theme` with its base [[Theme]].\n     *\n     * @param theme [Theme] object\n     * @param options Optional, a [[ThemeLoadOptions]] objects containing any custom settings for\n     *    this load request.\n     */\n    private static async resolveBaseThemes(\n        theme: Theme,\n        options?: ThemeLoadOptions\n    ): Promise<Theme> {\n        options = options || {};\n        if (theme.extends === undefined) {\n            return theme;\n        }\n\n        const maxInheritanceDepth = getOptionValue(\n            options.maxInheritanceDepth,\n            DEFAULT_MAX_THEME_INTHERITANCE_DEPTH\n        );\n        if (maxInheritanceDepth <= 0) {\n            throw new Error(`maxInheritanceDepth reached when attempting to load base theme`);\n        }\n\n        const baseThemes = !Array.isArray(theme.extends) ? [theme.extends] : theme.extends;\n        delete theme.extends;\n        let baseThemesMerged: Theme = {};\n        for (const baseTheme of baseThemes) {\n            const actualBaseTheme = await ThemeLoader.load(baseTheme, {\n                ...options,\n                resolveDefinitions: false,\n                maxInheritanceDepth: maxInheritanceDepth - 1\n            });\n\n            baseThemesMerged = ThemeLoader.mergeThemes(actualBaseTheme, baseThemesMerged);\n        }\n        return ThemeLoader.mergeThemes(theme, baseThemesMerged);\n    }\n\n    private static mergeThemes(theme: Theme, baseTheme: Theme): Theme {\n        const definitions = { ...baseTheme.definitions, ...theme.definitions };\n\n        let styles!: Styles;\n\n        if (baseTheme.styles && theme.styles) {\n            const currentStyleSets = Object.keys(baseTheme.styles);\n            const incomingStyleSets = Object.keys(theme.styles);\n\n            styles = {};\n\n            currentStyleSets.forEach(styleSetName => {\n                const index = incomingStyleSets.indexOf(styleSetName);\n\n                if (index !== -1) {\n                    // merge the current and incoming styleset\n                    // and add the result to `styles`.\n                    styles[styleSetName] = [\n                        ...baseTheme.styles![styleSetName],\n                        ...theme.styles![styleSetName]\n                    ];\n                    // remove the styleset from the incoming list\n                    incomingStyleSets.splice(index, 1);\n                } else {\n                    // copy the existing style set to `styles`.\n                    styles[styleSetName] = baseTheme.styles![styleSetName];\n                }\n            });\n\n            // add the remaining stylesets to styles.\n            incomingStyleSets.forEach(p => {\n                styles[p] = theme.styles![p];\n            });\n        } else if (baseTheme.styles) {\n            styles = { ...baseTheme.styles };\n        } else if (theme.styles) {\n            styles = { ...theme.styles };\n        }\n        return { ...baseTheme, ...theme, definitions, styles };\n    }\n\n    private static convertFlatTheme(theme: Theme | FlatTheme): theme is Theme {\n        if (Array.isArray(theme.styles)) {\n            // Convert the flat theme to a standard theme.\n            const styles: Styles = {};\n            theme.styles.forEach(style => {\n                if (isJsonExpr(style)) {\n                    throw new Error(\"invalid usage of theme reference\");\n                }\n                const styleSetName = style.styleSet;\n                if (styleSetName === undefined) {\n                    throw new Error(\"missing reference to style set\");\n                }\n                if (!styles[styleSetName]) {\n                    styles[styleSetName] = [];\n                }\n                styles[styleSetName].push(style);\n            });\n            theme.styles = styles;\n        }\n        return true;\n    }\n\n    private static resolveResources(theme: Theme, childUrlResolver: UriResolver) {\n        if (theme.sky && theme.sky.type === \"cubemap\") {\n            for (let i = 0; i < SKY_CUBEMAP_FACE_COUNT; ++i) {\n                const faceUrl: string | undefined = (theme.sky as any)[SkyCubemapFaceId[i]];\n                if (faceUrl !== undefined) {\n                    (theme.sky as any)[SkyCubemapFaceId[i]] = childUrlResolver.resolveUri(faceUrl);\n                }\n            }\n        }\n        if (theme.images) {\n            for (const name of Object.keys(theme.images)) {\n                const image = theme.images[name];\n                image.url = childUrlResolver.resolveUri(image.url);\n                if (image.atlas !== undefined) {\n                    image.atlas = childUrlResolver.resolveUri(image.atlas);\n                }\n            }\n        }\n        if (theme.fontCatalogs) {\n            for (const font of theme.fontCatalogs) {\n                font.url = childUrlResolver.resolveUri(font.url);\n            }\n        }\n        if (theme.poiTables) {\n            for (const poiTable of theme.poiTables) {\n                poiTable.url = childUrlResolver.resolveUri(poiTable.url);\n            }\n        }\n\n        if (theme.styles) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                const styleSet = theme.styles[styleSetName] as ResolvedStyleDeclaration[];\n                for (const style of styleSet) {\n                    if (!style.attr) {\n                        continue;\n                    }\n                    [\"map\", \"normalMap\", \"displacementMap\", \"roughnessMap\"].forEach(\n                        texturePropertyName => {\n                            const textureProperty = (style.attr! as any)[texturePropertyName];\n                            if (textureProperty && typeof textureProperty === \"string\") {\n                                (style.attr! as any)[\n                                    texturePropertyName\n                                ] = childUrlResolver.resolveUri(textureProperty);\n                            }\n                        }\n                    );\n                }\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport {\n    GeoCoordinates,\n    Projection,\n    ProjectionType,\n    TileKey,\n    TileKeyUtils,\n    TilingScheme\n} from \"@here/harp-geoutils\";\nimport { LRUCache } from \"@here/harp-lrucache\";\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { BackgroundDataSource } from \"./BackgroundDataSource\";\nimport { ClipPlanesEvaluator } from \"./ClipPlanesEvaluator\";\nimport { DataSource } from \"./DataSource\";\nimport { ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { FrustumIntersection, TileKeyEntry } from \"./FrustumIntersection\";\nimport { TileGeometryManager } from \"./geometry/TileGeometryManager\";\nimport { Tile } from \"./Tile\";\nimport { TileOffsetUtils } from \"./Utils\";\n\n/**\n * Way the memory consumption of a tile is computed. Either in number of tiles, or in MegaBytes. If\n * it is in MB, an estimation is used.\n */\nexport enum ResourceComputationType {\n    EstimationInMb = 0,\n    NumberOfTiles\n}\n\n/**\n * Limited set of [[MapViewOptions]] used for [[VisibleTileSet]].\n */\nexport interface VisibleTileSetOptions {\n    /**\n     * The projection of the view.\n     */\n    projection: Projection;\n\n    /**\n     * User-defined camera clipping planes evaluator.\n     */\n    clipPlanesEvaluator: ClipPlanesEvaluator;\n\n    /**\n     * Limit of tiles that can be visible per datasource.\n     */\n    maxVisibleDataSourceTiles: number;\n\n    /**\n     * In addition to the simple frustum culling also do additional checks with [[MapTileCuller]].\n     */\n    extendedFrustumCulling: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    tileCacheSize: number;\n\n    /**\n     * Missing Typedoc\n     */\n    resourceComputationType: ResourceComputationType;\n\n    /**\n     * Number of levels to go up when searching for fallback tiles.\n     */\n    quadTreeSearchDistanceUp: number;\n\n    /**\n     * Number of levels to go down when searching for fallback tiles.\n     */\n    quadTreeSearchDistanceDown: number;\n}\n\nconst MB_FACTOR = 1.0 / (1024.0 * 1024.0);\n\ntype TileCacheId = string;\n\n/**\n * Wrapper for LRU cache that encapsulates tiles caching for any [[DataSource]] used.\n *\n * Provides LRU based caching mechanism where each tile is identified by its tile key\n * (morton code) and data source name.\n * Tiles are kept in the cache based on last recently used policy, cached tile may be evicted\n * only when cache reaches full saturation and tile is no longer visible.\n * @note Currently cached entries (tiles) are identified by unique tile code (morton code) and\n * data source name, thus it is required that each [[DataSource]] used should have unique\n * name, but implementation could be improved to omit this limitation.\n */\nclass DataSourceCache {\n    /**\n     * Creates unique tile key for caching based on morton code, tile offset and its data source.\n     *\n     * @param mortonCode The tile morton code.\n     * @param offset The tile offset.\n     * @param dataSource The [[DataSource]] from which tile was loaded.\n     */\n    static getKey(mortonCode: number, offset: number, dataSource: DataSource): TileCacheId {\n        return `${dataSource.name}_${mortonCode}_${offset}`;\n    }\n\n    /**\n     * Create unique tile identifier for caching, based on tile object passed in.\n     *\n     * @param tile The tile for which key is generated.\n     */\n    static getKeyForTile(tile: Tile): TileCacheId {\n        return DataSourceCache.getKey(tile.tileKey.mortonCode(), tile.offset, tile.dataSource);\n    }\n\n    private readonly m_tileCache: LRUCache<TileCacheId, Tile>;\n    private readonly m_disposedTiles: Tile[] = [];\n    private m_resourceComputationType: ResourceComputationType;\n\n    constructor(\n        cacheSize: number,\n        rct: ResourceComputationType = ResourceComputationType.EstimationInMb\n    ) {\n        this.m_resourceComputationType = rct;\n        this.m_tileCache = new LRUCache<string, Tile>(cacheSize, (tile: Tile) => {\n            if (this.m_resourceComputationType === ResourceComputationType.EstimationInMb) {\n                // Default is size in MB.\n                return tile.memoryUsage * MB_FACTOR;\n            } else {\n                return 1;\n            }\n        });\n        this.m_tileCache.evictionCallback = (_, tile) => {\n            if (tile.tileLoader !== undefined) {\n                // Cancel downloads as early as possible.\n                tile.tileLoader.cancel();\n            }\n            this.m_disposedTiles.push(tile);\n        };\n        this.m_tileCache.canEvict = (_, tile) => {\n            // Tiles can be evicted that weren't requested in the last frame.\n            return !tile.isVisible;\n        };\n    }\n\n    /**\n     * Get information how cached tiles affects cache space available.\n     *\n     * The way how cache evaluates the __resources size__ have a big influence on entire\n     * caching mechanism, if [[resourceComputationType]] is set to:\n     * [[ResourceComputationType.EstimationInMb]] then each tiles contributes to cache size\n     * differently depending on the memory consumed, on other side\n     * [[ResourceComputationType.NumberOfTiles]] says each tile occupies single slot in cache,\n     * so its real memory consumed does not matter affect caching behavior. Of course in\n     * the second scenario cache may grow significantly in terms of memory usage and thus it\n     * is out of control.\n     *\n     * @return [[ResourceComputationType]] enum that describes if resources are counted by\n     * space occupied in memory or just by number of them.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_resourceComputationType;\n    }\n\n    /**\n     * Get the cache capacity measured as number if megabytes or number of entries.\n     *\n     * The total cached tiles size determines cache saturation, if it reaches the capacity value\n     * then the resources becomes evicted (released) starting from the oldest (the latest used).\n     *\n     * @see size.\n     * @see resourceComputationType.\n     */\n    get capacity(): number {\n        return this.m_tileCache.capacity;\n    }\n\n    /**\n     * Get total cache size described as number of megabytes consumed or number of tiles stored.\n     *\n     * @see capacity.\n     * @see resourceComputationType.\n     */\n    get size(): number {\n        return this.m_tileCache.size;\n    }\n\n    /**\n     * Set cache capacity and the algorithm used for cache size calculation.\n     *\n     * @see capacity.\n     * @see resourceComputationType.\n     * @param size The new capacity declared in megabytes or number of entires.\n     * @param rct The enum value that determines how size and capacity are evaluated.\n     */\n    setCapacity(size: number, rct: ResourceComputationType) {\n        this.m_resourceComputationType = rct;\n        this.m_tileCache.setCapacityAndMeasure(size, (tile: Tile) => {\n            if (this.m_resourceComputationType === ResourceComputationType.EstimationInMb) {\n                // Default is size in MB.\n                return tile.memoryUsage * MB_FACTOR;\n            } else {\n                return 1;\n            }\n        });\n    }\n\n    /**\n     * Get tile cached or __undefined__ if tile is not yet in cache.\n     *\n     * @param mortonCode An unique tile morton code.\n     * @param offset Tile offset.\n     * @param dataSource A [[DataSource]] the tile comes from.\n     */\n    get(mortonCode: number, offset: number, dataSource: DataSource): Tile | undefined {\n        return this.m_tileCache.get(DataSourceCache.getKey(mortonCode, offset, dataSource));\n    }\n\n    /**\n     * Add new tile to the cache.\n     *\n     * @param mortonCode En unique tile code (morton code).\n     * @param offset The tile offset.\n     * @param dataSource A [[DataSource]] the tile comes from.\n     * @param tile The tile reference.\n     */\n    set(mortonCode: number, offset: number, dataSource: DataSource, tile: Tile) {\n        this.m_tileCache.set(DataSourceCache.getKey(mortonCode, offset, dataSource), tile);\n    }\n\n    /**\n     * Delete tile from cache.\n     *\n     * @note This method will not call eviction callback.\n     * @param tile The tile reference to be removed from cache.\n     */\n    delete(tile: Tile) {\n        const tileKey = DataSourceCache.getKeyForTile(tile);\n        this.deleteByKey(tileKey);\n    }\n\n    /**\n     * Delete tile using its unique identifier.\n     *\n     * @note Tile identifier its constructed using information about tile code (morton code) and its\n     * [[DataSource]].\n     * @note This is explicit removal thus eviction callback will not be processed.\n     * @see DataSourceCache.getKey.\n     * @param tileKey The unique tile identifier.\n     */\n    deleteByKey(tileKey: TileCacheId) {\n        this.m_tileCache.delete(tileKey);\n    }\n\n    /**\n     * Dispose all tiles releasing their internal data.\n     */\n    disposeTiles() {\n        this.m_disposedTiles.forEach(tile => {\n            tile.dispose();\n        });\n\n        this.m_disposedTiles.length = 0;\n    }\n\n    /**\n     * Shrink cache to its allowed capacity.\n     *\n     * This method should be called each time after operations are performed on the cache entries,\n     * in order to keep cache size consistent. It informs caching mechanism to invalidate memory\n     * consumed by its entries and check if cache is overgrown, is such case some tiles will be\n     * evicted.\n     */\n    shrinkToCapacity() {\n        this.m_tileCache.shrinkToCapacity();\n    }\n\n    /**\n     * Evict all cached tiles implicitly even without checking if still in use.\n     */\n    evictAll() {\n        this.m_tileCache.evictAll();\n    }\n\n    /**\n     * Evict selected tiles implicitly.\n     *\n     * @param selector The callback used to determine if tile should be evicted.\n     */\n    evictSelected(selector: (tile: Tile, key: TileCacheId) => boolean) {\n        this.m_tileCache.evictSelected(selector);\n    }\n\n    /**\n     * Call functor (callback) on each tile store in cache.\n     *\n     * Optionally you may specify from which [[DataSource]] tiles should be processed.\n     * This limits the tiles visited to a sub-set originating from single [[DataSource]].\n     * @param callback The function to be called for each visited tile.\n     * @param inDataSource The optional [[DataSource]] to which tiles should belong.\n     */\n    forEach(callback: (tile: Tile, key: TileCacheId) => void, inDataSource?: DataSource): void {\n        this.m_tileCache.forEach((entry: Tile, key: TileCacheId) => {\n            if (inDataSource === undefined || entry.dataSource === inDataSource) {\n                callback(entry, key);\n            }\n        });\n    }\n}\n\n/**\n * List of visible tiles for a [[DataSource]].\n */\nexport interface DataSourceTileList {\n    /**\n     * The datasource that was producing the tiles.\n     */\n    dataSource: DataSource;\n\n    /**\n     * The current [[MapView]] zoom level.\n     */\n    zoomLevel: number;\n\n    /**\n     * The storage level of the visibleTiles.\n     * Note: renderedTiles might contain tiles from different levels.\n     */\n    storageLevel: number;\n\n    /**\n     * True if all [[visibleTiles]] are loaded.\n     */\n    allVisibleTileLoaded: boolean;\n\n    /**\n     * The number of tiles which are still loading.\n     */\n    numTilesLoading: number;\n\n    /**\n     * List of tiles we want to render (i.e. the tiles computed from the zoom level and view\n     * frustum). However some might not be renderable yet (e.g. loading). See [[renderedTiles]] for\n     * the actual list of tiles that the user will see.\n     */\n    visibleTiles: Tile[];\n\n    /**\n     * Map of tiles that will be rendered, key is the the combination of tile key and offset, see\n     * [[getKeyForTileKeyAndOffset]]. This includes tiles that are not in the [[visibleTiles]]\n     * list but that are used as fallbacks b/c they are still in the cache.\n     */\n    renderedTiles: Map<number, Tile>;\n}\n\n/**\n * Manages visible [[Tile]]s for [[MapView]].\n *\n * Responsible for election of rendered tiles:\n *  - quad-tree traversal\n *  - frustum culling\n *  - sorting tiles by relevance (visible area) to prioritize load\n *  - limiting number of visible tiles\n *  - caching tiles\n *  - searching cache to replace visible but yet empty tiles with already loaded siblings in nearby\n *    zoom levels\n */\nexport class VisibleTileSet {\n    dataSourceTileList: DataSourceTileList[] = [];\n    allVisibleTilesLoaded: boolean = false;\n    options: VisibleTileSetOptions;\n\n    private readonly m_cameraOverride = new THREE.PerspectiveCamera();\n    private m_dataSourceCache: DataSourceCache;\n    private m_viewRange: ViewRanges = { near: 0.1, far: Infinity, minimum: 0.1, maximum: Infinity };\n    // Maps morton codes to a given Tile, used to find overlapping Tiles. We only need to have this\n    // for a single TilingScheme, i.e. that of the BackgroundDataSource.\n    private m_coveringMap = new Map<number, Tile>();\n\n    private m_resourceComputationType: ResourceComputationType =\n        ResourceComputationType.EstimationInMb;\n\n    constructor(\n        private readonly m_frustumIntersection: FrustumIntersection,\n        private readonly m_tileGeometryManager: TileGeometryManager,\n        options: VisibleTileSetOptions\n    ) {\n        this.options = options;\n        this.m_resourceComputationType =\n            options.resourceComputationType === undefined\n                ? ResourceComputationType.EstimationInMb\n                : options.resourceComputationType;\n        this.m_dataSourceCache = new DataSourceCache(\n            this.options.tileCacheSize,\n            this.m_resourceComputationType\n        );\n    }\n\n    /**\n     * Returns cache size.\n     */\n    getDataSourceCacheSize(): number {\n        return this.options.tileCacheSize;\n    }\n\n    /**\n     * Sets cache size.\n     *\n     * @param size cache size\n     * @param computationType Optional value specifying the way a [[Tile]]s cache usage is computed,\n     *      either based on size in MB (mega bytes) or in number of tiles. Defaults to\n     *      `ResourceComputationType.EstimationInMb`.\n     */\n    setDataSourceCacheSize(\n        size: number,\n        computationType: ResourceComputationType = ResourceComputationType.EstimationInMb\n    ): void {\n        this.options.tileCacheSize = size;\n        // This effectively invalidates DataSourceCache\n        this.resourceComputationType = computationType;\n    }\n\n    /**\n     * Retrieves maximum number of visible tiles.\n     */\n    getNumberOfVisibleTiles() {\n        return this.options.maxVisibleDataSourceTiles;\n    }\n\n    /**\n     * Sets maximum number of visible tiles.\n     *\n     * @param size size of visible tiles array\n     */\n    setNumberOfVisibleTiles(size: number) {\n        this.options.maxVisibleDataSourceTiles = size;\n    }\n\n    /**\n     * The way the cache usage is computed, either based on size in MB (mega bytes) or in number of\n     * tiles.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_resourceComputationType;\n    }\n\n    /**\n     * Sets the way tile cache is managing its elements.\n     *\n     * Cache may be either keeping number of elements stored or the memory consumed by them.\n     *\n     * @param computationType Type of algorith used in cache for checking full saturation,\n     * may be counting number of elements or memory consumed by them.\n     */\n    set resourceComputationType(computationType: ResourceComputationType) {\n        this.m_resourceComputationType = computationType;\n        this.m_dataSourceCache.setCapacity(this.options.tileCacheSize, computationType);\n    }\n\n    /**\n     * Evaluate frustum near/far clip planes and visibility ranges.\n     */\n    updateClipPlanes(maxElevation?: number, minElevation?: number): ViewRanges {\n        if (maxElevation !== undefined) {\n            this.options.clipPlanesEvaluator.maxElevation = maxElevation;\n        }\n        if (minElevation !== undefined) {\n            this.options.clipPlanesEvaluator.minElevation = minElevation;\n        }\n        const { camera, projection, elevationProvider } = this.m_frustumIntersection.mapView;\n        this.m_viewRange = this.options.clipPlanesEvaluator.evaluateClipPlanes(\n            camera,\n            projection,\n            elevationProvider\n        );\n        return this.m_viewRange;\n    }\n\n    /**\n     * Calculates a new set of visible tiles.\n     * @param storageLevel The camera storage level, see [[MapView.storageLevel]].\n     * @param zoomLevel The camera zoom level.\n     * @param dataSources The data sources for which the visible tiles will be calculated.\n     * @param elevationRangeSource Source of elevation range data if any.\n     * @returns view ranges and their status since last update (changed or not).\n     */\n    updateRenderList(\n        storageLevel: number,\n        zoomLevel: number,\n        dataSources: DataSource[],\n        elevationRangeSource?: ElevationRangeSource\n    ): { viewRanges: ViewRanges; viewRangesChanged: boolean } {\n        let allVisibleTilesLoaded: boolean = true;\n\n        const visibleTileKeysResult = this.getVisibleTileKeysForDataSources(\n            zoomLevel,\n            dataSources,\n            elevationRangeSource\n        );\n        this.dataSourceTileList = [];\n        this.m_coveringMap.clear();\n        for (const { dataSource, visibleTileKeys } of visibleTileKeysResult.tileKeys) {\n            // Sort by distance to camera, now the tiles that are further away are at the end\n            // of the list.\n            //\n            // Sort is unstable if distance is equal, which happens a lot when looking top-down.\n            // Unstable sorting makes label placement unstable at tile borders, leading to\n            // flickering.\n            visibleTileKeys.sort((a: TileKeyEntry, b: TileKeyEntry) => {\n                const distanceDiff = a.distance - b.distance;\n\n                // Take care or numerical precision issues\n                const minDiff = (a.distance + b.distance) * 0.000001;\n\n                return Math.abs(distanceDiff) < minDiff\n                    ? a.tileKey.mortonCode() - b.tileKey.mortonCode()\n                    : distanceDiff;\n            });\n\n            const actuallyVisibleTiles: Tile[] = [];\n            let allDataSourceTilesLoaded = true;\n            let numTilesLoading = 0;\n            // Create actual tiles only for the allowed number of visible tiles\n            const dataZoomLevel = dataSource.getDataZoomLevel(zoomLevel);\n            for (\n                let i = 0;\n                i < visibleTileKeys.length &&\n                actuallyVisibleTiles.length < this.options.maxVisibleDataSourceTiles;\n                i++\n            ) {\n                const tileEntry = visibleTileKeys[i];\n\n                const tile = this.getTile(dataSource, tileEntry.tileKey, tileEntry.offset);\n                if (tile === undefined) {\n                    continue;\n                }\n\n                tile.prepareTileInfo();\n\n                allDataSourceTilesLoaded = allDataSourceTilesLoaded && tile.allGeometryLoaded;\n                if (!tile.allGeometryLoaded) {\n                    numTilesLoading++;\n                } else {\n                    tile.numFramesVisible++;\n                    // If this tile's data source is \"covering\" then other tiles beneath it have\n                    // their rendering skipped, see [[Tile.willRender]].\n                    this.skipOverlappedTiles(dataSource, tile);\n\n                    if (tile.frameNumVisible < 0) {\n                        // Store the fist frame the tile became visible.\n                        tile.frameNumVisible = dataSource.mapView.frameNumber;\n                    }\n                }\n                // Update the visible area of the tile. This is used for those tiles that are\n                // currently loaded and are waiting to be decoded to sort the jobs by area.\n                tile.visibleArea = tileEntry.area;\n                tile.elevationRange = tileEntry;\n\n                actuallyVisibleTiles.push(tile);\n            }\n\n            this.m_tileGeometryManager.updateTiles(actuallyVisibleTiles);\n\n            this.dataSourceTileList.push({\n                dataSource,\n                storageLevel,\n                zoomLevel: dataZoomLevel,\n                allVisibleTileLoaded: allDataSourceTilesLoaded,\n                numTilesLoading,\n                visibleTiles: actuallyVisibleTiles,\n                renderedTiles: new Map<number, Tile>()\n            });\n            allVisibleTilesLoaded = allVisibleTilesLoaded && allDataSourceTilesLoaded;\n        }\n\n        this.allVisibleTilesLoaded =\n            allVisibleTilesLoaded && visibleTileKeysResult.allBoundingBoxesFinal;\n\n        this.fillMissingTilesFromCache();\n\n        this.forEachCachedTile(tile => {\n            // Remove all tiles that are still being loaded, but are no longer visible. They have to\n            // be reloaded when they become visible again. Hopefully, they are still in the browser\n            // cache by then.\n            if (!tile.isVisible && tile.tileLoader !== undefined && !tile.tileLoader.isFinished) {\n                // The internal TileLoader is cancelled automatically when the Tile is disposed.\n                this.disposeTile(tile);\n            }\n        });\n\n        this.m_dataSourceCache.shrinkToCapacity();\n\n        let minElevation: number | undefined;\n        let maxElevation: number | undefined;\n        this.dataSourceTileList.forEach(renderListEntry => {\n            // Calculate min/max elevation from every data source tiles,\n            // data sources without elevationRangeSource will contribute to\n            // values with zero levels for both elevations.\n            const tiles = renderListEntry.renderedTiles;\n            tiles.forEach(tile => {\n                tile.update(renderListEntry.zoomLevel);\n                minElevation = MathUtils.min2(minElevation, tile.geoBox.minAltitude);\n                maxElevation = MathUtils.max2(maxElevation, tile.geoBox.maxAltitude);\n            });\n        });\n\n        if (minElevation === undefined) {\n            minElevation = 0;\n        }\n        if (maxElevation === undefined) {\n            maxElevation = 0;\n        }\n        // If clip planes evaluator depends on the tiles elevation re-calculate\n        // frustum planes and update the camera near/far plane distances.\n        let viewRangesChanged: boolean = false;\n        const oldViewRanges = this.m_viewRange;\n        const newViewRanges = this.updateClipPlanes(maxElevation, minElevation);\n        viewRangesChanged = viewRangesEqual(newViewRanges, oldViewRanges) === false;\n\n        return {\n            viewRanges: newViewRanges,\n            viewRangesChanged\n        };\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset, creating it if\n     * necessary.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if it was found or created, undefined otherwise.\n     */\n    getTile(dataSource: DataSource, tileKey: TileKey, offset: number = 0): Tile | undefined {\n        const cacheOnly = false;\n        return this.getTileImpl(dataSource, tileKey, offset, cacheOnly);\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset from the cache.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if found in cache, undefined otherwise.\n     */\n    getCachedTile(dataSource: DataSource, tileKey: TileKey, offset: number = 0): Tile | undefined {\n        assert(dataSource.cacheable);\n        const cacheOnly = true;\n        return this.getTileImpl(dataSource, tileKey, offset, cacheOnly);\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset from the rendered tiles.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if found among the rendered tiles, undefined otherwise.\n     */\n    getRenderedTile(\n        dataSource: DataSource,\n        tileKey: TileKey,\n        offset: number = 0\n    ): Tile | undefined {\n        const dataSourceVisibleTileList = this.dataSourceTileList.find(list => {\n            return list.dataSource === dataSource;\n        });\n\n        if (dataSourceVisibleTileList === undefined) {\n            return undefined;\n        }\n\n        return dataSourceVisibleTileList.renderedTiles.get(\n            TileOffsetUtils.getKeyForTileKeyAndOffset(tileKey, offset)\n        );\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source and location from the rendered tiles.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param geoPoint The geolocation included within the tile.\n     * @return The tile if found among the rendered tiles, undefined otherwise.\n     */\n    getRenderedTileAtLocation(\n        dataSource: DataSource,\n        geoPoint: GeoCoordinates,\n        offset: number = 0\n    ): Tile | undefined {\n        const dataSourceVisibleTileList = this.dataSourceTileList.find(list => {\n            return list.dataSource === dataSource;\n        });\n\n        if (dataSourceVisibleTileList === undefined) {\n            return undefined;\n        }\n\n        const tilingScheme = dataSource.getTilingScheme();\n        const visibleLevel = dataSourceVisibleTileList.zoomLevel;\n        const visibleTileKey = tilingScheme.getTileKey(geoPoint, visibleLevel);\n\n        if (!visibleTileKey) {\n            return undefined;\n        }\n\n        let tile = dataSourceVisibleTileList.renderedTiles.get(\n            TileOffsetUtils.getKeyForTileKeyAndOffset(visibleTileKey, offset)\n        );\n\n        if (tile !== undefined) {\n            return tile;\n        }\n\n        const { searchLevelsUp, searchLevelsDown } = this.getCacheSearchLevels(\n            dataSource,\n            visibleLevel\n        );\n\n        let parentTileKey = visibleTileKey;\n        for (let levelOffset = 1; levelOffset <= searchLevelsUp; ++levelOffset) {\n            parentTileKey = parentTileKey.parent();\n\n            tile = dataSourceVisibleTileList.renderedTiles.get(\n                TileOffsetUtils.getKeyForTileKeyAndOffset(parentTileKey, offset)\n            );\n            if (tile !== undefined) {\n                return tile;\n            }\n        }\n\n        const worldPoint = tilingScheme.projection.projectPoint(geoPoint);\n\n        for (let levelOffset = 1; levelOffset <= searchLevelsDown; ++levelOffset) {\n            const childLevel = visibleLevel + levelOffset;\n            const childTileKey = TileKeyUtils.worldCoordinatesToTileKey(\n                tilingScheme,\n                worldPoint,\n                childLevel\n            );\n            if (childTileKey) {\n                tile = dataSourceVisibleTileList.renderedTiles.get(\n                    TileOffsetUtils.getKeyForTileKeyAndOffset(childTileKey, offset)\n                );\n\n                if (tile !== undefined) {\n                    return tile;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Removes all internal bookkeeping entries and cache related to specified datasource.\n     *\n     * Called by [[MapView]] when [[DataSource]] has been removed from [[MapView]].\n     */\n    removeDataSource(dataSource: DataSource) {\n        this.clearTileCache(dataSource);\n        this.dataSourceTileList = this.dataSourceTileList.filter(\n            tileList => tileList.dataSource !== dataSource\n        );\n    }\n\n    /**\n     * Clear the tile cache.\n     *\n     * Remove the [[Tile]] objects created by cacheable [[DataSource]]. If a [[DataSource]] name is\n     * provided, this method restricts the eviction the [[DataSource]] with the given name.\n     *\n     * @param dataSourceName The name of the [[DataSource]].\n     */\n    clearTileCache(dataSource?: DataSource) {\n        if (dataSource !== undefined) {\n            this.m_dataSourceCache.evictSelected((tile: Tile, _) => {\n                return tile.dataSource === dataSource;\n            });\n        } else {\n            this.m_dataSourceCache.evictAll();\n        }\n    }\n\n    /**\n     * Visit each tile in visible, rendered, and cached sets.\n     *\n     *  * Visible and temporarily rendered tiles will be marked for update and retained.\n     *  * Cached but not rendered/visible will be evicted.\n     *\n     * @param dataSource If passed, only the tiles from this [[DataSource]] instance are processed.\n     *     If `undefined`, tiles from all [[DataSource]]s are processed.\n     */\n    markTilesDirty(dataSource?: DataSource) {\n        if (dataSource === undefined) {\n            this.dataSourceTileList.forEach(renderListEntry => {\n                this.markDataSourceTilesDirty(renderListEntry);\n            });\n        } else {\n            const renderListEntry = this.dataSourceTileList.find(e => e.dataSource === dataSource);\n            if (renderListEntry === undefined) {\n                return;\n            }\n            this.markDataSourceTilesDirty(renderListEntry);\n        }\n    }\n\n    /**\n     * Dispose tiles that are marked for removal by [[LRUCache]] algorithm.\n     */\n    disposePendingTiles() {\n        this.m_dataSourceCache.disposeTiles();\n    }\n\n    /**\n     * Process callback function [[fun]] with each visible tile in set.\n     *\n     * @param fun The callback function to be called.\n     */\n    forEachVisibleTile(fun: (tile: Tile) => void): void {\n        for (const listEntry of this.dataSourceTileList) {\n            listEntry.renderedTiles.forEach(fun);\n        }\n    }\n\n    /**\n     * Process callback function [[fun]] with each tile in the cache.\n     *\n     * Optional [[dataSource]] parameter limits processing to the tiles that belongs to\n     * DataSource passed in.\n     *\n     * @param fun The callback function to be called.\n     * @param dataSource The optional DataSource reference for tiles selection.\n     */\n    forEachCachedTile(fun: (tile: Tile) => void, dataSource?: DataSource): void {\n        this.m_dataSourceCache.forEach((tile, _) => fun(tile), dataSource);\n    }\n\n    /**\n     * Dispose a `Tile` from cache, 'dispose()' is also called on the tile to free its resources.\n     */\n    disposeTile(tile: Tile): void {\n        // TODO: Consider using evict here!\n        this.m_dataSourceCache.delete(tile);\n        tile.dispose();\n    }\n\n    /**\n     * Skips rendering of tiles that are overlapped. The overlapping [[Tile]] comes from a\n     * [[DataSource]] which is fully covering, i.e. there it is fully opaque.\n     **/\n    private skipOverlappedTiles(dataSource: DataSource, tile: Tile) {\n        if (this.options.projection.type === ProjectionType.Spherical) {\n            // HARP-7899, currently the globe has no background planes in the tiles (it relies on\n            // the BackgroundDataSource), because the LOD mismatches, hence disabling for globe.\n            return;\n        }\n        if (dataSource.isFullyCovering()) {\n            const key = TileOffsetUtils.getKeyForTileKeyAndOffset(tile.tileKey, tile.offset);\n            const entry = this.m_coveringMap.get(key);\n            if (entry === undefined) {\n                // We need to reset the flag so that if the covering datasource is disabled, that\n                // the tiles beneath then start to render.\n                tile.skipRendering = false;\n                this.m_coveringMap.set(key, tile);\n            } else {\n                // Skip the [[Tile]] if either the stored entry or the tile to consider is from the\n                // [[BackgroundDataSource]]\n                if (entry.dataSource instanceof BackgroundDataSource) {\n                    entry.skipRendering = true;\n                } else if (dataSource instanceof BackgroundDataSource) {\n                    tile.skipRendering = true;\n                }\n            }\n        }\n    }\n\n    private getCacheSearchLevels(\n        dataSource: DataSource,\n        visibleLevel: number\n    ): { searchLevelsUp: number; searchLevelsDown: number } {\n        const searchLevelsUp = Math.min(\n            this.options.quadTreeSearchDistanceUp,\n            Math.max(0, visibleLevel - dataSource.minDataLevel)\n        );\n        const searchLevelsDown = Math.min(\n            this.options.quadTreeSearchDistanceDown,\n            Math.max(0, dataSource.maxDataLevel - visibleLevel)\n        );\n\n        return { searchLevelsUp, searchLevelsDown };\n    }\n\n    /**\n     * Search cache to replace visible but yet empty tiles with already loaded siblings in nearby\n     * zoom levels.\n     *\n     * Useful, when zooming in/out and when \"newly elected\" tiles are not yet loaded. Prevents\n     * flickering by rendering already loaded tiles from upper/higher zoom levels.\n     */\n    private fillMissingTilesFromCache() {\n        this.dataSourceTileList.forEach(renderListEntry => {\n            const dataSource = renderListEntry.dataSource;\n            const dataZoomLevel = renderListEntry.zoomLevel;\n            const renderedTiles = renderListEntry.renderedTiles;\n\n            // Direction in quad tree to search: up -> shallower levels, down -> deeper levels.\n            enum SearchDirection {\n                NONE,\n                UP,\n                DOWN,\n                BOTH\n            }\n            let defaultSearchDirection = SearchDirection.NONE;\n\n            const { searchLevelsUp, searchLevelsDown } = this.getCacheSearchLevels(\n                dataSource,\n                dataZoomLevel\n            );\n\n            defaultSearchDirection =\n                searchLevelsDown > 0 && searchLevelsUp > 0\n                    ? SearchDirection.BOTH\n                    : searchLevelsDown > 0\n                    ? SearchDirection.DOWN\n                    : searchLevelsUp > 0\n                    ? SearchDirection.UP\n                    : SearchDirection.NONE;\n\n            const incompleteTiles: Map<number, SearchDirection> = new Map();\n\n            renderListEntry.visibleTiles.forEach(tile => {\n                const tileCode = TileOffsetUtils.getKeyForTileKeyAndOffset(\n                    tile.tileKey,\n                    tile.offset\n                );\n                tile.levelOffset = 0;\n                if (tile.hasGeometry) {\n                    renderedTiles.set(tileCode, tile);\n                } else {\n                    // if dataSource supports cache and it was existing before this render\n                    // then enable searching for loaded tiles in cache\n                    incompleteTiles.set(tileCode, defaultSearchDirection);\n                }\n            });\n\n            if (incompleteTiles.size === 0) {\n                // short circuit, nothing to be done\n                return;\n            }\n\n            // Minor optimization for the fallback search, only check parent tiles once, otherwise\n            // the recursive algorithm checks all parent tiles multiple times, the key is the code\n            // of the tile that is checked and the value is whether a parent was found or not.\n            const checkedTiles = new Map<number, boolean>();\n            // Iterate over incomplete (not loaded tiles) and find their parents or children that\n            // are in cache that can be rendered temporarily until tile is loaded. Note, we favour\n            // falling back to parent tiles rather than children.\n            for (const [tileKeyCode, searchDirection] of incompleteTiles) {\n                if (\n                    searchDirection === SearchDirection.BOTH ||\n                    searchDirection === SearchDirection.UP\n                ) {\n                    if (\n                        this.findUp(\n                            tileKeyCode,\n                            dataZoomLevel,\n                            renderedTiles,\n                            checkedTiles,\n                            dataSource\n                        )\n                    ) {\n                        // Continue to next entry so we don't search down.\n                        continue;\n                    }\n                }\n\n                if (\n                    searchDirection === SearchDirection.BOTH ||\n                    searchDirection === SearchDirection.DOWN\n                ) {\n                    this.findDown(tileKeyCode, dataZoomLevel, renderedTiles, dataSource);\n                }\n            }\n        });\n    }\n\n    private findDown(\n        tileKeyCode: number,\n        dataZoomLevel: number,\n        renderedTiles: Map<number, Tile>,\n        dataSource: DataSource\n    ) {\n        const { offset, mortonCode } = TileOffsetUtils.extractOffsetAndMortonKeyFromKey(\n            tileKeyCode\n        );\n        const tileKey = TileKey.fromMortonCode(mortonCode);\n\n        const tilingScheme = dataSource.getTilingScheme();\n        for (const childTileKey of tilingScheme.getSubTileKeys(tileKey)) {\n            const childTileCode = TileOffsetUtils.getKeyForTileKeyAndOffset(childTileKey, offset);\n            const childTile = this.m_dataSourceCache.get(\n                childTileKey.mortonCode(),\n                offset,\n                dataSource\n            );\n\n            const nextLevelDiff = Math.abs(childTileKey.level - dataZoomLevel);\n            if (childTile !== undefined && childTile.hasGeometry) {\n                // childTile has geometry, so can be reused as fallback\n                renderedTiles.set(childTileCode, childTile);\n                childTile.levelOffset = nextLevelDiff;\n                continue;\n            }\n\n            // Recurse down until the max distance is reached.\n            if (nextLevelDiff < this.options.quadTreeSearchDistanceDown) {\n                this.findDown(childTileCode, dataZoomLevel, renderedTiles, dataSource);\n            }\n        }\n    }\n\n    /**\n     * Returns true if a tile was found in the cache which is a parent\n     * @param tileKeyCode Morton code of the current tile that should be searched for.\n     * @param dataZoomLevel The current data zoom level of tiles that are to be displayed.\n     * @param renderedTiles The list of tiles that are shown to the user.\n     * @param checkedTiles Used to map a given code to a boolean which tells us if an ancestor is\n     * displayed or not.\n     * @param dataSource The provider of tiles.\n     * @returns Whether a parent tile exists.\n     */\n    private findUp(\n        tileKeyCode: number,\n        dataZoomLevel: number,\n        renderedTiles: Map<number, Tile>,\n        checkedTiles: Map<number, boolean>,\n        dataSource: DataSource\n    ): boolean {\n        const parentCode = TileOffsetUtils.getParentKeyFromKey(tileKeyCode);\n        // Check if another sibling has already added the parent.\n        if (renderedTiles.get(parentCode) !== undefined) {\n            return true;\n        }\n        const exists = checkedTiles.get(parentCode)!;\n        if (exists !== undefined) {\n            return exists;\n        }\n\n        const { offset, mortonCode } = TileOffsetUtils.extractOffsetAndMortonKeyFromKey(parentCode);\n        const parentTile = this.m_dataSourceCache.get(mortonCode, offset, dataSource);\n        const parentTileKey = parentTile ? parentTile.tileKey : TileKey.fromMortonCode(mortonCode);\n        const nextLevelDiff = Math.abs(dataZoomLevel - parentTileKey.level);\n        if (parentTile !== undefined && parentTile.hasGeometry) {\n            checkedTiles.set(parentCode, true);\n            // parentTile has geometry, so can be reused as fallback\n            renderedTiles.set(parentCode, parentTile);\n\n            // We want to have parent tiles as -ve, hence the minus.\n            parentTile.levelOffset = -nextLevelDiff;\n\n            return true;\n        } else {\n            checkedTiles.set(parentCode, false);\n        }\n\n        // Recurse up until the max distance is reached or we go to the parent of all parents.\n        if (nextLevelDiff < this.options.quadTreeSearchDistanceUp && parentTileKey.level !== 0) {\n            const foundUp = this.findUp(\n                parentCode,\n                dataZoomLevel,\n                renderedTiles,\n                checkedTiles,\n                dataSource\n            );\n            // If there was a tile upstream found, then add it to the list, so we can\n            // early skip checkedTiles.\n            checkedTiles.set(parentCode, foundUp);\n            if (foundUp) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private getTileImpl(\n        dataSource: DataSource,\n        tileKey: TileKey,\n        offset: number,\n        cacheOnly: boolean\n    ): Tile | undefined {\n        function updateTile(tileToUpdate?: Tile) {\n            if (tileToUpdate === undefined) {\n                return;\n            }\n            // Keep the tile from being removed from the cache.\n            tileToUpdate.frameNumLastRequested = dataSource.mapView.frameNumber;\n        }\n\n        if (!dataSource.cacheable && !cacheOnly) {\n            const resultTile = dataSource.getTile(tileKey);\n            updateTile(resultTile);\n            return resultTile;\n        }\n\n        const tileCache = this.m_dataSourceCache;\n        let tile = tileCache.get(tileKey.mortonCode(), offset, dataSource);\n\n        if (tile !== undefined && tile.offset === offset) {\n            updateTile(tile);\n            return tile;\n        }\n\n        if (cacheOnly) {\n            return undefined;\n        }\n\n        tile = dataSource.getTile(tileKey);\n        // TODO: Update all tile information including area, min/max elevation from TileKeyEntry\n        if (tile !== undefined) {\n            tile.offset = offset;\n            updateTile(tile);\n            tileCache.set(tileKey.mortonCode(), offset, dataSource, tile);\n            this.m_tileGeometryManager.initTile(tile);\n        }\n        return tile;\n    }\n\n    private markDataSourceTilesDirty(renderListEntry: DataSourceTileList) {\n        const dataSourceCache = this.m_dataSourceCache;\n        const retainedTiles: Set<TileCacheId> = new Set();\n\n        function markTileDirty(tile: Tile, tileGeometryManager: TileGeometryManager) {\n            const tileKey = DataSourceCache.getKeyForTile(tile);\n            if (!retainedTiles.has(tileKey)) {\n                retainedTiles.add(tileKey);\n                if (tile.tileGeometryLoader !== undefined) {\n                    tile.tileGeometryLoader.reset();\n                }\n\n                // Prevent label rendering issues when the style set is changing. Prevent Text\n                // element rendering that depends on cleaned font catalog data.\n                tile.clearTextElements();\n\n                tile.load();\n            }\n        }\n\n        renderListEntry.visibleTiles.forEach(tile => {\n            markTileDirty(tile, this.m_tileGeometryManager);\n        });\n        renderListEntry.renderedTiles.forEach(tile => {\n            markTileDirty(tile, this.m_tileGeometryManager);\n        });\n\n        dataSourceCache.forEach((tile, key) => {\n            if (!retainedTiles.has(key)) {\n                dataSourceCache.deleteByKey(key);\n                tile.dispose();\n            }\n        }, renderListEntry.dataSource);\n    }\n\n    // Computes the visible tile keys for each supplied data source.\n    private getVisibleTileKeysForDataSources(\n        zoomLevel: number,\n        dataSources: DataSource[],\n        elevationRangeSource: ElevationRangeSource | undefined\n    ): {\n        tileKeys: Array<{ dataSource: DataSource; visibleTileKeys: TileKeyEntry[] }>;\n        allBoundingBoxesFinal: boolean;\n    } {\n        const tileKeys = Array<{ dataSource: DataSource; visibleTileKeys: TileKeyEntry[] }>();\n        let allBoundingBoxesFinal: boolean = true;\n\n        if (dataSources.length === 0) {\n            return { tileKeys, allBoundingBoxesFinal };\n        }\n\n        const dataSourceBuckets = new Map<TilingScheme, DataSource[]>();\n        dataSources.forEach(dataSource => {\n            const tilingScheme = dataSource.getTilingScheme();\n            const bucket = dataSourceBuckets.get(tilingScheme);\n            if (bucket === undefined) {\n                dataSourceBuckets.set(tilingScheme, [dataSource]);\n            } else {\n                bucket.push(dataSource);\n            }\n        });\n\n        // If elevation is to be taken into account extend view frustum:\n        // (near ~0, far: maxVisibilityRange) that allows to consider tiles that\n        // are far below ground plane and high enough to intersect the frustum.\n        if (elevationRangeSource !== undefined) {\n            this.m_cameraOverride.copy(this.m_frustumIntersection.camera);\n            this.m_cameraOverride.near = Math.min(\n                this.m_cameraOverride.near,\n                this.m_viewRange.minimum\n            );\n            this.m_cameraOverride.far = Math.max(\n                this.m_cameraOverride.far,\n                this.m_viewRange.maximum\n            );\n            this.m_cameraOverride.updateProjectionMatrix();\n            this.m_frustumIntersection.updateFrustum(this.m_cameraOverride.projectionMatrix);\n        } else {\n            this.m_frustumIntersection.updateFrustum();\n        }\n\n        // For each bucket of data sources with same tiling scheme, calculate frustum intersection\n        // once using the maximum display level.\n        for (const [tilingScheme, bucket] of dataSourceBuckets) {\n            const zoomLevels = bucket.map(dataSource => dataSource.getDataZoomLevel(zoomLevel));\n            const result = this.m_frustumIntersection.compute(\n                tilingScheme,\n                elevationRangeSource,\n                zoomLevels,\n                bucket\n            );\n\n            allBoundingBoxesFinal = allBoundingBoxesFinal && result.calculationFinal;\n\n            for (const dataSource of bucket) {\n                // For each data source check what tiles from the intersection should be rendered\n                // at this zoom level.\n                const visibleTileKeys: TileKeyEntry[] = [];\n                const dataZoomLevel = dataSource.getDataZoomLevel(zoomLevel);\n                for (const tileKeyEntry of result.tileKeyEntries.get(dataZoomLevel)!.values()) {\n                    if (dataSource.canGetTile(dataZoomLevel, tileKeyEntry.tileKey)) {\n                        visibleTileKeys.push(tileKeyEntry);\n                    }\n                }\n                tileKeys.push({ dataSource, visibleTileKeys });\n            }\n        }\n\n        return { tileKeys, allBoundingBoxesFinal };\n    }\n}\n\nfunction viewRangesEqual(a: ViewRanges, b: ViewRanges) {\n    return (\n        a.far === b.far && a.maximum === b.maximum && a.minimum === b.minimum && a.near === b.near\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ITiler } from \"@here/harp-datasource-protocol\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\nimport { WorkerBasedTiler } from \"./WorkerBasedTiler\";\n\n/**\n * Default concurrent tiler helper.\n *\n * A convenient singleton that maintains a separate [[ConcurrentWorkerSet]] for each bundle\n * requested. Provides easy access to [[WorkerBasedTiler]]s for data sources.\n */\nexport class ConcurrentTilerFacade {\n    /**\n     * The URL containing a script to fall back (default) to when looking for worker sets\n     * and tilers.\n     */\n    static defaultScriptUrl: string = \"./decoder.bundle.js\";\n\n    /**\n     * The default number of workers.\n     */\n    static defaultWorkerCount: number = 1;\n\n    /**\n     * Returns a [[WorkerBasedTiler]] instance.\n     *\n     * @param tilerServiceType The name of the tiler service type.\n     * @param scriptUrl The optional URL with the workers' script.\n     * @param workerCount The number of web workers to use.\n     */\n    static getTiler(tilerServiceType: string, scriptUrl?: string, workerCount?: number): ITiler {\n        const workerSet = this.getWorkerSet(scriptUrl, workerCount);\n\n        return new WorkerBasedTiler(workerSet, tilerServiceType);\n    }\n\n    /**\n     * Returns a [[ConcurrentWorkerSet]] instance based on the script URL specified.\n     *\n     * @param scriptUrl The optional URL with the workers' script. If not specified,\n     * the function uses [[defaultScriptUrl]] instead.\n     * @param workerCount The number of web workers to use.\n     */\n    static getWorkerSet(scriptUrl?: string, workerCount?: number): ConcurrentWorkerSet {\n        if (scriptUrl === undefined) {\n            scriptUrl = this.defaultScriptUrl;\n        }\n\n        let workerSet = this.workerSets[scriptUrl];\n        if (workerSet === undefined) {\n            workerSet = new ConcurrentWorkerSet({\n                scriptUrl,\n                workerCount: workerCount === undefined ? this.defaultWorkerCount : workerCount\n            });\n            this.workerSets[scriptUrl] = workerSet;\n        }\n        return workerSet;\n    }\n\n    /**\n     * Destroys a [[ConcurrentWorkerSet]] instance.\n     *\n     * @param scriptUrl The worker script URL that was used to create the [[ConcurrentWorkerSet]].\n     */\n    static destroyWorkerSet(scriptUrl: string) {\n        const workerSet = this.workerSets[scriptUrl];\n        if (workerSet !== undefined) {\n            workerSet.destroy();\n            delete this.workerSets[scriptUrl];\n        }\n    }\n\n    /**\n     * Destroys all managed [[ConcurrentWorkerSet]]s.\n     */\n    static destroy() {\n        Object.keys(this.workerSets).forEach(name => {\n            this.workerSets[name].destroy();\n        });\n        this.workerSets = {};\n    }\n\n    /**\n     * The [[ConcurrentWorkerSet]] instances which are stored by the script URL.\n     */\n    private static workerSets: {\n        [bundleUrl: string]: ConcurrentWorkerSet;\n    } = {};\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    GeoJson,\n    ITiler,\n    WorkerServiceProtocol,\n    WorkerTilerProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\n\n/**\n * Identifier of next tiler worker-service. Used to ensure uniqueness of service ids of tilers\n * dedicated to different datasources.\n */\nlet nextUniqueServiceId = 0;\n\n/**\n * Tiler based on [[ConcurrentWorkerSet]].\n *\n * Tiles payloads using workers running in separate contexts (also known as `WebWorkers`):\n * - connection establishment,\n * - sends tile requests,\n * - configuration.\n */\nexport class WorkerBasedTiler implements ITiler {\n    private serviceId: string;\n    private m_serviceCreated: boolean = false;\n\n    /**\n     * Creates a new `WorkerBasedTiler`.\n     *\n     * @param workerSet [[ConcurrentWorkerSet]] this tiler will live in.\n     * @param tilerServiceType Service type identifier.\n     */\n    constructor(\n        private readonly workerSet: ConcurrentWorkerSet,\n        private readonly tilerServiceType: string\n    ) {\n        this.workerSet.addReference();\n        this.serviceId = `${this.tilerServiceType}-${nextUniqueServiceId++}`;\n    }\n\n    /**\n     * Dispose of dedicated tiler services in workers and remove reference to underlying\n     * [[ConcurrentWorkerSet]].\n     */\n    dispose() {\n        if (this.m_serviceCreated) {\n            this.workerSet\n                .broadcastRequest(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID, {\n                    type: WorkerServiceProtocol.Requests.DestroyService,\n                    targetServiceId: this.serviceId\n                })\n                .catch(() => {\n                    /* Ignoring these errors as underlying workers possibly do not exist anymore. */\n                });\n        }\n\n        this.workerSet.removeReference();\n    }\n\n    /**\n     * Connects to [[WorkerServiceManager]]s in underlying [[ConcurrentWorkerSet]] and creates\n     * dedicated [[TilerService]]s in all workers to serve tiling requests.\n     */\n    async connect(): Promise<void> {\n        await this.workerSet.connect(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID);\n        if (!this.m_serviceCreated) {\n            await this.workerSet.broadcastRequest(\n                WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID,\n                {\n                    type: WorkerServiceProtocol.Requests.CreateService,\n                    targetServiceType: this.tilerServiceType,\n                    targetServiceId: this.serviceId\n                }\n            );\n\n            this.m_serviceCreated = true;\n        }\n    }\n\n    /**\n     * Register index in the tiler. Indexes registered in the tiler can be later used to retrieved\n     * tiled payloads using `getTile`.\n     *\n     * @param indexId Index identifier.\n     * @param input Url to the index payload, or direct GeoJSON.\n     */\n    registerIndex(indexId: string, input: URL | GeoJson): Promise<void> {\n        const message: WorkerTilerProtocol.RegisterIndexRequest = {\n            type: WorkerTilerProtocol.Requests.RegisterIndex,\n            id: indexId,\n            input: input instanceof URL ? input.href : (input as GeoJson)\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n\n    /**\n     * Update index in the tiler. Indexes registered in the tiler can be later used to retrieved\n     * tiled payloads using `getTile`.\n     *\n     * @param indexId Index identifier.\n     * @param input Url to the index payload, or direct GeoJSON.\n     */\n    updateIndex(indexId: string, input: URL | GeoJson): Promise<void> {\n        const message: WorkerTilerProtocol.UpdateIndexRequest = {\n            type: WorkerTilerProtocol.Requests.UpdateIndex,\n            id: indexId,\n            input: input instanceof URL ? input.href : (input as GeoJson)\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n\n    /**\n     * Retrieves a tile for a previously registered index.\n     *\n     * @param indexId Index identifier.\n     * @param tileKey The [[TileKey]] that identifies the tile.\n     */\n    getTile(indexId: string, tileKey: TileKey): Promise<{}> {\n        const tileKeyCode = tileKey.mortonCode();\n        const message: WorkerTilerProtocol.TileRequest = {\n            type: WorkerTilerProtocol.Requests.TileRequest,\n            index: indexId,\n            tileKey: tileKeyCode\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"@here/harp-geoutils\";\nimport { getOptionValue, LoggerManager } from \"@here/harp-utils\";\nimport { CopyrightInfo } from \"./CopyrightInfo\";\nimport { CopyrightProvider } from \"./CopyrightProvider\";\n\ndeclare const require: any;\n\n// tslint:disable-next-line:no-var-requires\nconst RBush = require(\"rbush\");\n\n/**\n * Schema of [Map Tile API copyright\n * endpoint](https://developer.here.com/documentation/map-tile/topics/resource-copyright.html) JSON\n * response.\n */\nexport interface AreaCopyrightInfo {\n    /**\n     * Minimum zoom level for the specified copyright label.\n     */\n    minLevel?: number;\n\n    /**\n     * Maximum zoom level for the specified copyright label.\n     */\n    maxLevel?: number;\n\n    /**\n     * Copyright text to display after the copyright symbol on the map.\n     */\n    label: string;\n\n    /**\n     * Verbose copyright text of the label to display by mouse over label or info menu entry.\n     */\n    alt?: string;\n\n    /**\n     * The bounding boxes define areas where specific copyrights are valid. A bounding box is\n     * defined by bottom (latitude), left (longitude) and top (latitude), right (longitude).\n     *\n     * The default copyright has no boxes element and covers all other areas.\n     */\n    boxes?: Array<[number, number, number, number]>;\n}\n\n/**\n * Schema of [Map Tile API copyright\n * endpoint](https://developer.here.com/documentation/map-tile/topics/resource-copyright.html) JSON\n * response.\n */\nexport interface CopyrightCoverageResponse {\n    [scheme: string]: AreaCopyrightInfo[];\n}\n\n/**\n * Base class to provide copyrights based on copyright coverage information, defined by geographical\n * bounding boxes and relevant zoom level ranges.\n */\nexport abstract class CopyrightCoverageProvider implements CopyrightProvider {\n    /** Logger instance. */\n    protected readonly logger = LoggerManager.instance.create(\"CopyrightCoverageProvider\");\n\n    private m_cachedTreePromise: Promise<any> | undefined;\n\n    /** Asynchronously retrieves copyright coverage data. */\n    abstract async getCopyrightCoverageData(): Promise<AreaCopyrightInfo[]>;\n\n    /** @inheritdoc */\n    getTree(): Promise<any> {\n        if (this.m_cachedTreePromise !== undefined) {\n            return this.m_cachedTreePromise;\n        }\n\n        this.m_cachedTreePromise = this.getCopyrightCoverageData()\n            .then(coverageInfo => this.initRBush(coverageInfo))\n            .catch(error => {\n                this.logger.error(error);\n                return new RBush();\n            });\n\n        return this.m_cachedTreePromise;\n    }\n\n    /** @inheritdoc */\n    async getCopyrights(geoBox: GeoBox, level: number): Promise<CopyrightInfo[]> {\n        const tree = await this.getTree();\n\n        const result: CopyrightInfo[] = [];\n\n        const matchingEntries: AreaCopyrightInfo[] = tree.search({\n            minX: geoBox.west,\n            minY: geoBox.south,\n            maxX: geoBox.east,\n            maxY: geoBox.north\n        });\n\n        for (const entry of matchingEntries) {\n            const minLevel = getOptionValue(entry.minLevel, 0);\n            const maxLevel = getOptionValue(entry.maxLevel, Infinity);\n\n            if (level >= minLevel && level <= maxLevel) {\n                if (result.find(item => item.id === entry.label) === undefined) {\n                    result.push({ id: entry.label });\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Initializes RBush.\n     *\n     * @param entries Entries for tree.\n     * @returns RBush instance.\n     */\n    initRBush(entries: AreaCopyrightInfo[]): any {\n        const tree = new RBush();\n\n        if (!entries) {\n            this.logger.warn(\"No copyright coverage data provided\");\n            return tree;\n        }\n\n        for (const entry of entries) {\n            const { minLevel, maxLevel, label, alt } = entry;\n\n            if (!entry.boxes) {\n                tree.insert({\n                    minX: -180,\n                    minY: -90,\n                    maxX: 180,\n                    maxY: 180,\n                    minLevel,\n                    maxLevel,\n                    label,\n                    alt\n                });\n            } else {\n                for (const box of entry.boxes) {\n                    const [minY, minX, maxY, maxX] = box;\n                    tree.insert({\n                        minX,\n                        minY,\n                        maxX,\n                        maxY,\n                        minLevel,\n                        maxLevel,\n                        label,\n                        alt\n                    });\n                }\n            }\n        }\n\n        return tree;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./src/TransferManager\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GeometryType } from \"@here/harp-datasource-protocol\";\nimport { reconstructLineWidth } from \"@here/harp-lines\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\n\nconst logger = LoggerManager.instance.create(\"TileGeometry\");\n\n/**\n * Interface to access lines. Allows read access for some important attributes.\n */\nexport interface ILineAccessor {\n    /**\n     * Hint for the original type of geometry.\n     */\n    geometryType: GeometryType;\n\n    /**\n     * Get the color from materials.\n     */\n    color: THREE.Color | undefined | Array<THREE.Color | undefined>;\n\n    /**\n     * Get the width. May have to be reconstructed from triangulated line mesh.\n     */\n    width: number | undefined;\n\n    /**\n     * Render order.\n     */\n    renderOrder: number;\n\n    /**\n     * Helper for function `isLineAccessor`.\n     *\n     * @returns `true` if it is a line accessor.\n     */\n    isLineAccessor(): boolean;\n\n    /**\n     * Clear the object from the mesh.\n     */\n    clear(): void;\n\n    /**\n     * Get vertices from the object.\n     */\n    getVertices(): Float32Array | undefined;\n}\n\n/**\n * Helper function to check if an accessor is of type `ILineAccessor`.\n *\n * @param arg `true` if `arg` is `ILineAccessor`.\n */\nexport function isLineAccessor(arg: any): arg is ILineAccessor {\n    /**\n     * Get vertices from the object.\n     *\n     * @param mode Specifies which part of the vertices should be returned.\n     */\n\n    return typeof arg.isLineAccessor === \"function\" && arg.isLineAccessor() === true;\n}\n\n/**\n * Accessor for unspecified 3D objects, like landmarks.\n */\nexport interface IObject3dAccessor {\n    /**\n     * Hint for the original type of geometry.\n     */\n    geometryType: GeometryType;\n\n    /**\n     * Get the color from materials.\n     */\n    color: THREE.Color | undefined | Array<THREE.Color | undefined>;\n\n    /**\n     * Render order.\n     */\n    renderOrder: number;\n\n    /**\n     * Helper for function `isObject3dAccessor`.\n     *\n     * @returns `true` if it is a line accessor.\n     */\n    isObject3dAccessor(): boolean;\n\n    /**\n     * Clear the object from the mesh.\n     */\n    clear(): void;\n\n    getVertices(): Float32Array | undefined;\n}\n\n/**\n * Helper function to check if an accessor is of type `IObject3dAccessor`.\n *\n * @param arg `true` if `arg` is `IObject3dAccessor`.\n */\nexport function isObject3dAccessor(arg: any): arg is IObject3dAccessor {\n    return typeof arg.isObject3dAccessor === \"function\" && arg.isObject3dAccessor() === true;\n}\n\n/**\n * Basic interface for geometry accessors.\n */\nexport interface IGeometryAccessor {\n    /**\n     * Get the number of primitives (vertices of triangles).\n     *\n     * @returns Number of primitives.\n     */\n    getCount(): number;\n\n    /**\n     * Set range of primitives in this object related to one or more buffers.\n     *\n     * @param start Start index in buffers.\n     * @param end End index in buffers (+1).\n     */\n    setRange(start: number, end: number): void;\n}\n\n/**\n * Geometry accessor for both indexed and nonindexed `BufferedGeometry`.\n */\nexport abstract class BufferedGeometryAccessorBase implements IGeometryAccessor {\n    protected start: number = -1;\n    protected end: number = -1;\n    protected startCapSize: number = 0;\n    protected endCapSize: number = 0;\n    protected position: THREE.BufferAttribute;\n    protected itemSize: number;\n\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        assert(!!object);\n\n        if (bufferGeometry.type !== \"BufferGeometry\") {\n            logger.error(\n                \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has wrong \" + \"type\"\n            );\n        }\n        assert(\n            bufferGeometry.type === \"BufferGeometry\",\n            \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has wrong type\"\n        );\n\n        // we know its a BufferAttribute because it is a BufferGeometry\n        this.position = this.bufferGeometry.getAttribute(\"position\") as THREE.BufferAttribute;\n        this.itemSize = this.position.itemSize;\n\n        if (!this.position) {\n            logger.warn(\n                \"BufferedGeometryAccessor#constructor: BufferGeometry has no position \" +\n                    \"attribute\"\n            );\n        }\n\n        if (this.position.array.constructor !== Float32Array) {\n            logger.warn(\n                \"BufferedGeometryAccessor#constructor: BufferGeometry.position: \" +\n                    \"unsupported ArrayBuffer\"\n            );\n        }\n    }\n\n    /**\n     * Get the number of accessible geometries in this buffer.\n     *\n     * @returns Number of primitives in this geometry.\n     */\n    getCount(): number {\n        return this.position.count;\n    }\n\n    /**\n     * Get `renderOrder` of object.\n     *\n     * @returns `renderOrder` of the object.\n     */\n    get renderOrder(): number {\n        return this.object.renderOrder;\n    }\n\n    setRange(start: number, end: number, startCapSize: number = 0, endCapSize: number = 0) {\n        assert(start >= 0);\n        assert(end >= 0);\n        assert(start <= end);\n        this.start = start;\n        this.end = end;\n        this.startCapSize = startCapSize;\n        this.endCapSize = endCapSize;\n    }\n\n    /**\n     * Get one or more colors from materials.\n     */\n    get color(): THREE.Color | undefined | Array<THREE.Color | undefined> {\n        /**\n         * TODO: Get color(s) from vertex colors\n         */\n        const getColor = (material: THREE.Material) => {\n            const meshMaterial = material as THREE.MeshBasicMaterial;\n            if (\n                meshMaterial.type === \"MeshBasicMaterial\" ||\n                meshMaterial.type === \"MeshStandardMaterial\"\n            ) {\n                return meshMaterial.color;\n            } else if (meshMaterial.type === \"RawShaderMaterial\") {\n                const rawShaderMaterial = material as THREE.RawShaderMaterial;\n\n                if (rawShaderMaterial.name === \"SolidLineMaterial\") {\n                    return rawShaderMaterial.uniforms.diffuse.value as THREE.Color;\n                }\n\n                logger.warn(\n                    \"BufferedGeometryAccessor#color: unknown shader material name\",\n                    rawShaderMaterial.name\n                );\n            } else {\n                logger.warn(\n                    \"BufferedGeometryAccessor#color: unknown material type\",\n                    meshMaterial.type\n                );\n            }\n\n            return undefined;\n        };\n\n        if (Array.isArray(this.object.material)) {\n            const results = new Array<THREE.Color | undefined>();\n            const materials = this.object.material as THREE.Material[];\n\n            for (const material of materials) {\n                results.push(getColor(material));\n            }\n\n            return results;\n        } else {\n            return getColor(this.object.material);\n        }\n    }\n}\n\n/**\n * Abstract base class of an accessor for nonindexed geometry.\n */\nexport abstract class BufferedGeometryAccessor extends BufferedGeometryAccessorBase {\n    /**\n     * Create an object of type `BufferedGeometryAccessor`\n     *\n     * @param object - mesh object\n     * @param geometryType - type of geometry to be used\n     * @param bufferGeometry - which buffer geometry to use\n     * @param stride - geometry stride length\n     */\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry,\n        protected stride: number\n    ) {\n        super(object, geometryType, bufferGeometry);\n    }\n\n    clear(): void {\n        assert(this.checkSetUp(), \"BufferedGeometryAccessor not setup\");\n\n        const positionsArray = this.position.array as number[];\n\n        const start = this.start * this.itemSize;\n        const end = this.end * this.itemSize;\n\n        for (let i = start; i < end; i++) {\n            positionsArray[i] = 0;\n        }\n\n        this.position.needsUpdate = true;\n    }\n\n    getVertices(): Float32Array | undefined {\n        assert(this.checkSetUp(), \"BufferedGeometryAccessor not setup\");\n\n        const start = this.start;\n        const end = this.end;\n\n        return (this.position.array as Float32Array).subarray(\n            start * this.itemSize,\n            end * this.itemSize\n        );\n    }\n\n    protected checkSetUp(): boolean {\n        return (\n            this.position !== undefined &&\n            this.start !== undefined &&\n            this.end !== undefined &&\n            this.start >= 0 &&\n            this.end <= this.position.count &&\n            this.start <= this.end\n        );\n    }\n}\n\n/**\n * Accessor for nonindexed line geometry.\n */\nexport class BufferedGeometryLineAccessor extends BufferedGeometryAccessor\n    implements ILineAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 3);\n    }\n\n    isLineAccessor(): boolean {\n        return true;\n    }\n\n    get width(): number | undefined {\n        //TODO: There is no implementation of such a line, yet...\n        assert(this.checkSetUp(), \"RoBufferedGeometryLineAccessor not setup\");\n        return undefined;\n    }\n}\n\n/**\n * Accessor for nonindexed unspecified (`Object3D`) geometry.\n */\nexport class BufferedGeometryObject3dAccessor extends BufferedGeometryAccessor\n    implements IObject3dAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 1);\n    }\n\n    isObject3dAccessor(): boolean {\n        return true;\n    }\n\n    /** @override */\n    getVertices(): Float32Array | undefined {\n        return super.getVertices();\n    }\n}\n\n/**\n * Abstract base class of indexed geometry.\n */\nexport abstract class IndexedBufferedGeometryAccessor extends BufferedGeometryAccessorBase {\n    indices: number[];\n\n    /**\n     * Creates an abstract class `IndexedBufferedGeometryAccessor`.\n     *\n     * @param object - mesh to be used\n     * @param geometryType - type of geometry\n     * @param bufferGeometry - geometry used\n     * @param start\n     * @param end\n     */\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry,\n        // tslint:disable-next-line:no-unused-variable\n        start?: number,\n        // tslint:disable-next-line:no-unused-variable\n        end?: number\n    ) {\n        super(object, geometryType, bufferGeometry);\n\n        this.indices =\n            this.bufferGeometry.index !== null\n                ? (this.bufferGeometry.index.array as number[])\n                : ((undefined as any) as number[]);\n\n        if (!this.indices) {\n            logger.warn(\n                \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has no \" + \"index\"\n            );\n            assert(!!this.indices);\n        } else {\n            if (!(this.indices instanceof Uint32Array)) {\n                logger.warn(\n                    \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry index \" +\n                        \"has wrong type\"\n                );\n                assert(this.indices instanceof Uint32Array);\n            }\n        }\n    }\n\n    /**\n     * Returns number of primitives, which is not known in this base class, so we return the number\n     * of indices.\n     *\n     * @returns The number of indices in the geometry.\n     * @override\n     */\n    getCount(): number {\n        return this.indices.length;\n    }\n\n    protected checkSetUp(): boolean {\n        return (\n            !!this.indices &&\n            this.start !== undefined &&\n            this.end !== undefined &&\n            this.start >= 0 &&\n            this.end <= this.indices.length &&\n            this.start <= this.end\n        );\n    }\n}\n\n/**\n * Accessor for lines in an indexed geometry.\n */\nexport class IndexedBufferedGeometryLineAccessor extends IndexedBufferedGeometryAccessor\n    implements ILineAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 3);\n    }\n\n    isLineAccessor(): boolean {\n        return true;\n    }\n\n    /**\n     * Reconstructs line width from triangulated geometry.\n     *\n     * @returns Line width.\n     */\n    get width(): number | undefined {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        if (this.geometryType === GeometryType.ExtrudedLine) {\n            const start = this.start + this.startCapSize;\n            const positionArray = this.position.array as Float32Array;\n            return reconstructLineWidth(positionArray, start);\n        }\n\n        return undefined;\n    }\n\n    clear(): void {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        const start = this.start;\n        const end = this.end;\n\n        for (let i = start; i < end; i++) {\n            this.indices[i] = 0;\n        }\n\n        if (this.bufferGeometry.index !== null) {\n            this.bufferGeometry.index.needsUpdate = true;\n        }\n    }\n\n    getVertices(): Float32Array | undefined {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        const itemSize = this.itemSize;\n\n        const start = this.start;\n        const end = this.end;\n\n        const result = new Float32Array((end - start) * itemSize);\n        const positionArray = this.position.array;\n\n        if (itemSize === 2) {\n            for (let i = start, j = 0; i < end; i++, j += itemSize) {\n                const index = this.indices[i];\n                result[j + 0] = positionArray[index * itemSize + 0];\n                result[j + 1] = positionArray[index * itemSize + 1];\n            }\n        }\n        if (itemSize === 3) {\n            for (let i = start, j = 0; i < end; i++, j += itemSize) {\n                const index = this.indices[i];\n                result[j + 0] = positionArray[index * itemSize + 0];\n                result[j + 1] = positionArray[index * itemSize + 1];\n                result[j + 2] = positionArray[index * itemSize + 2];\n            }\n        } else {\n            for (let i = start, j = 0; i < end; i++, j++) {\n                const index = this.indices[i];\n                for (let k = 0; k < itemSize; k++) {\n                    result[j * itemSize + k] = positionArray[index * itemSize + k];\n                }\n            }\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst UNIT_Z = new THREE.Vector3(0, 0, 1);\nconst POINTS = [0, 1, 2, 1, 3, 2];\nconst BEVEL_POINTS = [0, 1, 3, 3, 1, 2, 0, 3, 4, 5, 4, 3];\n\nconst SECTORS_IN_CIRCLE = 8;\nconst STEP = Math.PI / SECTORS_IN_CIRCLE;\n\n/**\n * Adds a half-circle geometry to original line\n *\n * @param x The line end X (used as circle center X)\n * @param y The line end Y (used as circle center Y)\n * @param lineAngle The cap incline angle\n * @param radius The cap (circle) radius\n * @param vertices The input vertex buffer (cap vertices are added there)\n * @param indices The input index buffer (cap indices are is added there)\n */\nfunction addCircle(\n    x: number,\n    y: number,\n    lineAngle: number,\n    radius: number,\n    vertices: number[],\n    indices: number[]\n) {\n    const baseVertex = vertices.length / 3;\n\n    // Add cap center to vertices directly (it doesn't need rotation)\n    vertices.push(x, y, 0);\n\n    for (let i = 0; i < SECTORS_IN_CIRCLE + 1; ++i) {\n        const angle = STEP * i + Math.PI / 2 + lineAngle; // Start angle is -90deg\n        vertices.push(x + radius * Math.cos(angle), y + radius * Math.sin(angle), 0);\n\n        indices.push(\n            baseVertex,\n            baseVertex + i + 1,\n            baseVertex + ((i + 1) % (SECTORS_IN_CIRCLE + 1)) + 1\n        );\n    }\n}\n\n/**\n * Returns the number of points in circle used for caps.\n *\n * @param lineWidth Width of line.\n */\n// tslint:disable-next-line:no-unused-variable\nexport function numCirclePoints(lineWidth: number): number {\n    return SECTORS_IN_CIRCLE + 1;\n}\n\n/**\n * Create a triangle mesh from the given polyline.\n *\n * @param points Sequence of (x,y,z) coordinates.\n * @param width The width of the extruded line.\n * @param vertices The output vertex buffer.\n * @param indices The output index buffer.\n * @param startWithCircle `true` if the line should start will a circle.\n * @param endWithCircle `true` if the line should end with a circle.\n */\nexport function triangulateLine(\n    points: ArrayLike<number>,\n    width: number,\n    vertices: number[],\n    indices: number[],\n    startWithCircle = true,\n    endWithCircle = startWithCircle\n) {\n    if (points.length < 3) {\n        return;\n    }\n\n    // This vector is used for computing cap angle\n    const angleVec = new THREE.Vector2();\n\n    if (startWithCircle) {\n        // Define lineAngle as (direction - origin) vector angle to X axis\n        const lineAngle =\n            points.length !== 3\n                ? angleVec.set(points[3] - points[0], points[4] - points[1]).angle()\n                : 0;\n\n        addCircle(points[0], points[1], lineAngle, width, vertices, indices);\n    }\n\n    const baseVertex = vertices.length / 3;\n\n    // bt = Bitangent (i.e. extrusion vector)\n    const prevBt = new THREE.Vector3();\n    const p = new THREE.Vector3(); // current point\n    const n = new THREE.Vector3(); // next point\n    const bt = new THREE.Vector3();\n    const averageBt = new THREE.Vector3();\n    const p0 = new THREE.Vector3();\n    const p1 = new THREE.Vector3();\n    const p2 = new THREE.Vector3();\n    const p3 = new THREE.Vector3();\n\n    const N = points.length / 3;\n\n    let vertexOffset = 0;\n    for (let i = 0; i < N; ++i) {\n        let useBevel = false;\n        p.set(points[i * 3], points[i * 3 + 1], points[i * 3 + 2]);\n\n        if (i + 1 < N) {\n            n.set(points[(i + 1) * 3], points[(i + 1) * 3 + 1], points[(i + 1) * 3 + 2]);\n\n            bt.copy(n)\n                .sub(p)\n                .normalize()\n                .cross(UNIT_Z);\n\n            averageBt.copy(bt);\n\n            if (i > 0) {\n                averageBt.add(prevBt).multiplyScalar(1.0 - 0.5 * bt.dot(prevBt));\n\n                useBevel = prevBt.angleTo(bt) > Math.PI / 2;\n\n                if (useBevel) {\n                    const inclineWidth = width / Math.cos(bt.angleTo(prevBt) / 2);\n\n                    p0.copy(bt)\n                        .add(prevBt)\n                        .normalize()\n                        .multiplyScalar(-inclineWidth)\n                        .add(p);\n\n                    p1.copy(prevBt)\n                        .multiplyScalar(width)\n                        .add(p);\n\n                    // p2 is used for \"miter\" connections\n                    p2.copy(bt)\n                        .add(prevBt)\n                        .normalize()\n                        .multiplyScalar(inclineWidth)\n                        .add(p);\n\n                    p3.copy(bt)\n                        .multiplyScalar(width)\n                        .add(p);\n                }\n            }\n\n            if (useBevel) {\n                vertices.push(\n                    p0.x,\n                    p0.y,\n                    p0.z,\n                    p1.x,\n                    p1.y,\n                    p1.z,\n                    p2.x,\n                    p2.y,\n                    p2.z,\n                    p3.x,\n                    p3.y,\n                    p3.z\n                );\n            } else {\n                p0.copy(averageBt)\n                    .multiplyScalar(-width)\n                    .add(p);\n\n                p1.copy(averageBt)\n                    .multiplyScalar(width)\n                    .add(p);\n\n                vertices.push(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z);\n            }\n\n            prevBt.copy(bt);\n        } else {\n            p0.copy(prevBt)\n                .multiplyScalar(-width)\n                .add(p);\n\n            p1.copy(prevBt)\n                .multiplyScalar(width)\n                .add(p);\n\n            vertices.push(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z);\n        }\n\n        if (i !== N - 1) {\n            (useBevel ? BEVEL_POINTS : POINTS).forEach(o =>\n                indices.push(baseVertex + vertexOffset + o)\n            );\n            vertexOffset += useBevel ? 4 : 2;\n        }\n    }\n\n    if (endWithCircle) {\n        const lineAngle =\n            points.length !== 2\n                ? angleVec\n                      .set(\n                          points[(N - 3) * 3] - points[(N - 2) * 3],\n                          points[(N - 3) * 3 + 1] - points[(N - 2) * 3 + 1]\n                      )\n                      .angle()\n                : Math.PI;\n\n        addCircle(\n            points[(N - 2) * 3],\n            points[(N - 2) * 3 + 1],\n            lineAngle,\n            width,\n            vertices,\n            indices\n        );\n    }\n}\n\n/**\n * Reconstruct the original points of a line from the vertices of the triangulated line.\n *\n * @param inBuffer Buffer with vertices.\n * @param startOffset Start index, will differ from `0` if the line has caps.\n * @returns Buffer containing the original points of the triangulated line.\n */\nexport function reconstructLine(inBuffer: Float32Array, startOffset: number): Float32Array {\n    const outBuffer = new Float32Array(inBuffer.length / 2);\n\n    for (let i = startOffset * 3, i2 = i * 2; i < outBuffer.length; i += 3, i2 += 6) {\n        outBuffer[i] = inBuffer[i2] + (inBuffer[i2 + 3] - inBuffer[i2]) * 0.5;\n        outBuffer[i + 1] = inBuffer[i2 + 1] + (inBuffer[i2 + 3 + 1] - inBuffer[i2 + 1]) * 0.5;\n        outBuffer[i + 2] = inBuffer[i2 + 2] + (inBuffer[i2 + 3 + 2] - inBuffer[i2 + 2]) * 0.5;\n    }\n    return outBuffer;\n}\n\n/**\n * Extract the line width from a triangulated line.\n *\n * @param inBuffer Array of vertex elements of a triangulated line.\n * @param startIndex Start index, will differ from `0` if the line has caps.\n */\nexport function reconstructLineWidth(inBuffer: Float32Array, startIndex: number): number {\n    const xd = inBuffer[startIndex * 2 + 3] - inBuffer[startIndex * 2];\n    const yd = inBuffer[startIndex * 2 + 3 + 1] - inBuffer[startIndex * 2 + 1];\n    const zd = inBuffer[startIndex * 2 + 3 + 2] - inBuffer[startIndex * 2 + 2];\n\n    return Math.sqrt(xd * xd + yd * yd + zd * zd) * 0.5;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HighPrecisionLineMaterial } from \"@here/harp-materials\";\n\nimport * as THREE from \"three\";\nimport { HighPrecisionUtils } from \"./HighPrecisionUtils\";\n\n/**\n * Declare interface for `HighPrecisionObject` which describes additional functionality to render\n * high-precision vertices.\n */\nexport interface HighPrecisionObject extends THREE.Object3D {\n    /**\n     * Allow direct access to [[BufferGeometry]] without cast.\n     */\n    bufferGeometry: THREE.BufferGeometry;\n\n    /**\n     * Allow direct access to [[ShaderMaterial]] without cast.\n     */\n    shaderMaterial: THREE.ShaderMaterial;\n\n    /**\n     * Inversed World Matrix.\n     */\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Sets up attributes for position (one attribute for major 32 bits position \"halve\", and one\n     * attribute for lower 32 bits).\n     */\n    setPositions(positions: number[] | THREE.Vector3[]): void;\n\n    /**\n     * Prepare the objects \"`onBeforeRender()`\" callback to generate proper high-precision camera\n     * position.\n     */\n    setupForRendering(): void;\n}\n\n/**\n * Class used to render high-precision wireframe lines.\n */\nexport class HighPrecisionWireFrameLine extends THREE.Line implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Creates a `HighPrecisionWireFrameLine` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered line.\n     * @param opacity Opacity of the rendered line.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionLineMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        if (material === undefined) {\n            material = new HighPrecisionLineMaterial({\n                color: color ? color : HighPrecisionLineMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : HighPrecisionLineMaterial.DEFAULT_OPACITY\n            });\n        }\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n\n/**\n * Class used to render high-precision lines.\n */\nexport class HighPrecisionLine extends THREE.Mesh implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Creates a `HighPrecisionLine` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered line.\n     * @param opacity Opacity of the rendered line.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionLineMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        if (material === undefined) {\n            material = new HighPrecisionLineMaterial({\n                color: color ? color : HighPrecisionLineMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : HighPrecisionLineMaterial.DEFAULT_OPACITY\n            });\n        }\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport \"@here/harp-fetch\";\n\nimport {\n    DecodedTile,\n    ITileDecoder,\n    RequestController,\n    TileInfo\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { DataSource, TileLoaderState } from \"@here/harp-mapview\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport { DataProvider } from \"./DataProvider\";\n\n/**\n * Logger to write to console etc.\n */\nconst logger = LoggerManager.instance.create(\"TileLoader\");\n\n/**\n * The [[TileLoader]] manages the different states of loading and decoding for a [[Tile]]. Used by\n * the [[TileDataSource]].\n */\nexport class TileLoader {\n    /**\n     * Current state of `TileLoader`.\n     */\n    state: TileLoaderState = TileLoaderState.Initialized;\n\n    /**\n     * Error object if loading or decoding failed.\n     */\n    error?: Error;\n\n    /**\n     * The binary data in form of [[ArrayBufferLike]], or any object.\n     */\n    payload?: ArrayBufferLike | {};\n\n    /**\n     * The result of decoding the `payload`: The [[DecodedTile]].\n     */\n    decodedTile?: DecodedTile;\n\n    /**\n     * The abort controller notifying the [[DataProvider]] to cancel loading.\n     */\n    protected loadAbortController = new AbortController();\n\n    /**\n     * The  notifying the [[ITileDecoder]] to cancel decoding.\n     */\n    protected requestController?: RequestController;\n\n    /**\n     * The promise which is resolved when loading and decoding have finished.\n     */\n    protected donePromise?: Promise<TileLoaderState>;\n\n    /**\n     * The internal function that is called when loading and decoding have finished successfully.\n     */\n    protected resolveDonePromise?: (state: TileLoaderState) => void;\n\n    /**\n     * The internal function that is called when loading and decoding failed.\n     */\n    protected rejectedDonePromise?: (state: TileLoaderState) => void;\n\n    /**\n     * Set up loading of a single [[Tile]].\n     *\n     * @param dataSource The [[DataSource]] the tile belongs to.\n     * @param tileKey The quadtree address of a [[Tile]].\n     * @param dataProvider The [[DataProvider]] that retrieves the binary tile data.\n     * @param tileDecoder The [[ITileDecoder]] that decodes the binary tile to a [[DecodeTile]].\n     * @param priority The priority given to the loading job. Highest number will be served first.\n     */\n    constructor(\n        protected dataSource: DataSource,\n        protected tileKey: TileKey,\n        protected dataProvider: DataProvider,\n        protected tileDecoder: ITileDecoder,\n        public priority: number\n    ) {}\n\n    /**\n     * Start loading and/or proceed through the various states of loading of this tile.\n     *\n     * @returns A promise which resolves the [[TileLoaderState]].\n     */\n    loadAndDecode(): Promise<TileLoaderState> {\n        switch (this.state) {\n            case TileLoaderState.Loading:\n            case TileLoaderState.Loaded:\n            case TileLoaderState.Decoding:\n                // tile is already loading\n                return this.donePromise!;\n\n            case TileLoaderState.Ready:\n            case TileLoaderState.Failed:\n            case TileLoaderState.Initialized:\n            case TileLoaderState.Canceled:\n                // restart loading\n                this.startLoading();\n                return this.donePromise!;\n        }\n    }\n\n    /**\n     * Return the current state in form of a promise. Caller can then wait for the promise to be\n     * resolved.\n     *\n     * @returns A promise which resolves the current [[TileLoaderState]].\n     */\n    waitSettled(): Promise<TileLoaderState> {\n        if (!this.donePromise) {\n            return Promise.resolve(this.state);\n        }\n        return this.donePromise;\n    }\n\n    /**\n     * Cancel loading of the [[Tile]].\n     * Cancellation token is notified, an internal state is cleaned up.\n     */\n    cancel() {\n        switch (this.state) {\n            case TileLoaderState.Loading:\n                this.loadAbortController.abort();\n                this.loadAbortController = new AbortController();\n                break;\n\n            case TileLoaderState.Decoding:\n                if (this.requestController) {\n                    this.requestController.abort();\n                    this.requestController = undefined;\n                }\n                break;\n        }\n\n        this.onDone(TileLoaderState.Canceled);\n    }\n\n    /**\n     * Return `true` if [[Tile]] is still loading, `false` otherwise.\n     */\n    get isFinished(): boolean {\n        return (\n            this.state === TileLoaderState.Ready ||\n            this.state === TileLoaderState.Canceled ||\n            this.state === TileLoaderState.Failed\n        );\n    }\n\n    /**\n     * Update the priority of this [[Tile]]'s priority. Is effective to sort the decoding requests\n     * in the request queue (used during heavy load).\n     */\n    updatePriority(priority: number): void {\n        this.priority = priority;\n        if (this.requestController !== undefined) {\n            this.requestController.priority = priority;\n        }\n    }\n\n    /**\n     * Start loading. Only call if loading did not start yet.\n     */\n    protected startLoading() {\n        const myLoadCancellationToken = this.loadAbortController.signal;\n        this.dataProvider\n            .getTile(this.tileKey, myLoadCancellationToken)\n            .then(payload => {\n                if (myLoadCancellationToken.aborted) {\n                    // safety belt if getTile doesn't really support cancellation tokens\n                    const err = new Error(\"Aborted\");\n                    err.name = \"AbortError\";\n                    throw err;\n                }\n                this.onLoaded(payload);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    return;\n                }\n                this.onError(error);\n            });\n\n        if (this.donePromise === undefined) {\n            this.donePromise = new Promise<TileLoaderState>((resolve, reject) => {\n                this.resolveDonePromise = resolve;\n                this.rejectedDonePromise = reject;\n            });\n        }\n        this.state = TileLoaderState.Loading;\n    }\n\n    /**\n     * Called when binary data has been loaded. The loading state is now progressing to decoding.\n     *\n     * @param payload Binary data in form of [[ArrayBufferLike]], or any object.\n     */\n    protected onLoaded(payload: ArrayBufferLike | {}) {\n        this.state = TileLoaderState.Loaded;\n        this.payload = payload;\n\n        if ((payload as ArrayBufferLike).byteLength !== undefined) {\n            if ((payload as ArrayBufferLike).byteLength === 0) {\n                this.onDone(TileLoaderState.Ready);\n                return;\n            }\n        }\n        // Object is empty\n        if ((payload as {}) === {}) {\n            this.onDone(TileLoaderState.Ready);\n            return;\n        }\n\n        // TBD: we might suspend decode if tile is not visible ... ?\n        this.startDecodeTile();\n    }\n\n    /**\n     * Start decoding the payload.\n     */\n    protected startDecodeTile() {\n        const payload = this.payload;\n        if (payload === undefined) {\n            logger.error(\"TileLoader#startDecodeTile: Cannot decode without payload\");\n            return;\n        }\n\n        this.state = TileLoaderState.Decoding;\n        this.payload = undefined;\n\n        // Save our cancellation point, so we can be reliably cancelled by any subsequent decode\n        // attempts\n        const requestController = new RequestController(this.priority);\n        this.requestController = requestController;\n\n        const dataSource = this.dataSource;\n        this.tileDecoder\n            .decodeTile(payload, this.tileKey, dataSource.projection, requestController)\n            .then(decodedTile => {\n                if (requestController.signal.aborted) {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n\n                this.onDecoded(decodedTile);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.onError(error);\n            });\n    }\n\n    /**\n     * Called when the decoding is finished, and the [[DecodedTile]] has been created.\n     *\n     * @param decodedTile The [[DecodedTile]].\n     */\n    protected onDecoded(decodedTile: DecodedTile) {\n        this.decodedTile = decodedTile;\n        this.onDone(TileLoaderState.Ready);\n    }\n\n    /**\n     * Cancel the decoding process.\n     */\n    protected cancelDecoding() {\n        if (this.requestController !== undefined) {\n            // we should cancel any decodes already in progress!\n            this.requestController.abort();\n            this.requestController = undefined;\n        }\n    }\n\n    /**\n     * Called when loading and decoding has finished successfully. Resolves loading promise if the\n     * state is Ready, otherwise it rejects the promise with the supplied state.\n     *\n     * @param doneState The latest state of loading.\n     */\n    protected onDone(doneState: TileLoaderState) {\n        if (this.resolveDonePromise && doneState === TileLoaderState.Ready) {\n            this.resolveDonePromise(doneState);\n        } else if (this.rejectedDonePromise) {\n            this.rejectedDonePromise(doneState);\n        }\n        this.resolveDonePromise = undefined;\n        this.rejectedDonePromise = undefined;\n        this.donePromise = undefined;\n        this.state = doneState;\n    }\n\n    /**\n     * Called when loading or decoding has finished with an error.\n     *\n     * @param error Error object describing the failing.\n     */\n    protected onError(error: Error) {\n        if (this.state === TileLoaderState.Canceled) {\n            // If we're canceled, we should simply ignore any state transitions and errors from\n            // underlying load/decode ops.\n            return;\n        }\n        const dataSource = this.dataSource;\n        logger.error(\n            `[${dataSource.name}]: failed to load tile ${this.tileKey.mortonCode()}`,\n            error\n        );\n\n        this.error = error;\n\n        this.onDone(TileLoaderState.Failed);\n    }\n}\n\n/**\n * Subclass of [[TileLoader]] which is used by [[TileDataSource]] to load the [[TileInfo]] meta\n * data, not the tile data itself.\n */\nexport class TileInfoLoader extends TileLoader {\n    tileInfo?: TileInfo;\n\n    /** @override */\n    protected startDecodeTile() {\n        const payload = this.payload;\n        if (payload === undefined) {\n            logger.error(\"TileInfoLoader#startDecodeTile: Cannot decode without payload\");\n            return;\n        }\n\n        this.state = TileLoaderState.Decoding;\n        this.payload = undefined;\n\n        // Save our cancellation point, so we can be reliably cancelled by any subsequent decode\n        // attempts\n        const requestController = new RequestController(this.priority);\n        this.requestController = requestController;\n\n        const dataSource = this.dataSource;\n        this.tileDecoder\n            .getTileInfo(payload, this.tileKey, dataSource.projection, requestController)\n            .then(tileInfo => {\n                if (requestController.signal.aborted) {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.tileInfo = tileInfo;\n\n                this.onDone(TileLoaderState.Ready);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.onError(error);\n            });\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport \"@here/harp-fetch\";\nimport { TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport { DataProvider } from \"@here/harp-mapview-decoder\";\nimport { TransferManager } from \"@here/harp-transfer-manager\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nconst logger = LoggerManager.instance.create(\"OmvRestClient\");\n\n// tslint:disable:max-line-length\nexport enum APIFormat {\n    /**\n     * Use the REST API format of HERE Vector Tiles Server component version 1.\n     *\n     * Documentation:\n     *  https://developer.here.com/documentation/vector-tiles-api/dev_guide/index.html\n     *\n     * Usage:\n     *\n     *     <OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>/omv\n     *\n     * If [[OmvRestClientParams.authenticationToken]] is provided, it will be added as HTTP header:\n     *\n     *     Authorization: Bearer $authenticationToken\n     *\n     * Format definition:\n     * `//http|s://<base-url>/{API version}/{layers}/{projection}/{z}/{x}/{y}/{format}`\n     *\n     * Default authentication method used: [[AuthenticationTypeBearer]].\n     */\n    HereV1,\n\n    /**\n     * Use the REST API format of Mapbox Vector Tile API v4.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/v4/{map_id}/{z}/{x}/{y}{@2x}.{format}?[style]&access_token={access_token}`\n     *\n     * Sample URL:\n     * `http://a.tiles.mapbox.com/v4/mapbox.mapbox-streets-v7/14/4823/6160.mvt?access_token=your-mapbox-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    MapboxV4,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in MVT format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/omsbase/256/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/{layers}/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/osmbase/256/all/16/19293/24641.mvt?access_token=your-xyz-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZMVT,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in JSON format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/omsbase/256/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/{layers}/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/osmbase/256/all/16/19293/24641.json?access_token=your-xyz-api-key`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZJson,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in OMV format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/herebase.02/<zoom>/<X>/<Y>/omv?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/herebase.02/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/herebase.02/14/2649/6338/omv?access_token=your-xyz-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZOMV,\n\n    /**\n     * Use the REST API format of Tomtoms Vector Tile API v1.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>.pbf?key=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `<http|https>://<baseURL>/map/<versionNumber>/tile/<layer>/<style>/<zoom>/<X>/<Y>.<format>?key=<apiKey>[&view=<view>][&language=<language>]`\n     *\n     * Sample URL:\n     * `http://api.tomtom.com/map/1/tile/basic/main/0/0/0.pbf?key=<apiKey>`\n     *\n     * Default authentication method used: [[AuthenticationTypeTomTomV1]].\n     */\n    TomtomV1,\n\n    /**\n     * Use the REST API format of XYZ Space Vector Tile API in OMV format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/hub/spaces/<space-id>/tile/web/<zoom>_<X>_<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/hub/spaces/{spaceId}/tile/web/{z}_{x}_{y}.mvt?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/hub/spaces/your-space-id/tile/web/{z}_{x}_{y}.mvt?access_token=your-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZSpace\n}\n// tslint:enable:max-line-length\n\n/**\n * Authentication token/code provider used by [[OmvRestClient]] before each call to currently valid\n * authentication code/token.\n */\nexport type AuthenticationCodeProvider = () => Promise<string>;\n\nexport enum AuthenticationMethod {\n    QueryString,\n    AuthorizationHeader\n}\n\nexport interface AuthenticationMethodInfo {\n    method: AuthenticationMethod;\n    name?: string;\n}\n\n/**\n * Authentication method, where token will be provided as HTTP Header:\n *\n *    Authorization: Bearer $authenticationToken\n */\nexport const AuthenticationTypeBearer: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.AuthorizationHeader,\n    name: \"Bearer\"\n};\n\n/**\n * TomTomV1 API compatible authorization method, where token will be provided as HTTP Header:\n *\n *    Authorization: Bearer $authenticationToken\n */\nexport const AuthenticationTypeTomTomV1: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.QueryString,\n    name: \"key\"\n};\n\nexport const AuthenticationTypeAccessToken: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.QueryString,\n    name: \"access_token\"\n};\n\nexport interface OmvRestClientParameters {\n    /**\n     * `URL` pattern used to fetch tile files.\n     *\n     * `URL` with special keywords replaced to retrieve specific tile:\n     *  - `{z}` - zoom level of tile, @see [[TileKey.level]]\n     *  - `{x}` - horizontal coordinate of tile (column number), @see [[TileKey.column]]\n     *  - `{y}` - vertical coordinate of Tile (row number), @see [[TileKey.row]]\n     *\n     * Examples of `url` patterns:\n     * ```\n     *   https://my-base-url.com/vector-tiles/{z}/{x}/{y}.mvt\n     *   https://xyz.api.here.com/tiles/herebase.02/{z}/{x}/{y}/omv\n     *   https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt\n     * ```\n     *\n     * Note: To add authentication headers and/or query params, use [[authMethod]], [[urlParams]]\n     * properties or embed token directly in `url`.\n     *\n     * Complete examples:\n     * ```\n     * // XYZ OSM with authentication using query param\n     * {\n     *     url: \"https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt\",\n     *     urlParams: {\n     *           access_token: accessToken\n     *     },\n     * }\n     * // HERE Vector Tile with authentication using bearer token retrieved by callback\n     * {\n     *     url: \"https://vector.hereapi.com/v2/vectortiles/base/mc/{z}/{x}/{y}/omv\",\n     *     authenticationMethod: AuthenticationTypeBearer,\n     *     authenticationCode: () => getBearerToken()\n     * }\n     * ```\n     */\n    url?: string;\n\n    /**\n     * The base URL of the REST Tile Service.\n     * @see [[APIFormat]] for the definition of `baseUrl`.\n     */\n    baseUrl?: string;\n\n    /**\n     * Authentication code used for the different APIs.\n     *\n     * When [[AuthenticationCodeProvider]] is is used as value, the provider is called before each\n     * to get currently valid authentication code/token.\n     *\n     * @see [[APIFormat]] for the query parameter this is used with.\n     */\n    authenticationCode?: string | AuthenticationCodeProvider;\n\n    /**\n     * Specifies [[AuthMethod]] to be used when requesting tiles.\n     *\n     * Defaults for each [[APIFormat]] are documented with each format type.\n     */\n    authenticationMethod?: AuthenticationMethodInfo;\n\n    /**\n     * The REST API format to use for the tile path generation, will default to the HERE Vector Tile\n     * API.\n     */\n    apiFormat?: APIFormat;\n\n    /**\n     * Tiling scheme is used in some of the APIs, not implemented yet.\n     */\n    tilingScheme?: TilingScheme;\n\n    /**\n     * Transfer Manager to use; creates an own instance if none passed.\n     */\n    downloadManager?: TransferManager;\n\n    /**\n     * Function to retrieve the Bearer Token\n     *\n     * @deprecated Please use [[authenticationCode]].\n     */\n    getBearerToken?: () => Promise<string>;\n\n    /**\n     * Array of query parameters to be appended at the end of the url.\n     * It is empty by default.\n     */\n    urlParams?: { [key: string]: string };\n}\n\n/**\n * REST client supporting getting protobuf OMV Tile from REST-based servers.\n */\nexport class OmvRestClient implements DataProvider {\n    private readonly downloadManager: TransferManager;\n    private readonly urlParams: { [key: string]: string };\n\n    constructor(readonly params: OmvRestClientParameters) {\n        this.downloadManager =\n            params.downloadManager === undefined\n                ? TransferManager.instance()\n                : params.downloadManager;\n        this.urlParams = params.urlParams === undefined ? {} : params.urlParams;\n    }\n\n    /** Overriding abstract method, in this case doing nothing. */\n    async connect(): Promise<void> {\n        // not needed\n    }\n\n    /** Overriding abstract method, in this case always returning `true`. */\n    ready(): boolean {\n        return true;\n    }\n\n    /**\n     * Asynchronously fetches a tile from this restful server.\n     *\n     * **Note:** If the tile doesn't exist, a successful response with a `404` status code is\n     * returned.\n     *\n     * @example\n     * ```typescript\n     * const response = layer.getTile(tileKey);\n     * if (!response.ok) {\n     *     // a network error happened\n     *     console.error(\"Unable to download tile\", response.statusText);\n     *     return;\n     * }\n     * if (response.status === 404) {\n     *     // 404 -, no data exists at the given tile. Do nothing.\n     *     return;\n     * }\n     *\n     * // the response is ok and contains data, access it e.g. as arrayBuffer:\n     * const payload = await response.arrayBuffer();\n     * ```\n     *\n     * @param tileKey The tile key of the tile.\n     * @param tileRequestInit Optional request options to be passed to fetch when downloading a\n     * tile.\n     * @returns A `Promise` of the HTTP response that contains the payload of the requested tile.\n     */\n    async getTile(\n        tileKey: TileKey,\n        abortSignal?: AbortSignal | undefined\n    ): Promise<ArrayBufferLike | {}> {\n        const init: RequestInit = { signal: abortSignal };\n\n        let tileUrl = this.dataUrl(tileKey);\n\n        const authenticationCode = await this.getActualAuthenticationCode();\n\n        tileUrl = this.applyAuthCode(tileUrl, init, authenticationCode);\n        tileUrl = this.addQueryParams(tileUrl, this.urlParams);\n\n        if (this.params.apiFormat === APIFormat.XYZJson) {\n            return this.downloadManager.downloadJson(tileUrl, init);\n        }\n\n        return this.downloadManager.downloadArrayBuffer(tileUrl, init);\n    }\n\n    /**\n     * Get actual authentication code/token for this request according to configuration.\n     */\n    private async getActualAuthenticationCode() {\n        if (typeof this.params.authenticationCode === \"string\") {\n            return this.params.authenticationCode;\n        } else if (this.params.authenticationCode !== undefined) {\n            return this.params.authenticationCode();\n            // tslint:disable-next-line: deprecation\n        } else if (this.params.getBearerToken !== undefined) {\n            // tslint:disable-next-line: deprecation\n            return this.params.getBearerToken();\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Get default authnentication method basing on apiFormat and other params.\n     */\n    private getDefaultAuthMethod() {\n        // tslint:disable-next-line: deprecation\n        if (this.params.getBearerToken !== undefined) {\n            return AuthenticationTypeBearer;\n        }\n\n        switch (this.params.apiFormat) {\n            case APIFormat.HereV1:\n                return AuthenticationTypeBearer;\n            case APIFormat.MapboxV4:\n            case APIFormat.XYZOMV:\n            case APIFormat.XYZMVT:\n            case APIFormat.XYZSpace:\n            case APIFormat.XYZJson:\n                return AuthenticationTypeAccessToken;\n            case APIFormat.TomtomV1:\n                return AuthenticationTypeTomTomV1;\n            default:\n                logger.warn(\n                    `#getDefaultAuthMethod: Not supported API format: ${this.params.apiFormat}`\n                );\n                return undefined;\n        }\n    }\n\n    /**\n     * Apply athentication code/token using configured (or default) authentication method.\n     *\n     * @param url\n     * @param init request extra data\n     * @param authenticationCode authentication/token to be applied\n     * @return new url to be used\n     */\n    private applyAuthCode(url: string, init: RequestInit, authenticationCode: string | undefined) {\n        if (authenticationCode === undefined) {\n            return url;\n        }\n        const authMethod = this.params.authenticationMethod || this.getDefaultAuthMethod();\n        if (authMethod === undefined) {\n            return url;\n        }\n\n        if (authMethod.method === AuthenticationMethod.AuthorizationHeader) {\n            if (init.headers === undefined) {\n                init.headers = new Headers();\n            }\n            const authType = authMethod.name || \"Bearer\";\n            (init.headers as Headers).append(\"Authorization\", `${authType} ${authenticationCode}`);\n        } else if (authMethod.method === AuthenticationMethod.QueryString) {\n            const attrName: string = authMethod.name || \"access_token\";\n            const authParams: { [key: string]: string } = {};\n            authParams[attrName] = authenticationCode;\n            url = this.addQueryParams(url, authParams);\n        }\n        return url;\n    }\n\n    /**\n     * Get actual tile URL depending on configured API format.\n     */\n    private dataUrl(tileKey: TileKey): string {\n        if (this.params.url !== undefined) {\n            return this.params.url\n                .replace(\"{x}\", String(tileKey.column))\n                .replace(\"{y}\", String(tileKey.row))\n                .replace(\"{z}\", String(tileKey.level));\n        }\n        let path = [`/${tileKey.level}`, tileKey.column, tileKey.row].join(\n            this.params.apiFormat === APIFormat.XYZSpace ? \"_\" : \"/\"\n        );\n        switch (this.params.apiFormat) {\n            case APIFormat.HereV1:\n            case APIFormat.XYZOMV:\n                path += \"/omv\";\n                break;\n            case APIFormat.MapboxV4:\n                path += \".mvt\";\n                break;\n            case APIFormat.XYZMVT:\n                path += \".mvt\";\n                break;\n            case APIFormat.XYZJson:\n                path += \".json\";\n                break;\n            case APIFormat.XYZSpace:\n                path += \".mvt\";\n                break;\n            case APIFormat.TomtomV1:\n                path += \".pbf\";\n                break;\n            default:\n                logger.warn(`Not supported API format: ${this.params.apiFormat}`);\n                break;\n        }\n\n        return this.params.baseUrl + path;\n    }\n\n    private addQueryParams(url: string, queryParams: { [key: string]: string }): string {\n        let queryString = \"\";\n        let concatinator = url.indexOf(\"?\") !== -1 ? \"&\" : \"?\";\n        Object.getOwnPropertyNames(queryParams).forEach(property => {\n            const prop = property as keyof typeof queryParams;\n            queryString += concatinator + prop + \"=\" + queryParams[prop];\n            if (concatinator === \"?\") {\n                concatinator = \"&\";\n            }\n        });\n        return url + queryString;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// tslint:disable-next-line:no-implicit-dependencies\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { GeoCoordinates } from \"@here/harp-geoutils\";\nimport { MapView, MapViewEventNames, MapViewUtils } from \"@here/harp-mapview\";\nimport { APIFormat, AuthenticationMethod, OmvDataSource } from \"@here/harp-omv-datasource\";\nimport { apikey, copyrightInfo } from \"../../@here/harp-examples/config\";\n\n// tslint:disable-next-line:no-var-requires\nconst theme = require(\"../resources/theme.json\");\n\nimport \"../css/index.css\";\n\nconst s3Base = \"https://www.harp.gl/docs/\";\n\n//Update initial links to s3 base\ndocument.querySelector<HTMLAnchorElement>(\".examples-link\")!.href = s3Base + \"master/examples/\";\ndocument.querySelector<HTMLAnchorElement>(\".docs-link\")!.href = s3Base + \"master/doc/\";\ndocument.querySelector<HTMLAnchorElement>(\"#docs-nav\")!.href = s3Base + \"master/doc/\";\ndocument.querySelector<HTMLAnchorElement>(\"#examples-nav\")!.href = s3Base + \"master/examples/\";\ndocument.querySelector<HTMLAnchorElement>(\"#docs-nav-mobile\")!.href = s3Base + \"master/doc/\";\n\n//Update year\n(document.getElementById(\"year\") as HTMLDivElement).innerText = `${new Date().getFullYear()}`;\n\nconst releases = [\n    {\n        date: \"latest\",\n        hash: \"master\",\n        version: \"latest-dev\"\n    }\n];\nconst dropdown = document.querySelector(\"select[name=versions]\") as HTMLSelectElement;\n\nfetch(\"./releases.json\")\n    .then(res => res.json())\n    .then(res => {\n        releases.push(...res);\n        releases.forEach(release => {\n            const option = document.createElement(\"option\");\n            option.innerText = release.version;\n            dropdown.appendChild(option);\n        });\n\n        dropdown.onchange = () => {\n            const selected = dropdown.querySelector<HTMLOptionElement>(\"option:checked\")!;\n            const release = releases.find(x => x.version === selected.innerText);\n            if (!release) {\n                return;\n            }\n            const hash = release.hash;\n            const version = release.version;\n\n            //Update examples button and link\n            document.querySelector<HTMLAnchorElement>(\".examples-link\")!.href =\n                s3Base + hash + \"/examples/\";\n            document.querySelector<HTMLAnchorElement>(\".examples-link\")!.innerText =\n                \"Examples\" + (hash !== \"master\" ? ` (${version})` : \"\");\n\n            //Update docs button and link\n            document.querySelector<HTMLAnchorElement>(\".docs-link\")!.href = s3Base + hash + \"/doc/\";\n            document.querySelector<HTMLAnchorElement>(\".docs-link\")!.innerText =\n                \"Documentation\" + (hash !== \"master\" ? ` (${version})` : \"\");\n        };\n    })\n    .catch(() => {\n        //In case network request to build information fails, add master link\n        const option = document.createElement(\"option\");\n        option.innerText = \"master\";\n        dropdown.appendChild(option);\n    });\n\nfunction main() {\n    const canvas = document.getElementById(\"map\") as HTMLCanvasElement;\n    const map = new MapView({\n        canvas,\n        decoderUrl: \"decoder.bundle.js\",\n        theme: (theme as unknown) as Theme,\n        maxVisibleDataSourceTiles: 40,\n        enableMixedLod: false,\n        tileCacheSize: 100\n    });\n    map.animatedExtrusionHandler.enabled = false;\n\n    const omvDataSource = new OmvDataSource({\n        baseUrl: \"https://vector.hereapi.com/v2/vectortiles/base/mc\",\n        apiFormat: APIFormat.XYZOMV,\n        styleSetName: \"tilezen\",\n        authenticationCode: apikey,\n        authenticationMethod: {\n            method: AuthenticationMethod.QueryString,\n            name: \"apikey\"\n        },\n        copyrightInfo\n    });\n    map.addDataSource(omvDataSource);\n\n    map.resize(window.innerWidth, 500);\n    window.addEventListener(\"resize\", () => map.resize(window.innerWidth, 500));\n\n    const zoomLevel = MapViewUtils.calculateZoomLevelFromDistance(map, 1400);\n    const Boston = new GeoCoordinates(42.361145, -71.057083);\n    const options = { target: Boston, zoomLevel, tilt: 34.3, heading: 135 };\n    map.lookAt(options);\n\n    map.addEventListener(MapViewEventNames.FrameComplete, () => {\n        canvas.style.opacity = \"1\";\n\n        options.heading += 0.1;\n        map.addEventListener(MapViewEventNames.Render, () => map.lookAt(options));\n        setTimeout(() => {\n            map.beginAnimation();\n        }, 0.5);\n    });\n}\n\nmain();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\nclass IdentityProjection extends Projection {\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        result.min.x = -Math.PI;\n        result.min.y = -Math.PI * 0.5;\n        result.min.z = minAltitude;\n        result.max.x = Math.PI;\n        result.max.y = Math.PI * 0.5;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x = THREE.MathUtils.degToRad(geoPoint.longitude);\n        result.y = THREE.MathUtils.degToRad(geoPoint.latitude);\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(worldPoint.y, worldPoint.x, worldPoint.z);\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        const min = this.projectPoint(\n            new GeoCoordinates(geoBox.south, geoBox.west, geoBox.minAltitude)\n        );\n        const max = this.projectPoint(\n            new GeoCoordinates(geoBox.north, geoBox.east, geoBox.maxAltitude)\n        );\n        if (isBox3Like(result)) {\n            result.min.x = min.x;\n            result.min.y = min.y;\n            result.min.z = min.z;\n            result.max.x = max.x;\n            result.max.y = max.y;\n            result.max.z = max.z;\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = (min.x + max.x) * 0.5;\n            result.position.y = (min.y + max.y) * 0.5;\n            result.position.z = (min.z + max.z) * 0.5;\n            result.extents.x = (max.x - min.x) * 0.5;\n            result.extents.y = (max.y - min.y) * 0.5;\n            result.extents.z = Math.max(Number.EPSILON, (max.z - min.z) * 0.5);\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        return GeoBox.fromCoordinates(minGeo, maxGeo);\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n}\n\n/**\n * Identity [[Projection]] used to convert geo coordinates to unit coordinates and vice versa.\n */\nexport const identityProjection: Projection = new IdentityProjection(1);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { mercatorProjection, webMercatorProjection } from \"./MercatorProjection\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\n/**\n * Transforms the given vector using the provided basis.\n */\nfunction apply(\n    xAxis: Vector3Like,\n    yAxis: Vector3Like,\n    zAxis: Vector3Like,\n    v: Vector3Like\n): Vector3Like {\n    const x = xAxis.x * v.x + yAxis.x * v.y + zAxis.x * v.z;\n    const y = xAxis.y * v.x + yAxis.y * v.y + zAxis.y * v.z;\n    const z = xAxis.z * v.x + yAxis.z * v.y + zAxis.z * v.z;\n    v.x = x;\n    v.y = y;\n    v.z = z;\n    return v;\n}\n\n/**\n * Returns the quadrants for the given longitude. The quadrant is defined as:\n *  - quadrant(+Math.PI * -1.0) = 0\n *  - quadrant(+Math.PI * -0.5) = 1\n *  - quadrant(+Math.PI *  0.0) = 2\n *  - quadrant(+Math.PI *  0.5) = 3\n *  - quadrant(+Math.PI *  1.0) = 4\n *\n * @param longitude The longitude in radians.\n */\nfunction getLongitudeQuadrant(longitude: number) {\n    const oneOverPI = 1 / Math.PI;\n    const quadrantIndex = Math.floor(2 * (longitude * oneOverPI + 1));\n    return THREE.MathUtils.clamp(quadrantIndex, 0, 4);\n}\n\nfunction lengthOfVector3(worldPoint: Vector3Like): number {\n    const d = Math.sqrt(\n        worldPoint.x * worldPoint.x + worldPoint.y * worldPoint.y + worldPoint.z * worldPoint.z\n    );\n    return d;\n}\n\n/**\n * Creates a Box3 enclosing the geobox.\n *\n * @param geoBox Ghe given geobox\n * @param worldBox The resulting axis aligned bounding box.\n */\nfunction makeBox3<Bounds extends Box3Like>(\n    geoBox: GeoBox,\n    worldBox: Bounds,\n    unitScale: number\n): Bounds {\n    const halfEquatorialRadius = (unitScale + (geoBox.maxAltitude || 0)) * 0.5;\n\n    const minLongitude = THREE.MathUtils.degToRad(geoBox.west);\n    const maxLongitude = THREE.MathUtils.degToRad(geoBox.east);\n\n    const minLongitudeQuadrant = getLongitudeQuadrant(minLongitude);\n    const maxLongitudeQuadrant = getLongitudeQuadrant(maxLongitude);\n\n    let xMin = Math.cos(minLongitude);\n    let xMax = xMin;\n    let yMin = Math.sin(minLongitude);\n    let yMax = yMin;\n\n    for (\n        let quadrantIndex = minLongitudeQuadrant + 1;\n        quadrantIndex <= maxLongitudeQuadrant;\n        quadrantIndex++\n    ) {\n        // tslint:disable-next-line: no-bitwise\n        const x = ((quadrantIndex + 1) & 1) * ((quadrantIndex & 2) - 1);\n        xMin = Math.min(x, xMin);\n        xMax = Math.max(x, xMax);\n\n        // tslint:disable-next-line: no-bitwise\n        const y = (quadrantIndex & 1) * ((quadrantIndex & 2) - 1);\n        yMin = Math.min(y, yMin);\n        yMax = Math.max(y, yMax);\n    }\n\n    const cosMaxLongitude = Math.cos(maxLongitude);\n    xMin = Math.min(cosMaxLongitude, xMin);\n    xMax = Math.max(cosMaxLongitude, xMax);\n\n    const sinMaxLongitude = Math.sin(maxLongitude);\n    yMin = Math.min(sinMaxLongitude, yMin);\n    yMax = Math.max(sinMaxLongitude, yMax);\n\n    const xCenter = (xMax + xMin) * halfEquatorialRadius;\n    const xExtent = (xMax - xMin) * halfEquatorialRadius;\n\n    const yCenter = (yMax + yMin) * halfEquatorialRadius;\n    const yExtent = (yMax - yMin) * halfEquatorialRadius;\n\n    // Calculate Z boundaries.\n    const minLatitude = THREE.MathUtils.degToRad(geoBox.south);\n    const maxLatutide = THREE.MathUtils.degToRad(geoBox.north);\n\n    const zMax = Math.sin(maxLatutide);\n    const zMin = Math.sin(minLatitude);\n\n    const zCenter = (zMax + zMin) * halfEquatorialRadius;\n    const zExtent = (zMax - zMin) * halfEquatorialRadius;\n\n    worldBox.min.x = xCenter - xExtent;\n    worldBox.min.y = yCenter - yExtent;\n    worldBox.min.z = zCenter - zExtent;\n    worldBox.max.x = xCenter + xExtent;\n    worldBox.max.y = yCenter + yExtent;\n    worldBox.max.z = zCenter + zExtent;\n\n    return worldBox;\n}\n\n/**\n * Computes the spherical projection of the given geo coordinates.\n *\n * @param geoPoint The geo coordinates.\n * @param worldpoint The resulting world coordinates.\n */\nfunction project<WorldCoordinates extends Vector3Like>(\n    geoPoint: GeoCoordinatesLike,\n    worldpoint: WorldCoordinates,\n    unitScale: number\n): typeof worldpoint {\n    const radius = unitScale + (geoPoint.altitude || 0);\n    const latitude = THREE.MathUtils.degToRad(geoPoint.latitude);\n    const longitude = THREE.MathUtils.degToRad(geoPoint.longitude);\n    const cosLatitude = Math.cos(latitude);\n    worldpoint.x = radius * cosLatitude * Math.cos(longitude);\n    worldpoint.y = radius * cosLatitude * Math.sin(longitude);\n    worldpoint.z = radius * Math.sin(latitude);\n    return worldpoint;\n}\n\nclass SphereProjection extends Projection {\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Spherical;\n\n    /** @override */\n    worldExtent<Bounds extends Box3Like>(\n        _minElevation: number,\n        maxElevation: number,\n        result: Bounds = (new THREE.Box3() as Box3Like) as Bounds\n    ): Bounds {\n        const radius = this.unitScale + maxElevation;\n        result.min.x = -radius;\n        result.min.y = -radius;\n        result.min.z = -radius;\n        result.max.x = radius;\n        result.max.y = radius;\n        result.max.z = radius;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result: WorldCoordinates = MathUtils.newVector3(0, 0, 0) as WorldCoordinates\n    ): WorldCoordinates {\n        return project(geoPoint, result, this.unitScale);\n    }\n\n    /** @override */\n    unprojectPoint(point: Vector3Like): GeoCoordinates {\n        const parallelRadiusSq = point.x * point.x + point.y * point.y;\n        const parallelRadius = Math.sqrt(parallelRadiusSq);\n        const v = point.z / parallelRadius;\n\n        if (isNaN(v)) {\n            return GeoCoordinates.fromRadians(0, 0, -this.unitScale);\n        }\n\n        const radius = Math.sqrt(parallelRadiusSq + point.z * point.z);\n\n        return GeoCoordinates.fromRadians(\n            Math.atan(v),\n            Math.atan2(point.y, point.x),\n            radius - this.unitScale\n        );\n    }\n\n    /** @override */\n    unprojectAltitude(point: Vector3Like): number {\n        const parallelRadiusSq = point.x * point.x + point.y * point.y + point.z * point.z;\n        return Math.sqrt(parallelRadiusSq) - EarthConstants.EQUATORIAL_RADIUS;\n    }\n\n    /** @override */\n    projectBox<Bounds extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result: Bounds = (new THREE.Box3() as Box3Like) as Bounds\n    ): Bounds {\n        if (isBox3Like(result)) {\n            return makeBox3(geoBox, result, this.unitScale);\n        } else if (isOrientedBox3Like(result)) {\n            if (geoBox.longitudeSpan >= 90) {\n                const bounds = makeBox3(geoBox, new THREE.Box3() as Box3Like, this.unitScale);\n                MathUtils.newVector3(1, 0, 0, result.xAxis);\n                MathUtils.newVector3(0, 1, 0, result.yAxis);\n                MathUtils.newVector3(0, 0, 1, result.zAxis);\n                result.position.x = (bounds.max.x + bounds.min.x) * 0.5;\n                result.position.y = (bounds.max.y + bounds.min.y) * 0.5;\n                result.position.z = (bounds.max.z + bounds.min.z) * 0.5;\n                result.extents.x = (bounds.max.x - bounds.min.x) * 0.5;\n                result.extents.y = (bounds.max.y - bounds.min.y) * 0.5;\n                result.extents.z = (bounds.max.z - bounds.min.z) * 0.5;\n                return result;\n            }\n\n            const { south, west, north, east, center: mid } = geoBox;\n            const midX = mid.longitude;\n            const midY = mid.latitude;\n            const cosSouth = Math.cos(THREE.MathUtils.degToRad(south));\n            const sinSouth = Math.sin(THREE.MathUtils.degToRad(south));\n            const cosWest = Math.cos(THREE.MathUtils.degToRad(west));\n            const sinWest = Math.sin(THREE.MathUtils.degToRad(west));\n            const cosNorth = Math.cos(THREE.MathUtils.degToRad(north));\n            const sinNorth = Math.sin(THREE.MathUtils.degToRad(north));\n            const cosEast = Math.cos(THREE.MathUtils.degToRad(east));\n            const sinEast = Math.sin(THREE.MathUtils.degToRad(east));\n            const cosMidX = Math.cos(THREE.MathUtils.degToRad(midX));\n            const sinMidX = Math.sin(THREE.MathUtils.degToRad(midX));\n            const cosMidY = Math.cos(THREE.MathUtils.degToRad(midY));\n            const sinMidY = Math.sin(THREE.MathUtils.degToRad(midY));\n\n            // Build the orientation of the OBB using the normal vector and its partial derivates.\n\n            // the sperical coordinates of the mid point of the geobox.\n            MathUtils.newVector3(cosMidX * cosMidY, sinMidX * cosMidY, sinMidY, result.zAxis);\n\n            // the partial derivates of the normal vector.\n            MathUtils.newVector3(-sinMidX, cosMidX, 0, result.xAxis);\n            MathUtils.newVector3(-cosMidX * sinMidY, -sinMidX * sinMidY, cosMidY, result.yAxis);\n\n            let width: number;\n            let minY: number;\n            let maxY: number;\n\n            if (south >= 0) {\n                // abs(dot(southWest - southEast, xAxis))\n                width = Math.abs(\n                    cosSouth * (cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest))\n                );\n\n                // dot(south, yAxis)\n                minY = cosMidY * sinSouth - sinMidY * cosSouth;\n\n                // dot(northEast, zAxis)\n                maxY =\n                    cosMidY * sinNorth -\n                    sinMidY * cosNorth * (cosMidX * cosEast + sinMidX * sinEast);\n            } else {\n                if (north <= 0) {\n                    // abs(dot(northWest - northEast, xAxis))\n                    width = Math.abs(\n                        cosNorth * (cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest))\n                    );\n\n                    // dot(north, yAxis)\n                    maxY = cosMidY * sinNorth - sinMidY * cosNorth;\n                } else {\n                    // abs(dot(west - east, xAxis))\n                    width = Math.abs(cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest));\n\n                    // dot(northEast, yAxis)\n                    maxY =\n                        cosMidY * sinNorth -\n                        sinMidY * cosNorth * (sinMidX * sinEast + cosMidX * cosEast);\n                }\n\n                // dot(southEast, yAxis)\n                minY =\n                    cosMidY * sinSouth -\n                    sinMidY * cosSouth * (cosMidX * cosEast + sinMidX * sinEast);\n            }\n\n            const rMax = (this.unitScale + (geoBox.maxAltitude || 0)) * 0.5;\n            const rMin = (this.unitScale + (geoBox.minAltitude || 0)) * 0.5;\n\n            // min(dot(southEast, zAxis), dot(northEast, zAxis))\n\n            const d = cosMidY * (cosMidX * cosEast + sinMidX * sinEast);\n\n            const minZ = Math.min(\n                cosNorth * d + sinNorth * sinMidY,\n                cosSouth * d + sinSouth * sinMidY\n            );\n\n            MathUtils.newVector3(\n                width * rMax,\n                (maxY - minY) * rMax,\n                rMax - minZ * rMin,\n                result.extents\n            );\n\n            MathUtils.newVector3(0, (minY + maxY) * rMax, rMax + rMax, result.position);\n\n            apply(result.xAxis, result.yAxis, result.zAxis, result.position);\n\n            result.position.x = result.position.x - result.zAxis.x * result.extents.z;\n            result.position.y = result.position.y - result.zAxis.y * result.extents.z;\n            result.position.z = result.position.z - result.zAxis.z * result.extents.z;\n\n            return result;\n        }\n\n        throw new Error(\"Invalid bounding box\");\n    }\n\n    /** @override */\n    unprojectBox(_worldBox: Box3Like): GeoBox {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return lengthOfVector3(worldPoint) - this.unitScale;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        const scale = this.unitScale / (lengthOfVector3(worldPoint) || 1);\n        worldPoint.x *= scale;\n        worldPoint.y *= scale;\n        worldPoint.z *= scale;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 0 };\n        }\n        const scale = 1 / (lengthOfVector3(worldPoint) || 1);\n        normal.x = worldPoint.x * scale;\n        normal.y = worldPoint.y * scale;\n        normal.z = worldPoint.z * scale;\n        return normal;\n    }\n\n    /** @override */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        if (sourceProjection === mercatorProjection || sourceProjection === webMercatorProjection) {\n            const { x, y, z } = worldPos;\n            const r = this.unitScale;\n            const mx = x / r - Math.PI;\n            const my = y / r - Math.PI;\n            const w = Math.exp(my);\n            const d = w * w;\n            const gx = (2 * w) / (d + 1);\n            const gy = (d - 1) / (d + 1);\n            const scale = r + z;\n\n            if (result === undefined) {\n                // tslint:disable-next-line: no-object-literal-type-assertion\n                result = {} as Vector3Like;\n            }\n\n            result.x = Math.cos(mx) * gx * scale;\n            result.y = Math.sin(mx) * gx * scale;\n            result.z = gy * scale;\n\n            if (sourceProjection === webMercatorProjection) {\n                result.z = -result.z;\n            }\n\n            return result;\n        }\n\n        return super.reprojectPoint(sourceProjection, worldPos, result!);\n    }\n\n    /** @override */\n    localTangentSpace(geoPoint: GeoCoordinatesLike, result: TransformLike): TransformLike {\n        const latitude = THREE.MathUtils.degToRad(geoPoint.latitude);\n        const longitude = THREE.MathUtils.degToRad(geoPoint.longitude);\n\n        const cosLongitude = Math.cos(longitude);\n        const sinLongitude = Math.sin(longitude);\n        const cosLatitude = Math.cos(latitude);\n        const sinLatitude = Math.sin(latitude);\n\n        MathUtils.newVector3(\n            cosLongitude * cosLatitude,\n            sinLongitude * cosLatitude,\n            sinLatitude,\n            result.zAxis\n        );\n\n        MathUtils.newVector3(-sinLongitude, cosLongitude, 0, result.xAxis);\n\n        MathUtils.newVector3(\n            -cosLongitude * sinLatitude,\n            -sinLongitude * sinLatitude,\n            cosLatitude,\n            result.yAxis\n        );\n\n        this.projectPoint(geoPoint, result.position);\n\n        return result;\n    }\n}\n\nexport const sphereProjection: Projection = new SphereProjection(EarthConstants.EQUATORIAL_RADIUS);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A class used to represent a quadtree.\n */\nexport class QuadTree {\n    /**\n     * Constructs a new `QuadTree` for the given [[TilingScheme]].\n     *\n     * Example:\n     * ```typescript\n     * const quadTree = new QuadTree(hereTilingScheme);\n     * const geoBox = quadTree.getGeoBox(tileKey);\n     * console.log(geoBox.center);\n     * ```\n     *\n     * @param tilingScheme The TilingScheme used by this `QuadTree`.\n     */\n    constructor(readonly tilingScheme: TilingScheme) {}\n\n    /**\n     * Visits this `QuadTree` and invoke the given accept method with the current [[TileKey]] and\n     * its bounding box in geo coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = new GeoCoordinates(latitude, longitude);\n     * const quadTree = new QuadTree(hereTilingScheme);\n     * quadTree.visit((tileKey, geoBox) => {\n     *     if (geoBox.contains(geoPos)) {\n     *         console.log(\"tile\", tileKey, \"contains\", geoPos);\n     *         return tileKey.level < 14; // stop visiting the quadtree if the level is >= 14.\n     *     }\n     *     return false; // stop visiting the quadtree,\n     *                   // the tile's geoBox doesn't contain the given coordinates.\n     * });\n     * ```\n     *\n     * @param accept A function that takes a [[TileKey]] and its bounding box in geo coordinates and\n     * returns `true` if the visit of the `QuadTree` should continue; otherwise `false`.\n     */\n    visit(accept: (tileKey: TileKey, geoBox: GeoBox) => boolean) {\n        this.visitTileKey(TileKey.fromRowColumnLevel(0, 0, 0), accept);\n    }\n\n    /**\n     * Visits the subtree starting from the given tile.\n     *\n     * @param tileKey The root of the subtree that should be visited.\n     * @param accept A function that takes a [[TileKey]] and its bounding box in geo coordinates and\n     * returns `true` if the visit of the `QuadTree` should continue; otherwise `false`.\n     */\n    visitTileKey(tileKey: TileKey, accept: (tileKey: TileKey, geoBox: GeoBox) => boolean) {\n        const geoBox = this.tilingScheme.getGeoBox(tileKey);\n\n        if (!accept(tileKey, geoBox)) {\n            return;\n        }\n\n        for (const subTileKey of this.tilingScheme.getSubTileKeys(tileKey)) {\n            this.visitTileKey(subTileKey, accept);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { normalizedEquirectangularProjection } from \"../projection/EquirectangularProjection\";\nimport { halfQuadTreeSubdivisionScheme } from \"./HalfQuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * [[TilingScheme]] used by most of the data published by HERE.\n *\n * The `hereTilingScheme` features a half quadtree subdivision scheme and an equirectangular\n * projection.\n */\nexport const hereTilingScheme = new TilingScheme(\n    halfQuadTreeSubdivisionScheme,\n    normalizedEquirectangularProjection\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { webMercatorProjection } from \"../projection/MercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A [[TilingScheme]] featuring quadtree subdivision scheme and web Mercator projection.\n */\nexport const webMercatorTilingScheme = new TilingScheme(\n    quadTreeSubdivisionScheme,\n    webMercatorProjection\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { mercatorProjection } from \"../projection/MercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * The [[TilingScheme]] used by the HERE web tiles.\n *\n * The `mercatorTilingScheme` features a quadtree subdivision scheme and a Mercator projection.\n */\nexport const mercatorTilingScheme = new TilingScheme(quadTreeSubdivisionScheme, mercatorProjection);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { transverseMercatorProjection } from \"../projection/TransverseMercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A [[TilingScheme]] featuring quadtree subdivision scheme and\n * transverse Mercator projection.\n */\nexport const polarTilingScheme = new TilingScheme(\n    quadTreeSubdivisionScheme,\n    transverseMercatorProjection\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Interface representing a Vector3.\n */\nexport interface Vector3Like {\n    /**\n     * The X position.\n     */\n    x: number;\n\n    /**\n     * The Y position.\n     */\n    y: number;\n\n    /**\n     * The Z position.\n     */\n    z: number;\n}\n\nexport function isVector3Like(v: any): v is Vector3Like {\n    return v && typeof v.x === \"number\" && typeof v.y === \"number\" && typeof v.z === \"number\";\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * The interface [[TransformLike]] is used to represent transforms with\n * only translation and rotation.\n */\nexport interface TransformLike {\n    /**\n     * The position of this transform.\n     */\n    readonly position: Vector3Like;\n\n    /**\n     * The x-axis of this transform.\n     */\n    readonly xAxis: Vector3Like;\n\n    /**\n     * The y-axis of this transform.\n     */\n    readonly yAxis: Vector3Like;\n\n    /**\n     * The z-axis of this transform.\n     */\n    readonly zAxis: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the interface [[TransformLike]].\n *\n * @param object The object.\n */\nexport function isTransformLike(object: {}): object is TransformLike {\n    const transform = object as Partial<TransformLike>;\n    return (\n        transform.position !== undefined &&\n        transform.xAxis !== undefined &&\n        transform.yAxis !== undefined &&\n        transform.zAxis !== undefined\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Frustum, Matrix4, Plane, Ray, Vector3 } from \"three\";\nimport { OrientedBox3Like } from \"./OrientedBox3Like\";\n\nfunction intersectsSlab(\n    rayDir: Vector3,\n    p: Vector3,\n    axis: Vector3,\n    extent: number,\n    t: { min: number; max: number }\n): boolean {\n    const epsilon = 1e-20;\n    const e = axis.dot(p);\n    const f = axis.dot(rayDir);\n    if (Math.abs(f) < epsilon) {\n        // ray parallel to near/far slab lines.\n        return Math.abs(e) <= extent;\n    }\n\n    // ray intersects near/far slab lines.\n    const finv = 1 / f;\n    const t1 = (e + extent) * finv;\n    const t2 = (e - extent) * finv;\n    if (t1 > t2) {\n        // t1 is far intersect, t2 is near.\n        if (t2 > t.min) {\n            t.min = t2;\n        }\n        if (t1 < t.max) {\n            t.max = t1;\n        }\n    } else {\n        // t1 is near intersect, t2 is far.\n        if (t1 > t.min) {\n            t.min = t1;\n        }\n        if (t2 < t.max) {\n            t.max = t2;\n        }\n    }\n    return t.min <= t.max && t.max >= 0;\n}\n\nconst tmpVec = new Vector3();\nconst tmpT = { min: -Infinity, max: Infinity };\n\nexport class OrientedBox3 implements OrientedBox3Like {\n    /**\n     * The position of the center of this `OrientedBox3`.\n     */\n    readonly position = new Vector3();\n\n    /**\n     * The x-axis of this `OrientedBox3`.\n     */\n    readonly xAxis = new Vector3(1, 0, 0);\n\n    /**\n     * The y-axis of this `OrientedBox3`.\n     */\n    readonly yAxis = new Vector3(0, 1, 0);\n\n    /**\n     * The z-axis of this `OrientedBox3`.\n     */\n    readonly zAxis = new Vector3(0, 0, 1);\n\n    /**\n     * The extents of this `OrientedBox3`.\n     */\n    readonly extents = new Vector3();\n\n    /**\n     * Creates a new `OrientedBox3`.\n     */\n    constructor();\n\n    /**\n     * Creates a new `OrientedBox3` with the given position, orientation and extents.\n     *\n     * @param position The position of the center of the `OrientedBox3`.\n     * @param rotationMatrix The rotation of the `OrientedBox3`.\n     * @param extents The extents of the `OrientedBox3`.\n     */\n    constructor(position: Vector3, rotationMatrix: Matrix4, extents: Vector3);\n\n    /**\n     * Creates a new `OrientedBox3`.\n     *\n     * @hideconstructor\n     */\n    constructor(position?: Vector3, rotationMatrix?: Matrix4, extents?: Vector3) {\n        if (position !== undefined) {\n            this.position.copy(position);\n        }\n\n        if (rotationMatrix !== undefined) {\n            rotationMatrix.extractBasis(this.xAxis, this.yAxis, this.zAxis);\n        }\n\n        if (extents !== undefined) {\n            this.extents.copy(extents);\n        }\n    }\n\n    /**\n     * Create a copy of this [[OrientedBoundingBox]].\n     */\n    clone(): OrientedBox3 {\n        const newBox = new OrientedBox3();\n        newBox.copy(this);\n        return newBox;\n    }\n\n    /**\n     * Copies the values of `other` to this [[OrientedBox3]].\n     * @param other The other [[OrientedBox3]] to copy.\n     */\n    copy(other: OrientedBox3) {\n        this.position.copy(other.position);\n        this.xAxis.copy(other.xAxis);\n        this.yAxis.copy(other.yAxis);\n        this.zAxis.copy(other.zAxis);\n        this.extents.copy(other.extents);\n    }\n\n    /**\n     * Gets the center position of this [[OrientedBox3]].\n     *\n     * @param center The returned center position.\n     */\n    getCenter(center = new Vector3()): Vector3 {\n        return center.copy(this.position);\n    }\n\n    /**\n     * Gets the size of this [[OrientedBox3]].\n     *\n     * @param size The returned size.\n     */\n    getSize(size = new Vector3()): Vector3 {\n        return size.copy(this.extents).multiplyScalar(2);\n    }\n\n    /**\n     * Gets the orientation matrix of this `OrientedBox3`.\n     * @param matrix The output orientation matrix.\n     */\n    getRotationMatrix(matrix: Matrix4 = new Matrix4()): Matrix4 {\n        return matrix.makeBasis(this.xAxis, this.yAxis, this.zAxis);\n    }\n\n    /**\n     * Checks intersection with the given `THREE.Frustum` or array of `THREE.Plane`s.\n     *\n     * @param frustumOrPlanes Frustum or array of planes.\n     */\n    intersects(frustumOrPlanes: Plane[] | Frustum): boolean {\n        const planes: Plane[] = Array.isArray(frustumOrPlanes)\n            ? frustumOrPlanes\n            : frustumOrPlanes.planes;\n\n        for (const plane of planes) {\n            const r =\n                Math.abs(plane.normal.dot(this.xAxis) * this.extents.x) +\n                Math.abs(plane.normal.dot(this.yAxis) * this.extents.y) +\n                Math.abs(plane.normal.dot(this.zAxis) * this.extents.z);\n\n            const d = plane.distanceToPoint(this.position);\n\n            if (d + r < 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks intersection with the given ray.\n     *\n     * @param ray The ray to test.\n     * @returns distance from ray origin to intersection point if it exist, undefined otherwise.\n     */\n    intersectsRay(ray: Ray): number | undefined {\n        // Slabs intersection algorithm.\n        tmpT.min = -Infinity;\n        tmpT.max = Infinity;\n        tmpVec.copy(this.position).sub(ray.origin);\n        if (!intersectsSlab(ray.direction, tmpVec, this.xAxis, this.extents.x, tmpT)) {\n            return undefined;\n        }\n        if (!intersectsSlab(ray.direction, tmpVec, this.yAxis, this.extents.y, tmpT)) {\n            return undefined;\n        }\n        if (!intersectsSlab(ray.direction, tmpVec, this.zAxis, this.extents.z, tmpT)) {\n            return undefined;\n        }\n\n        return tmpT.min > 0 ? tmpT.min : tmpT.max;\n    }\n\n    /**\n     * Returns true if this [[OrientedBox3]] contains the given point.\n     *\n     * @param point A valid point.\n     */\n    contains(point: Vector3): boolean {\n        const dx = point.x - this.position.x;\n        const dy = point.y - this.position.y;\n        const dz = point.z - this.position.z;\n        const x = Math.abs(dx * this.xAxis.x + dy * this.xAxis.y + dz * this.xAxis.z);\n        const y = Math.abs(dx * this.yAxis.x + dy * this.yAxis.y + dz * this.yAxis.z);\n        const z = Math.abs(dx * this.zAxis.x + dy * this.zAxis.y + dz * this.zAxis.z);\n        if (x > this.extents.x || y > this.extents.y || z > this.extents.z) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns the distance from this [[OrientedBox3]] and the given `point`.\n     *\n     * @param point A point.\n     */\n    distanceToPoint(point: Vector3): number {\n        return Math.sqrt(this.distanceToPointSquared(point));\n    }\n\n    /**\n     * Returns the squared distance from this [[OrientedBox3]] and the given `point`.\n     *\n     * @param point A point.\n     */\n    distanceToPointSquared(point: Vector3): number {\n        const d = new Vector3();\n        d.subVectors(point, this.position);\n\n        const lengths = [d.dot(this.xAxis), d.dot(this.yAxis), d.dot(this.zAxis)];\n\n        let result = 0;\n\n        for (let i = 0; i < 3; ++i) {\n            const length = lengths[i];\n            const extent = this.extents.getComponent(i);\n            if (length < -extent) {\n                const dd = extent + length;\n                result += dd * dd;\n            } else if (length > extent) {\n                const dd = length - extent;\n                result += dd * dd;\n            }\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { enforceBlending } from \"./Utils\";\n\nconst vertexShader: string = `\nuniform float size;\n\nvoid main() {\n    vec3 transformed = vec3(position);\n    vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\n\n    gl_Position = projectionMatrix * mvPosition;\n    gl_PointSize = size;\n}\n`;\n\nconst fragmentShader: string = `\nuniform vec3 diffuse;\nuniform float opacity;\n\nvoid main() {\n    float alpha = opacity;\n\n    float radius = 0.5;\n    vec2 coords = gl_PointCoord.xy - vec2(0.5);\n    float len = length(coords);\n    float falloff = fwidth(len);\n    float threshold = 1.0 - smoothstep(radius - falloff, radius, len);\n    alpha *= threshold;\n\n    gl_FragColor = vec4(diffuse, alpha);\n}`;\n\n/**\n * Parameters used when constructing a new [[HighPrecisionPointMaterial]].\n */\nexport interface CirclePointsMaterialParameters extends THREE.ShaderMaterialParameters {\n    /**\n     * Point size.\n     */\n    size?: number;\n\n    /**\n     * Point color.\n     */\n    color?: THREE.Color;\n}\n\n/**\n * Material designed to render circle points. Note that it is always transparent since the circle\n * shape is created with an alpha channel to benefit an antialising that a mere `discard` could\n * not bring.\n */\nexport class CirclePointsMaterial extends THREE.ShaderMaterial {\n    static readonly DEFAULT_CIRCLE_SIZE = 1;\n\n    private m_color: THREE.Color;\n    private m_opacity: number;\n\n    /**\n     * Constructs a new `CirclePointsMaterial`.\n     *\n     * @param parameters The constructor's parameters.\n     */\n    constructor(parameters: CirclePointsMaterialParameters = {}) {\n        const { size, color, opacity, ...shaderParams } = parameters;\n        shaderParams.name = \"CirclePointsMaterial\";\n        shaderParams.vertexShader = vertexShader;\n        shaderParams.fragmentShader = fragmentShader;\n        shaderParams.uniforms = {\n            size: new THREE.Uniform(CirclePointsMaterial.DEFAULT_CIRCLE_SIZE),\n            diffuse: new THREE.Uniform(new THREE.Color()),\n            opacity: new THREE.Uniform(1.0)\n        };\n        shaderParams.depthTest = false;\n        shaderParams.extensions = {\n            ...shaderParams.extensions,\n            derivatives: true\n        };\n\n        super(shaderParams);\n        // Blending needs to always be enabled to support smooth edges\n        enforceBlending(this);\n\n        this.type = \"CirclePointsMaterial\";\n        this.m_color = this.uniforms.diffuse.value;\n        this.m_opacity = this.uniforms.opacity.value;\n\n        if (size !== undefined) {\n            this.size = size;\n        }\n        if (color !== undefined) {\n            this.color = color;\n        }\n        if (opacity !== undefined) {\n            this.opacity = opacity;\n        }\n    }\n\n    /**\n     * Gets the circle screen size.\n     */\n    get size(): number {\n        return this.uniforms.size.value;\n    }\n\n    /**\n     * Sets the circle screen size.\n     */\n    set size(size: number) {\n        this.uniforms.size.value = size;\n    }\n\n    /**\n     * Get circle opacity.\n     */\n    get opacity(): number {\n        return this.m_opacity;\n    }\n\n    /**\n     * Set circle opacity.\n     */\n    set opacity(opacity: number) {\n        this.m_opacity = opacity;\n\n        // Base constructor may set opacity before uniform being created.\n        if (this.uniforms && this.uniforms.opacity) {\n            this.uniforms.opacity.value = opacity;\n        }\n    }\n\n    /**\n     * Gets the diffuse.\n     */\n    get color(): THREE.Color {\n        return this.m_color;\n    }\n\n    /**\n     * Sets the diffuse.\n     */\n    set color(color: THREE.Color) {\n        this.m_color.set(color);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/GroupedPriorityList\";\nexport * from \"./lib/Logger\";\nexport * from \"./lib/Math2D\";\nexport * from \"./lib/MathUtils\";\nexport * from \"./lib/Mixins\";\nexport * from \"./lib/assert\";\nexport * from \"./lib/CachedResource\";\nexport * from \"./lib/ContextLogger\";\nexport * from \"./lib/PerformanceTimer\";\nexport * from \"./lib/ObjectUtils\";\nexport * from \"./lib/OptionsUtils\";\nexport * from \"./lib/UriResolver\";\nexport * from \"./lib/UrlUtils\";\nexport * from \"./lib/Functions\";\nexport * from \"./lib/SampleBilinear\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * A `PriorityListElement` has a priority to assist in sorting. The idea is that the items in a\n * grouped priority list will not modify their priority during processing to such an amount, that\n * they will change into another group. Smaller lists are smaller to sort, and in case of resource\n * limitation (maximum number of rendered objects reached), not all items have to be sorted at all.\n */\nexport interface PriorityListElement {\n    /**\n     * The integer value of this priority is used to group objects of \"same\" priority.\n     */\n    priority: number;\n}\n\n/**\n * The `PriorityListGroup` contains a list of [[PriorityListElement]]s that all have the same\n * (integer) priority.\n */\nexport class PriorityListGroup<T extends PriorityListElement> {\n    constructor(readonly priority: number, public elements: T[] = new Array()) {}\n\n    /**\n     * Create and return a deep copy of the `PriorityListGroup<T>`.\n     *\n     * @returns A clone of the `PriorityListGroup<T>`.\n     */\n    clone(): PriorityListGroup<T> {\n        return new PriorityListGroup<T>(this.priority, this.elements.slice());\n    }\n\n    /**\n     * Removes an element from the group.\n     * @param element The element to remove.\n     * @returns true if the element was removed, false if it was not found in the group.\n     */\n    remove(element: T): boolean {\n        const foundIndex = this.elements.indexOf(element);\n        if (foundIndex === -1) {\n            return false;\n        }\n        this.elements.splice(foundIndex, 1);\n        return true;\n    }\n}\n\n/**\n * The `PriorityListGroupMap` is a map to map the (integer) priority to a [[PriorityListGroup]].\n */\nexport type PriorityListGroupMap<T extends PriorityListElement> = Map<number, PriorityListGroup<T>>;\n\n/**\n * The `GroupedPriorityList` contains a [[PriorityListGroupMap]] to manage a larger number of items\n * in priority groups.\n */\nexport class GroupedPriorityList<T extends PriorityListElement> {\n    readonly groups: PriorityListGroupMap<T> = new Map();\n    /**\n     * Add an element to the `GroupedPriorityList`. Selects group based on the elements priority.\n     *\n     * @param element Element to be added.\n     */\n    add(element: T): void {\n        this.getGroup(element.priority).elements.push(element);\n    }\n\n    /**\n     * Remove an element from the `GroupedPriorityList`.\n     *\n     * Note: It is required that the priority is the same as it was when the element has been added.\n     * Otherwise, the removal will fail.\n     *\n     * @param element Element to be removed.\n     * @returns `True` if the element was removed, `false` otherwise.\n     */\n    remove(element: T): boolean {\n        const group = this.findGroup(element.priority);\n        if (group !== undefined && group.remove(element)) {\n            if (group.elements.length === 0) {\n                this.groups.delete(group.priority);\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Remove all internal [[PriorityListGroup]]s.\n     */\n    clear(): void {\n        this.groups.clear();\n    }\n\n    /**\n     * Merge another [[GroupedPriorityList]] into this one.\n     *\n     * @param other Other group to merge.\n     */\n    merge(other: GroupedPriorityList<T>): GroupedPriorityList<T> {\n        for (const otherGroup of other.groups) {\n            const group = this.findGroup(otherGroup[1].priority);\n            if (group === undefined) {\n                this.groups.set(Math.floor(otherGroup[1].priority), otherGroup[1].clone());\n                continue;\n            }\n            group.elements = group.elements.concat(otherGroup[1].elements);\n        }\n        return this;\n    }\n\n    clone(): GroupedPriorityList<T> {\n        const clone = new GroupedPriorityList<T>();\n        for (const [priority, group] of this.groups) {\n            clone.groups.set(priority, group.clone());\n        }\n        return clone;\n    }\n\n    /**\n     * Apply function to all elements in this `GroupedPriorityList`.\n     *\n     * @param {(element: T) => void} fun Function to apply.\n     */\n    forEach(fun: (element: T) => void): void {\n        for (const group of this.groups) {\n            group[1].elements.forEach(fun);\n        }\n    }\n\n    /**\n     * Count the number of elements in this `GroupedPriorityList`.\n     */\n    count(): number {\n        let n = 0;\n        for (const group of this.groups) {\n            n += group[1].elements.length;\n        }\n        return n;\n    }\n\n    /**\n     * Get group of elements that have the same (integer) priority.\n     *\n     * @param priority The priority to retrieve all elements from.\n     */\n    private findGroup(priority: number): PriorityListGroup<T> | undefined {\n        const normalizedPriority = Math.floor(priority);\n        const group = this.groups.get(normalizedPriority);\n        return group;\n    }\n\n    /**\n     * Get group of elements that have the same (integer) priority.\n     *\n     * @param priority The priority to retrieve all elements from.\n     */\n    private getGroup(priority: number): PriorityListGroup<T> {\n        let group = this.findGroup(priority);\n\n        if (group === undefined) {\n            const normalizedPriority = Math.floor(priority);\n            group = new PriorityListGroup<T>(normalizedPriority);\n            this.groups.set(group.priority, group);\n        }\n\n        return group;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./ConsoleChannel\";\nexport * from \"./IChannel\";\nexport * from \"./ILogger\";\nexport * from \"./Logger\";\nexport * from \"./LoggerManager\";\nexport * from \"./MultiChannel\";\nexport * from \"./WorkerChannel\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ILoggerManager } from \"./ILoggerManager\";\nimport { LoggerManagerImpl } from \"./LoggerManagerImpl\";\n\n/**\n * The LoggerManager class implements a singleton object that handles logging.\n *\n * Example:\n *\n * ```typescript\n *\n * const logger = LoggerManager.instance.create(\"MyFontLoaderClass\");\n * if (missingFonts.length > 0) {\n *     logger.error(\"These fonts can not be loaded: \", missingFonts);\n * } else {\n *     logger.log(\"All fonts have been loaded.\");\n * }\n * ```\n */\nexport class LoggerManager {\n    private static m_instance: ILoggerManager;\n\n    static get instance(): ILoggerManager {\n        return this.m_instance || (this.m_instance = new LoggerManagerImpl());\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ConsoleChannel } from \"./ConsoleChannel\";\nimport { IChannel } from \"./IChannel\";\nimport { ILogger, LoggerOptions, LogLevel } from \"./ILogger\";\nimport { ILoggerManager } from \"./ILoggerManager\";\nimport { Logger } from \"./Logger\";\nimport { WorkerChannel } from \"./WorkerChannel\";\n\n/**\n * LoggerManagerImpl is the class for the singleton instance of the logger manager.\n * It handles channels and loggers.\n */\n\nexport class LoggerManagerImpl implements ILoggerManager {\n    channel: IChannel;\n    private readonly m_loggers: ILogger[] = [];\n    private m_levelSetForAll?: LogLevel;\n\n    constructor() {\n        this.channel =\n            typeof self === \"undefined\" || typeof self.document !== \"undefined\"\n                ? new ConsoleChannel()\n                : new WorkerChannel();\n    }\n\n    getLoggerNames(): string[] {\n        return this.m_loggers.map(logger => logger.name);\n    }\n\n    getLogger(name: string): ILogger | undefined {\n        return this.m_loggers.find(logger => logger.name === name);\n    }\n\n    create(loggerName: string, options: LoggerOptions = {}): ILogger {\n        if (\n            this.m_levelSetForAll !== undefined &&\n            (options.level === undefined || options.level < this.m_levelSetForAll)\n        ) {\n            options.level = this.m_levelSetForAll;\n        }\n        const logger = new Logger(loggerName, this.channel, options);\n        this.m_loggers.push(logger);\n        return logger;\n    }\n\n    dispose(logger: ILogger) {\n        const found = this.m_loggers.indexOf(logger);\n        if (found < 0) {\n            throw new Error(`Cannot unregister \"${logger}\" : no such logger registered.`);\n        }\n        this.m_loggers.splice(found, 1);\n    }\n\n    updateAll(options: LoggerOptions) {\n        for (const logger of this.m_loggers) {\n            logger.update(options);\n        }\n    }\n\n    update(loggerName: string, config: LoggerOptions) {\n        for (const logger of this.m_loggers) {\n            if (logger.name === loggerName) {\n                logger.update(config);\n            }\n        }\n    }\n\n    enableAll(enabled: boolean) {\n        for (const logger of this.m_loggers) {\n            logger.enabled = enabled;\n        }\n    }\n\n    enable(loggerName: string, value: boolean) {\n        this.update(loggerName, { enabled: value });\n    }\n\n    setLogLevelForAll(level: LogLevel) {\n        this.m_levelSetForAll = level;\n        for (const logger of this.m_loggers) {\n            logger.level = level;\n        }\n    }\n\n    setLogLevel(loggerName: string, level: LogLevel) {\n        this.update(loggerName, { level });\n    }\n\n    setChannel(channel: IChannel) {\n        this.channel = channel;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Class allowing mixing several channels.\n */\nexport class MultiChannel implements IChannel {\n    private readonly channels: IChannel[] = [];\n    constructor(...channels: IChannel[]) {\n        this.channels = channels;\n    }\n\n    error(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.error(message, ...optionalParams);\n        }\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.debug(message, ...optionalParams);\n        }\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.info(message, ...optionalParams);\n        }\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.log(message, ...optionalParams);\n        }\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.trace(message, ...optionalParams);\n        }\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.warn(message, ...optionalParams);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace Math2D {\n    /**\n     * Alternative 2D box object with less memory impact (four numbers instead of two min/max\n     * objects with two numbers each). Should be faster.\n     */\n    export class Box {\n        /**\n         * Alternative 2D box object with less memory impact (four numbers instead of two min/max\n         * objects with two numbers each). Should be faster.\n         *\n         * @param x New X value.\n         * @param y New y value.\n         * @param w New w value.\n         * @param h New h value.\n         */\n        constructor(public x = 0, public y = 0, public w = 0, public h = 0) {}\n\n        /**\n         * Set new values to all properties of the box.\n         *\n         * @param x New X value.\n         * @param y New y value.\n         * @param w New w value.\n         * @param h New h value.\n         */\n        set(x: number, y: number, w: number, h: number) {\n            this.x = x;\n            this.y = y;\n            this.w = w;\n            this.h = h;\n        }\n\n        /**\n         * Test box for inclusion of point.\n         *\n         * @param x X coordinate of point.\n         * @param y Y coordinate of point.\n         */\n        contains(x: number, y: number): boolean {\n            return this.x <= x && this.x + this.w >= x && this.y <= y && this.y + this.h >= y;\n        }\n\n        /**\n         * Test box for inclusion of another box.\n         *\n         * @param other Box 2 to test for inclusion.\n         */\n        containsBox(other: Box): boolean {\n            const xmax = other.x + other.w;\n            const ymax = other.y + other.h;\n            return (\n                this.contains(other.x, other.y) &&\n                this.contains(xmax, other.y) &&\n                this.contains(other.x, ymax) &&\n                this.contains(xmax, ymax)\n            );\n        }\n\n        /**\n         * Test two boxes for intersection.\n         *\n         * @param other Box 2 to test for intersection.\n         */\n        intersects(other: Box): boolean {\n            return (\n                this.x <= other.x + other.w &&\n                this.x + this.w >= other.x &&\n                this.y <= other.y + other.h &&\n                this.y + this.h >= other.y\n            );\n        }\n    }\n\n    /**\n     * Box to store UV coordinates.\n     */\n    export interface UvBox {\n        s0: number;\n        t0: number;\n        s1: number;\n        t1: number;\n    }\n\n    /**\n     * Compute squared distance between two 2D points `a` and `b`.\n     *\n     * @param ax Point a.x\n     * @param ay Point a.y\n     * @param bx Point b.x\n     * @param by Point b.y\n     * @returns Squared distance between the two points\n     */\n    export function distSquared(ax: number, ay: number, bx: number, by: number): number {\n        return (ax - bx) * (ax - bx) + (ay - by) * (ay - by);\n    }\n\n    /**\n     * Computes the squared length of a line.\n     *\n     * @param line An array of that forms a line via [x,y,z,x,y,z,...] tuples.\n     */\n    export function computeSquaredLineLength(line: number[]): number {\n        let squaredLineLength: number = 0;\n\n        const length = line.length - 4;\n        for (let i = 0; i < length; i += 3) {\n            const xDiff = line[i + 3] - line[i];\n            const yDiff = line[i + 4] - line[i + 1];\n            squaredLineLength += xDiff * xDiff + yDiff * yDiff;\n        }\n        return squaredLineLength;\n    }\n\n    /**\n     * Compute squared distance between a 2D point and a 2D line segment.\n     *\n     * @param px Test point X\n     * @param py Test point y\n     * @param l0x Line segment start X\n     * @param l0y Line segment start Y\n     * @param l1x Line segment end X\n     * @param l1y Line segment end Y\n     * @returns Squared distance between point and line segment\n     */\n    export function distToSegmentSquared(\n        px: number,\n        py: number,\n        l0x: number,\n        l0y: number,\n        l1x: number,\n        l1y: number\n    ): number {\n        const lineLengthSuared = distSquared(l0x, l0y, l1x, l1y);\n        if (lineLengthSuared === 0) {\n            return distSquared(px, py, l0x, l0y);\n        }\n        let t = ((px - l0x) * (l1x - l0x) + (py - l0y) * (l1y - l0y)) / lineLengthSuared;\n        t = Math.max(0, Math.min(1, t));\n        return distSquared(px, py, l0x + t * (l1x - l0x), l0y + t * (l1y - l0y));\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace MathUtils {\n    /**\n     * Ensures that input value fits in a given range.\n     *\n     * @param value The value to be clamped.\n     * @param min Minimum value.\n     * @param max Maximum value.\n     *\n     * @returns Clamped value.\n     */\n    export function clamp(value: number, min: number, max: number): number {\n        return value < min ? min : value > max ? max : value;\n    }\n\n    /**\n     * Returns a linear interpolation between the values of edge0 and edge1 based on the factor.\n     *\n     * Given two known points the linear interpolant between these points may be presented as\n     * straight line. This means that for given factor change the resulting change of return\n     * value is always const.\n     * @see https://en.wikipedia.org/wiki/Linear_interpolation\n     *\n     * @param edge0\n     * @param edge1\n     * @param factor Interpolation factor that ranges between: 0 <= x <= 1.\n     */\n    export function lerp(edge0: number, edge1: number, factor: number): number {\n        return edge0 * (1 - factor) + edge1 * factor;\n    }\n\n    /**\n     * Returns a smooth interpolation between the values edge0 and edge1 based on the interpolation\n     * factor x. `0 <= x <= 1`.\n     * @see https://en.wikipedia.org/wiki/Smoothstep\n     *\n     * @param edge0\n     * @param edge1\n     * @param x\n     */\n    export function smoothStep(edge0: number, edge1: number, x: number) {\n        // Scale, bias and saturate x to 0..1 range\n        x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n        // Evaluate polynomial\n        return x * x * (3 - 2 * x);\n    }\n\n    /**\n     * Returns a smooth interpolation between the values edge0 and edge1 based on the interpolation\n     * factor x. `0 <= x <= 1`.\n     *\n     * Improved version by Ken Perlin, which has zero 1st- and 2nd-order derivatives at `x = 0` and\n     * `x = 1`:\n     *\n     * @see https://en.wikipedia.org/wiki/Smoothstep\n     *\n     * @param edge0\n     * @param edge1\n     * @param x\n     */\n    export function smootherStep(edge0: number, edge1: number, x: number) {\n        // Scale, and clamp x to 0..1 range\n        x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n        // Evaluate polynomial\n        return x * x * x * (x * (x * 6 - 15) + 10);\n    }\n\n    /**\n     * Maps a number from one range to another.\n     *\n     * @param val The incoming value to be converted.\n     * @param inMin Lower bound of the value's current range.\n     * @param inMax Upper bound of the value's current range.\n     * @param outMin Lower bound of the value's target range.\n     * @param outMax Upper bound of the value's target range.\n     */\n    export function map(val: number, inMin: number, inMax: number, outMin: number, outMax: number) {\n        return ((val - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n    }\n\n    /**\n     * Returns the smaller of the two given numbers. Both numbers may be undefined, in which case\n     * the result is undefined. If only one of the numbers is undefined, the other number is\n     * returned.\n     *\n     * @param a First number.\n     * @param b Second number.\n     */\n    export function min2(a: number | undefined, b: number | undefined): number | undefined {\n        let result: number | undefined;\n\n        if (a !== undefined) {\n            result = a;\n        }\n        if (b !== undefined) {\n            result = result === undefined ? b : Math.min(result, b);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns the larger of the two given numbers. Both numbers may be undefined, in which case\n     * the result is undefined. If only one of the numbers is undefined, the other number is\n     * returned.\n     *\n     * @param a First number.\n     * @param b Second number.\n     */\n    export function max2(a: number | undefined, b: number | undefined): number | undefined {\n        let result: number | undefined;\n\n        if (a !== undefined) {\n            result = a;\n        }\n        if (b !== undefined) {\n            result = result === undefined ? b : Math.max(result, b);\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks if the value of a given number is inside an upper or lower bound. The bounds may be\n     * undefined, in which case their value is ignored.\n     *\n     * @param value Value to check.\n     * @param lowerBound The lower bound to check the value against.\n     * @param upperBound The upper bound to check the value against.\n     *\n     * @returns `true` if value is inside the bounds or if the bounds are `undefined`, `false`\n     *          otherwise.\n     */\n    export function isClamped(\n        value: number,\n        lowerBound: number | undefined,\n        upperBound: number | undefined\n    ): boolean {\n        if (lowerBound !== undefined && value < lowerBound) {\n            return false;\n        }\n        if (upperBound !== undefined && value > upperBound) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Smoothly interpolates between two values using cubic formula\n     *\n     * @param startValue\n     * @param endValue\n     * @param time\n     * @returns Result of the interpolation within the range of `[startValue, endValue]`\n     */\n    export function easeInOutCubic(startValue: number, endValue: number, time: number): number {\n        const timeValue =\n            time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1;\n        return startValue + (endValue - startValue) * timeValue;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Copy methods and properties from one prototype into another.\n *\n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n *\n * @param derivedCtor Class to mix methods and properties into.\n * @param baseCtors Class to take all methods and properties from.\n */\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\n        });\n    });\n}\n\n/**\n * Copy methods from one prototype into another.\n *\n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n *\n * @param derivedCtor Class to mix methods into.\n * @param baseCtors Class to take all methods from.\n */\nexport function applyMixinsWithoutProperties(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            const descriptor = Object.getOwnPropertyDescriptor(baseCtor.prototype, name);\n            if (\n                descriptor !== undefined &&\n                descriptor.get === undefined &&\n                name !== \"constructor\"\n            ) {\n                derivedCtor.prototype[name] = baseCtor.prototype[name];\n            }\n        });\n    });\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\ndeclare const process: any;\n\n// cache value, because access to process.env.NODE_ENV is SLOW!\nconst isProduction = process.env.NODE_ENV === \"production\";\n\n//TODO: Make assertHandler configurable\n\n/**\n * Implementation of assert as a development help\n *\n * Note - this is deliberately a global function so that minimizers remove the\n * entire call when building for production.\n *\n * @hidden\n * @param condition Condition to match, if false, throws an Error(message)\n * @param message Optional message, defaults to \"ASSERTION failed\"\n */\nexport function assert(condition: boolean, message?: string): void {\n    if (!isProduction) {\n        if (!condition) {\n            throw new Error(message !== undefined ? message : \"ASSERTION failed\");\n        }\n    }\n}\n\nexport function assertExists<T>(element: T | undefined, message?: string): T {\n    if (!isProduction) {\n        if (element === undefined || element === null) {\n            throw new Error(\n                message !== undefined ? message : \"ASSERTION failed: Element is undefined or null\"\n            );\n        }\n    }\n    return element!;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Refinement of `console` interface only for important information i.e `info`, `warn` and `errors`.\n */\nexport interface ISimpleChannel {\n    info(message?: any, ...optionalParams: any[]): void;\n    warn(message?: any, ...optionalParams: any[]): void;\n    error(message?: any, ...optionalParams: any[]): void;\n}\n\n/**\n * Extension of [[ISimpleChannel]] to support contextual logging by adding stack of prefixes.\n */\nexport interface IContextLogger extends ISimpleChannel {\n    /**\n     * Push \"attribute-like\" context.\n     */\n    pushAttr(name: string): void;\n\n    /**\n     * Push \"index-like\" context.\n     *\n     * Following log messages will be prefixed with `[index]`.\n     */\n    pushIndex(index: string | number): void;\n\n    /**\n     * Remove current context from top of stack.\n     */\n    pop(): void;\n}\n\n/**\n * Context-aware logger that decorates log message with stack-based prefix, emits `headerMessage`\n * before first actual log message.\n */\nexport class ContextLogger implements IContextLogger {\n    private readonly context: string[] = [];\n    private m_headerLogged = false;\n\n    /**\n     * Construct a context-aware logger that logs to `m_logger`.\n     */\n    constructor(readonly m_logger: ISimpleChannel, readonly headerMessage: string) {}\n\n    /**\n     * Push \"attribute-like\" context.\n     *\n     * Following log messages will be prefixed with `name` or `.name` depending on current context.\n     */\n    pushAttr(name: string) {\n        this.context.push(`${this.context.length > 0 ? \".\" : \"\"}${name}`);\n    }\n\n    /**\n     * Push \"index-like\" context.\n     *\n     * Following log messages will be prefixed with `[index]`.\n     */\n    pushIndex(index: string | number) {\n        this.context.push(`[${index}]`);\n    }\n\n    pop() {\n        this.context.pop();\n    }\n\n    // They, are public member functions it's just tslint who doesn't understand this.\n\n    // tslint:disable:member-ordering\n    warn = this.createLogMethod(\"warn\");\n    info = this.createLogMethod(\"info\");\n    error = this.createLogMethod(\"error\");\n    // tslint:enable:member-ordering\n\n    private createLogMethod(severity: \"warn\" | \"info\" | \"error\") {\n        return (message: string, ...rest: any[]) => {\n            if (!this.m_headerLogged) {\n                this.m_logger.info(this.headerMessage);\n                this.m_headerLogged = true;\n            }\n            this.m_logger[severity](`${this.context.join(\"\")}: ${message}`, ...rest);\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n/**\n * See:\n * https://developers.google.com/web/updates/2012/08/When-milliseconds-are-not-enough-performance-now\n */\n/* tslint:ensable:max-line-length */\n\nexport class PerformanceTimer {\n    /**\n     * Returns timestamp in milliseconds since page load.\n     *\n     * If the [[DOMHighResTimeStamp]] is supported, the resolution is up to 5 microseconds,\n     * otherwise it is in milliseconds. Timespans are computed by taking the difference between two\n     * samples.\n     *\n     * Example:\n     * ```typescript\n     * const now = PerformanceTimer.now();\n     * // call some expensive function for which you want to check the duration.\n     * const end = PerformanceTimer.now();\n     * const elapsedTime = end - now;\n     * ```\n     */\n    static now(): number {\n        return PerformanceTimer.nowFunc();\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    private static readonly instance = new PerformanceTimer();\n\n    private static readonly nowFunc: () => number = PerformanceTimer.getNowFunc();\n\n    private static getNowFunc() {\n        if (typeof performance !== \"undefined\" && typeof performance.now !== \"undefined\") {\n            return () => performance.now();\n        }\n\n        // fall back to Date.getTime()\n        return () => {\n            return new Date().getTime();\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Deep clone of object.\n *\n * Like `JSON.parse(JSON.stringify(obj))`, but supports basic javascript types (string, number,\n * object), `Date` and `RegExp`s and cycles.\n *\n * Throws error if enounters object with `prototype` assuming that in general class instances\n * cannot be reliably cloned by generic algorithm.\n */\nexport function cloneDeep<T>(obj: T): T {\n    const cache: Map<object, object> = new Map();\n    function cloneInternal(src: any): any {\n        if (src === null) {\n            return null;\n        } else if (typeof src === \"object\") {\n            const cached = cache.get(src);\n            if (cached !== undefined) {\n                return cached;\n            }\n\n            if (Array.isArray(src)) {\n                const result: any[] = [];\n                cache.set(src, result);\n                result.length = src.length;\n                for (let i = 0; i < result.length; ++i) {\n                    result[i] = cloneInternal(src[i]);\n                }\n                return result;\n            } else if (src instanceof Date) {\n                const result = new Date(src.getTime());\n                cache.set(src, result);\n                return result;\n            } else if (src instanceof RegExp) {\n                const result = new RegExp(src.source, src.flags);\n                cache.set(src, result);\n                return result;\n            } else if (src.constructor !== Object) {\n                throw new Error(\"cloneDeep doesn't support objects with custom prototypes\");\n            } else {\n                const result: typeof src = {};\n                cache.set(src, result);\n                for (const key in src) {\n                    if (src.hasOwnProperty(key)) {\n                        result[key] = cloneInternal(src[key]);\n                    }\n                }\n                return result;\n            }\n        } else {\n            // string, number, boolean, undefined and functions are returned as is\n            return src;\n        }\n    }\n\n    const r = cloneInternal(obj);\n    cache.clear();\n    return r;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Get first defined value.\n *\n * Specialized \"replacement\" for `a || b || c` used frequently to get value from various sources\n * (defaults, configs  constants).\n * In contrast to `||`, this function provides proper typing for usual use cases (constant as last\n * argument) and correct treatment of `null` and `undefined`.\n *\n * If last parameter is \"defined\" then return type is `T`, otherwise return type is `T | undefined`.\n *\n * Usage example:\n *\n *     interface Config {\n *         x?: number;\n *     }\n *     const someConfig: Config = {};\n *     const val: number | undefined = undefined;\n *     const DEFAULT = 5;\n *     const x = getOptionValue(val, someConfig.x, DEFAULT);\n *         // typeof x === 'number' because DEFAULT is defined\n *     const y = getOptionValue(val, someConfig.x);\n *         // typeof y === 'number | undefined' because someConfig.x is possibly undefined\n */\n// specialized overloads with last param defined params overload\nexport function getOptionValue<T>(a: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T | undefined, c: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T | undefined, c: T | undefined, d: T): T;\nexport function getOptionValue<T>(...values: Array<T | undefined>): T | undefined;\n\nexport function getOptionValue<T>(...values: Array<T | undefined>): T | undefined {\n    for (const candidate of values) {\n        if (candidate !== undefined && candidate !== null) {\n            return candidate;\n        }\n    }\n    return undefined;\n}\n\n/**\n * Merge options into existing parameters object.\n *\n * Convenience helper with _similar_ semantics as:\n *\n *     const finalParams1 = { ...defaults, ... options };\n *     const finalParams2 = Object.assign({}, defaults, options);\n *\n * This function doesn't copy _extra_ properties of `options` that doesn't exist in `defaults`.\n * `defaults` is used as _parameters_ template.\n *\n * This doc uses following notion of `option` and `parameter` terms:\n * * `parameter` is a variable, or 'almost constant' of procedure/function/algorith/object\n *    * `parameter` usually have sensible and usually used default\n *    * `parameter` is always defined (no `undefined`, `null` or `?` in type)\n *    * `parameter` can be overriden by specyfying `option` with same name\n * * `option` means value that may be passed optionally, overrides `parameter` value with same name\n *\n * Usage:\n *\n *     interface FooParams {\n *         useTextures: boolean;\n *         opacity: number;\n *     }\n *\n *     const FOO_DEFAULTS: FooParams = {\n *         useTextures: true,\n *         opacity: 0.8\n *     };\n *\n *     type FooOptions = Partial<FooParams>;\n *\n *     function doSomething(options: FooOptions) {\n *         const params = mergeWithOptions(FOO_DEFAULTS, options);\n *             // typeof params === FooParams\n *             // params.opacity = 0.5\n *             // params.useTextures = true\n *             // params.someOtherOptionFromOtherApi is not defined\n *     }\n *     const opt = {opacity: 0.5, someOtherOptionFromOtherApi: 'aaa'};\n *     doSomething(opt);\n *\n * Rationale:\n *   * both `Object.assign` and spread operator copy extra options\n *   * `Object.assign` & `spread operator` may copy `undefined` and `null`s if they really exist\n *     in options object\n *\n * @param parameters parmeters template object holding all expected parameters\n * @param options options object\n * @returns new object with `parameters` overriden by values from `options`\n */\nexport function mergeWithOptions<T extends object>(parameters: T, options?: Partial<T>): T {\n    // NOTE: `as object` needed due to TypeScript bug:\n    //       https://github.com/Microsoft/TypeScript/issues/14409\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    const result = { ...(parameters as object) } as T;\n    if (options === undefined || options === null) {\n        return result;\n    }\n    for (const prop in parameters) {\n        if (parameters.hasOwnProperty(prop)) {\n            const optionValue = options[prop];\n            if (optionValue !== undefined && optionValue !== null) {\n                result[prop] = optionValue as any;\n            }\n        }\n    }\n    return result;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { resolveReferenceUri } from \"./UrlUtils\";\n\n/**\n * Custom, app-specific URI resolver interface.\n */\nexport interface UriResolver {\n    /**\n     * Attempt to resolve `URI` to `URL`.\n     *\n     * If given resolver doesn't know about this specific kind of `URI`, it should return string as\n     * received.\n     *\n     * @param input `URI`\n     * @returns actual `URL` if this handler knows how locate given `uri` or original `uri`\n     */\n    resolveUri(uri: string): string;\n}\n\nexport interface PrefixUriResolverDefinition {\n    [prefix: string]: string;\n}\n\n/**\n * Basic, import-map like [[UriResolver]].\n *\n * Resolves `uris` basing on exact or prefix match of `key` from `definitions`.\n *\n * In definitions, `key` is matched against input uri with following strategy:\n *  - `key` without trailing `/` -> `key` and input `uri` must be identical\n *  - `key` with trailing `/`, -> `key` is treated as \"package prefix\", so `uri` must start with\n *    `key`\n *\n * Example:\n * ```\n * {\n *     \"local://poiMasterList\": \"/assets/poiMasterList.json\"\n *        // will match only 'local://poiMasterList' and resolve `/assets/poiMasterList.json`\n *     \"local://icons/\": \"/assets/icons/\"\n *        // will match only 'local://icons/ANYPATH' (and similar) and resolve to\n *        // `/assets/icons/ANYPATH\n * }\n * ```\n * Inspired by [`WICG` import maps proposal](https://github.com/WICG/import-maps#the-import-map).\n */\nexport class PrefixMapUriResolver implements UriResolver {\n    constructor(readonly definitions: PrefixUriResolverDefinition) {}\n\n    resolveUri(uri: string) {\n        return Object.keys(this.definitions).reduce((r, key) => {\n            if (key.endsWith(\"/\") && r.startsWith(key)) {\n                const newPrefix = this.definitions[key];\n                return newPrefix + r.substr(key.length);\n            } else if (r === key) {\n                return this.definitions[key];\n            }\n            return r;\n        }, uri);\n    }\n}\n\n/**\n * [UriResolver] that resolve relative `uri`s against to parent resource `uri`.\n */\nexport class RelativeUriResolver implements UriResolver {\n    constructor(readonly parentUri: string) {}\n\n    resolveUri(uri: string) {\n        return resolveReferenceUri(this.parentUri, uri);\n    }\n}\n\n/**\n * Compose URI resolvers.\n *\n * Creates new [[UriResolver]] that applies resolvers in orders or arguments.\n *\n * Example:\n *\n *     const themeUrl = ...; // url of parent object\n *     const childUrlResolver = composeUrlResolvers(\n *           new RelativeUriResolver(themeUrl),\n *           defaultUrlResolver\n *     );\n */\nexport function composeUriResolvers(...resolvers: Array<UriResolver | undefined>): UriResolver {\n    return {\n        resolveUri(originalUrl: string) {\n            return resolvers.reduce((url, resolver) => {\n                if (resolver !== undefined) {\n                    return resolver.resolveUri(url);\n                } else {\n                    return url;\n                }\n            }, originalUrl);\n        }\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Chains two functions for further assigning as one wrapped callback function\n */\nexport function chainCallbacks<T extends (this: unknown, ...args: any[]) => any>(\n    f1: T | null | undefined,\n    f2: T\n): T {\n    return function(this: any, ...args: any[]): ReturnType<T> {\n        if (f1) {\n            f1.apply(this, args);\n        }\n        return f2.apply(this, args);\n    } as T;\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\ntype TypedArray =\n    | Int8Array\n    | Uint8Array\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Uint8ClampedArray\n    | Float32Array\n    | Float64Array;\n\n/**\n * Returns a bilinear-interpolated texture sample for a given texture.\n * @param texture Two-dimensional texture to sample.\n * @param width Texture width.\n * @param height Texture height.\n * @param u Number between 0 and 1 representing the location to sample in the width dimension.\n * @param v Number between 0 and 1 representing the location to sample in the height dimension.\n */\nexport function sampleBilinear(\n    texture: TypedArray,\n    width: number,\n    height: number,\n    u: number,\n    v: number\n): number {\n    const maxXIndex = width - 1;\n    const maxYIndex = height - 1;\n    // Compute the x and y coordinates relative to the mesh size.\n    const xIndex = u * maxXIndex;\n    const xIndexFloor = Math.floor(xIndex);\n    const yIndex = v * maxYIndex;\n    const yIndexFloor = Math.floor(yIndex);\n    const swIndex = yIndexFloor * width + xIndexFloor;\n    const seIndex = xIndexFloor < maxXIndex ? swIndex + 1 : swIndex;\n    const nwIndex = yIndexFloor < maxYIndex ? swIndex + width : swIndex;\n    const neIndex = xIndexFloor < maxXIndex ? nwIndex + 1 : nwIndex;\n    const swElevation = texture[swIndex];\n    const seElevation = texture[seIndex];\n    const nwElevation = texture[nwIndex];\n    const neElevation = texture[neIndex];\n    // Get the fractional components to do bilinear interpolation.\n    const xFrac = Number.isInteger(xIndex) ? 0 : xIndex - xIndexFloor;\n    const xFracInverse = 1 - xFrac;\n    const yFrac = Number.isInteger(yIndex) ? 0 : yIndex - yIndexFloor;\n    const yFracInverse = 1 - yFrac;\n    // The interpolation is the sum of the four closest neighbours each\n    // multiplied by the diagonal areas.\n    const result =\n        swElevation * xFracInverse * yFracInverse +\n        seElevation * xFrac * yFracInverse +\n        nwElevation * xFracInverse * yFrac +\n        neElevation * xFrac * yFrac;\n    return result;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { baseUrl } from \"./UrlUtils\";\n\n/**\n * Get base URL for from where relative URLs will be loaded.\n *\n * * In browser, it resolves to `baseUrl(location.href)` i.e document's base URL\n * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n *\n * * In node, it resolves to `file://${process.cwd()}`.\n */\nexport function getAppBaseUrl() {\n    return baseUrl(window.location.href);\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HiddenThreeJSMaterialProperties } from \"./MapMeshMaterials\";\n\n/**\n * Parameters used when constructing a new implementor of [[DisplacementFeature]].\n */\nexport interface DisplacementFeatureParameters {\n    /**\n     * Texture used for vertex displacement along their normals.\n     */\n    displacementMap?: THREE.Texture;\n}\n\n/**\n * Interface to be implemented by materials that use displacement maps to overlay geometry\n * on elevation data.\n */\nexport interface DisplacementFeature extends HiddenThreeJSMaterialProperties {\n    displacementMap: THREE.Texture | null;\n}\n\n/**\n * Determines whether a given material supports displacement maps for elevation overlay.\n * @param material The material to check.\n * @returns Whether the given material supports displacement maps for elevation overlay.\n */\nexport function hasDisplacementFeature(material: any): material is DisplacementFeature {\n    return \"displacementMap\" in material;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { DisplacementFeature, DisplacementFeatureParameters } from \"./DisplacementFeature\";\nimport {\n    ExtrusionFeature,\n    ExtrusionFeatureParameters,\n    FadingFeature,\n    FadingFeatureParameters\n} from \"./MapMeshMaterials\";\nimport { ExtrusionFeatureDefs } from \"./MapMeshMaterialsDefs\";\nimport { enforceBlending, setShaderDefine, setShaderMaterialDefine } from \"./Utils\";\n\nconst vertexSource: string = `\n#define EDGE_DEPTH_OFFSET 0.0001\n\nattribute vec3 position;\nattribute vec4 color;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 edgeColor;\nuniform float edgeColorMix;\n\n#ifdef USE_DISPLACEMENTMAP\nattribute vec3 normal;\nattribute vec2 uv;\nuniform sampler2D displacementMap;\n#endif\n\nvarying vec3 vColor;\n\n#ifdef USE_EXTRUSION\n#include <extrusion_pars_vertex>\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_vertex>\n#endif\n\nvoid main() {\n\n    #ifdef USE_COLOR\n    vColor = mix(edgeColor.rgb, color.rgb, edgeColorMix);\n    #else\n    vColor = edgeColor.rgb;\n    #endif\n\n    vec3 transformed = vec3( position );\n\n    #ifdef USE_EXTRUSION\n    #include <extrusion_vertex>\n    #endif\n\n    #ifdef USE_DISPLACEMENTMAP\n    transformed += normalize( normal ) * texture2D( displacementMap, uv ).x;\n    #endif\n\n    vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\n    gl_Position = projectionMatrix * mvPosition;\n    // After projection gl_Position contains clip space coordinates of each vertex\n    // before perspective division (1 / w), thus only vertexes with -w < z < w should\n    // be displayed and offset. We offset only those edges which z coordinate in NDC\n    // space is between: -inf < z < 1\n    float depthOffset = step(-1.0, -gl_Position.z / gl_Position.w) * EDGE_DEPTH_OFFSET;\n    gl_Position.z -= depthOffset;\n\n    #ifdef USE_FADING\n    #include <fading_vertex>\n    #endif\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nvarying vec3 vColor;\n\n#ifdef USE_EXTRUSION\n#include <extrusion_pars_fragment>\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_fragment>\n#endif\n\nvoid main() {\n    float alphaValue = 1.0;\n    gl_FragColor = vec4(vColor, alphaValue);\n\n    #ifdef USE_EXTRUSION\n    #include <extrusion_fragment>\n    #endif\n\n    #ifdef USE_FADING\n    #include <fading_fragment>\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[EdgeMaterial]].\n */\nexport interface EdgeMaterialParameters\n    extends FadingFeatureParameters,\n        DisplacementFeatureParameters,\n        ExtrusionFeatureParameters {\n    /**\n     * Edge color.\n     */\n    color?: number | string;\n    /**\n     * Color mix value. Mixes between vertexColors and edgeColor.\n     */\n    colorMix?: number;\n}\n\n/**\n * Material designed to render the edges of extruded buildings using GL_LINES. It supports solid\n * colors, vertex colors, color mixing and distance fading.\n */\nexport class EdgeMaterial extends THREE.RawShaderMaterial\n    implements FadingFeature, ExtrusionFeature, DisplacementFeature {\n    static DEFAULT_COLOR: number = 0x000000;\n    static DEFAULT_COLOR_MIX: number = 0.0;\n\n    /**\n     * Constructs a new `EdgeMaterial`.\n     *\n     * @param params `EdgeMaterial` parameters.\n     */\n    constructor(params?: EdgeMaterialParameters) {\n        const defines: { [key: string]: any } = {};\n        const hasDisplacementMap = params !== undefined && params.displacementMap !== undefined;\n        const hasExtrusion =\n            params !== undefined &&\n            params.extrusionRatio !== undefined &&\n            params.extrusionRatio >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN &&\n            params.extrusionRatio < ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n        if (hasDisplacementMap) {\n            setShaderDefine(defines, \"USE_DISPLACEMENTMAP\", true);\n        }\n        if (hasExtrusion) {\n            setShaderDefine(defines, \"USE_EXTRUSION\", true);\n        }\n\n        const shaderParams = {\n            name: \"EdgeMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                edgeColor: new THREE.Uniform(new THREE.Color(EdgeMaterial.DEFAULT_COLOR)),\n                edgeColorMix: new THREE.Uniform(EdgeMaterial.DEFAULT_COLOR_MIX),\n                fadeNear: new THREE.Uniform(FadingFeature.DEFAULT_FADE_NEAR),\n                fadeFar: new THREE.Uniform(FadingFeature.DEFAULT_FADE_FAR),\n                extrusionRatio: new THREE.Uniform(ExtrusionFeatureDefs.DEFAULT_RATIO_MAX),\n                displacementMap: new THREE.Uniform(\n                    hasDisplacementMap ? params!.displacementMap : new THREE.Texture()\n                )\n            },\n            depthWrite: false,\n            defines\n        };\n        super(shaderParams);\n        enforceBlending(this);\n\n        FadingFeature.patchGlobalShaderChunks();\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                // Color may be set directly on object (omitting class setter), because we already\n                // know that is does no require any special handling nor material update\n                // (see: set color()).\n                this.color.set(params.color as any);\n            }\n            if (params.colorMix !== undefined) {\n                this.colorMix = params.colorMix;\n            }\n            if (params.fadeNear !== undefined) {\n                this.fadeNear = params.fadeNear;\n            }\n            if (params.fadeFar !== undefined) {\n                this.fadeFar = params.fadeFar;\n            }\n            if (params.displacementMap !== undefined) {\n                this.displacementMap = params.displacementMap;\n            }\n            if (params.extrusionRatio !== undefined) {\n                this.extrusionRatio = params.extrusionRatio;\n            }\n        }\n    }\n\n    /**\n     * Edge color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.edgeColor.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.edgeColor.value.copy(value);\n    }\n\n    /**\n     * Color mix value. Mixes between vertexColors and edgeColor.\n     */\n    get colorMix(): number {\n        return this.uniforms.edgeColorMix.value as number;\n    }\n    set colorMix(value: number) {\n        if (this.uniforms.edgeColorMix.value === value) {\n            return;\n        }\n        this.uniforms.edgeColorMix.value = value;\n        setShaderMaterialDefine(this, \"USE_COLOR\", value > 0.0);\n    }\n\n    get fadeNear(): number {\n        return this.uniforms.fadeNear.value as number;\n    }\n    set fadeNear(value: number) {\n        this.uniforms.fadeNear.value = value;\n    }\n\n    get fadeFar(): number {\n        return this.uniforms.fadeFar.value as number;\n    }\n    set fadeFar(value: number) {\n        if (this.uniforms.fadeFar.value === value) {\n            return;\n        }\n        this.uniforms.fadeFar.value = value;\n        setShaderMaterialDefine(this, \"USE_FADING\", value > 0.0);\n    }\n\n    get extrusionRatio(): number {\n        return this.uniforms.extrusionRatio.value as number;\n    }\n    set extrusionRatio(value: number) {\n        if (this.uniforms.extrusionRatio.value === value) {\n            return;\n        }\n        this.uniforms.extrusionRatio.value = value;\n        // NOTE: We could also disable shader extrusion chunks when it hits\n        // ExtrusionFeatureDefs.DEFAULT_RATIO_MAX value, but this would cause shader re-compile.\n        const useExtrusion = value >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN;\n        setShaderMaterialDefine(this, \"USE_EXTRUSION\", useExtrusion);\n    }\n\n    get displacementMap(): THREE.Texture | null {\n        return this.uniforms.displacementMap.value;\n    }\n\n    set displacementMap(map: THREE.Texture | null) {\n        if (this.uniforms.displacementMap.value === map) {\n            return;\n        }\n        this.uniforms.displacementMap.value = map;\n        const useDisplacementMap = map !== null;\n        if (useDisplacementMap) {\n            this.uniforms.displacementMap.value.needsUpdate = true;\n        }\n        setShaderMaterialDefine(this, \"USE_DISPLACEMENTMAP\", useDisplacementMap);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ExtrusionFeatureDefs } from \"../MapMeshMaterialsDefs\";\n\nconst MIN_BUILDING_HEIGHT_SQUARED =\n    ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT * ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT;\n\nexport default {\n    extrusion_pars_vertex: `\n// Extrusion axis (xyz: vector, w: factor).\nattribute vec4 extrusionAxis;\nuniform float extrusionRatio;\nvarying vec4 vExtrusionAxis;\n#ifdef ZFIGHTING_WORKAROUND\nvarying float vExtrusionRatio;\n#endif\n`,\n    extrusion_vertex: `\n#ifdef ZFIGHTING_WORKAROUND\n// Cancel extrusionRatio (meaning, force to 1) if extrusionAxisLen < MIN_BUILDING_HEIGHT.\nconst float MIN_BUILDING_HEIGHT_SQUARED = ${MIN_BUILDING_HEIGHT_SQUARED};\nfloat extrusionAxisLenSquared = dot(extrusionAxis.xyz, extrusionAxis.xyz);\nvExtrusionRatio = (extrusionAxisLenSquared < MIN_BUILDING_HEIGHT_SQUARED) ? 1.0 : extrusionRatio;\n#else\nfloat vExtrusionRatio = extrusionRatio;\n#endif\ntransformed = transformed + extrusionAxis.xyz * (vExtrusionRatio - 1.0);\nvExtrusionAxis = vec4(normalMatrix * extrusionAxis.xyz, extrusionAxis.w);\n`,\n    // Modified version of THREE <normal_fragment_begin> shader chunk which, for flat shaded\n    // geometries, computes the normal either with the extrusion axis or fragment derivatives based\n    // on the extrusion factor (1.0 = ceiling, 0.0 = footprint).\n    extrusion_normal_fragment_begin: `\n#ifdef FLAT_SHADED\n    // Flattened this divergent path to prevent undefined behaviour in the following derivatives\n    // functions. For more info:\n    // http://www.aclockworkberry.com/shader-derivative-functions/#Derivatives_and_branches\n\n    // Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...\n    vec3 fdx = vec3(dFdx(vViewPosition.x), dFdx(vViewPosition.y), dFdx(vViewPosition.z));\n    vec3 fdy = vec3(dFdy(vViewPosition.x), dFdy(vViewPosition.y), dFdy(vViewPosition.z));\n    vec3 normal = cross( fdx, fdy );\n    if (vExtrusionAxis.w > 0.999999) {\n        normal = vExtrusionAxis.xyz;\n    }\n    normal = normalize(normal);\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t\t\tbitangent = bitangent * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t\t#endif\n\t#endif\n#endif\n// non perturbed normal for clearcoat among others\nvec3 geometryNormal = normal;\n`,\n    extrusion_pars_fragment: `\n#ifdef ZFIGHTING_WORKAROUND\nvarying float vExtrusionRatio;\n#else\nuniform float extrusionRatio;\n#endif\nvarying vec4 vExtrusionAxis;\n`,\n    extrusion_fragment: `\n#ifndef ZFIGHTING_WORKAROUND\nfloat vExtrusionRatio = extrusionRatio;\n#endif\ngl_FragColor.a *= smoothstep( 0.0, 0.25, vExtrusionRatio );\n`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * The shader chunks have their lines \"#ifdef USE_FADING\" commented out, because currently the\n * mesh materials use individually created shader strings based on the materials settings.\n * @see [[FadingMeshBasicMaterial]]\n **/\n\nexport default {\n    fading_pars_vertex: `\nvarying float fadingDepth;\n`,\n\n    fading_vertex: `\nfadingDepth = -mvPosition.z;\n`,\n\n    fading_pars_fragment: `\nvarying float fadingDepth;\nuniform float fadeNear;\nuniform float fadeFar;\n`,\n\n    fading_fragment: `\n\n// lerp with \"hard\" edges\n//float fadingFactor = 1.0 - clamp((fadingDepth - fadeNear) / (fadeFar - fadeNear), 0.0, 1.0);\n\n// smooth transitions\nfloat fadingFactor = smoothstep( fadeNear, fadeFar, fadingDepth );\n\ngl_FragColor.a *= 1.0 - fadingFactor;\n\n// debugging color:\n// gl_FragColor = vec4(1., fadingFactor, fadingFactor, 1.0);\n`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport linesShaderChunk from \"./ShaderChunks/LinesChunks\";\n\nconst vertexSource: string = `\n#ifdef USE_COLOR\nattribute vec4 color;\nvarying vec3 vColor;\n#endif\n\n// uniforms to implement double-precision\nuniform mat4 u_mvp;             // combined modelView and projection matrix\nuniform vec3 u_eyepos;          // eye position major\nuniform vec3 u_eyepos_lowpart;  // eye position minor ((double) eyepos - (float) eyepos)\n\n// vertex attributes\nattribute vec3 position;        // high part\nattribute vec3 positionLow;     // low part\n\n#include <high_precision_vert_func>\n\nvoid main() {\n    #ifdef USE_COLOR\n    vColor = color.rgb;\n    #endif\n\n    vec3 pos = subtractDblEyePos(position);\n    gl_Position = u_mvp * vec4(pos, 1.0);\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifdef USE_COLOR\nvarying vec3 color;\n#endif\n\nvoid main() {\n    #ifdef USE_COLOR\n    gl_FragColor = vec4( diffuse * vColor, opacity );\n    #else\n    gl_FragColor = vec4( diffuse, opacity );\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[SolidLineMaterial]].\n */\nexport interface HighPrecisionLineMaterialParameters {\n    /**\n     * Line color.\n     */\n    color?: number | string | THREE.Color;\n    /**\n     * Line opacity.\n     */\n    opacity?: number;\n}\n\n/**\n * Material designed to render high precision lines (ideal for position-sensible data).\n */\nexport class HighPrecisionLineMaterial extends THREE.RawShaderMaterial {\n    static DEFAULT_COLOR: number = 0x000050;\n    static DEFAULT_OPACITY: number = 1.0;\n\n    isHighPrecisionLineMaterial: boolean;\n\n    /**\n     * Constructs a new `HighPrecisionLineMaterial`.\n     *\n     * @param params `HighPrecisionLineMaterial` parameters.\n     */\n    constructor(params?: HighPrecisionLineMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        const shaderParams = {\n            name: \"HighPrecisionLineMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                diffuse: new THREE.Uniform(\n                    new THREE.Color(HighPrecisionLineMaterial.DEFAULT_COLOR)\n                ),\n                opacity: new THREE.Uniform(HighPrecisionLineMaterial.DEFAULT_OPACITY),\n                u_mvp: new THREE.Uniform(new THREE.Matrix4()),\n                u_eyepos: new THREE.Uniform(new THREE.Vector3()),\n                u_eyepos_lowpart: new THREE.Uniform(new THREE.Vector3())\n            }\n        };\n        Object.assign(shaderParams, params);\n        super(shaderParams);\n\n        this.type = \"HighPrecisionLineMaterial\";\n        this.isHighPrecisionLineMaterial = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                this.color.set(params.color as any);\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n        }\n\n        this.updateTransparencyFeature();\n    }\n\n    /**\n     * Line color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.diffuse.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.diffuse.value.copy(value);\n    }\n\n    private updateTransparencyFeature() {\n        this.transparent = this.opacity < 1.0 ? true : false;\n    }\n}\n\nexport function isHighPrecisionLineMaterial(\n    material: object | undefined\n): material is HighPrecisionLineMaterial {\n    return (\n        material !== undefined &&\n        (material as HighPrecisionLineMaterial).isHighPrecisionLineMaterial === true\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport linesShaderChunk from \"./ShaderChunks/LinesChunks\";\n\nconst vertexSource: string = `\n#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif\n\nuniform float size;\n\n// uniforms to implement double-precision\nuniform mat4 u_mvp;             // combined modelView and projection matrix\nuniform vec3 u_eyepos;          // eye position major\nuniform vec3 u_eyepos_lowpart;  // eye position minor ((double) eyepos - (float) eyepos)\n\n// vertex attributes\nattribute vec3 positionLow;     // low part\n\n#include <high_precision_vert_func>\n\nvoid main() {\n    #ifdef USE_COLOR\n    vColor = color.rgb;\n    #endif\n\n    vec3 pos = subtractDblEyePos(position);\n    gl_Position = u_mvp * vec4(pos, 1.0);\n\n    // ignore sizeAttenuation for now!\n    gl_PointSize = size;\n}`;\n\n/**\n * Parameters used when constructing a new [[HighPrecisionPointMaterial]].\n */\nexport interface HighPrecisionPointMaterialParameters extends THREE.PointsMaterialParameters {\n    /**\n     * Point color.\n     */\n    color?: number | string | THREE.Color;\n    /**\n     * Point opacity.\n     */\n    opacity?: number;\n    /**\n     * Point scale.\n     */\n    scale?: number;\n    /**\n     * UV transformation matrix.\n     */\n    uvTransform?: THREE.Matrix3;\n}\n\n/**\n * Material designed to render high precision points (ideal for position-sensible data).\n */\nexport class HighPrecisionPointMaterial extends THREE.PointsMaterial {\n    static DEFAULT_COLOR: number = 0x000050;\n    static DEFAULT_OPACITY: number = 1.0;\n    static DEFAULT_SIZE: number = 1.0;\n    static DEFAULT_SCALE: number = 1.0;\n\n    isHighPrecisionPointMaterial: boolean;\n    uniforms: { [uniform: string]: THREE.IUniform };\n    vertexShader?: string;\n    fragmentShader?: string;\n\n    /**\n     * Constructs a new `HighPrecisionPointMaterial`.\n     *\n     * @param params `HighPrecisionPointMaterial` parameters.\n     */\n    constructor(params?: HighPrecisionPointMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        const shaderParams = params;\n        super(shaderParams);\n\n        this.type = \"HighPrecisionPointMaterial\";\n        this.vertexShader = vertexSource;\n        this.fragmentShader = THREE.ShaderChunk.points_frag;\n        this.fog = false;\n\n        this.uniforms = {\n            diffuse: new THREE.Uniform(new THREE.Color(HighPrecisionPointMaterial.DEFAULT_COLOR)),\n            opacity: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_OPACITY),\n            size: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_SIZE),\n            scale: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_SCALE),\n            map: new THREE.Uniform(new THREE.Texture()),\n            uvTransform: new THREE.Uniform(new THREE.Matrix3()),\n            u_mvp: new THREE.Uniform(new THREE.Matrix4()),\n            u_eyepos: new THREE.Uniform(new THREE.Vector3()),\n            u_eyepos_lowpart: new THREE.Uniform(new THREE.Vector3())\n        };\n\n        this.isHighPrecisionPointMaterial = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                this.color.set(params.color as any);\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n            if (params.size !== undefined) {\n                this.size = params.size;\n            }\n            if (params.scale !== undefined) {\n                this.scale = params.scale;\n            }\n            if (params.uvTransform !== undefined) {\n                this.uvTransform = params.uvTransform;\n            }\n            if (params.map !== undefined) {\n                this.map = params.map;\n            }\n        }\n    }\n\n    /**\n     *  Point scale.\n     */\n    get scale(): number {\n        return this.uniforms.scale.value;\n    }\n\n    set scale(value: number) {\n        this.uniforms.scale.value = value;\n    }\n\n    /**\n     * UV transformation matrix.\n     */\n    get uvTransform(): THREE.Matrix3 {\n        return this.uniforms.uvTransform.value;\n    }\n    set uvTransform(value: THREE.Matrix3) {\n        this.uniforms.uvTransform.value = value;\n    }\n}\n\nexport function isHighPrecisionPointMaterial(\n    material: object | undefined\n): material is HighPrecisionPointMaterial {\n    return (\n        material !== undefined &&\n        (material as HighPrecisionPointMaterial).isHighPrecisionPointMaterial === true\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst vertexSource: string = `\nattribute vec4 position;\nattribute vec4 color;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec4 vColor;\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    vColor = color;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform sampler2D map;\n\nvarying vec4 vColor;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(map, vUv.xy);\n    color *= vColor.a;\n    if (color.a < 0.05) {\n        discard;\n    }\n    gl_FragColor = color;\n}`;\n\n/**\n * Parameters used when constructing a new [[IconMaterial]].\n */\nexport interface IconMaterialParameters {\n    /**\n     * Texture map.\n     */\n    map: THREE.Texture;\n}\n\n/**\n * 2D material for icons, similar to [[TextMaterial]]. Uses component in texture coordinates to\n * apply opacity.\n */\nexport class IconMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Constructs a new `IconMaterial`.\n     *\n     * @param params `IconMaterial` parameters.\n     */\n    constructor(params: IconMaterialParameters) {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"IconMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                map: new THREE.Uniform(params.map)\n            },\n            depthTest: true,\n            depthWrite: true,\n            transparent: true,\n\n            vertexColors: true,\n            premultipliedAlpha: true,\n            blending: THREE.NormalBlending\n        };\n        super(shaderParams);\n    }\n\n    /**\n     * Icon texture map/atlas.\n     */\n    get map(): THREE.Texture {\n        return this.uniforms.map.value;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * The shader used in the [[UnrealBloomPass]] for the bloom/glow effect.\n */\nexport const LuminosityHighPassShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        luminosityThreshold: { value: 1.0 },\n        smoothWidth: { value: 1.0 },\n        defaultColor: { value: new THREE.Color(0x000000) },\n        defaultOpacity: { value: 0.0 }\n    },\n    vertexShader: `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }`,\n    fragmentShader: `\n    uniform sampler2D tDiffuse;\n    uniform vec3 defaultColor;\n    uniform float defaultOpacity;\n    uniform float luminosityThreshold;\n    uniform float smoothWidth;\n    varying vec2 vUv;\n    void main() {\n        vec4 texel = texture2D( tDiffuse, vUv );\n        vec3 luma = vec3( 0.299, 0.587, 0.114 );\n        float v = dot( texel.xyz, luma );\n        vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n        float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n        gl_FragColor = mix( outputColor, texel, alpha );\n    }`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport { CopyShader } from \"./CopyMaterial\";\n\n/**\n * The material to use for the quad of the [[MSAARenderPass]] in the composing.\n */\nexport class MSAAMaterial extends THREE.ShaderMaterial {\n    /**\n     * The constructor of `MSAAMaterial`.\n     *\n     * @param uniforms The [[CopyShader]]'s uniforms.\n     */\n    constructor(uniforms: { [uniformName: string]: THREE.IUniform }) {\n        super({\n            uniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            premultipliedAlpha: true,\n            transparent: true,\n            blending: THREE.AdditiveBlending,\n            depthTest: false,\n            depthWrite: false\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * `SepiaShader`.\n */\nexport const SepiaShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        amount: { value: 1.0 }\n    },\n    vertexShader: `\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }`,\n    fragmentShader: `\n        uniform float amount;\n        uniform sampler2D tDiffuse;\n        varying vec2 vUv;\n        void main() {\n            vec4 color = texture2D( tDiffuse, vUv );\n            vec3 c = color.rgb;\n            color.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );\n            color.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );\n            color.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );\n            gl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );\n        }`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LineCaps, LineDashes } from \"@here/harp-datasource-protocol\";\nimport * as THREE from \"three\";\nimport { DisplacementFeature, DisplacementFeatureParameters } from \"./DisplacementFeature\";\nimport { FadingFeature, FadingFeatureParameters } from \"./MapMeshMaterials\";\nimport linesShaderChunk, { LineCapsModes } from \"./ShaderChunks/LinesChunks\";\nimport {\n    enforceBlending,\n    getShaderMaterialDefine,\n    setShaderDefine,\n    setShaderMaterialDefine\n} from \"./Utils\";\n\nconst LineCapsDefinesMapping: { [key in LineCaps]: number } = {\n    None: LineCapsModes.CAPS_NONE,\n    Square: LineCapsModes.CAPS_SQUARE,\n    Round: LineCapsModes.CAPS_ROUND,\n    TriangleIn: LineCapsModes.CAPS_TRIANGLE_IN,\n    TriangleOut: LineCapsModes.CAPS_TRIANGLE_OUT\n};\n\nconst DefinesLineCapsMapping: { [key: number]: LineCaps } = Object.keys(\n    LineCapsDefinesMapping\n).reduce((r, lineCapsName) => {\n    const defineKey = lineCapsName as keyof typeof LineCapsDefinesMapping;\n    const defineValue: number = LineCapsDefinesMapping[defineKey];\n    r[defineValue] = defineKey;\n    return r;\n}, ({} as any) as { [key: number]: LineCaps });\n\nexport enum LineDashesModes {\n    DASHES_SQUARE = 0,\n    DASHES_ROUND,\n    DASHES_DIAMOND\n}\n\nconst LineDashesDefinesMapping: { [key in LineDashes]: number } = {\n    Square: LineDashesModes.DASHES_SQUARE,\n    Round: LineDashesModes.DASHES_ROUND,\n    Diamond: LineDashesModes.DASHES_DIAMOND\n};\n\nconst DefinesLineDashesMapping: { [key: number]: LineDashes } = Object.keys(\n    LineDashesDefinesMapping\n).reduce((r, lineDashesName) => {\n    const defineKey = lineDashesName as keyof typeof LineDashesDefinesMapping;\n    const defineValue: number = LineDashesDefinesMapping[defineKey];\n    r[defineValue] = defineKey;\n    return r;\n}, ({} as any) as { [key: number]: LineDashes });\n\n/**\n * The vLength contains the actual line length, it's needed for the creation of line caps by\n * detecting line ends. `vLength == vExtrusionCoord.x + lineWidth * 2`\n */\n/**\n * The vExtrusionStrength relies on the edges of the lines. Represents how far the current point was\n * extruded on the edges because of the current angle. Needed for preventing line caps artifacts on\n * sharp line edges. For example, on sharp edges, some vertices can be extruded much further than\n * the full line length.\n */\n\nconst tmpColor = new THREE.Color();\nconst vertexSource: string = `\n#define SEGMENT_OFFSET 0.1\n\nattribute vec3 extrusionCoord;\nattribute vec3 position;\nattribute vec4 bitangent;\nattribute vec3 tangent;\nattribute vec2 uv;\nattribute vec3 normal;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float extrusionWidth;\nuniform float outlineWidth;\nuniform vec2 drawRange;\n\n#ifdef USE_DISPLACEMENTMAP\nuniform sampler2D displacementMap;\n#endif\n\nvarying vec3 vPosition;\nvarying vec3 vRange;\nvarying vec4 vCoords;\n#ifdef USE_COLOR\nattribute vec3 color;\nvarying vec3 vColor;\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_vertex>\n#endif\n\n#include <fog_pars_vertex>\n\n#include <extrude_line_vert_func>\n\nvoid main() {\n    // Calculate the segment.\n    vec2 segment = abs(extrusionCoord.xy) - SEGMENT_OFFSET;\n    float segmentPos = sign(extrusionCoord.x) / 2.0 + 0.5;\n\n    // Calculate the vertex position inside the line (segment) and extrusion direction and factor.\n    float linePos = mix(segment.x, segment.y, segmentPos);\n    vec2 extrusionDir = sign(extrusionCoord.xy);\n    float extrusionFactor = extrusionDir.y * tan(bitangent.w / 2.0);\n\n    // Calculate the extruded vertex position (and scale the extrusion direction).\n    vec3 pos = extrudeLine(\n        position, linePos, extrusionWidth + outlineWidth, bitangent, tangent, extrusionDir);\n\n    // Store the normalized extrusion coordinates in vCoords (with their ranges in vRange).\n    vRange = vec3(extrusionCoord.z, extrusionWidth, extrusionFactor);\n    vCoords = vec4(extrusionDir / vRange.xy, segment / vRange.x);\n\n    // Adjust the segment to fit the drawRange.\n    float capDist = (extrusionWidth + outlineWidth) / extrusionCoord.z;\n    if ((vCoords.w + capDist) < drawRange.x || (vCoords.z - capDist) > drawRange.y) {\n        vCoords.zw += 1.0;\n    }\n    if (vCoords.z < drawRange.x) {\n        vCoords.zw += vec2(drawRange.x - vCoords.z, 0.0);\n    }\n    if (vCoords.w > drawRange.y) {\n        vCoords.zw -= vec2(0.0, vCoords.w - drawRange.y);\n    }\n\n    // Transform position.\n    #ifdef USE_DISPLACEMENTMAP\n    pos += normalize( normal ) * texture2D( displacementMap, uv ).x;\n    #endif\n    vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\n    gl_Position = projectionMatrix * mvPosition;\n\n    // Pass extruded position to fragment shader.\n    vPosition = pos;\n\n    #ifdef USE_COLOR\n    // Pass vertex color to fragment shader.\n    vColor = color;\n    #endif\n\n    #ifdef USE_FADING\n    #include <fading_vertex>\n    #endif\n\n    #include <fog_vertex>\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform vec3 diffuse;\nuniform vec3 outlineColor;\nuniform float opacity;\nuniform float extrusionWidth;\nuniform float outlineWidth;\nuniform vec2 tileSize;\nuniform vec2 drawRange;\n\n#ifdef USE_DASHED_LINE\nuniform float dashSize;\nuniform float gapSize;\nuniform vec3 dashColor;\n\n#define DASHES_SQUARE ${LineDashesModes.DASHES_SQUARE}\n#define DASHES_ROUND ${LineDashesModes.DASHES_ROUND}\n#define DASHES_DIAMOND ${LineDashesModes.DASHES_DIAMOND}\n#endif\n\nvarying vec3 vPosition;\nvarying vec3 vRange;\nvarying vec4 vCoords;\n#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif\n\n#include <round_edges_and_add_caps>\n#include <tile_clip_func>\n\n#ifdef USE_FADING\n#include <fading_pars_fragment>\n#endif\n\n#include <fog_pars_fragment>\n\nvoid main() {\n    float alpha = opacity;\n    vec3 outputDiffuse = diffuse;\n\n    #ifdef USE_TILE_CLIP\n    tileClip(vPosition.xy, tileSize);\n    #endif\n\n    // Calculate distance to center (0.0: lineCenter, 1.0: lineEdge).\n    float distToCenter = roundEdgesAndAddCaps(vCoords, vRange);\n    // Calculate distance to edge (-1.0: lineCenter, 0.0: lineEdge).\n    float distToEdge = distToCenter - (extrusionWidth + outlineWidth) / extrusionWidth;\n\n    // Decrease the line opacity by the distToEdge, making the transition steeper when the slope\n    // of distToChange increases (i.e. the line is further away).\n    float width = fwidth(distToEdge);\n    alpha *= (1.0 - smoothstep(-width, width, distToEdge));\n\n    #ifdef USE_DASHED_LINE\n    // Compute the distance to the dash origin (0.0: dashOrigin, 1.0: dashEnd, (d+g)/d: gapEnd).\n    float d = dashSize / vRange.x;\n    float g = gapSize / vRange.x;\n    float distToDashOrigin = mod(vCoords.x, d + g) / d;\n\n    // Compute distance to dash edge (0.5: dashCenter, 0.0: dashEdge) and compute the\n    // dashBlendFactor similarly on how we did it for the line opacity.\n    float distToDashEdge = 0.5 - distance(distToDashOrigin, (d + g) / d * 0.5);\n    #if DASHES_MODE == DASHES_ROUND\n    distToDashEdge = 0.5 - distance(vec2(distToCenter * 0.5, distToDashEdge), vec2(0.0, 0.5));\n    #elif DASHES_MODE == DASHES_DIAMOND\n    distToDashEdge -= distToCenter * 0.5;\n    #endif\n    float dashWidth = fwidth(distToDashEdge);\n    float dashBlendFactor = 1.0 - smoothstep(-dashWidth, dashWidth, distToDashEdge);\n\n    #ifdef USE_DASH_COLOR\n    outputDiffuse = mix(diffuse, dashColor, dashBlendFactor);\n    #endif\n    #endif\n\n    #ifdef USE_OUTLINE\n    // Calculate distance to outline (0.0: lineEdge, outlineWidth/lineWidth: outlineEdge) and\n    // compute the outlineBlendFactor (used to mix line and outline colors).\n    float distToOutline = distToCenter - 1.0;\n    float outlineWidth = fwidth(distToOutline);\n    float outlineBlendFactor = smoothstep(-outlineWidth, outlineWidth, distToOutline);\n\n    // Mix the colors using the different computed factors.\n    #if defined(USE_DASHED_LINE) && !defined(USE_DASH_COLOR)\n    float colorBlendFactor = smoothstep(-1.0, 1.0, dashBlendFactor - outlineBlendFactor);\n    outputDiffuse = mix(\n      mix(\n        mix(outlineColor, diffuse, colorBlendFactor),\n        outputDiffuse,\n        dashBlendFactor\n      ),\n      outlineColor,\n      outlineBlendFactor\n    );\n    #else\n    outputDiffuse = mix(outputDiffuse, outlineColor, outlineBlendFactor);\n    #endif\n    #endif\n\n    #if defined(USE_DASHED_LINE) && !defined(USE_DASH_COLOR)\n    // Multiply the alpha by the dashBlendFactor.\n    #if defined(USE_OUTLINE)\n    alpha *= clamp(dashBlendFactor + outlineBlendFactor, 0.0, 1.0);\n    #else\n    alpha *= 1.0 - dashBlendFactor;\n    #endif\n    #endif\n\n    #ifdef USE_COLOR\n    gl_FragColor = vec4( outputDiffuse * vColor, alpha );\n    #else\n    gl_FragColor = vec4( outputDiffuse, alpha );\n    #endif\n\n    #include <fog_fragment>\n\n    #ifdef USE_FADING\n    #include <fading_fragment>\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[SolidLineMaterial]].\n */\nexport interface SolidLineMaterialParameters\n    extends FadingFeatureParameters,\n        DisplacementFeatureParameters {\n    /**\n     * Line color.\n     */\n    color?: number | string;\n\n    /**\n     * Line outline color.\n     */\n    outlineColor?: number | string;\n\n    /**\n     * Enables/Disable depth test.\n     */\n    depthTest?: boolean;\n\n    /**\n     * Enables/Disable depth write.\n     */\n    depthWrite?: boolean;\n\n    /**\n     * `SolidLineMaterial` extends the ThreeJS `RawShaderMaterial` that does not update fog at\n     * runtime, so instead of recompiling everything we pass it in the constructor.\n     */\n    fog?: boolean;\n\n    /**\n     * Line width.\n     */\n    lineWidth?: number;\n\n    /**\n     * Outline width.\n     */\n    outlineWidth?: number;\n\n    /**\n     * Line opacity.\n     */\n    opacity?: number;\n\n    /**\n     * Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    caps?: LineCaps;\n\n    /**\n     * Describes the starting drawing position for the line (in the range [0...1]).\n     * Default is `0.0`.\n     */\n    drawRangeStart?: number;\n\n    /**\n     * Describes the ending drawing position for the line (in the range [0...1]).\n     * Default is `1.0`.\n     */\n    drawRangeEnd?: number;\n\n    /**\n     * Describes line dash type (`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\n     * Default is `\"Square\"`.\n     */\n    dashes?: LineDashes;\n\n    /**\n     * Line dashes color.\n     */\n    dashColor?: number | string;\n\n    /**\n     * Size of the dashed segments.\n     */\n    dashSize?: number;\n\n    /**\n     * Size of the gaps between dashed segments.\n     */\n    gapSize?: number;\n}\n\n/**\n * Material designed to render solid variable-width lines.\n */\nexport class SolidLineMaterial extends THREE.RawShaderMaterial\n    implements DisplacementFeature, FadingFeature {\n    static DEFAULT_COLOR: number = 0xff0000;\n    static DEFAULT_WIDTH: number = 1.0;\n    static DEFAULT_OUTLINE_WIDTH: number = 0.0;\n    static DEFAULT_OPACITY: number = 1.0;\n    static DEFAULT_DRAW_RANGE_START: number = 0.0;\n    static DEFAULT_DRAW_RANGE_END: number = 1.0;\n    static DEFAULT_DASH_SIZE: number = 1.0;\n    static DEFAULT_GAP_SIZE: number = 1.0;\n\n    /**\n     * @hidden\n     * Material properties overrides.\n     */\n    private m_fog: boolean;\n    private m_opacity: number;\n\n    /**\n     * Constructs a new `SolidLineMaterial`.\n     *\n     * @param params `SolidLineMaterial` parameters.\n     */\n    constructor(params?: SolidLineMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        // Setup default defines.\n        const defines: { [key: string]: any } = {\n            CAPS_MODE: LineCapsModes.CAPS_ROUND,\n            DASHES_MODE: LineDashesModes.DASHES_SQUARE\n        };\n\n        // Prepare defines based on params passed in, before super class c-tor, this ensures\n        // proper set for shader compilation, without need to re-compile.\n        let fogParam = true;\n        let opacityParam = 1.0;\n        let displacementMap;\n        if (params !== undefined) {\n            fogParam = params.fog === true;\n            if (fogParam) {\n                setShaderDefine(defines, \"USE_FOG\", true);\n            }\n            opacityParam = params.opacity !== undefined ? params.opacity : opacityParam;\n            displacementMap = params.displacementMap;\n            if (displacementMap !== undefined) {\n                setShaderDefine(defines, \"USE_DISPLACEMENTMAP\", true);\n            }\n            const hasOutline = params.outlineWidth !== undefined && params.outlineWidth > 0;\n            if (hasOutline) {\n                setShaderDefine(defines, \"USE_OUTLINE\", true);\n            }\n        }\n\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"SolidLineMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: THREE.UniformsUtils.merge([\n                {\n                    diffuse: new THREE.Uniform(new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)),\n                    dashColor: new THREE.Uniform(new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)),\n                    outlineColor: new THREE.Uniform(\n                        new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)\n                    ),\n                    extrusionWidth: new THREE.Uniform(SolidLineMaterial.DEFAULT_WIDTH),\n                    outlineWidth: new THREE.Uniform(SolidLineMaterial.DEFAULT_OUTLINE_WIDTH),\n                    opacity: new THREE.Uniform(SolidLineMaterial.DEFAULT_OPACITY),\n                    tileSize: new THREE.Uniform(new THREE.Vector2()),\n                    fadeNear: new THREE.Uniform(FadingFeature.DEFAULT_FADE_NEAR),\n                    fadeFar: new THREE.Uniform(FadingFeature.DEFAULT_FADE_FAR),\n                    displacementMap: new THREE.Uniform(\n                        displacementMap !== undefined ? displacementMap : new THREE.Texture()\n                    ),\n                    drawRange: new THREE.Uniform(\n                        new THREE.Vector2(\n                            SolidLineMaterial.DEFAULT_DRAW_RANGE_START,\n                            SolidLineMaterial.DEFAULT_DRAW_RANGE_END\n                        )\n                    ),\n                    dashSize: new THREE.Uniform(SolidLineMaterial.DEFAULT_DASH_SIZE),\n                    gapSize: new THREE.Uniform(SolidLineMaterial.DEFAULT_GAP_SIZE)\n                },\n                // We need the fog uniforms available when we use `fog` setter as the internal\n                // recompilation cannot add or remove uniforms.\n                THREE.UniformsLib.fog\n            ]),\n            defines,\n            // No need to pass overridden `fog` and `opacity` params they will be set\n            // after super c-tor call.\n            fog: fogParam,\n            opacity: opacityParam\n        };\n        super(shaderParams);\n        // Required to satisfy compiler error if fields has no initializer or are not definitely\n        // assigned in the constructor, this also mimics ShaderMaterial set of defaults\n        // for overridden props.\n        this.m_fog = fogParam;\n        this.m_opacity = opacityParam;\n\n        enforceBlending(this);\n        this.extensions.derivatives = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                tmpColor.set(params.color as any);\n                this.color = tmpColor;\n            }\n            if (params.outlineColor !== undefined) {\n                tmpColor.set(params.outlineColor as any);\n                this.outlineColor = tmpColor;\n            }\n            if (params.lineWidth !== undefined) {\n                this.lineWidth = params.lineWidth;\n            }\n            if (params.outlineWidth !== undefined) {\n                this.outlineWidth = params.outlineWidth;\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n            if (params.depthTest !== undefined) {\n                this.depthTest = params.depthTest;\n            }\n            if (params.depthWrite !== undefined) {\n                this.depthWrite = params.depthWrite;\n            }\n            if (params.fadeNear !== undefined) {\n                this.fadeNear = params.fadeNear;\n            }\n            if (params.fadeFar !== undefined) {\n                this.fadeFar = params.fadeFar;\n            }\n            if (params.displacementMap !== undefined) {\n                this.displacementMap = params.displacementMap;\n            }\n            if (params.caps !== undefined) {\n                this.caps = params.caps;\n            }\n            if (params.drawRangeStart !== undefined) {\n                this.drawRangeStart = params.drawRangeStart;\n            }\n            if (params.drawRangeEnd !== undefined) {\n                this.drawRangeEnd = params.drawRangeEnd;\n            }\n            if (params.dashes !== undefined) {\n                this.dashes = params.dashes;\n            }\n            if (params.dashColor !== undefined) {\n                tmpColor.set(params.dashColor as any);\n                this.dashColor = tmpColor;\n            }\n            if (params.dashSize !== undefined) {\n                this.dashSize = params.dashSize;\n            }\n            if (params.gapSize !== undefined) {\n                this.gapSize = params.gapSize;\n            }\n            if (params.fog !== undefined) {\n                this.fog = params.fog;\n            }\n        }\n        // ShaderMaterial overrides requires invalidation cause super c-tor may set this\n        // properties before related `defines` and `uniforms` were created.\n        this.invalidateFog();\n        this.invalidateOpacity();\n    }\n\n    /**\n     * Overrides THREE.Material.fog flag to add support for custom shader.\n     *\n     * @param enable Whether we want to enable the fog.\n     */\n    set fog(enable: boolean) {\n        this.m_fog = enable;\n        // Function may be called from THREE.js cause we override setter,\n        // in this case defines are not yet initialized and require late invalidation in\n        // SolidLineMaterial c-tor.\n        if (this.defines !== undefined) {\n            setShaderMaterialDefine(this, \"USE_FOG\", enable);\n        }\n    }\n\n    /**\n     * Checks if fog is enabled.\n     */\n    get fog(): boolean {\n        return this.m_fog && getShaderMaterialDefine(this, \"USE_FOG\") === true;\n    }\n\n    /**\n     * The method to call to recompile a material to enable/disable outline effect\n     *\n     * @param enable Whether we want to use outline.\n     */\n    set outline(enable: boolean) {\n        setShaderMaterialDefine(this, \"USE_OUTLINE\", enable);\n    }\n\n    /**\n     * Checks if outline is enabled.\n     */\n    get outline(): boolean {\n        return getShaderMaterialDefine(this, \"USE_OUTLINE\") === true;\n    }\n\n    /**\n     * Line opacity.\n     */\n    get opacity(): number {\n        return this.m_opacity;\n    }\n    set opacity(value: number) {\n        this.m_opacity = value;\n        // Setting opacity before uniform being created requires late invalidation,\n        // call to invalidateOpacity() is done at the end of c-tor.\n        if (this.uniforms !== undefined) {\n            this.uniforms.opacity.value = value;\n        }\n    }\n\n    /**\n     * Line color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.diffuse.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.diffuse.value.copy(value);\n    }\n\n    /**\n     * Outline color.\n     *\n     * @note The width of outline ([[outlineWidth]]) need to be also set to enable outlining.\n     */\n    get outlineColor(): THREE.Color {\n        return this.uniforms.outlineColor.value as THREE.Color;\n    }\n    set outlineColor(value: THREE.Color) {\n        this.uniforms.outlineColor.value.copy(value);\n    }\n\n    /**\n     * Dash color.\n     *\n     * @note The property [[gapSize]] need to be set to enable dashed line.\n     */\n    get dashColor(): THREE.Color {\n        return this.uniforms.dashColor.value as THREE.Color;\n    }\n    set dashColor(value: THREE.Color) {\n        this.uniforms.dashColor.value.copy(value);\n        setShaderMaterialDefine(this, \"USE_DASH_COLOR\", true);\n    }\n\n    /**\n     * Line width.\n     */\n    get lineWidth(): number {\n        return (this.uniforms.extrusionWidth.value as number) * 2;\n    }\n    set lineWidth(value: number) {\n        this.uniforms.extrusionWidth.value = value / 2;\n    }\n\n    /**\n     * Outline width.\n     */\n    get outlineWidth(): number {\n        return this.uniforms.outlineWidth.value as number;\n    }\n    set outlineWidth(value: number) {\n        this.uniforms.outlineWidth.value = value;\n        this.outline = value > 0.0;\n    }\n\n    /**\n     * Size of the dashed segments.\n     *\n     * @note Ths [[gapSize]] need to be also set to enable dashed line.\n     * @see gapSize.\n     */\n    get dashSize(): number {\n        return this.uniforms.dashSize.value as number;\n    }\n    set dashSize(value: number) {\n        this.uniforms.dashSize.value = value;\n    }\n\n    /**\n     * Size of the gaps between dashed segments.\n     *\n     * @note You may also need to set [[dashSize]].\n     * @see dashSize.\n     */\n    get gapSize(): number {\n        return this.uniforms.gapSize.value as number;\n    }\n    set gapSize(value: number) {\n        this.uniforms.gapSize.value = value;\n        setShaderMaterialDefine(this, \"USE_DASHED_LINE\", value > 0.0);\n    }\n\n    /**\n     * Caps mode.\n     */\n    get caps(): LineCaps {\n        let result: LineCaps = \"Round\";\n        const capsMode = getShaderMaterialDefine(this, \"CAPS_MODE\");\n        // Sanity check if material define is numerical and has direct mapping to LineCaps type.\n        if (typeof capsMode === \"number\" && DefinesLineCapsMapping.hasOwnProperty(capsMode)) {\n            result = DefinesLineCapsMapping[capsMode];\n        }\n        return result;\n    }\n    set caps(value: LineCaps) {\n        // Line caps mode may be set directly from theme, thus we need to check value\n        // for correctness and provide string to define mapping in fragment shader.\n        if (LineCapsDefinesMapping.hasOwnProperty(value)) {\n            setShaderMaterialDefine(this, \"CAPS_MODE\", LineCapsDefinesMapping[value]);\n        }\n    }\n\n    /**\n     * Dashes mode.\n     */\n    get dashes(): LineDashes {\n        let result: LineDashes = \"Square\";\n        const dashesMode = getShaderMaterialDefine(this, \"DASHES_MODE\");\n        // Sanity check if material define is numerical and has direct mapping to LineDashes type.\n        if (typeof dashesMode === \"number\" && DefinesLineDashesMapping.hasOwnProperty(dashesMode)) {\n            result = DefinesLineDashesMapping[dashesMode];\n        }\n        return result;\n    }\n    set dashes(value: LineDashes) {\n        // Line dashes mode may be set directly from theme, thus we need to check value\n        // for correctness and provide string to define mapping in fragment shader.\n        if (LineDashesDefinesMapping.hasOwnProperty(value)) {\n            setShaderMaterialDefine(this, \"DASHES_MODE\", LineDashesDefinesMapping[value]);\n        }\n    }\n\n    get fadeNear(): number {\n        return this.uniforms.fadeNear.value as number;\n    }\n    set fadeNear(value: number) {\n        this.uniforms.fadeNear.value = value;\n    }\n\n    get fadeFar(): number {\n        return this.uniforms.fadeFar.value as number;\n    }\n    set fadeFar(value: number) {\n        this.uniforms.fadeFar.value = value;\n        setShaderMaterialDefine(this, \"USE_FADING\", value > 0.0);\n    }\n\n    get displacementMap(): THREE.Texture | null {\n        return this.uniforms.displacementMap.value;\n    }\n    set displacementMap(map: THREE.Texture | null) {\n        if (this.uniforms.displacementMap.value === map) {\n            return;\n        }\n        this.uniforms.displacementMap.value = map;\n        const useDisplacementMap = map !== null;\n        if (useDisplacementMap) {\n            this.uniforms.displacementMap.value.needsUpdate = true;\n        }\n        setShaderMaterialDefine(this, \"USE_DISPLACEMENTMAP\", useDisplacementMap);\n    }\n\n    get drawRangeStart(): number {\n        return this.uniforms.drawRange.value.x as number;\n    }\n    set drawRangeStart(value: number) {\n        this.uniforms.drawRange.value.x = value;\n    }\n\n    get drawRangeEnd(): number {\n        return this.uniforms.drawRange.value.y as number;\n    }\n    set drawRangeEnd(value: number) {\n        this.uniforms.drawRange.value.y = value;\n    }\n\n    set clipTileSize(tileSize: THREE.Vector2) {\n        this.uniforms.tileSize.value.copy(tileSize);\n        const useTileClip = tileSize.x > 0 && tileSize.y > 0;\n        setShaderMaterialDefine(this, \"USE_TILE_CLIP\", useTileClip);\n    }\n    get clipTileSize(): THREE.Vector2 {\n        return this.uniforms.tileSize.value as THREE.Vector2;\n    }\n\n    private invalidateFog() {\n        if (this.m_fog !== getShaderMaterialDefine(this, \"USE_FOG\")) {\n            setShaderMaterialDefine(this, \"USE_FOG\", this.m_fog);\n        }\n    }\n\n    private invalidateOpacity() {\n        if (this.m_opacity !== this.uniforms.opacity.value) {\n            this.uniforms.opacity.value = this.m_opacity;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * `VignetteShader`.\n */\nexport const VignetteShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        offset: { value: 1.0 },\n        darkness: { value: 1.0 }\n    },\n    vertexShader: `\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }`,\n    fragmentShader: `\n        uniform float offset;\n        uniform float darkness;\n        uniform sampler2D tDiffuse;\n        varying vec2 vUv;\n        void main() {\n            vec4 texel = texture2D( tDiffuse, vUv );\n            vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\n            gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\n        }`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    Env,\n    Expr,\n    ExprScope,\n    ExprVisitor,\n    HasAttributeExpr,\n    LiteralExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    Value,\n    VarExpr\n} from \"./Expr\";\n\nimport { ArrayOperators } from \"./operators/ArrayOperators\";\nimport { CastOperators } from \"./operators/CastOperators\";\nimport { ColorOperators } from \"./operators/ColorOperators\";\nimport { ComparisonOperators } from \"./operators/ComparisonOperators\";\nimport { FeatureOperators } from \"./operators/FeatureOperators\";\nimport { FlowOperators } from \"./operators/FlowOperators\";\nimport { InterpolationOperators } from \"./operators/InterpolationOperators\";\nimport { MapOperators } from \"./operators/MapOperators\";\nimport { MathOperators } from \"./operators/MathOperators\";\nimport { MiscOperators } from \"./operators/MiscOperators\";\nimport { ObjectOperators } from \"./operators/ObjectOperators\";\nimport { StringOperators } from \"./operators/StringOperators\";\nimport { TypeOperators } from \"./operators/TypeOperators\";\n\nexport interface OperatorDescriptor {\n    /**\n     * Returns `true` if this operator requires a dynamic execution context (e.g. [\"zoom\"]).\n     */\n    isDynamicOperator?: (call: CallExpr) => boolean;\n\n    /**\n     * Evaluates the given expression.\n     */\n    call: (context: ExprEvaluatorContext, call: CallExpr) => Value;\n}\n\nexport interface OperatorDescriptorMap {\n    [name: string]: OperatorDescriptor;\n}\n\nconst operatorDescriptors = new Map<string, OperatorDescriptor>();\n\n/*\n * @hidden\n */\nexport class ExprEvaluatorContext {\n    private m_partialEvaluation = false;\n\n    constructor(\n        readonly evaluator: ExprEvaluator,\n        readonly env: Env,\n        readonly scope: ExprScope,\n        readonly cache?: Map<Expr, Value>\n    ) {}\n\n    /**\n     * `true` if the this context is used to partially evaluate expressions.\n     */\n    get partialEvaluation() {\n        return this.m_partialEvaluation;\n    }\n\n    /**\n     * Evaluate the given expression.\n     *\n     * @param expr The [[Expr]] to evaluate.\n     */\n    evaluate(expr: Expr | undefined) {\n        if (expr !== undefined) {\n            return expr.accept(this.evaluator, this);\n        }\n        throw new Error(\"Failed to evaluate expression\");\n    }\n\n    /**\n     * Partially evaluate the given expression.\n     *\n     * @param expr The [[Expr]] to evaluate.\n     */\n    partiallyEvaluate(expr: Expr | undefined): Expr {\n        if (expr === undefined) {\n            throw new Error(\"Failed to evaluate expression\");\n        }\n\n        const previousEvaluationMode = this.m_partialEvaluation;\n\n        this.m_partialEvaluation = true;\n\n        try {\n            const value = expr.accept(this.evaluator, this);\n\n            this.m_partialEvaluation = previousEvaluationMode;\n\n            if (value instanceof Expr) {\n                return value;\n            }\n\n            return LiteralExpr.fromValue(value);\n        } catch (error) {\n            // rethrow the exception\n            throw error;\n        } finally {\n            // reset the evaluation mode.\n            this.m_partialEvaluation = previousEvaluationMode;\n        }\n    }\n}\n\n/**\n * [[ExprEvaluator]] is used to evaluate [[Expr]] in a given environment.\n *\n * @hidden\n */\nexport class ExprEvaluator implements ExprVisitor<Value, ExprEvaluatorContext> {\n    static defineOperator(op: string, builtin: OperatorDescriptor) {\n        operatorDescriptors.set(op, builtin);\n    }\n\n    static defineOperators(builtins: OperatorDescriptorMap) {\n        Object.getOwnPropertyNames(builtins).forEach(p => {\n            this.defineOperator(p, builtins[p]);\n        });\n    }\n\n    /**\n     * Returns the [[OperatorDescriptor]] for the given operator name.\n     * @hidden\n     */\n    static getOperator(op: string): OperatorDescriptor | undefined {\n        return operatorDescriptors.get(op);\n    }\n\n    visitVarExpr(expr: VarExpr, context: ExprEvaluatorContext): Value {\n        const value = context.env.lookup(expr.name);\n        return value !== undefined ? value : null;\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: ExprEvaluatorContext): Value {\n        return null;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: ExprEvaluatorContext): Value {\n        return context.env.lookup(expr.name) !== undefined;\n    }\n\n    visitMatchExpr(match: MatchExpr, context: ExprEvaluatorContext): Value {\n        const r = context.evaluate(match.value);\n        for (const [label, body] of match.branches) {\n            if (Array.isArray(label) && (label as any[]).includes(r)) {\n                return context.evaluate(body);\n            } else if (label === r) {\n                return context.evaluate(body);\n            }\n        }\n        return context.evaluate(match.fallback);\n    }\n\n    visitCaseExpr(match: CaseExpr, context: ExprEvaluatorContext): Value {\n        for (const [condition, body] of match.branches) {\n            if (context.evaluate(condition)) {\n                return context.evaluate(body);\n            }\n        }\n        return context.evaluate(match.fallback);\n    }\n\n    visitCallExpr(expr: CallExpr, context: ExprEvaluatorContext): Value {\n        if (context.cache !== undefined) {\n            const v = context.cache.get(expr);\n            if (v !== undefined) {\n                return v;\n            }\n        }\n\n        const descriptor = expr.descriptor || operatorDescriptors.get(expr.op);\n\n        if (descriptor) {\n            expr.descriptor = descriptor;\n\n            const result = descriptor.call(context, expr);\n\n            if (context.cache) {\n                context.cache.set(expr, result);\n            }\n\n            return result;\n        }\n\n        throw new Error(`undefined operator '${expr.op}'`);\n    }\n}\n\nExprEvaluator.defineOperators(CastOperators);\nExprEvaluator.defineOperators(ComparisonOperators);\nExprEvaluator.defineOperators(MathOperators);\nExprEvaluator.defineOperators(StringOperators);\nExprEvaluator.defineOperators(ColorOperators);\nExprEvaluator.defineOperators(TypeOperators);\nExprEvaluator.defineOperators(MiscOperators);\nExprEvaluator.defineOperators(FlowOperators);\nExprEvaluator.defineOperators(ArrayOperators);\nExprEvaluator.defineOperators(InterpolationOperators);\nExprEvaluator.defineOperators(ObjectOperators);\nExprEvaluator.defineOperators(FeatureOperators);\nExprEvaluator.defineOperators(MapOperators);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    at: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const args = call.args;\n            const index = context.evaluate(args[0]);\n            if (typeof index !== \"number\") {\n                throw new Error(`expected the index of the element to retrieve`);\n            }\n            const value = context.evaluate(args[1]);\n            if (!Array.isArray(value)) {\n                throw new Error(`expected an array`);\n            }\n            return index >= 0 && index < value.length ? value[index] : null;\n        }\n    }\n};\n\nexport const ArrayOperators: OperatorDescriptorMap = operators;\nexport type ArrayOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"to-boolean\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Boolean(context.evaluate(call.args[0]));\n        }\n    },\n\n    \"to-string\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0]));\n        }\n    },\n\n    \"to-number\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const arg of call.args) {\n                const value = Number(context.evaluate(arg));\n                if (!isNaN(value)) {\n                    return value;\n                }\n            }\n            throw new Error(\"cannot convert the value to a number\");\n        }\n    }\n};\n\nexport const CastOperators: OperatorDescriptorMap = operators;\nexport type CastOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { ColorUtils } from \"../ColorUtils\";\nimport { CallExpr, Value } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\nimport { parseStringEncodedColor } from \"../StringEncodedNumeral\";\n\nconst operators = {\n    alpha: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            let color: Value | undefined = context.evaluate(call.args[0]);\n            if (typeof color === \"string\") {\n                color = parseStringEncodedColor(color);\n            }\n            const alpha = typeof color === \"number\" ? ColorUtils.getAlphaFromHex(color) : 1;\n            return alpha;\n        }\n    },\n    rgba: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const r = context.evaluate(call.args[0]);\n            const g = context.evaluate(call.args[1]);\n            const b = context.evaluate(call.args[2]);\n            const a = context.evaluate(call.args[3]);\n            if (\n                typeof r === \"number\" &&\n                typeof g === \"number\" &&\n                typeof b === \"number\" &&\n                typeof a === \"number\" &&\n                r >= 0 &&\n                g >= 0 &&\n                b >= 0 &&\n                a >= 0 &&\n                a <= 1\n            ) {\n                return rgbaToHex(r, g, b, a);\n            }\n            throw new Error(`unknown color 'rgba(${r},${g},${b},${a})'`);\n        }\n    },\n    rgb: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const r = context.evaluate(call.args[0]);\n            const g = context.evaluate(call.args[1]);\n            const b = context.evaluate(call.args[2]);\n            if (\n                typeof r === \"number\" &&\n                typeof g === \"number\" &&\n                typeof b === \"number\" &&\n                r >= 0 &&\n                g >= 0 &&\n                b >= 0\n            ) {\n                return rgbToHex(r, g, b);\n            }\n            throw new Error(`unknown color 'rgb(${r},${g},${b})'`);\n        }\n    },\n    // Hsl operator contains angle modulated to <0, 360> range, percent of\n    // saturation and lightness in <0, 100> range, i.e. hsl(360, 100, 100)\n    hsl: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const h = context.evaluate(call.args[0]);\n            const s = context.evaluate(call.args[1]);\n            const l = context.evaluate(call.args[2]);\n            if (\n                typeof h === \"number\" &&\n                typeof s === \"number\" &&\n                typeof l === \"number\" &&\n                h >= 0 &&\n                s >= 0 &&\n                l >= 0\n            ) {\n                return hslToHex(h, s, l);\n            }\n            throw new Error(`unknown color 'hsl(${h},${s}%,${l}%)'`);\n        }\n    }\n};\n\nfunction rgbaToHex(r: number, g: number, b: number, a: number): number {\n    // We decode rgba color channels using custom hex format with transparency.\n    return ColorUtils.getHexFromRgba(\n        THREE.MathUtils.clamp(r, 0, 255) / 255,\n        THREE.MathUtils.clamp(g, 0, 255) / 255,\n        THREE.MathUtils.clamp(b, 0, 255) / 255,\n        THREE.MathUtils.clamp(a, 0, 1)\n    );\n}\n\nfunction rgbToHex(r: number, g: number, b: number): number {\n    return ColorUtils.getHexFromRgb(\n        THREE.MathUtils.clamp(r, 0, 255) / 255,\n        THREE.MathUtils.clamp(g, 0, 255) / 255,\n        THREE.MathUtils.clamp(b, 0, 255) / 255\n    );\n}\n\nfunction hslToHex(h: number, s: number, l: number): number {\n    return ColorUtils.getHexFromHsl(\n        THREE.MathUtils.euclideanModulo(h, 360) / 360,\n        THREE.MathUtils.clamp(s, 0, 100) / 100,\n        THREE.MathUtils.clamp(l, 0, 100) / 100\n    );\n}\n\nexport const ColorOperators: OperatorDescriptorMap = operators;\nexport type ColorOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nfunction compare(context: ExprEvaluatorContext, call: CallExpr, strict: boolean = false) {\n    const left = context.evaluate(call.args[0]) as any;\n    const right = context.evaluate(call.args[1]) as any;\n\n    if (\n        !(\n            (typeof left === \"number\" && typeof right === \"number\") ||\n            (typeof left === \"string\" && typeof right === \"string\")\n        )\n    ) {\n        if (strict) {\n            throw new Error(`invalid operands '${left}' and '${right}' for operator '${call.op}'`);\n        }\n    }\n\n    switch (call.op) {\n        case \"<\":\n            return left < right;\n        case \">\":\n            return left > right;\n        case \"<=\":\n            return left <= right;\n        case \">=\":\n            return left >= right;\n        default:\n            throw new Error(`invalid comparison operator '${call.op}'`);\n    }\n}\n\nconst operators = {\n    \"!\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return !context.evaluate(call.args[0]);\n        }\n    },\n\n    \"==\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            return left === right;\n        }\n    },\n\n    \"!=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            return left !== right;\n        }\n    },\n\n    \"<\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \">\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \"<=\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \">=\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) }\n};\n\nexport const ComparisonOperators: OperatorDescriptorMap = operators;\nexport type ComparisonOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env } from \"../Env\";\nimport { CallExpr, ExprScope } from \"../Expr\";\n\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"geometry-type\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const geometryType = context.env.lookup(\"$geometryType\");\n            switch (geometryType) {\n                case \"point\":\n                    return \"Point\";\n                case \"line\":\n                    return \"LineString\";\n                case \"polygon\":\n                    return \"Polygon\";\n                default:\n                    return null;\n            }\n        }\n    },\n    \"feature-state\": {\n        isDynamicOperator: () => true,\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            if (context.scope !== ExprScope.Dynamic) {\n                throw new Error(\"feature-state cannot be used in this context\");\n            }\n            const property = context.evaluate(call.args[0]);\n            if (typeof property !== \"string\") {\n                throw new Error(`expected the name of the property of the feature state`);\n            }\n            const state = context.env.lookup(\"$state\");\n            if (Env.isEnv(state)) {\n                return state.lookup(property) ?? null;\n            } else if (state instanceof Map) {\n                return state.get(property) ?? null;\n            }\n            return null;\n        }\n    },\n    id: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return context.env.lookup(\"$id\") ?? null;\n        }\n    }\n};\n\nexport const FeatureOperators: OperatorDescriptorMap = operators;\nexport type FeatureOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, Expr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nfunction conditionalCast(context: ExprEvaluatorContext, type: string, args: Expr[]) {\n    switch (type) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n            for (const childExpr of args) {\n                const value = context.evaluate(childExpr);\n                if (typeof value === type) {\n                    return value;\n                }\n            }\n            throw new Error(`expected a '${type}'`);\n        default:\n            throw new Error(`invalid type '${type}'`);\n    } // switch\n}\n\nconst operators = {\n    all: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (!context.evaluate(childExpr)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    },\n\n    any: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (context.evaluate(childExpr)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    },\n\n    none: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (context.evaluate(childExpr)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    },\n\n    boolean: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"boolean\", call.args);\n        }\n    },\n\n    number: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"number\", call.args);\n        }\n    },\n\n    string: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"string\", call.args);\n        }\n    }\n};\n\nexport const FlowOperators: OperatorDescriptorMap = operators;\nexport type FlowOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, ExprScope, LiteralExpr, NumberLiteralExpr, Value } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\nimport {\n    createInterpolatedProperty,\n    evaluateInterpolatedProperty,\n    InterpolatedProperty\n} from \"../InterpolatedProperty\";\nimport { InterpolatedPropertyDefinition } from \"../InterpolatedPropertyDefs\";\n\ntype InterpolateCallExpr = CallExpr & {\n    _mode?: InterpolatedPropertyDefinition<any>[\"interpolation\"];\n    _exponent?: number;\n    _stops?: number[];\n    _interpolatedProperty?: InterpolatedProperty;\n};\n\n/**\n * Evaluates the given piecewise function.\n */\nfunction step(context: ExprEvaluatorContext, call: CallExpr) {\n    const { args } = call;\n\n    const value = context.evaluate(args[0]) as number;\n\n    if (value === null) {\n        // returns the default value of step.\n        return context.evaluate(args[1]);\n    }\n\n    if (typeof value !== \"number\") {\n        throw new Error(`the input of a 'step' operator must have type 'number'`);\n    }\n\n    let first = 1;\n    let last = args.length / 2 - 1;\n\n    while (first < last) {\n        // tslint:disable-next-line: no-bitwise\n        const mid = (first + last) >>> 1;\n        const stop = (args[mid * 2] as NumberLiteralExpr).value;\n\n        if (value < stop) {\n            last = mid - 1;\n        } else if (value > stop) {\n            first = mid + 1;\n        } else {\n            last = mid;\n        }\n    }\n\n    const result = args[first * 2];\n\n    if (!(result instanceof NumberLiteralExpr)) {\n        throw new Error(\"expected a numeric literal\");\n    }\n\n    const index = result.value <= value ? first : first - 1;\n\n    return context.evaluate(args[index * 2 + 1]);\n}\n\n/**\n * Prepare and validate the \"interpolate\" call.\n *\n * @param call An [[Expr]] representing an \"interpolate\" call.\n * @hidden\n */\nfunction prepareInterpolateCallExpr(call: InterpolateCallExpr) {\n    if (call._interpolatedProperty || call._mode !== undefined) {\n        return;\n    }\n\n    const interpolatorType = call.args[0];\n\n    if (!(interpolatorType instanceof CallExpr)) {\n        throw new Error(\"expected an interpolation type\");\n    }\n\n    let mode: InterpolatedPropertyDefinition<any>[\"interpolation\"];\n    let exponent: number | undefined;\n\n    if (interpolatorType.op === \"linear\") {\n        mode = \"Linear\";\n    } else if (interpolatorType.op === \"discrete\") {\n        mode = \"Discrete\";\n    } else if (interpolatorType.op === \"cubic\") {\n        mode = \"Cubic\";\n    } else if (interpolatorType.op === \"exponential\") {\n        mode = \"Exponential\";\n        const base = interpolatorType.args[0];\n        if (!(base instanceof NumberLiteralExpr)) {\n            throw new Error(\"expected the base of the exponential interpolation\");\n        }\n        exponent = base.value;\n    } else {\n        throw new Error(\"unrecognized interpolation type\");\n    }\n\n    const input = call.args[1];\n\n    if (!(input instanceof CallExpr)) {\n        throw new Error(\"expected the input of the interpolation\");\n    }\n\n    if (input.op !== \"zoom\") {\n        throw new Error(\"only 'zoom' is supported\");\n    }\n\n    if (call.args.length === 2 || call.args.length % 2) {\n        throw new Error(\"invalid number of samples\");\n    }\n\n    const stops: number[] = [];\n    const values: Value[] = [];\n\n    let isConstantInterpolation = true;\n\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i];\n\n        if (!(stop instanceof NumberLiteralExpr)) {\n            throw new Error(\"expected a numeric literal\");\n        }\n\n        if (stops.length > 0 && stop.value === stops[stops.length - 1]) {\n            stops[stops.length - 1] = stop.value - 0.0000001;\n        }\n\n        stops.push(stop.value);\n\n        if (isConstantInterpolation) {\n            const value = call.args[i + 1];\n\n            if (value instanceof LiteralExpr) {\n                values.push(value.value);\n            } else {\n                isConstantInterpolation = false;\n            }\n        }\n    }\n\n    if (isConstantInterpolation) {\n        const result = createInterpolatedProperty({\n            interpolation: mode,\n            exponent,\n            zoomLevels: stops,\n            values\n        });\n\n        if (!result) {\n            throw new Error(\"failed to create interpolation\");\n        }\n\n        call._interpolatedProperty = result;\n    } else {\n        call._mode = mode;\n        call._exponent = exponent;\n        call._stops = stops;\n    }\n}\n\ntype StepCallExpr = CallExpr & {\n    /**\n     * `true` if the input of `step` call is `[\"zoom\"], otherwise false.\n     */\n    _inputIsZoom?: boolean;\n\n    /**\n     * The stops when the a constant [[InterpolatedProperty]] cannot be\n     * created for this `[\"step\"]` call.\n     */\n    _stops?: number[];\n\n    /**\n     * The [[InterpolatedProperty]] representing this `step` call,\n     * otherwise `undefined` if an interpolated property cannot\n     * be created at parsing time (e.g. one if the value of the step is not a literal).\n     */\n    _interpolatedProperty?: InterpolatedProperty;\n};\n\n/**\n * Classify the given `step` call.\n *\n * This function checks the input of the `step` and ensures that the stops\n * are literals.\n *\n * @param call A call to `[\"step\", ...]`.\n * @hidden\n */\nfunction classifyStepCallExpr(call: StepCallExpr) {\n    if (call._inputIsZoom !== undefined) {\n        // nothing to do, the `call` was already classified.\n        return;\n    }\n\n    if (call.args[0] === undefined) {\n        throw new Error(\"expected the input of the 'step' operator\");\n    }\n\n    if (call.args.length < 3 || call.args.length % 2) {\n        throw new Error(\"not enough arguments\");\n    }\n\n    const input = call.args[0];\n\n    // tslint:disable-next-line: prefer-conditional-expression\n    if (input instanceof CallExpr && input.op === \"zoom\") {\n        call._inputIsZoom = true;\n    } else {\n        call._inputIsZoom = false;\n    }\n\n    // check that the stops are literals.\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i];\n        if (!(stop instanceof NumberLiteralExpr)) {\n            throw new Error(\"expected a numeric literal\");\n        }\n    }\n}\n\n/**\n * Prepares the given call for the dynamic exception.\n * This method collects the stops and\n *\n * @param call A call to `[\"step\", ...]`.\n * @hidden\n */\nfunction prepareStepCallExpr(call: StepCallExpr) {\n    if (call._stops || call._interpolatedProperty) {\n        // nothing to do, the `call` was already prepared for execution.\n        return;\n    }\n\n    // collect the stops of the step call.\n    const stops: number[] = [Number.MIN_SAFE_INTEGER];\n\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i] as NumberLiteralExpr;\n        stops.push(stop.value);\n    }\n\n    // collect the values of the step call.\n    const values: Value[] = [];\n    let hasConstantValues = true;\n\n    for (let i = 1; hasConstantValues && i < call.args.length; i += 2) {\n        const literal = call.args[i];\n        if (literal instanceof LiteralExpr) {\n            values.push(literal.value);\n        } else {\n            hasConstantValues = false;\n        }\n    }\n\n    if (hasConstantValues) {\n        // all the values of this zoom-based `step` are constant,\n        // create an interpolated property and store it together\n        // with the call.\n        const interpolatedProperty = createInterpolatedProperty({\n            interpolation: \"Discrete\",\n            zoomLevels: stops,\n            values\n        });\n\n        if (interpolatedProperty === undefined) {\n            throw new Error(\"failed to create interpolator\");\n        }\n\n        call._interpolatedProperty = interpolatedProperty;\n    } else {\n        // the values the `[\"step\"]` call are not constants,\n        // cache the `zoomLevels` to avoid recreating input `Array`\n        // when instantiating a new [[InterpolatedProperty]].\n        call._stops = stops;\n    }\n}\n\nconst operators = {\n    interpolate: {\n        isDynamicOperator: (call: CallExpr): boolean => {\n            return call.args[1] && call.args[1].isDynamic();\n        },\n        call: (context: ExprEvaluatorContext, call: InterpolateCallExpr): Value => {\n            prepareInterpolateCallExpr(call);\n\n            if (context.scope !== ExprScope.Dynamic) {\n                return call;\n            }\n\n            let interpolatedProperty = call._interpolatedProperty;\n\n            if (!interpolatedProperty) {\n                const values: Value[] = [];\n\n                for (let i = 2; i < call.args.length; i += 2) {\n                    const value = context.evaluate(call.args[i + 1]);\n                    values.push(value);\n                }\n\n                interpolatedProperty = createInterpolatedProperty({\n                    interpolation: call._mode!,\n                    exponent: call._exponent,\n                    zoomLevels: call._stops!,\n                    values\n                });\n\n                if (interpolatedProperty === undefined) {\n                    throw new Error(\"failed to create interpolator\");\n                }\n            }\n\n            return evaluateInterpolatedProperty(interpolatedProperty, context.env);\n        }\n    },\n    step: {\n        isDynamicOperator: (call: CallExpr): boolean => {\n            return call.args[0] && call.args[0].isDynamic();\n        },\n        call: (context: ExprEvaluatorContext, call: StepCallExpr): Value => {\n            classifyStepCallExpr(call);\n\n            if (context.scope === ExprScope.Value) {\n                return call;\n            }\n\n            if (context.scope === ExprScope.Condition || call._inputIsZoom === false) {\n                return step(context, call);\n            }\n\n            prepareStepCallExpr(call);\n\n            let interpolatedProperty = call._interpolatedProperty;\n\n            if (!interpolatedProperty) {\n                // the values of the interpolation are not literals,\n                // evaluate the sub expressions and combine them\n                // with the constant stops computed when preparing this call.\n                const values: Value[] = [];\n                for (let i = 1; i < call.args.length; i += 2) {\n                    const value = context.evaluate(call.args[i]);\n                    values.push(value);\n                }\n\n                interpolatedProperty = createInterpolatedProperty({\n                    interpolation: \"Discrete\",\n                    zoomLevels: call._stops!,\n                    values\n                });\n\n                if (interpolatedProperty === undefined) {\n                    throw new Error(\"failed to create interpolator\");\n                }\n            }\n\n            return evaluateInterpolatedProperty(interpolatedProperty, context.env);\n        }\n    }\n};\n\nexport const InterpolationOperators: OperatorDescriptorMap = operators;\nexport type InterpolationOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Interpolant } from \"three\";\n\nexport class ExponentialInterpolant extends Interpolant {\n    /**\n     * Exponent value. Defaults to `2.0`.\n     */\n    exponent: number = 2.0;\n\n    // Note: We need to disable linting here as tslint thinks this function is never used, though it\n    // indeed is called by ``Interpolant.evaluate(level)``.\n    // tslint:disable-next-line\n    private interpolate_(i1: number, t0: number, t: number, t1: number) {\n        const result = this.resultBuffer;\n        // TODO: Remove when Interpolant types are fixed.\n        const values = (this as any).sampleValues;\n        const stride = this.valueSize;\n        const offset1 = i1 * stride;\n        const offset0 = offset1 - stride;\n        const weight1 = Math.pow((t - t0) / (t1 - t0), this.exponent);\n        const weight0 = 1 - weight1;\n\n        for (let i = 0; i !== stride; ++i) {\n            result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, ExprScope, Value } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"ppi-scale\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            return value * scaleFactor;\n        }\n    },\n    \"world-ppi-scale\": {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const pixels = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            const zoom = context.env.lookup(\"$zoom\") as number;\n            const zoomWidth = Math.pow(2, 17) / Math.pow(2, zoom);\n            const v = pixels * zoomWidth * scaleFactor;\n            return v;\n        }\n    },\n    \"world-discrete-ppi-scale\": {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const pixels = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            const zoom = context.env.lookup(\"$zoom\") as number;\n            const zoomWidthDiscrete = Math.pow(2, 17.8) / Math.pow(2, Math.floor(zoom));\n            const v = pixels * zoomWidthDiscrete * scaleFactor;\n            return v;\n        }\n    },\n    ppi: {\n        call: (context: ExprEvaluatorContext) => {\n            const ppi = context.env.lookup(\"$ppi\");\n            if (typeof ppi === \"number\") {\n                return ppi;\n            }\n            return 72;\n        }\n    },\n    zoom: {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext): Value => {\n            if (context.scope === ExprScope.Condition) {\n                const zoom = context.env.lookup(\"$zoom\")!;\n                if (zoom !== undefined) {\n                    return zoom;\n                }\n                throw new Error(\"failed to get the zoom level.\");\n            }\n            // direct usages of 'zoom' outside technique filter conditions\n            // and interpolations are not allowed.\n            throw new Error(\"invalid usage of the 'zoom' operator.\");\n        }\n    }\n};\n\nexport const MapOperators: OperatorDescriptorMap = operators;\nexport type MapOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nimport * as THREE from \"three\";\n\nconst operators = {\n    \"^\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '^'`\n                );\n            }\n            return Math.pow(a, b);\n        }\n    },\n\n    \"-\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            if (call.args.length === 1) {\n                const value = context.evaluate(call.args[0]);\n                if (typeof value !== \"number\") {\n                    throw new Error(`ìnvalid operand '${typeof value} for operator '-'`);\n                }\n\n                return -value;\n            }\n\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '-'`\n                );\n            }\n            return a - b;\n        }\n    },\n\n    \"/\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '/'`\n                );\n            }\n            return a / b;\n        }\n    },\n\n    \"%\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '%'`\n                );\n            }\n            return a % b;\n        }\n    },\n\n    \"+\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return call.args.reduce((a, b) => Number(a) + Number(context.evaluate(b)), 0);\n        }\n    },\n\n    \"*\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return call.args.reduce((a, b) => Number(a) * Number(context.evaluate(b)), 1);\n        }\n    },\n\n    abs: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'abs'`);\n            }\n            return Math.abs(value);\n        }\n    },\n\n    acos: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'acos'`);\n            }\n            return Math.acos(value);\n        }\n    },\n\n    asin: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'asin'`);\n            }\n            return Math.asin(value);\n        }\n    },\n\n    atan: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'atan'`);\n            }\n            return Math.atan(value);\n        }\n    },\n\n    ceil: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ceil'`);\n            }\n            return Math.ceil(value);\n        }\n    },\n\n    cos: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'cos'`);\n            }\n            return Math.cos(value);\n        }\n    },\n\n    e: {\n        call: () => {\n            return Math.E;\n        }\n    },\n\n    floor: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'floor'`);\n            }\n            return Math.floor(value);\n        }\n    },\n\n    ln: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ln'`);\n            }\n            return Math.log(value);\n        }\n    },\n\n    ln2: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ln2'`);\n            }\n            return Math.log2(value);\n        }\n    },\n\n    log10: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'log10'`);\n            }\n            return Math.log10(value);\n        }\n    },\n\n    max: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Math.max(...call.args.map(v => Number(context.evaluate(v))));\n        }\n    },\n\n    min: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Math.min(...call.args.map(v => Number(context.evaluate(v))));\n        }\n    },\n\n    /**\n     * Clamp numeric value to given range, inclusive.\n     *\n     * Synopsis:\n     * ```\n     * [\"clamp\", v: number, min: number, max: number]`\n     * ```\n     */\n    clamp: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const v = context.evaluate(call.args[0]);\n            const min = context.evaluate(call.args[1]);\n            const max = context.evaluate(call.args[2]);\n\n            if (typeof v !== \"number\" || typeof min !== \"number\" || typeof max !== \"number\") {\n                throw new Error(`invalid operands '${v}', ${min}, ${max} for operator 'clamp'`);\n            }\n            return THREE.MathUtils.clamp(v, min, max);\n        }\n    },\n\n    pi: {\n        call: () => {\n            return Math.PI;\n        }\n    },\n\n    round: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'round'`);\n            }\n            return Math.round(value);\n        }\n    },\n\n    sin: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'sin'`);\n            }\n            return Math.sin(value);\n        }\n    },\n\n    sqrt: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'sqrt'`);\n            }\n            return Math.sqrt(value);\n        }\n    },\n\n    tan: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'tan'`);\n            }\n            return Math.tan(value);\n        }\n    }\n};\n\nexport const MathOperators: OperatorDescriptorMap = operators;\nexport type MathOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    length: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (Array.isArray(value) || typeof value === \"string\") {\n                return value.length;\n            }\n            throw new Error(`invalid operand '${value}' for operator 'length'`);\n        }\n    },\n    coalesce: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                const value = context.evaluate(childExpr);\n                if (value !== null) {\n                    return value;\n                }\n            }\n            return null;\n        }\n    }\n};\n\nexport const MiscOperators: OperatorDescriptorMap = operators;\nexport type MiscOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, Expr, ExprScope } from \"../Expr\";\n\nimport { Env } from \"../Env\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nenum LookupMode {\n    get,\n    has\n}\n\nfunction lookupMember(context: ExprEvaluatorContext, args: Expr[], lookupMode: LookupMode) {\n    const memberName = context.evaluate(args[0]);\n\n    if (typeof memberName !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n\n    const object = context.evaluate(args[1]) as any;\n\n    if (object && typeof object === \"object\") {\n        if (Env.isEnv(object)) {\n            const value = object.lookup(memberName) ?? null;\n            return lookupMode === LookupMode.get ? value : value !== null;\n        }\n        if (hasOwnProperty.call(object, memberName)) {\n            return lookupMode === LookupMode.get ? object[memberName] : true;\n        }\n    }\n\n    return lookupMode === LookupMode.get ? null : false;\n}\n\nconst operators = {\n    in: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            const object = context.evaluate(call.args[1]);\n            if (typeof value === \"string\" && typeof object === \"string\") {\n                return object.includes(value);\n            } else if (Array.isArray(object)) {\n                return object.includes(value);\n            }\n            return false;\n        }\n    },\n\n    get: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) =>\n            lookupMember(context, call.args, LookupMode.get)\n    },\n\n    has: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) =>\n            lookupMember(context, call.args, LookupMode.has)\n    },\n\n    \"dynamic-properties\": {\n        isDynamicOperator: () => true,\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            if (context.scope === ExprScope.Dynamic) {\n                return context.env;\n            }\n            return call;\n        }\n    }\n};\n\nexport const ObjectOperators: OperatorDescriptorMap = operators;\nexport type ObjectOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    concat: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return \"\".concat(...call.args.map(a => String(context.evaluate(a))));\n        }\n    },\n\n    downcase: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0])).toLocaleLowerCase();\n        }\n    },\n\n    upcase: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0])).toLocaleUpperCase();\n        }\n    },\n\n    \"~=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.indexOf(right) !== -1;\n            }\n            return false;\n        }\n    },\n\n    \"^=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.startsWith(right);\n            }\n            return false;\n        }\n    },\n\n    \"$=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.endsWith(right);\n            }\n            return false;\n        }\n    }\n};\n\nexport const StringOperators: OperatorDescriptorMap = operators;\nexport type StringOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    typeof: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return typeof context.evaluate(call.args[0]);\n        }\n    }\n};\n\nexport const TypeOperators: OperatorDescriptorMap = operators;\nexport type TypeOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    Expr,\n    ExprScope,\n    ExprVisitor,\n    HasAttributeExpr,\n    LiteralExpr,\n    MatchExpr,\n    MatchLabel,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\nimport { Env } from \"./Env\";\n\nexport interface InstantiationContext {\n    /**\n     * The [[Env]] used to lookup for names.\n     */\n    env: Env;\n\n    /**\n     * The names to preserve during the instantiation.\n     */\n    preserve?: Set<string>;\n}\n\nconst emptyEnv = new Env();\n\n/**\n * @hidden\n */\nexport class ExprInstantiator implements ExprVisitor<Expr, InstantiationContext> {\n    visitNullLiteralExpr(expr: NullLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, context: InstantiationContext): Expr {\n        if (context.preserve && context.preserve.has(expr.name)) {\n            return expr;\n        }\n        const value = context.env.lookup(expr.name);\n        return LiteralExpr.fromValue(value !== undefined ? value : null);\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: InstantiationContext): Expr {\n        if (context.preserve && context.preserve.has(expr.name)) {\n            return expr;\n        }\n        const value = context.env.lookup(expr.name) !== undefined;\n        return LiteralExpr.fromValue(value);\n    }\n\n    visitCallExpr(expr: CallExpr, context: InstantiationContext): Expr {\n        const args = expr.args.map(arg => arg.accept(this, context));\n        if (args.some((a, i) => a !== expr.args[i])) {\n            return new CallExpr(expr.op, args);\n        }\n        return expr;\n    }\n\n    visitMatchExpr(match: MatchExpr, context: InstantiationContext): Expr {\n        const value = match.value.accept(this, context);\n\n        if (value instanceof LiteralExpr) {\n            const r = value.value;\n            for (const [label, body] of match.branches) {\n                if (Array.isArray(label) && (label as any[]).includes(r)) {\n                    return body.accept(this, context);\n                } else if (label === r) {\n                    return body.accept(this, context);\n                }\n            }\n            return match.fallback.accept(this, context);\n        }\n\n        let changed = match.value !== value;\n\n        const branches: Array<[MatchLabel, Expr]> = match.branches.map(([label, branch]) => {\n            const newBranch = branch.accept(this, context);\n            if (newBranch !== branch) {\n                changed = true;\n            }\n            return [label, newBranch];\n        });\n\n        const fallback = match.fallback.accept(this, context);\n\n        if (fallback !== match.fallback) {\n            changed = true;\n        }\n\n        return changed ? new MatchExpr(value, branches, fallback) : match;\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: InstantiationContext): Expr {\n        const branches: Array<[Expr, Expr]> = [];\n\n        let changed = false;\n\n        for (const [condition, branch] of expr.branches) {\n            const newCondition = condition.accept(this, context);\n            const deps = newCondition.dependencies();\n            if (!condition.isDynamic() && deps.properties.size === 0) {\n                if (Boolean(newCondition.evaluate(emptyEnv, ExprScope.Condition))) {\n                    return branch.accept(this, context);\n                }\n            } else {\n                if (newCondition !== condition) {\n                    changed = true;\n                }\n                branches.push([newCondition, branch]);\n            }\n        }\n\n        if (branches.length === 0) {\n            // all the conditions of this CaseExpr evaluated\n            // to false, so the resulting of instantiating this CaseExpr\n            // is the same as instantiating its fallback expression.\n            return expr.fallback.accept(this, context);\n        }\n\n        if (branches.length !== expr.branches.length) {\n            // the number of branches changed, this means that\n            // some of the branches had constant expressions that\n            // evaluate to false. In this case the resulting\n            // `CaseExpr` has less branches.\n            changed = true;\n        }\n\n        // Instantiate the body of all the branches of this CaseExpr\n        // that have dynamic conditions.\n        branches.forEach(branch => {\n            const instantiatedBranch = branch[1].accept(this, context);\n\n            if (instantiatedBranch !== branch[1]) {\n                changed = true;\n            }\n\n            branch[1] = instantiatedBranch;\n        });\n\n        const fallback = expr.fallback.accept(this, context);\n\n        if (fallback !== expr.fallback) {\n            changed = true;\n        }\n\n        if (!changed) {\n            // nothing changed, return the old expression.\n            return expr;\n        }\n\n        return new CaseExpr(branches, fallback);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    CallExpr,\n    EqualityOp,\n    Expr,\n    HasAttributeExpr,\n    LiteralExpr,\n    NumberLiteralExpr,\n    RelationalOp,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\n/**\n * Character value\n */\nenum Character {\n    Tab = 9,\n    Lf = 10,\n    Cr = 13,\n    Space = 32,\n    LParen = 40,\n    RParen = 41,\n    Comma = 44,\n    Dot = 46,\n    LBracket = 91,\n    Backslash = 92,\n    RBracket = 93,\n    _0 = 48,\n    _9 = 57,\n    _ = 95,\n    A = 64,\n    Z = 90,\n    a = 97,\n    z = 122,\n    DoubleQuote = 34,\n    SingleQuote = 39,\n    Exclaim = 33,\n    Equal = 61,\n    Caret = 94,\n    Tilde = 126,\n    Dollar = 36,\n    Less = 60,\n    Greater = 62,\n    Bar = 124,\n    Amp = 38\n}\n\n/**\n * Check if a codepoint is a whitespace character.\n */\nfunction isSpace(codepoint: number): boolean {\n    switch (codepoint) {\n        case Character.Tab:\n        case Character.Lf:\n        case Character.Cr:\n        case Character.Space:\n            return true;\n        default:\n            return false;\n    } // switch\n}\n\n/**\n * Check if codepoint is a digit character.\n */\nfunction isNumber(codepoint: number): boolean {\n    return codepoint >= Character._0 && codepoint <= Character._9;\n}\n\n/**\n * Check if codepoint is a letter character.\n */\nfunction isLetter(codepoint: number): boolean {\n    return (\n        (codepoint >= Character.a && codepoint <= Character.z) ||\n        (codepoint >= Character.A && codepoint <= Character.Z)\n    );\n}\n\n/**\n * Check if codepoint is either a digit or a letter character.\n */\nfunction isLetterOrNumber(codepoint: number): boolean {\n    return isLetter(codepoint) || isNumber(codepoint);\n}\n\n/**\n * Check if codepoint is an identification character: underscore, dollar sign, dot or bracket.\n */\nfunction isIdentChar(codepoint: number): boolean {\n    return (\n        isLetterOrNumber(codepoint) ||\n        codepoint === Character._ ||\n        codepoint === Character.Dollar ||\n        codepoint === Character.Dot ||\n        codepoint === Character.LBracket ||\n        codepoint === Character.RBracket\n    );\n}\n\n/**\n * Tokens used in theme grammar.\n */\nenum Token {\n    Eof = 0,\n    Error,\n    Identifier,\n    Number,\n    String,\n    Comma,\n    LParen,\n    RParen,\n    LBracket,\n    RBracket,\n    Exclaim,\n    TildeEqual,\n    CaretEqual,\n    DollarEqual,\n    EqualEqual,\n    ExclaimEqual,\n    Less,\n    Greater,\n    LessEqual,\n    GreaterEqual,\n    BarBar,\n    AmpAmp\n}\n\n/**\n * Maps a token to its string name.\n */\nfunction tokenSpell(token: Token): string {\n    switch (token) {\n        case Token.Eof:\n            return \"eof\";\n        case Token.Error:\n            return \"error\";\n        case Token.Identifier:\n            return \"identifier\";\n        case Token.Number:\n            return \"number\";\n        case Token.String:\n            return \"string\";\n        case Token.Comma:\n            return \",\";\n        case Token.LParen:\n            return \"(\";\n        case Token.RParen:\n            return \")\";\n        case Token.LBracket:\n            return \"[\";\n        case Token.RBracket:\n            return \"]\";\n        case Token.Exclaim:\n            return \"!\";\n        case Token.TildeEqual:\n            return \"~=\";\n        case Token.CaretEqual:\n            return \"^=\";\n        case Token.DollarEqual:\n            return \"$=\";\n        case Token.EqualEqual:\n            return \"==\";\n        case Token.ExclaimEqual:\n            return \"!=\";\n        case Token.Less:\n            return \"<\";\n        case Token.Greater:\n            return \">\";\n        case Token.LessEqual:\n            return \"<=\";\n        case Token.GreaterEqual:\n            return \">=\";\n        case Token.BarBar:\n            return \"||\";\n        case Token.AmpAmp:\n            return \"&&\";\n        default:\n            throw new Error(`invalid token ${token}`);\n    }\n}\n\n/**\n * Lexer class implementation.\n */\nclass Lexer {\n    private m_token: Token = Token.Error;\n    private m_index = 0;\n    private m_char: number = Character.Lf;\n    private m_text?: string;\n\n    constructor(readonly code: string) {}\n\n    /**\n     * Single lexer token.\n     */\n    token(): Token {\n        return this.m_token;\n    }\n\n    /**\n     * Parsed text.\n     */\n    text(): string {\n        return this.m_text || \"\";\n    }\n\n    /**\n     * Go to the next token.\n     */\n    next(): Token {\n        this.m_token = this.yylex();\n        if (this.m_token === Token.Error) {\n            throw new Error(`unexpected character ${this.m_char}`);\n        }\n        return this.m_token;\n    }\n\n    private yyinp(): void {\n        this.m_char = this.code.codePointAt(this.m_index++) || 0;\n    }\n\n    private yylex(): Token {\n        this.m_text = undefined;\n        while (isSpace(this.m_char)) {\n            this.yyinp();\n        }\n        if (this.m_char === 0) {\n            return Token.Eof;\n        }\n        const ch = this.m_char;\n        this.yyinp();\n        switch (ch) {\n            case Character.LParen:\n                return Token.LParen;\n            case Character.RParen:\n                return Token.RParen;\n            case Character.LBracket:\n                return Token.LBracket;\n            case Character.RBracket:\n                return Token.RBracket;\n            case Character.Comma:\n                return Token.Comma;\n            case Character.SingleQuote:\n            case Character.DoubleQuote: {\n                const start = this.m_index - 1;\n                while (this.m_char && this.m_char !== ch) {\n                    // ### TODO handle escape sequences\n                    this.yyinp();\n                }\n                if (this.m_char !== ch) {\n                    throw new Error(\"Unfinished string literal\");\n                }\n                this.yyinp();\n                this.m_text = this.code.substring(start, this.m_index - 2);\n                return Token.String;\n            }\n            case Character.Exclaim:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.ExclaimEqual;\n                }\n                return Token.Exclaim;\n            case Character.Caret:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.CaretEqual;\n                }\n                return Token.Error;\n            case Character.Tilde:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.TildeEqual;\n                }\n                return Token.Error;\n            case Character.Equal:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.EqualEqual;\n                }\n                return Token.Error;\n            case Character.Less:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.LessEqual;\n                }\n                return Token.Less;\n            case Character.Greater:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.GreaterEqual;\n                }\n                return Token.Greater;\n            case Character.Bar:\n                if (this.m_char === Character.Bar) {\n                    this.yyinp();\n                    return Token.BarBar;\n                }\n                return Token.Error;\n            case Character.Amp:\n                if (this.m_char === Character.Amp) {\n                    this.yyinp();\n                    return Token.AmpAmp;\n                }\n                return Token.Error;\n            default: {\n                const start = this.m_index - 2;\n                if (\n                    isLetter(ch) ||\n                    ch === Character._ ||\n                    (ch === Character.Dollar && isIdentChar(this.m_char))\n                ) {\n                    while (isIdentChar(this.m_char)) {\n                        this.yyinp();\n                    }\n                    this.m_text = this.code.substring(start, this.m_index - 1);\n                    return Token.Identifier;\n                } else if (isNumber(ch)) {\n                    while (isNumber(this.m_char)) {\n                        this.yyinp();\n                    }\n                    if (this.m_char === Character.Dot) {\n                        this.yyinp();\n                        while (isNumber(this.m_char)) {\n                            this.yyinp();\n                        }\n                    }\n                    this.m_text = this.code.substring(start, this.m_index - 1);\n                    return Token.Number;\n                } else if (ch === Character.Dollar) {\n                    if (this.m_char === Character.Equal) {\n                        this.yyinp();\n                        return Token.DollarEqual;\n                    }\n                    return Token.Error;\n                }\n            }\n        }\n        return Token.Error;\n    }\n}\n\nfunction getEqualityOp(token: Token): EqualityOp | undefined {\n    switch (token) {\n        case Token.TildeEqual:\n            return \"~=\";\n        case Token.CaretEqual:\n            return \"^=\";\n        case Token.DollarEqual:\n            return \"$=\";\n        case Token.EqualEqual:\n            return \"==\";\n        case Token.ExclaimEqual:\n            return \"!=\";\n        default:\n            return undefined;\n    } // switch\n}\n\nfunction getRelationalOp(token: Token): RelationalOp | undefined {\n    switch (token) {\n        case Token.Less:\n            return \"<\";\n        case Token.Greater:\n            return \">\";\n        case Token.LessEqual:\n            return \"<=\";\n        case Token.GreaterEqual:\n            return \">=\";\n        default:\n            return undefined;\n    } // switch\n}\n\nexport class ExprParser {\n    private readonly lex: Lexer;\n\n    constructor(code: string) {\n        this.lex = new Lexer(code);\n        this.lex.next();\n    }\n\n    parse(): Expr | never {\n        return this.parseLogicalOr();\n    }\n\n    private yyexpect(token: Token): void | never {\n        if (this.lex.token() !== token) {\n            throw new Error(\n                `Syntax error: Expected token '${tokenSpell(token)}' but ` +\n                    `found '${tokenSpell(this.lex.token())}'`\n            );\n        }\n        this.lex.next();\n    }\n\n    private parsePrimary(): Expr | never {\n        switch (this.lex.token()) {\n            case Token.Identifier: {\n                const text = this.lex.text();\n                switch (text) {\n                    case \"has\":\n                        this.lex.next(); // skip has keyword\n                        this.yyexpect(Token.LParen);\n                        const hasAttribute = this.lex.text();\n                        this.yyexpect(Token.Identifier);\n                        this.yyexpect(Token.RParen);\n                        return new HasAttributeExpr(hasAttribute);\n                    case \"length\":\n                        this.lex.next(); // skip length keyword\n                        this.yyexpect(Token.LParen);\n                        const value = this.parseLogicalOr();\n                        this.yyexpect(Token.RParen);\n                        return new CallExpr(\"length\", [value]);\n                    default:\n                        const expr = new VarExpr(text);\n                        this.lex.next();\n                        return expr;\n                }\n            }\n\n            case Token.LParen: {\n                this.lex.next();\n                const expr = this.parseLogicalOr();\n                this.yyexpect(Token.RParen);\n                return expr;\n            }\n\n            default:\n                return this.parseLiteral();\n        } // switch\n    }\n\n    private parseLiteral(): NumberLiteralExpr | StringLiteralExpr | never {\n        switch (this.lex.token()) {\n            case Token.Number: {\n                const expr = new NumberLiteralExpr(parseFloat(this.lex.text()));\n                this.lex.next();\n                return expr;\n            }\n            case Token.String: {\n                const expr = new StringLiteralExpr(this.lex.text());\n                this.lex.next();\n                return expr;\n            }\n            default:\n                throw new Error(\"Syntax error\");\n        } // switch\n    }\n\n    private parseUnary(): Expr | never {\n        if (this.lex.token() === Token.Exclaim) {\n            this.lex.next();\n            return new CallExpr(\"!\", [this.parseUnary()]);\n        }\n        return this.parsePrimary();\n    }\n\n    private parseRelational(): Expr | never {\n        let expr = this.parseUnary();\n        while (true) {\n            if (this.lex.token() === Token.Identifier && this.lex.text() === \"in\") {\n                this.lex.next();\n                this.yyexpect(Token.LBracket);\n                const elements = [this.parseLiteral()];\n                while (this.lex.token() === Token.Comma) {\n                    this.lex.next();\n                    elements.push(this.parseLiteral());\n                }\n                this.yyexpect(Token.RBracket);\n                expr = new CallExpr(\"in\", [\n                    expr,\n                    LiteralExpr.fromValue(elements.map(({ value }) => value))\n                ]);\n            } else {\n                const op = getRelationalOp(this.lex.token());\n                if (op === undefined) {\n                    break;\n                }\n                this.lex.next();\n                const right = this.parseUnary();\n                expr = new CallExpr(op, [expr, right]);\n            }\n        }\n        return expr;\n    }\n\n    private parseEquality(): Expr | never {\n        let expr = this.parseRelational();\n        while (true) {\n            let op: string | undefined = getEqualityOp(this.lex.token());\n\n            if (op === undefined) {\n                break;\n            }\n\n            if (op === \"~=\") {\n                op = \"in\";\n            }\n\n            this.lex.next();\n            const right = this.parseRelational();\n            expr = new CallExpr(op, [expr, right]);\n        }\n        return expr;\n    }\n\n    private parseLogicalAnd(): Expr | never {\n        const expr = this.parseEquality();\n\n        if (this.lex.token() !== Token.AmpAmp) {\n            return expr;\n        }\n\n        const expressions: Expr[] = [expr];\n\n        do {\n            this.lex.next();\n            expressions.push(this.parseEquality());\n        } while (this.lex.token() === Token.AmpAmp);\n\n        return new CallExpr(\"all\", expressions);\n    }\n\n    private parseLogicalOr(): Expr | never {\n        const expr = this.parseLogicalAnd();\n\n        if (this.lex.token() !== Token.BarBar) {\n            return expr;\n        }\n\n        const expressions: Expr[] = [expr];\n\n        do {\n            this.lex.next();\n            expressions.push(this.parseLogicalAnd());\n        } while (this.lex.token() === Token.BarBar);\n\n        return new CallExpr(\"any\", expressions);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Common communication protocol for [[WorkerService]].\n */\nexport namespace WorkerServiceProtocol {\n    /**\n     * Service id of worker manager ([[WorkerServiceManager]]) used to create/destroy service\n     * instances in workers.\n     */\n    export const WORKER_SERVICE_MANAGER_SERVICE_ID = \"worker-service-manager\";\n\n    /**\n     * Define possible names of messages exchanged with services within `WebWorker`.\n     */\n    export enum ServiceMessageName {\n        Initialized = \"initialized\",\n        Request = \"request\",\n        Response = \"response\"\n    }\n\n    /**\n     * Interface for `ServiceMessage` which describes metadata for a service messages.\n     */\n    export interface ServiceMessage {\n        service: string;\n        type: ServiceMessageName;\n    }\n\n    /**\n     * This message is sent by the worker to the main thread. No data is sent. Receiving this\n     * message confirms that the worker has started successfully.\n     */\n    export interface InitializedMessage extends ServiceMessage {\n        type: ServiceMessageName.Initialized;\n    }\n\n    /**\n     * Type guard to check if an object is a signal message from worker.\n     */\n    export function isInitializedMessage(message: any): message is InitializedMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Initialized\n        );\n    }\n\n    /**\n     * Define possible names of requests called on services within `WebWorker`.\n     */\n    export enum Requests {\n        CreateService = \"create-service\",\n        DestroyService = \"destroy-service\"\n    }\n\n    /**\n     * This is an internal general interface used in communication with workers.\n     * Check [[ConcurrentWorkerSet]]'s invokeRequest function for exemplary usage.\n     */\n    export interface ServiceRequest {\n        type: string;\n    }\n\n    /**\n     * This message is sent by the main thread to [[WorkerServiceManager]] to dynamically create a\n     * new service.\n     *\n     * May throw `UnknownServiceError` if service of given type is not registered in\n     * [[WorkerServiceManager]], see [[isUnknownServiceError]].\n     */\n    export interface CreateServiceRequest extends ServiceRequest {\n        type: Requests.CreateService;\n\n        /**\n         * Type of service to be created.\n         *\n         * @see [[WorkerServiceManager.register]]\n         */\n        targetServiceType: string;\n\n        /**\n         * The newly created service instance will be available under this id.\n         */\n        targetServiceId: string;\n    }\n\n    /**\n     * Test if `error` thrown by [[CreateServiceRequest]] was caused by unknown type of service.\n     */\n    export function isUnknownServiceError(error: Error): boolean {\n        return /unknown targetServiceType requested: /.test(error.message);\n    }\n\n    /**\n     * This message is sent by the main thread to [[WorkerServiceManager]] to dynamically destroy a\n     * service.\n     */\n    export interface DestroyServiceRequest extends ServiceRequest {\n        type: Requests.DestroyService;\n\n        /**\n         * Id of service to be destroyed.\n         */\n        targetServiceId: string;\n    }\n\n    /**\n     * Possible service management messages (`CreateService` or `DestroyService`) sent to WebWorker.\n     */\n    export type WorkerServiceManagerRequest = CreateServiceRequest | DestroyServiceRequest;\n\n    /**\n     * This message is a part of the Request-Response scheme implemented to be used in communication\n     * between workers and the decoder.\n     */\n    export interface RequestMessage extends ServiceMessage {\n        type: ServiceMessageName.Request;\n        messageId: number;\n        request: any;\n    }\n\n    /**\n     * Type guard to check if an object is a request message sent to a worker.\n     */\n    export function isRequestMessage(message: any): message is RequestMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Request\n        );\n    }\n\n    /**\n     * This message is a part of the Request-Response scheme implemented to be used in communication\n     * between workers and the decoder.\n     */\n    export interface ResponseMessage extends ServiceMessage {\n        type: ServiceMessageName.Response;\n        messageId: number;\n        errorMessage?: string;\n        errorStack?: string;\n        response?: object;\n    }\n\n    /**\n     * Type guard to check if an object is a request message sent to a worker.\n     */\n    export function isResponseMessage(message: any): message is ResponseMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Response\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoJson } from \"../lib/GeoJsonDataType\";\nimport { WorkerServiceProtocol } from \"./WorkerServiceProtocol\";\n\n/**\n * Communication protocol with [[ITiler]].\n */\nexport namespace WorkerTilerProtocol {\n    /**\n     * Define possible names of requests called on tiler services within `WebWorker`.\n     */\n    export enum Requests {\n        RegisterIndex = \"register-index\",\n        UpdateIndex = \"update-index\",\n        TileRequest = \"tile-request\"\n    }\n\n    /**\n     * This object is sent to the tiler to register a new tile index in the worker.\n     */\n    export interface RegisterIndexRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.RegisterIndex;\n        id: string;\n        input: string | GeoJson;\n    }\n\n    /**\n     * Type guard to check if an object is an index registration request sent to a worker.\n     */\n    export function isRegisterIndexRequest(message: any): message is RegisterIndexRequest {\n        return (\n            message && typeof message.type === \"string\" && message.type === Requests.RegisterIndex\n        );\n    }\n\n    /**\n     * This object is sent to the tiler to register a new tile index in the worker.\n     */\n    export interface UpdateIndexRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.UpdateIndex;\n        id: string;\n        input: string | GeoJson;\n    }\n\n    /**\n     * Type guard to check if an object is an update request for the index registration.\n     */\n    export function isUpdateIndexRequest(message: any): message is UpdateIndexRequest {\n        return message && typeof message.type === \"string\" && message.type === Requests.UpdateIndex;\n    }\n\n    /**\n     * This object is sent to the tiler asking to retrieve a specific tile. The expected response\n     * type is an object containing a tiled payload.\n     */\n    export interface TileRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.TileRequest;\n        index: string;\n        tileKey: number;\n    }\n\n    /**\n     * Type guard to check if an object is a tile request sent to a worker.\n     */\n    export function isTileRequest(message: any): message is TileRequest {\n        return message && typeof message.type === \"string\" && message.type === Requests.TileRequest;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Definitions, StyleSet } from \"./Theme\";\nimport { WorkerServiceProtocol } from \"./WorkerServiceProtocol\";\n\n/**\n * Interface for `OptionsMap` which describes a general structure of key-value pairs.\n */\nexport interface OptionsMap {\n    [name: string]: any;\n}\n\n/**\n * Allows to cancel and prioritize requests inside the requestQueue. Useful to optimize the order of\n * decoding tiles during animations and camera movements.\n *\n * `RequestController` is not extending [[AbortController]], because this is not supported in ES5.\n */\nexport class RequestController implements AbortController {\n    /**\n     * Creates an instance of `RequestController`.\n     *\n     * @param {number} priority\n     * @param {AbortController} abortController Optional [[AbortController]] used internally, since\n     *      [[AbortController]]s should not be subclassed.\n     */\n    constructor(\n        public priority: number = 0,\n        public abortController: AbortController = new AbortController()\n    ) {}\n\n    get signal(): AbortSignal {\n        return this.abortController.signal;\n    }\n\n    /**\n     * Invoking this method will set this object's AbortSignal's aborted flag and\n     * signal to any observers that the associated activity is to be aborted.\n     */\n    abort(): void {\n        this.abortController.abort();\n    }\n}\n\n/**\n * Communication protocol with [[ITileDecoder]].\n */\nexport namespace WorkerDecoderProtocol {\n    /**\n     * Define possible names of messages exchanged with decoder services within `WebWorker`.\n     */\n    export enum DecoderMessageName {\n        Configuration = \"configuration\"\n    }\n\n    /**\n     * Interface for `DecodedTileMessage` which describes metadata for a decoded tile.\n     */\n    export interface DecoderMessage {\n        service: string;\n        type: DecoderMessageName;\n    }\n\n    /**\n     * Interface for a ConfigurationMessage that is sent from the datasource to the decoder. The\n     * message used to configure the [[ITileDecoder]].\n     */\n    export interface ConfigurationMessage extends DecoderMessage {\n        type: DecoderMessageName.Configuration;\n        styleSet?: StyleSet;\n        definitions?: Definitions;\n        options?: OptionsMap;\n        languages?: string[];\n    }\n\n    /**\n     * Type guard to check if an object is an instance of `ConfigurationMessage`.\n     */\n    export function isConfigurationMessage(message: any): message is ConfigurationMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === DecoderMessageName.Configuration\n        );\n    }\n\n    /**\n     * Define possible names of requests called on decoder services within `WebWorker`.\n     */\n    export enum Requests {\n        DecodeTileRequest = \"decode-tile-request\",\n        TileInfoRequest = \"tile-info-request\"\n    }\n\n    /**\n     * This object is sent to the decoder asking to decode a specific tile. The expected response\n     * type is a [[DecodedTile]].\n     */\n    export interface DecodeTileRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.DecodeTileRequest;\n        tileKey: number;\n        data: ArrayBufferLike;\n        projection: string;\n    }\n\n    /**\n     * Type guard to check if an object is a decoded tile object sent to a worker.\n     */\n    export function isDecodeTileRequest(message: any): message is DecodeTileRequest {\n        return (\n            message &&\n            typeof message.type === \"string\" &&\n            message.type === Requests.DecodeTileRequest\n        );\n    }\n\n    /**\n     * This object is sent to the decoder asking for a tile info of a specific tile. The expected\n     * response type is a [[DecodedTile]].\n     */\n    export interface TileInfoRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.TileInfoRequest;\n        tileKey: number;\n        data: ArrayBufferLike;\n        projection: string;\n    }\n\n    /**\n     * Type guard to check if an object is an info tile object sent to a worker.\n     */\n    export function isTileInfoRequest(message: any): message is TileInfoRequest {\n        return (\n            message && typeof message.type === \"string\" && message.type === Requests.TileInfoRequest\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\n\nimport { Env, MapEnv, Value } from \"./Expr\";\nimport { makeDecodedTechnique } from \"./StyleSetEvaluator\";\nimport { AttrEvaluationContext, evaluateTechniqueAttr } from \"./TechniqueAttr\";\nimport {\n    IndexedTechnique,\n    isLineMarkerTechnique,\n    isPoiTechnique,\n    isTextTechnique,\n    Technique\n} from \"./Techniques\";\n\n/**\n * Defines a map tile metadata.\n */\nexport interface TileInfo {\n    readonly tileKey: TileKey;\n    readonly setupTime: number;\n    readonly transferList?: ArrayBuffer[];\n    readonly numBytes: number;\n}\n\n/**\n * Represents a feature group type for tile info.\n */\nexport enum FeatureGroupType {\n    Point,\n    Line,\n    Polygon\n}\n\n/**\n * Minimum estimated size of a JS object.\n */\nconst MINIMUM_OBJECT_SIZE_ESTIMATION = 100;\n\n/**\n * Structure of arrays containing data for all features of this group. No methods, since the object\n * is being passed as part of ExtendedTileInfo across \"process boundaries\" to the web worker.\n *\n * Supporting methods in namespace [[ExtendedTileInfo]].\n */\nexport class FeatureGroup {\n    /** featureIds */\n    featureIds: Array<number | undefined> = new Array<number | undefined>();\n\n    /** Indices into [[ExtendedTileInfo]].techniqueCatalog */\n    techniqueIndex: number[];\n\n    /** Indices into [[ExtendedTileInfo]].textCatalog. */\n    textIndex: number[];\n\n    /** Indices into positions. */\n    positionIndex: number[];\n\n    /** XY coordinates of this group. */\n    positions: number[];\n\n    /** number of features */\n    numFeatures: number = 0;\n\n    /** number of positions of elements (2 per point) */\n    numPositions: number = 0;\n\n    /**\n     * Optional indices into [[ExtendedTileInfo]].layerCatalog. Only available if\n     * [[OmvFeatureGroup]] has been constructed with `storeExtendedTags` set to `true`.\n     */\n    layerIndex?: number[];\n\n    /**\n     * Optional indices into [[ExtendedTileInfo]].classCatalog. Only available if\n     * [[OmvFeatureGroup]] has been constructed with `storeExtendedTags` set to `true`.\n     */\n    classIndex?: number[];\n\n    /**\n     * Optional indices into [[ExtendedTileInfo]].typeCatalog. Only available if [[OmvFeatureGroup]]\n     * has been constructed with `storeExtendedTags` set to `true`.\n     */\n    typeIndex?: number[];\n\n    /**\n     * Construct featureGroup.\n     *\n     * @param storeExtendedTags Pass `true` to create fields for more OMV tags (`layer`, `class`\n     * and `type`).\n     */\n    constructor(storeExtendedTags: boolean, startSize: number = 5000) {\n        this.featureIds = new Array<number>(startSize);\n        this.featureIds.length = startSize;\n        this.techniqueIndex = new Array<number>(startSize);\n        this.techniqueIndex.length = startSize;\n        this.textIndex = new Array<number>(startSize);\n        this.textIndex.length = startSize;\n        this.positionIndex = new Array<number>(startSize);\n        this.positionIndex.length = startSize;\n        this.positions = new Array<number>(10 * startSize);\n        this.positions.length = 10 * startSize;\n\n        if (storeExtendedTags) {\n            this.layerIndex = new Array<number>(startSize);\n            this.layerIndex.length = startSize;\n            this.classIndex = new Array<number>(startSize);\n            this.classIndex.length = startSize;\n            this.typeIndex = new Array<number>(startSize);\n            this.typeIndex.length = startSize;\n        }\n    }\n\n    /**\n     * Compute size in bytes.\n     */\n    getNumBytes(): number {\n        return (\n            (this.featureIds.length +\n                this.techniqueIndex.length +\n                this.textIndex.length +\n                this.positionIndex.length +\n                this.positions.length +\n                (this.layerIndex !== undefined ? this.layerIndex.length : 0) +\n                (this.classIndex !== undefined ? this.classIndex.length : 0) +\n                (this.typeIndex !== undefined ? this.typeIndex.length : 0)) *\n            8\n        );\n    }\n}\n\n/**\n * Structure of arrays containing data for roads. No methods, since the object is being passed as\n * part of [[ExtendedTileInfo]] across \"process boundaries\" to the web worker.\n */\nexport class LineFeatureGroup extends FeatureGroup {\n    /**\n     * An array of road segment ids. Is the same length as `featureIds` but certain elements can be\n     * `undefined` (if this line feature is not a road).\n     */\n    segmentIds?: number[];\n\n    /**\n     * An array of road start offsets. Certain elements may be `undefined` (if this line feature is\n     * not a road).\n     */\n    segmentStartOffsets?: number[];\n\n    /**\n     * An array of road end offsets. Certain elements may be `undefined` (if this line feature is\n     * not a road).\n     */\n    segmentEndOffsets?: number[];\n\n    /**\n     * An array of object defined by the user. Certain elements may be `undefined` (if this line\n     * feature is not a road, or if the object for that feature is undefined).\n     */\n    userData: Array<{} | undefined> = [];\n\n    /** @override */\n    getNumBytes(): number {\n        return (\n            super.getNumBytes() +\n            ((this.segmentIds !== undefined ? this.segmentIds.length : 0) +\n                (this.segmentStartOffsets !== undefined ? this.segmentStartOffsets.length : 0) +\n                (this.segmentEndOffsets !== undefined ? this.segmentEndOffsets.length : 0)) *\n                8\n        );\n    }\n}\n\n/**\n * Structure of arrays containing data for polygons. No methods, since the object is being passed as\n * part of ExtendedTileInfo across \"process boundaries\" to the web worker.\n *\n * Supporting methods in namespace [[ExtendedTileInfo]].\n *\n * Due to the complexity of the access, there are supporting classes to store and access data in\n * the feature groups. See [[ExtendedTileInfoWriter]] and [[ExtendedTileInfoPolygonAccessor]].\n */\nexport class PolygonFeatureGroup extends FeatureGroup {\n    /**\n     * Indices into innerRingStartIndex. One entry for every polygon feature.\n     *\n     * Number of rings is computed by either:\n     *\n     * a) Computing from the next innerRingStart, or\n     *\n     * b) Computing from the size of the array.\n     */\n    outerRingStartIndex: number[];\n\n    /**\n     * One entry for every polygon feature. Contains `true` if a polygon ring is an _outside_ ring,\n     * `false` otherwise.\n     */\n    innerRingIsOuterContour: number[];\n\n    /**\n     * Indices into [[OmvFeatureGroup]]`.positions`. One index for every ring.\n     *\n     * Number of inner rings is computed by either:\n     *\n     * a) Computing from the next innerRingStart, or\n     *\n     * b) Computing from the size of the array.\n     */\n    innerRingStartIndex: number[];\n\n    /**\n     * Number of rings stored in all polygons in tis group. Used to keep size of the\n     * arrays.\n     */\n    groupNumRings: number = 0;\n\n    constructor(storeExtendedTags: boolean, startSize: number = 5000) {\n        super(storeExtendedTags, startSize);\n\n        this.outerRingStartIndex = new Array<number>(startSize);\n        this.outerRingStartIndex.length = startSize;\n        this.innerRingIsOuterContour = new Array<number>(startSize);\n        this.innerRingIsOuterContour.length = startSize;\n        this.innerRingStartIndex = new Array<number>(startSize);\n        this.innerRingStartIndex.length = startSize;\n    }\n\n    /** @override */\n    getNumBytes(): number {\n        return (\n            super.getNumBytes() +\n            ((this.outerRingStartIndex !== undefined ? this.outerRingStartIndex.length : 0) +\n                (this.innerRingIsOuterContour !== undefined\n                    ? this.innerRingIsOuterContour.length\n                    : 0) +\n                (this.innerRingStartIndex !== undefined ? this.innerRingStartIndex.length : 0)) *\n                8\n        );\n    }\n}\n\n/**\n * Class to hold infos from [[OmvTile]]s. Optimized for fast serialization when being passed from\n * webworker to main thread. No methods, since the object is being passed across \"process\n * boundaries\" to the web worker.\n *\n * Supporting methods in namespace [[ExtendedTileInfo]].\n *\n * Due to the complexity of the access, there are supporting classes to store and access data in\n * the feature groups. See [[ExtendedTileInfoWriter]] and [[ExtendedTileInfoPolygonAccessor]].\n */\nexport class ExtendedTileInfo implements TileInfo {\n    /**\n     * Catalog of strings. Addressed by every features stringIndex.\n     */\n    readonly textCatalog: string[] = new Array<string>();\n    /**\n     * Catalog of techniques. Addressed by every features featureIndex.\n     */\n    readonly techniqueCatalog: IndexedTechnique[] = new Array<IndexedTechnique>();\n\n    /**\n     * Feature group containing all infos about `POINT` features.\n     */\n    readonly pointGroup: FeatureGroup;\n\n    /**\n     * Feature group containing all infos about `LINESTRING` features.\n     */\n    readonly lineGroup: LineFeatureGroup;\n\n    /**\n     * Feature group containing all infos about `POLYGON` features.\n     */\n    readonly polygonGroup: PolygonFeatureGroup;\n\n    /**\n     * Optional catalogs for extended feature infos. Only available if the [[ExtendedTileInfo]] has\n     * been constructed with `storeExtendedTags` == `true`.\n     */\n    readonly layerCatalog?: string[];\n\n    /**\n     * Optional catalogs for extended feature infos. Only available if the [[ExtendedTileInfo]] has\n     * been constructed with `storeExtendedTags` == `true`.\n     */\n    readonly classCatalog?: string[];\n\n    /**\n     * Optional catalogs for extended feature infos. Only available if the [[ExtendedTileInfo]] has\n     * been constructed with `storeExtendedTags` == `true`.\n     */\n    readonly typeCatalog?: string[];\n\n    /**\n     * Used for performance diagnostics.\n     */\n    setupTime: number = 0;\n\n    /**\n     * Size in bytes.\n     */\n    numBytes: number = 0;\n\n    constructor(readonly tileKey: TileKey, storeExtendedTags: boolean) {\n        this.pointGroup = new FeatureGroup(storeExtendedTags);\n        this.lineGroup = new LineFeatureGroup(storeExtendedTags);\n        this.polygonGroup = new PolygonFeatureGroup(storeExtendedTags);\n\n        if (storeExtendedTags) {\n            this.layerCatalog = new Array<string>();\n            this.classCatalog = new Array<string>();\n            this.typeCatalog = new Array<string>();\n        }\n    }\n\n    /**\n     * Compute the memory footprint caused by objects owned by the `ExtendedTileInfo`.\n     */\n    getNumBytes(): number {\n        let numBytes = MINIMUM_OBJECT_SIZE_ESTIMATION;\n        for (const str of this.textCatalog) {\n            numBytes += 2 * str.length;\n        }\n\n        numBytes += this.techniqueCatalog.length * MINIMUM_OBJECT_SIZE_ESTIMATION;\n\n        numBytes += this.pointGroup.getNumBytes();\n        numBytes += this.lineGroup.getNumBytes();\n        numBytes += this.polygonGroup.getNumBytes();\n\n        if (this.layerCatalog !== undefined) {\n            for (const str of this.layerCatalog) {\n                numBytes += 2 * str.length;\n            }\n            for (const str of this.classCatalog!) {\n                numBytes += 2 * str.length;\n            }\n            for (const str of this.typeCatalog!) {\n                numBytes += 2 * str.length;\n            }\n        }\n\n        return numBytes;\n    }\n}\n\nexport namespace ExtendedTileInfo {\n    function finishFeatureGroup(featureGroup: FeatureGroup) {\n        featureGroup.featureIds.length = featureGroup.numFeatures;\n        featureGroup.techniqueIndex.length = featureGroup.numFeatures;\n        featureGroup.textIndex.length = featureGroup.numFeatures;\n        featureGroup.positionIndex.length = featureGroup.numFeatures;\n        featureGroup.positions.length = featureGroup.numPositions;\n\n        if (featureGroup.layerIndex !== undefined) {\n            featureGroup.layerIndex.length = featureGroup.numFeatures;\n        }\n        if (featureGroup.classIndex !== undefined) {\n            featureGroup.classIndex.length = featureGroup.numFeatures;\n        }\n        if (featureGroup.typeIndex !== undefined) {\n            featureGroup.typeIndex.length = featureGroup.numFeatures;\n        }\n    }\n\n    function finishPolygonFeatureGroup(polygonGroup: PolygonFeatureGroup) {\n        finishFeatureGroup(polygonGroup);\n        polygonGroup.outerRingStartIndex.length = polygonGroup.numFeatures;\n        polygonGroup.innerRingIsOuterContour.length = polygonGroup.groupNumRings;\n        polygonGroup.innerRingStartIndex.length = polygonGroup.groupNumRings;\n    }\n\n    function finishLineFeatureGroup(lineGroup: LineFeatureGroup) {\n        finishFeatureGroup(lineGroup);\n        if (lineGroup.segmentIds !== undefined) {\n            lineGroup.segmentIds.length = lineGroup.numFeatures;\n            lineGroup.segmentStartOffsets!.length = lineGroup.numFeatures;\n            lineGroup.segmentEndOffsets!.length = lineGroup.numFeatures;\n        }\n    }\n\n    /**\n     * Finalize the tile's features groups.\n     */\n    export function finish(tileInfo: ExtendedTileInfo) {\n        finishFeatureGroup(tileInfo.pointGroup);\n        finishLineFeatureGroup(tileInfo.lineGroup);\n        finishPolygonFeatureGroup(tileInfo.polygonGroup);\n        tileInfo.numBytes = tileInfo.getNumBytes();\n    }\n\n    /**\n     * Returns the number of features in this feature group.\n     */\n    export function featureGroupSize(featureGroup: FeatureGroup): number {\n        return featureGroup.numFeatures;\n    }\n\n    /**\n     * Check if the feature group is finalized.\n     */\n    export function featureGroupFinished(featureGroup: FeatureGroup): boolean {\n        return featureGroup.numPositions === featureGroup.positions.length;\n    }\n\n    /**\n     * Check if the tileInfo is finalized.\n     */\n    export function tileInfoFinished(tileInfo: ExtendedTileInfo): boolean {\n        return (\n            featureGroupFinished(tileInfo.pointGroup) &&\n            featureGroupFinished(tileInfo.lineGroup) &&\n            featureGroupFinished(tileInfo.polygonGroup)\n        );\n    }\n\n    /**\n     * Determine the name of (OMV) feature. It implements the special handling required\n     * to determine the text content of a feature from its tags, which are passed in as the `env`.\n     *\n     * @param env Environment containing the tags from the (OMV) feature.\n     * @param useAbbreviation `true` to use the abbreviation if available.\n     * @param useIsoCode `true` to use the tag \"iso_code\".\n     * @param languages List of languages to use, for example: Specify \"en\" to use the tag \"name_en\"\n     *                  as the text of the string. Order reflects priority.\n     */\n    export function getFeatureName(\n        env: Env,\n        useAbbreviation?: boolean,\n        useIsoCode?: boolean,\n        languages?: string[]\n    ): string | undefined {\n        let name;\n        if (useAbbreviation) {\n            const abbreviation = env.lookup(`name:short`);\n            if (typeof abbreviation === \"string\" && abbreviation.length > 0) {\n                return abbreviation;\n            }\n        }\n        if (useIsoCode) {\n            const isoCode = env.lookup(`iso_code`);\n            if (typeof isoCode === \"string\" && isoCode.length > 0) {\n                return isoCode;\n            }\n        }\n        if (languages !== undefined) {\n            for (const lang of languages) {\n                name = env.lookup(`name:${lang}`) || env.lookup(`name_${lang}`);\n                if (typeof name === \"string\" && name.length > 0) {\n                    return name;\n                }\n            }\n        }\n        name = env.lookup(\"name\");\n        if (typeof name === \"string\") {\n            return name;\n        }\n        return undefined;\n    }\n\n    /**\n     * Determine the text string of the map feature. It implements the special handling required\n     * to determine the text content of a feature from its tags, which are passed in as the `env`.\n     *\n     * @param feature Feature, including properties from the (OMV) feature.\n     * @param technique technique defining how text should be created from feature\n     * @param languages List of languages to use, for example: Specify \"en\" to use the tag \"name_en\"\n     *                  as the text of the string. Order reflects priority.\n     */\n    export function getFeatureText(\n        context: Env | AttrEvaluationContext,\n        technique: Technique,\n        languages?: string[]\n    ): string | undefined {\n        let useAbbreviation: boolean | undefined;\n        let useIsoCode: boolean | undefined;\n        const env = context instanceof Env ? context : context.env;\n        if (\n            isTextTechnique(technique) ||\n            isPoiTechnique(technique) ||\n            isLineMarkerTechnique(technique)\n        ) {\n            if (technique.text !== undefined) {\n                return evaluateTechniqueAttr(context, technique.text);\n            }\n            // tslint:disable-next-line: deprecation\n            if (technique.label !== undefined) {\n                // tslint:disable-next-line: deprecation\n                const attributeName = evaluateTechniqueAttr(context, technique.label);\n                if (typeof attributeName !== \"string\") {\n                    return undefined;\n                }\n                const name = env.lookup(attributeName);\n                return typeof name === \"string\" ? name : undefined;\n            }\n            // tslint:disable-next-line: deprecation\n            useAbbreviation = technique.useAbbreviation;\n            // tslint:disable-next-line: deprecation\n            useIsoCode = technique.useIsoCode;\n        }\n\n        return getFeatureName(env, useAbbreviation, useIsoCode, languages);\n    }\n}\n\n/**\n * Support class for [[ExtendedTileInfo]]. Assist in filling it with data.\n */\nexport class ExtendedTileInfoWriter {\n    /** Map to identify which techniques already have been added to the [[ExtendedTileInfo]]. */\n    private readonly techniqueIndexMap = new Map<number, number>();\n    /** Map to identify which strings already have been added to the [[ExtendedTileInfo]]. */\n    private readonly stringMap = new Map<string, number>();\n    /** Map to identify which `layer` names already have been added to the [[ExtendedTileInfo]]. */\n    private readonly layerMap = new Map<string, number>();\n    /** Map to identify which `class` names already have been added to the [[ExtendedTileInfo]]. */\n    private readonly classMap = new Map<string, number>();\n    /** Map to identify which `type` names already have been added to the [[ExtendedTileInfo]]. */\n    private readonly typeMap = new Map<string, number>();\n\n    /**\n     * Create an [[ExtendedTileInfoWriter]] for an [[ExtendedTileInfo]]. Assist in filling the\n     * [[ExtendedTileInfo]] with data.\n     *\n     * @param tileInfo [[ExtendedTileInfo]] to write data to.\n     * @param storeExtendedTags Pass `true` if feature data like `layer`, `class`or `type` should\n     *          be stored for every feature.\n     */\n    constructor(readonly tileInfo: ExtendedTileInfo, readonly storeExtendedTags: boolean) {}\n\n    /**\n     * Adds a [[Technique]] to the catalog of techniques. Individual techniques have a `_index` file\n     * which has been created in the [[StyleSetEvaluator]]. This index is required to identify a\n     * technique. The `Map` is used to map techniques to already added techniques, or store the\n     * technique as new, and add it to the map.\n     *\n     * @param technique The [[Technique]] to add.\n     */\n    addTechnique(technique: IndexedTechnique): number {\n        let infoTileTechniqueIndex = this.techniqueIndexMap.get(technique._index);\n        if (infoTileTechniqueIndex !== undefined) {\n            return infoTileTechniqueIndex;\n        }\n\n        const decodedTechnique = makeDecodedTechnique(technique);\n\n        infoTileTechniqueIndex = this.tileInfo.techniqueCatalog.length;\n        this.techniqueIndexMap.set(decodedTechnique._index, infoTileTechniqueIndex);\n        this.tileInfo.techniqueCatalog.push(decodedTechnique);\n\n        return infoTileTechniqueIndex;\n    }\n\n    /**\n     * Add a feature.\n     *\n     * @param featureGroup The feature group to add to.\n     * @param technique The technique to add.\n     * @param env The `env` which is a mix of original OMV feature tags and fields added by the\n     *      [[StyleSetEvaluator]]\n     * @param featureId The featureId, a number unique for many features (but not all).\n     * @param infoTileTechniqueIndex The previously computed index of the technique. Must have been\n     *      computed by `addTechnique(technique)`.\n     * @param isPolygonGroup `true`for polygons.\n     */\n    addFeature(\n        featureGroup: FeatureGroup,\n        env: MapEnv,\n        featureId: number | undefined,\n        featureText: string | undefined,\n        infoTileTechniqueIndex: number,\n        featureGroupType: FeatureGroupType\n    ) {\n        // compute name/label of feature\n        let stringIndex = -1;\n        if (featureText !== undefined && featureText.length > 0) {\n            stringIndex = this.addText(featureText);\n        }\n\n        // add indices into the arrays.\n        featureGroup.featureIds[featureGroup.numFeatures] = featureId;\n        featureGroup.techniqueIndex[featureGroup.numFeatures] = infoTileTechniqueIndex;\n        featureGroup.textIndex[featureGroup.numFeatures] = stringIndex;\n        featureGroup.positionIndex[featureGroup.numFeatures] = featureGroup.numPositions;\n\n        switch (featureGroupType) {\n            case FeatureGroupType.Polygon:\n                // polygons need the extra fields for polygon rings\n                const polygonGroup = featureGroup as PolygonFeatureGroup;\n                assert(polygonGroup.outerRingStartIndex !== undefined);\n                assert(polygonGroup.innerRingStartIndex !== undefined);\n                assert(polygonGroup.innerRingIsOuterContour !== undefined);\n                polygonGroup.outerRingStartIndex[featureGroup.numFeatures] =\n                    polygonGroup.groupNumRings;\n                break;\n            case FeatureGroupType.Line:\n                (featureGroup as LineFeatureGroup).userData[featureGroup.numFeatures] = env.entries;\n                break;\n        }\n\n        // store the extra feature fields\n        if (this.storeExtendedTags) {\n            featureGroup.layerIndex![featureGroup.numFeatures] = this.addLayer(\n                env.lookup(\"$layer\")\n            );\n            featureGroup.classIndex![featureGroup.numFeatures] = this.addClass(env.lookup(\"class\"));\n            featureGroup.typeIndex![featureGroup.numFeatures] = this.addType(env.lookup(\"type\"));\n        }\n\n        featureGroup.numFeatures++;\n    }\n\n    /**\n     * Add the X/Y coordinate of the point. Only for point feature groups.\n     *\n     * @param featureGroup The feature group to add it to.\n     * @param x X Position of point.\n     * @param y Y Position of point.\n     */\n    addFeaturePoint(featureGroup: FeatureGroup, x: number, y: number) {\n        featureGroup.positions[featureGroup.numPositions++] = x;\n        featureGroup.positions[featureGroup.numPositions++] = y;\n    }\n\n    /**\n     * Add the line points as X/Y coordinates to the line feature.\n     *\n     * If a line feature has more than one line (rare for HERE data), it should define multiple\n     * line features for it.\n     *\n     * @param featureGroup The feature group to add to. Must be line feature group.\n     * @param points The X/Y coordinates of the points.\n     */\n    addFeaturePoints(featureGroup: FeatureGroup, points: number[]) {\n        const n = featureGroup.numPositions;\n        const l = points.length;\n        const p = featureGroup.positions;\n        for (let i = 0; i < l; i++) {\n            p[n + i] = points[i];\n        }\n        featureGroup.numPositions += points.length;\n    }\n\n    /**\n     * Add the information about road segments to the line feature. Performs lazy initialization of\n     * `segmentIds`, `segmentStartOffsets`, and `segmentEndOffsets` members of a\n     * [[LineFeatureGroup]] instance.\n     *\n     * @param featureGroup The line feature group to add information to.\n     * @param segmentId Segment id of a feature.\n     * @param startOffset Start offset of a feature.\n     * @param endOffset End offset of a feature.\n     */\n    addRoadSegments(\n        featureGroup: LineFeatureGroup,\n        segmentId: number,\n        startOffset: number,\n        endOffset: number\n    ) {\n        if (featureGroup.segmentIds === undefined) {\n            featureGroup.segmentIds = new Array<number>();\n            featureGroup.segmentStartOffsets = new Array<number>();\n            featureGroup.segmentEndOffsets = new Array<number>();\n        }\n\n        featureGroup.segmentIds[featureGroup.numFeatures - 1] = segmentId;\n        featureGroup.segmentStartOffsets![featureGroup.numFeatures - 1] = startOffset;\n        featureGroup.segmentEndOffsets![featureGroup.numFeatures - 1] = endOffset;\n    }\n\n    /**\n     * Add a single ring to the polygon. Can be called multiple times to add multiple rings to the\n     * polygon.\n     *\n     * @param featureGroup Polygon feature group to add polygon ring to.\n     * @param contour The X/Y coordinates of the ring.\n     * @param isOuterRing Pass `true`if it is a outer ring, otherwise `false`.\n     */\n    addRingPoints(featureGroup: PolygonFeatureGroup, contour: number[], isOuterRing: boolean) {\n        featureGroup.innerRingStartIndex[featureGroup.groupNumRings] = featureGroup.numPositions;\n        featureGroup.innerRingIsOuterContour[featureGroup.groupNumRings] = isOuterRing ? 1 : 0;\n        featureGroup.groupNumRings++;\n\n        const n = featureGroup.numPositions;\n        const l = contour.length;\n        const p = featureGroup.positions;\n        for (let i = 0; i < l; i++) {\n            p[n + i] = contour[i];\n        }\n        featureGroup.numPositions += contour.length;\n    }\n\n    /**\n     * Finalize the tile info's feature group.\n     */\n    finish(): any {\n        ExtendedTileInfo.finish(this.tileInfo);\n    }\n\n    private addText(name: Value | undefined): number {\n        return this.addStringValue(name, this.tileInfo.textCatalog, this.stringMap);\n    }\n\n    private addLayer(name: Value | undefined): number {\n        return this.addStringValue(name, this.tileInfo.layerCatalog!, this.layerMap);\n    }\n\n    private addClass(name: Value | undefined): number {\n        return this.addStringValue(name, this.tileInfo.classCatalog!, this.classMap);\n    }\n\n    private addType(name: Value | undefined): number {\n        return this.addStringValue(name, this.tileInfo.typeCatalog!, this.typeMap);\n    }\n\n    // Add a string to the strings catalog. Returns index into the catalog.\n    private addStringValue(\n        str: Value | undefined,\n        catalog: string[],\n        map: Map<string, number>\n    ): number {\n        if (str === undefined || str === null) {\n            return -1;\n        }\n        const name = str.toString();\n        let i = map.get(name);\n        if (i !== undefined) {\n            return i;\n        }\n        i = catalog.length;\n        catalog.push(name);\n        map.set(name, i);\n        return i;\n    }\n}\n\n/**\n * Support for [[ExtendedTileInfo]]. Defines the accessor that allows to access the polygon data.\n */\nexport interface ExtendedTileInfoPolygonAccessor {\n    /**\n     * Number of rings in the polygon.\n     */\n    numRings: number;\n\n    /**\n     * Return if ring is an outer ring.\n     *\n     * @param ringIndex Specify ring index.\n     * @return `true` if ring is an outer ring, `false` otherwise.\n     */\n    isOuterRing(ringIndex: number): boolean;\n\n    /**\n     * Return information about the vertices that make up the ring.\n     *\n     * @param ringIndex Specify ring index.\n     * @returns Info about the array, start and number of points in the ring.\n     */\n    getPoints(\n        ringIndex: number\n    ): {\n        points: ArrayLike<number>;\n        pointsStart: number;\n        numPointValues: number;\n    };\n}\n\n/**\n * Implementation of [[ExtendedTileInfoPolygonAccessor]].\n */\nclass ExtendedTileInfoPolygonAccessorImpl implements ExtendedTileInfoPolygonAccessor {\n    /**\n     * Accessed data for polygons feature group.\n     */\n    polygons?: PolygonFeatureGroup;\n    /**\n     * Feature's index in the group.\n     */\n    featureIndex: number = 0;\n    /**\n     * Indicates where the ring starts.\n     */\n    ringStart: number = 0;\n    /**\n     * Number of rings.\n     */\n    numRings: number = 0;\n\n    /**\n     * Setup the accessor for extended [[TileInfo]].\n     *\n     * @param polygons polygons feature group.\n     * @param featureIndex feature's index in the group.\n     * @param ringStart where the ring starts.\n     * @param numRings number of rings.\n     */\n    setup(\n        polygons: PolygonFeatureGroup,\n        featureIndex: number,\n        ringStart: number,\n        numRings: number\n    ) {\n        this.polygons = polygons;\n        this.featureIndex = featureIndex;\n        this.ringStart = ringStart;\n        this.numRings = numRings;\n    }\n\n    /**\n     * Shut down the accessor and free all references.\n     */\n    reset() {\n        this.polygons = undefined;\n        this.featureIndex = 0;\n        this.ringStart = 0;\n        this.numRings = 0;\n    }\n\n    isOuterRing(ringIndex: number): boolean {\n        assert(ringIndex >= 0);\n        assert(ringIndex < this.numRings);\n        assert(this.polygons !== undefined);\n        if (ringIndex < 0 || ringIndex >= this.numRings || this.polygons === undefined) {\n            throw new Error(\"ExtendedTileInfoPolygonAccessor: Invalid ring index\");\n        }\n        return this.polygons.innerRingIsOuterContour[this.ringStart + ringIndex] !== 0;\n    }\n\n    getPoints(\n        ringIndex: number\n    ): {\n        points: ArrayLike<number>;\n        pointsStart: number;\n        numPointValues: number;\n    } {\n        assert(ringIndex >= 0);\n        assert(ringIndex < this.numRings);\n        assert(this.polygons !== undefined);\n        if (ringIndex < 0 || ringIndex >= this.numRings || this.polygons === undefined) {\n            throw new Error(\"ExtendedTileInfoPolygonAccessor: Invalid ring index\");\n        }\n\n        // compute the start/size of the points in this ring. All `points` are actually just the\n        // indices of a single X/Y coordinate.\n        const pointsStart = this.polygons.innerRingStartIndex[this.ringStart + ringIndex];\n\n        let numPointValues: number;\n        if (ringIndex < this.numRings - 1) {\n            numPointValues =\n                this.polygons.innerRingStartIndex[this.ringStart + ringIndex + 1] - pointsStart;\n        } else {\n            if (this.ringStart + ringIndex < this.polygons.innerRingStartIndex.length - 1) {\n                numPointValues =\n                    this.polygons.innerRingStartIndex[this.ringStart + ringIndex + 1] - pointsStart;\n            } else {\n                numPointValues = this.polygons.positions.length - pointsStart;\n            }\n        }\n\n        return {\n            points: this.polygons.positions,\n            pointsStart,\n            numPointValues\n        };\n    }\n}\n\n/**\n * Interface that a client of [[ExtendedTileInfoAccessor]] has to implement.\n */\nexport interface ExtendedTileInfoHandler {\n    acceptPoint?(\n        featureId: number | undefined,\n        techniqueIndex: number,\n        x: number,\n        y: number,\n        label: number,\n        layerName: number,\n        className: number,\n        typeName: number\n    ): void;\n\n    acceptLine?(\n        featureId: number | undefined,\n        techniqueIndex: number,\n        label: number,\n        layerName: number,\n        className: number,\n        typeName: number,\n        points: ArrayLike<number>,\n        pointsStart: number,\n        numElements: number,\n        segmentId?: number,\n        startOffset?: number,\n        endOffset?: number\n    ): void;\n\n    acceptPolygon?(\n        featureId: number | undefined,\n        techniqueIndex: number,\n        label: number,\n        layerName: number,\n        className: number,\n        typeName: number,\n        polygonAccessor: ExtendedTileInfoPolygonAccessor\n    ): void;\n}\n\n/**\n * Supporting class for [[ExtendedTileInfo]]. Takes an [[ExtendedTileInfoHandler]] and calls an\n * `accept` for every feature of the [[ExtendedTileInfo]], or just all features of a specified\n * `featureId`.\n */\nexport class ExtendedTileInfoVisitor {\n    // static instance to work without allocations.\n    private static polygonAccessor = new ExtendedTileInfoPolygonAccessorImpl();\n\n    constructor(readonly tileInfo: ExtendedTileInfo) {}\n\n    /**\n     * Visit all feature in the [[ExtendedTileInfo]]\n     *\n     * @param handler Let the `handler` visit all features.\n     */\n    visitAll(handler: ExtendedTileInfoHandler) {\n        this.visitAllPointFeatures(handler);\n        this.visitAllLineFeatures(handler);\n        this.visitAllPolygonFeatures(handler);\n    }\n\n    /**\n     * Visit all features of a specified featureId.\n     *\n     * @param featureId The featureId to visit.\n     * @param handler The `handler` to use.\n     */\n    visitFeature(featureId: number, handler: ExtendedTileInfoHandler): number {\n        let numFeaturesFound = 0;\n        const numPointFeatures = this.tileInfo.pointGroup.numFeatures;\n        const pointFeatures = this.tileInfo.pointGroup.featureIds;\n        for (let i = 0; i < numPointFeatures; i++) {\n            if (pointFeatures[i] === featureId) {\n                numFeaturesFound++;\n                this.visitPointFeature(i, handler);\n            }\n        }\n        const numLineFeatures = this.tileInfo.lineGroup.numFeatures;\n        const lineFeatures = this.tileInfo.lineGroup.featureIds;\n        for (let i = 0; i < numLineFeatures; i++) {\n            if (lineFeatures[i] === featureId) {\n                numFeaturesFound++;\n                this.visitLineFeature(i, handler);\n            }\n        }\n        const numPolygonFeatures = this.tileInfo.polygonGroup.numFeatures;\n        const polygonsFeatures = this.tileInfo.polygonGroup.featureIds;\n        for (let i = 0; i < numPolygonFeatures; i++) {\n            if (polygonsFeatures[i] === featureId) {\n                numFeaturesFound++;\n                this.visitPolygonFeature(i, handler);\n            }\n        }\n        return numFeaturesFound;\n    }\n\n    /**\n     * Visit all `POINT` features.\n     *\n     * @param handler The `handler` to use.\n     */\n    visitAllPointFeatures(handler: ExtendedTileInfoHandler): void {\n        const numFeatures = this.tileInfo.pointGroup.numFeatures;\n\n        for (let i = 0; i < numFeatures; i++) {\n            this.visitPointFeature(i, handler);\n        }\n    }\n\n    /**\n     * Visit all `LINESTRING` features.\n     *\n     * @param handler The handler to use.\n     */\n    visitAllLineFeatures(handler: ExtendedTileInfoHandler): void {\n        const numFeatures = this.tileInfo.lineGroup.numFeatures;\n\n        for (let i = 0; i < numFeatures; i++) {\n            this.visitLineFeature(i, handler);\n        }\n    }\n\n    /**\n     * Visit all `POLYGON` features.\n     *\n     * @param handler The `handler` to use.\n     */\n    visitAllPolygonFeatures(handler: ExtendedTileInfoHandler): void {\n        const numFeatures = this.tileInfo.polygonGroup.numFeatures;\n\n        for (let i = 0; i < numFeatures; i++) {\n            this.visitPolygonFeature(i, handler);\n        }\n    }\n\n    private getTag(featureIndex: number, index: number[]): number {\n        return index !== undefined && index[featureIndex] >= 0 ? index[featureIndex] : -1;\n    }\n\n    /**\n     * Call the `handler` on a point feature.\n     *\n     * @param featureIndex The index of the feature into the feature table.\n     * @param handler The `handler` to use.\n     */\n    private visitPointFeature(featureIndex: number, handler: ExtendedTileInfoHandler): void {\n        const tileInfo = this.tileInfo;\n        const points = tileInfo.pointGroup;\n\n        const start = points.positionIndex[featureIndex];\n        const x = points.positions[start];\n        const y = points.positions[start + 1];\n\n        if (!!handler.acceptPoint) {\n            handler.acceptPoint(\n                points.featureIds[featureIndex],\n                points.techniqueIndex[featureIndex],\n                x,\n                y,\n                points.textIndex[featureIndex],\n                this.getTag(featureIndex, points.layerIndex!),\n                this.getTag(featureIndex, points.classIndex!),\n                this.getTag(featureIndex, points.typeIndex!)\n            );\n        }\n    }\n\n    /**\n     * Call the `handler` on a line feature.\n     *\n     * @param featureIndex The index of the feature into the feature table.\n     * @param handler The `handler` to use.\n     */\n    private visitLineFeature(featureIndex: number, handler: ExtendedTileInfoHandler): void {\n        const tileInfo = this.tileInfo;\n        const lines = tileInfo.lineGroup;\n\n        const numFeatures = lines.numFeatures;\n        const positionsStart = lines.positionIndex[featureIndex];\n        const numPointValues =\n            featureIndex === numFeatures - 1\n                ? lines.positions.length - positionsStart\n                : lines.positionIndex[featureIndex + 1] - positionsStart;\n\n        let segmentId: number | undefined;\n        let startOffset: number | undefined;\n        let endOffset: number | undefined;\n\n        if (lines.segmentIds !== undefined) {\n            segmentId = lines.segmentIds[featureIndex];\n            startOffset = lines.segmentStartOffsets![featureIndex];\n            endOffset = lines.segmentEndOffsets![featureIndex];\n        }\n\n        if (!!handler.acceptLine) {\n            handler.acceptLine(\n                lines.featureIds[featureIndex],\n                lines.techniqueIndex[featureIndex],\n                lines.textIndex[featureIndex],\n                this.getTag(featureIndex, lines.layerIndex!),\n                this.getTag(featureIndex, lines.classIndex!),\n                this.getTag(featureIndex, lines.typeIndex!),\n                tileInfo.lineGroup.positions,\n                positionsStart,\n                numPointValues,\n                segmentId,\n                startOffset,\n                endOffset\n            );\n        }\n    }\n\n    /**\n     * Call the `handler` on a polygon feature.\n     *\n     * @param featureIndex The index of the feature into the feature table.\n     * @param handler The `handler` to use.\n     */\n    private visitPolygonFeature(featureIndex: number, handler: ExtendedTileInfoHandler): void {\n        if (handler.acceptPolygon === undefined) {\n            return;\n        }\n\n        const tileInfo = this.tileInfo;\n        const polygons = tileInfo.polygonGroup;\n\n        const numFeatures = polygons.numFeatures;\n        const ringStart = polygons.outerRingStartIndex[featureIndex];\n        const numRings =\n            featureIndex === numFeatures - 1\n                ? polygons.innerRingStartIndex.length - ringStart\n                : polygons.outerRingStartIndex[featureIndex + 1] - ringStart;\n\n        // Use a static instance, so we do not allocate anything here\n        ExtendedTileInfoVisitor.polygonAccessor.setup(polygons, featureIndex, ringStart, numRings);\n\n        handler.acceptPolygon(\n            polygons.featureIds[featureIndex],\n            polygons.techniqueIndex[featureIndex],\n            polygons.textIndex[featureIndex],\n            this.getTag(featureIndex, polygons.layerIndex!),\n            this.getTag(featureIndex, polygons.classIndex!),\n            this.getTag(featureIndex, polygons.typeIndex!),\n            ExtendedTileInfoVisitor.polygonAccessor\n        );\n\n        // Free all data references.\n        ExtendedTileInfoVisitor.polygonAccessor.reset();\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    Expr,\n    ExprVisitor,\n    HasAttributeExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\nimport { Value } from \"./Env\";\n\n/**\n * [[ExprPool]] maintains a set of unique interned [[Expr]] objects.\n *\n * @hidden\n */\nexport class ExprPool implements ExprVisitor<Expr, void> {\n    private readonly m_booleanLiterals = new Map<boolean, BooleanLiteralExpr>();\n    private readonly m_numberLiterals = new Map<number, NumberLiteralExpr>();\n    private readonly m_stringLiterals = new Map<string, StringLiteralExpr>();\n    private readonly m_objectLiterals = new Map<object, ObjectLiteralExpr>();\n    private readonly m_arrayLiterals: ObjectLiteralExpr[] = [];\n    private readonly m_varExprs = new Map<string, VarExpr>();\n    private readonly m_hasAttributeExprs = new Map<string, HasAttributeExpr>();\n    private readonly m_matchExprs: MatchExpr[] = [];\n    private readonly m_caseExprs: CaseExpr[] = [];\n    private readonly m_callExprs = new Map<string, CallExpr[]>();\n\n    /**\n     * Add `expr` to this [[ExprPool]] and return a unique [[Expr]]\n     * object that is structurally equivalent to `expr`.\n     *\n     * @param expr The [[Expr]] to add to this [[ExprPool]].\n     * @returns A unique [[Expr]] that is structurally equivalent to `expr`.\n     */\n    add(expr: Expr): Expr {\n        return expr.accept(this, undefined);\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: void): Expr {\n        return NullLiteralExpr.instance;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: void): Expr {\n        const e = this.m_booleanLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_booleanLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: void): Expr {\n        const e = this.m_numberLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_numberLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: void): Expr {\n        const e = this.m_stringLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_stringLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: void): Expr {\n        const e = this.m_objectLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n\n        if (Array.isArray(expr.value)) {\n            const array = expr.value as Value[];\n\n            const r = this.m_arrayLiterals.find(literal => {\n                const elements = literal.value as Value[];\n                if (elements.length !== array.length) {\n                    return false;\n                }\n                return array.every((x, i) => x === elements[i]);\n            });\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            this.m_arrayLiterals.push(expr);\n        }\n\n        this.m_objectLiterals.set(expr.value, expr);\n\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, context: void): Expr {\n        const e = this.m_varExprs.get(expr.name);\n        if (e) {\n            return e;\n        }\n        this.m_varExprs.set(expr.name, expr);\n        return expr;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: void): Expr {\n        const e = this.m_hasAttributeExprs.get(expr.name);\n        if (e) {\n            return e;\n        }\n        this.m_hasAttributeExprs.set(expr.name, expr);\n        return expr;\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: void): Expr {\n        const value = expr.value.accept(this, context);\n        const branches: typeof expr.branches = expr.branches.map(([label, body]) => [\n            label,\n            body.accept(this, context)\n        ]);\n        const fallback = expr.fallback.accept(this, context);\n        for (const candidate of this.m_matchExprs) {\n            if (candidate.value !== value) {\n                continue;\n            }\n            if (candidate.fallback !== fallback) {\n                continue;\n            }\n            if (candidate.branches.length !== branches.length) {\n                continue;\n            }\n            let branchesMatching = true;\n            for (let i = 0; i < branches.length; i++) {\n                if (\n                    branches[i][0] !== candidate.branches[i][0] ||\n                    branches[i][1] !== candidate.branches[i][1]\n                ) {\n                    branchesMatching = false;\n                    break;\n                }\n            }\n            if (branchesMatching) {\n                return candidate;\n            }\n        }\n        const r = new MatchExpr(value, branches, fallback);\n        this.m_matchExprs.push(r);\n        return r;\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: void): Expr {\n        const branches: typeof expr.branches = expr.branches.map(([condition, body]) => [\n            condition.accept(this, context),\n            body.accept(this, context)\n        ]);\n        const fallback = expr.fallback.accept(this, context);\n\n        for (const candidate of this.m_caseExprs) {\n            if (candidate.fallback !== fallback) {\n                continue;\n            }\n            if (candidate.branches.length !== branches.length) {\n                continue;\n            }\n            let branchesMatching = true;\n            for (let i = 0; i < branches.length; i++) {\n                if (\n                    branches[i][0] !== candidate.branches[i][0] ||\n                    branches[i][1] !== candidate.branches[i][1]\n                ) {\n                    branchesMatching = false;\n                    break;\n                }\n            }\n            if (branchesMatching) {\n                return candidate;\n            }\n        }\n\n        const r = new CaseExpr(branches, fallback);\n        this.m_caseExprs.push(r);\n        return r;\n    }\n\n    visitCallExpr(expr: CallExpr, context: void): Expr {\n        // rewrite the actual arguments\n        const expressions = expr.args.map(childExpr => childExpr.accept(this, context));\n        // ensure we have a valid set of interned expressions for the calls\n        if (!this.m_callExprs.has(expr.op)) {\n            this.m_callExprs.set(expr.op, []);\n        }\n        // get the calls for the given operator.\n        const calls = this.m_callExprs.get(expr.op)!;\n        for (const call of calls) {\n            // check the number of arguments\n            if (call.args.length !== expressions.length) {\n                continue;\n            }\n            // find the index of the first mismatch.\n            let index = 0;\n            for (; index < call.args.length; ++index) {\n                if (call.args[index] !== expressions[index]) {\n                    break;\n                }\n            }\n            if (index === call.args.length) {\n                // no mismatch found, return the 'interned' call.\n                return call;\n            }\n        }\n        const e = new CallExpr(expr.op, expressions);\n        calls.push(e);\n        return e;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\nimport { Env, Expr, ExprScope, MapEnv, Value } from \"./Expr\";\n\nconst logger = LoggerManager.instance.create(\"TechniqueAttr\");\n\nexport interface AttrEvaluationContext {\n    /**\n     * Expression evaluation environment containing variable bindings.\n     */\n    env: MapEnv;\n\n    /**\n     * Storage level of tile containing this feature.\n     *\n     * To be removed, when interpolators will be based on [[Expr]].\n     */\n    storageLevel: number;\n\n    /**\n     * Zoom level of tile containing this feature.\n     *\n     * To be removed, when interpolators will be based on [[Expr]].\n     */\n    zoomLevel: number;\n\n    /**\n     * Optional, cache of expression results.\n     *\n     * @see [[Expr.evaluate]]\n     */\n    cachedExprResults?: Map<Expr, Value>;\n}\n\n/**\n * Evaluate feature attr _without_ default value.\n *\n * @returns actual value or `undefined`\n */\nexport function evaluateTechniqueAttr<T = Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: T | Expr | undefined\n): T | undefined;\n\n/**\n * Evaluate feature attr _with_ default value.\n *\n * @returns actual value or `defaultValue`\n */\nexport function evaluateTechniqueAttr<T = Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: T | Expr | undefined,\n    defaultValue: T\n): T;\n\nexport function evaluateTechniqueAttr<T = Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: T | Expr | undefined,\n    defaultValue?: T\n): T | undefined {\n    const env = context instanceof Env ? context : context.env;\n\n    let evaluated: Value | undefined;\n    if (Expr.isExpr(attrValue)) {\n        try {\n            evaluated = attrValue.evaluate(\n                env,\n                ExprScope.Dynamic,\n                !(context instanceof Env) ? context.cachedExprResults : undefined\n            );\n        } catch (error) {\n            logger.error(`failed to evaluate expression '${JSON.stringify(attrValue)}': ${error}`);\n            evaluated = undefined;\n        }\n    } else {\n        evaluated = (attrValue as unknown) as Value;\n    }\n    if (evaluated === undefined || evaluated === null) {\n        return defaultValue;\n    } else {\n        return (evaluated as unknown) as T;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { isJsonExpr } from \"./Expr\";\nimport { StyleDeclaration, Theme } from \"./Theme\";\n\n/**\n * The ThemeVisitor visits every style in the theme in a depth-first fashion.\n */\nexport class ThemeVisitor {\n    constructor(readonly theme: Theme) {}\n    /**\n     * Applies a function to every style in the theme.\n     *\n     * @param visitFunc Function to be called with `style` as an argument. Function should return\n     *                  `true` to cancel visitation.\n     * @returns `true` if function has finished prematurely.\n     */\n    visitStyles(visitFunc: (style: StyleDeclaration) => boolean): boolean {\n        const visit = (style: StyleDeclaration): boolean => {\n            if (isJsonExpr(style)) {\n                return false;\n            }\n            if (visitFunc(style)) {\n                return true;\n            }\n            return false;\n        };\n        if (this.theme.styles !== undefined) {\n            for (const styleSetName in this.theme.styles) {\n                if (this.theme.styles[styleSetName] !== undefined) {\n                    for (const style of this.theme.styles[styleSetName]) {\n                        if (visit(style)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Box3Like, GeoBox, Projection, ProjectionType } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport { Vector3 } from \"three\";\nimport { SubdivisionModifier } from \"./SubdivisionModifier\";\n\nconst VERTEX_POSITION_CACHE = [new Vector3(), new Vector3()];\n\nexport enum SubdivisionMode {\n    /**\n     * Subdivide all edges\n     */\n    All,\n    /**\n     * Only subdivide horizontal and vertical edges\n     */\n    NoDiagonals\n}\n\n/**\n * The [[EdgeLengthGeometrySubdivisionModifier]] subdivides triangle mesh depending on\n * length of edges.\n */\nexport class EdgeLengthGeometrySubdivisionModifier extends SubdivisionModifier {\n    private m_projectedBox: Box3Like;\n    private m_maxLength: number;\n    private m_maxLengthX: number;\n    private m_maxLengthY: number;\n\n    /**\n     * Constructs a new [[EdgeLengthGeometrySubdivisionModifier]].\n     *\n     * @param subdivision The subdivision factor\n     * @param geoBox The geo bounding box of a tile\n     * @param subdivisionMode Configures what edges to divide\n     * @param projection The projection that defines the world space of this geometry.\n     */\n    constructor(\n        readonly subdivision: number,\n        readonly geoBox: GeoBox,\n        readonly subdivisionMode: SubdivisionMode = SubdivisionMode.All,\n        readonly projection: Projection\n    ) {\n        super();\n\n        assert(\n            projection.type === ProjectionType.Planar,\n            \"EdgeLengthGeometrySubdivisionModifier only supports planar projections\"\n        );\n\n        const northEast = projection.projectPoint(geoBox.northEast, VERTEX_POSITION_CACHE[0]);\n        const southWest = projection.projectPoint(geoBox.southWest, VERTEX_POSITION_CACHE[1]);\n        this.m_projectedBox = {\n            min: {\n                x: Math.min(northEast.x, southWest.x),\n                y: Math.min(northEast.y, southWest.y),\n                z: Math.min(northEast.z, southWest.z)\n            },\n            max: {\n                x: Math.max(northEast.x, southWest.x),\n                y: Math.max(northEast.y, southWest.y),\n                z: Math.max(northEast.z, southWest.z)\n            }\n        };\n        this.m_maxLengthX = (this.m_projectedBox.max.x - this.m_projectedBox.min.x) / subdivision;\n        this.m_maxLengthY = (this.m_projectedBox.max.y - this.m_projectedBox.min.y) / subdivision;\n\n        // Increase max length slightly to account for precision errors\n        if (this.subdivisionMode === SubdivisionMode.All) {\n            this.m_maxLengthX *= 1.1;\n            this.m_maxLengthY *= 1.1;\n        }\n        this.m_maxLength = Math.sqrt(\n            this.m_maxLengthX * this.m_maxLengthX + this.m_maxLengthY * this.m_maxLengthY\n        );\n    }\n\n    /**\n     * Return upper bound for length of diagonal edges\n     */\n    get maxLength() {\n        return this.m_maxLength;\n    }\n\n    /**\n     * Return upper bound for edge length in x direction\n     */\n    get maxLengthX() {\n        return this.m_maxLengthX;\n    }\n\n    /**\n     * Return upper bound for edge length in y direction\n     */\n    get maxLengthY() {\n        return this.m_maxLengthY;\n    }\n\n    /** @override */\n    protected shouldSplitTriangle(a: Vector3, b: Vector3, c: Vector3): number | undefined {\n        const shouldSplitAB = this.shouldSplitEdge(a, b);\n        const shouldSplitBC = this.shouldSplitEdge(b, c);\n        const shouldSplitCA = this.shouldSplitEdge(c, a);\n        const shouldSplit = shouldSplitAB || shouldSplitBC || shouldSplitCA;\n\n        if (!shouldSplit) {\n            return;\n        }\n\n        const ab = a.distanceTo(b);\n        const bc = b.distanceTo(c);\n        const ca = c.distanceTo(a);\n        const maxDistance = Math.max(\n            shouldSplitAB ? ab : 0,\n            shouldSplitBC ? bc : 0,\n            shouldSplitCA ? ca : 0\n        );\n        if (ab === maxDistance) {\n            return 0;\n        } else if (bc === maxDistance) {\n            return 1;\n        } else if (ca === maxDistance) {\n            return 2;\n        }\n\n        throw new Error(\"Could not split triangle.\");\n    }\n\n    private shouldSplitEdge(a: Vector3, b: Vector3): boolean {\n        switch (this.subdivisionMode) {\n            case SubdivisionMode.All:\n                return (\n                    (a.y === b.y && Math.abs(a.x - b.x) > this.m_maxLengthX) ||\n                    (a.x === b.x && Math.abs(a.y - b.y) > this.m_maxLengthY) ||\n                    a.distanceTo(b) > this.m_maxLength\n                );\n            case SubdivisionMode.NoDiagonals:\n                return (\n                    (a.y === b.y && Math.abs(a.x - b.x) > this.m_maxLengthX) ||\n                    (a.x === b.x && Math.abs(a.y - b.y) > this.m_maxLengthY)\n                );\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Projection, sphereProjection } from \"@here/harp-geoutils\";\nimport { Vector3 } from \"three\";\nimport { SubdivisionModifier } from \"./SubdivisionModifier\";\n\nconst VERTEX_POSITION_CACHE = [new Vector3(), new Vector3(), new Vector3()];\n\n/**\n * The [[SphericalGeometrySubdivisionModifier]] subdivides triangle mesh geometries positioned\n * on the surface of a sphere centered at `(0, 0, 0)`.\n */\nexport class SphericalGeometrySubdivisionModifier extends SubdivisionModifier {\n    /**\n     * Constructs a new [[SphericalGeometrySubdivisionModifier]].\n     *\n     * @param angle The maximum angle in radians between two vertices and the origin.\n     * @param projection The projection that defines the world space of this geometry.\n     */\n    constructor(readonly angle: number, readonly projection: Projection = sphereProjection) {\n        super();\n    }\n\n    /** @override */\n    protected shouldSplitTriangle(a: Vector3, b: Vector3, c: Vector3): number | undefined {\n        const aa = sphereProjection.reprojectPoint(this.projection, a, VERTEX_POSITION_CACHE[0]);\n        const bb = sphereProjection.reprojectPoint(this.projection, b, VERTEX_POSITION_CACHE[1]);\n        const cc = sphereProjection.reprojectPoint(this.projection, c, VERTEX_POSITION_CACHE[2]);\n\n        const alpha = aa.angleTo(bb);\n        const beta = bb.angleTo(cc);\n        const gamma = cc.angleTo(aa);\n\n        // find the maximum angle\n        const m = Math.max(alpha, Math.max(beta, gamma));\n\n        // split the triangle if needed.\n        if (m < this.angle) {\n            return undefined;\n        }\n\n        if (m === alpha) {\n            return 0;\n        } else if (m === beta) {\n            return 1;\n        } else if (m === gamma) {\n            return 2;\n        }\n\n        throw new Error(\"failed to split triangle\");\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"../TextCanvas\";\nimport { GlyphData } from \"./GlyphData\";\nimport { GlyphTextureCache } from \"./GlyphTextureCache\";\nimport { FontStyle, FontVariant, TextRenderStyle } from \"./TextStyle\";\n\nconst ASSETS_PATH = \"_Assets/\";\nconst BOLD_ASSETS_PATH = \"_BoldAssets/\";\nconst ITALIC_ASSETS_PATH = \"_ItalicAssets/\";\nconst BOLD_ITALIC_ASSETS_PATH = \"_BoldItalicAssets/\";\nconst REPLACEMENT_PATH = \"_Assets/Extra/\";\n\ninterface SrcGlyphData {\n    id: number;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    xoffset: number;\n    yoffset: number;\n    xadvance: number;\n    page: number;\n    chnl: number;\n}\n\n/**\n * Metrics defining the placement and rendering of all glyphs in a given [[Font]].\n */\nexport interface FontMetrics {\n    size: number;\n    distanceRange: number;\n    base: number;\n    lineHeight: number;\n    lineGap: number;\n    capHeight: number;\n    xHeight: number;\n}\n\n/**\n * Description of all assets, charset and metrics that define a font inside a [[FontCatalog]].\n */\nexport interface Font {\n    name: string;\n    metrics: FontMetrics;\n    charset: string;\n    bold?: string;\n    italic?: string;\n    boldItalic?: string;\n}\n\n/**\n * Description of a continuous range of Unicode code points (as well as information on which fonts\n * supports it).\n */\nexport interface UnicodeBlock {\n    name: string;\n    min: number;\n    max: number;\n    fonts: string[];\n}\n\n/**\n * Collection of font assets used to render glyphs when using a [[TextCanvas]].\n *\n * @summary A `FontCatalog` works as a stack of SDF bitmap fonts (using the BMFont format) designed\n * to cover the widest Unicode code point range possible. In order to manage all these assets\n * elegantly, the assets inside the `FontCatalog` are stored on a per-Unicode-Block basis, and\n * assets for a block are only loaded once a glyph belonging to that block is requested.\n *\n * Bitmap information coming from all different fonts is then stored in a unified WebGL GPU Texture\n * resource, which can be sampled to render all currently loaded glyphs.\n *\n */\nexport class FontCatalog {\n    /**\n     * Loads a `FontCatalog`.\n     *\n     * @param url Asset url.\n     * @param maxCodePointCount Maximum number of unique code points bitmaps this `FontCatalog`'s\n     * internal texture can store simultaneously.\n     *\n     * @returns `FontCatalog` Promise.\n     */\n    static async load(path: string, maxCodePointCount: number): Promise<FontCatalog> {\n        const url = new URL(path, window.location.href);\n        const fontCatalog = await FontCatalog.loadJSON(url.href);\n\n        const replacementDirUrl = new URL(`${fontCatalog.name}${REPLACEMENT_PATH}`, url);\n        const replacementJson = await FontCatalog.loadJSON(\n            replacementDirUrl.href + \"Specials.json\"\n        );\n        const replacementTexture = await FontCatalog.loadTexture(\n            replacementDirUrl.href + \"Specials.png\"\n        );\n        replacementTexture.wrapS = THREE.ClampToEdgeWrapping;\n        replacementTexture.wrapT = THREE.ClampToEdgeWrapping;\n        replacementTexture.minFilter = THREE.NearestFilter;\n        replacementTexture.needsUpdate = true;\n\n        const replacementFont = fontCatalog.fonts.find((font: Font) => font.name === \"Extra\");\n        const replacementGlyph = new GlyphData(\n            65533,\n            \"Specials\",\n            replacementJson.chars[0].width,\n            replacementJson.chars[0].height,\n            replacementJson.chars[0].xadvance,\n            replacementJson.chars[0].xoffset,\n            replacementJson.chars[0].yoffset,\n            0.0,\n            0.0,\n            1.0,\n            1.0,\n            replacementTexture,\n            replacementFont!\n        );\n\n        const fontCatalogInfo = new FontCatalog(\n            url.href.substr(0, url.href.lastIndexOf(\"/\")),\n            fontCatalog.name,\n            fontCatalog.type,\n            fontCatalog.size,\n            fontCatalog.maxWidth,\n            fontCatalog.maxHeight,\n            fontCatalog.distanceRange,\n            fontCatalog.fonts,\n            fontCatalog.supportedBlocks,\n            maxCodePointCount,\n            replacementGlyph\n        );\n        return fontCatalogInfo;\n    }\n\n    static async loadTexture(url: string): Promise<THREE.Texture> {\n        return new Promise(resolve => {\n            new THREE.TextureLoader().load(url, resolve);\n        }) as Promise<THREE.Texture>;\n    }\n\n    static async loadJSON(url: string): Promise<any> {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`${url} Status Text:  ${response.statusText}`);\n        }\n        const rawJSON = await response.text();\n        return JSON.parse(rawJSON);\n    }\n\n    private m_glyphTextureCache: GlyphTextureCache;\n\n    private m_loadingJson: Map<string, Promise<any>>;\n    private m_loadingPages: Map<string, Promise<THREE.Texture>>;\n    private m_loadingGlyphs: Map<string, Promise<GlyphData>>;\n    private m_loadedJson: Map<string, any>;\n    private m_loadedPages: Map<string, THREE.Texture>;\n    private m_loadedGlyphs: Map<string, Map<number, GlyphData>>;\n\n    /**\n     * @hidden\n     * Creates a new FontCatalog.\n     *\n     * @param url FontCatalog's URL.\n     * @param name FontCatalog's name.\n     * @param type FontCatalog's type (sdf or msdf).\n     * @param size FontCatalog's glyph size (pixels).\n     * @param maxWidth FontCatalog's maximum glyph width (pixels).\n     * @param maxHeight FontCatalog's maximum glyph height (pixels).\n     * @param distanceRange Distance range used to generate the SDF bitmaps.\n     * @param fonts Array of supported fonts.\n     * @param unicodeBlocks Array of supported Unicode blocks.\n     * @param maxCodePointCount Maximum number of unique code points bitmaps this `FontCatalog`'s\n     * internal texture can store simultaneously.\n     * @param m_replacementGlyph [[GlyphData]] to be used whenever a Unicode code point is not\n     * supported by this `FontCatalog`.\n     *\n     * @returns New FontCatalog.\n     */\n    private constructor(\n        readonly url: string,\n        readonly name: string,\n        readonly type: string,\n        readonly size: number,\n        readonly maxWidth: number,\n        readonly maxHeight: number,\n        readonly distanceRange: number,\n        readonly fonts: Font[],\n        readonly unicodeBlocks: UnicodeBlock[],\n        readonly maxCodePointCount: number,\n        private m_replacementGlyph: GlyphData\n    ) {\n        this.m_glyphTextureCache = new GlyphTextureCache(\n            maxCodePointCount,\n            this.maxWidth + 1,\n            this.maxHeight + 1\n        );\n\n        this.m_loadingJson = new Map<string, Promise<any>>();\n        this.m_loadingPages = new Map<string, Promise<THREE.Texture>>();\n        this.m_loadingGlyphs = new Map<string, Promise<GlyphData>>();\n        this.m_loadedJson = new Map<string, any>();\n        this.m_loadedPages = new Map<string, THREE.Texture>();\n        this.m_loadedGlyphs = new Map<string, Map<number, GlyphData>>();\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose() {\n        this.fonts.length = 0;\n        this.unicodeBlocks.length = 0;\n        this.m_glyphTextureCache.dispose();\n        this.m_loadingJson.clear();\n        this.m_loadingPages.clear();\n        this.m_loadingGlyphs.clear();\n        this.m_loadedJson.clear();\n        this.m_loadedPages.clear();\n        this.m_loadedGlyphs.clear();\n    }\n\n    /**\n     * Removes all loaded (and loading) assets.\n     */\n    clear() {\n        this.m_glyphTextureCache.clear();\n        this.m_loadingJson.clear();\n        this.m_loadingPages.clear();\n        this.m_loadingGlyphs.clear();\n        this.m_loadedJson.clear();\n        this.m_loadedPages.clear();\n        this.m_loadedGlyphs.clear();\n    }\n\n    /**\n     * Updates the internal WebGLRenderTarget.\n     * The update will copy the newly introduced glyphs since the previous update.\n     *\n     * @param renderer WebGLRenderer.\n     */\n    update(renderer: THREE.WebGLRenderer): void {\n        this.m_glyphTextureCache.update(renderer);\n    }\n\n    /**\n     * Internal WebGL Texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_glyphTextureCache.texture;\n    }\n\n    /**\n     * Internal WebGL Texture size.\n     */\n    get textureSize(): THREE.Vector2 {\n        return this.m_glyphTextureCache.textureSize;\n    }\n\n    /**\n     * Current internal loading state.\n     */\n    get isLoading(): boolean {\n        return (\n            this.m_loadingJson.size > 0 ||\n            this.m_loadingPages.size > 0 ||\n            this.m_loadingGlyphs.size > 0\n        );\n    }\n\n    /**\n     * Loads the description file for a specific [[UnicodeBlock]]. This speeds up consequent calls\n     * to `FontCatalog`.loadCharset() that require glyphs from this block to be loaded.\n     *\n     * @param block Requested [[UnicodeBlock]].\n     * @param font [[Font]] to retrieve this Unicode block from.\n     * @param fontStyle [[FontStyle]] assets to load.\n     * @param loadPages If `true`, all pages in this Unicode block will also be loaded.\n     *\n     * @returns Loaded Unicode Block json.\n     */\n    async loadBlock(\n        block: UnicodeBlock,\n        font: Font,\n        fontStyle: FontStyle,\n        loadPages?: boolean\n    ): Promise<any> {\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const jsonPath = `${assetsPath}/${block.name.replace(/ /g, \"_\")}.json`;\n        let json = this.m_loadedJson.get(jsonPath);\n        if (json === undefined) {\n            let jsonPromise = this.m_loadingJson.get(jsonPath);\n            if (jsonPromise === undefined) {\n                try {\n                    jsonPromise = FontCatalog.loadJSON(jsonPath);\n                    this.m_loadingJson.set(jsonPath, jsonPromise);\n                    json = await jsonPromise;\n                    this.m_loadingJson.delete(jsonPath);\n                    this.m_loadedJson.set(jsonPath, json);\n                } catch (e) {\n                    // tslint:disable-next-line:no-console\n                    console.error(e);\n                    this.m_loadingJson.delete(jsonPath);\n                }\n            } else {\n                json = await jsonPromise;\n            }\n        }\n\n        const pagePromises: Array<Promise<THREE.Texture>> = [];\n        if (loadPages === true) {\n            for (const page of json.pages) {\n                pagePromises.push(this.loadPage(`${assetsPath}/${page}`));\n            }\n        }\n        await Promise.all(pagePromises);\n\n        return json;\n    }\n\n    /**\n     * Releases the description file for a specific [[UnicodeBlock]] (and all downloaded pages).\n     * Safe to call when no assets for this block have been loaded.\n     *\n     * @param block Requested [[UnicodeBlock]].\n     * @param font [[Font]] to remove this Unicode block from.\n     * @param fontStyle [[FontStyle]] assets to remove.\n     */\n    removeBlock(block: UnicodeBlock, font: Font, fontStyle: FontStyle): void {\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const jsonPath = `${assetsPath}/${block.name.replace(/ /g, \"_\")}.json`;\n        const json = this.m_loadedJson.get(jsonPath);\n        if (json !== undefined) {\n            for (const page of json.pages) {\n                const pagePath = `${assetsPath}/${page}`;\n                this.m_loadingPages.delete(pagePath);\n                this.m_loadedPages.delete(pagePath);\n            }\n            this.m_loadingJson.delete(jsonPath);\n            this.m_loadedJson.delete(jsonPath);\n        }\n    }\n\n    /**\n     * Loads all the required glyphs needed to render the input text. Character repetition will not\n     * be considered, and only styled assets (with applied font selection, style and variants) will\n     * be loaded.\n     *\n     * @param input Input text.\n     * @param style Specific [[TextRenderStyle]] for which glyphs will be loaded.\n     *\n     * @returns Promise containing an array of all loaded [[GlyphData]] for the input text.\n     */\n    async loadCharset(input: string, style: TextRenderStyle): Promise<GlyphData[]> {\n        const fontName = style.fontName;\n        const fontStyle = style.fontStyle;\n        const shouldTransform =\n            style.fontVariant === FontVariant.AllCaps ||\n            style.fontVariant === FontVariant.SmallCaps;\n\n        const charset = (shouldTransform ? input.toUpperCase() : input).replace(\n            /[\\s\\S](?=([\\s\\S]+))/g,\n            (c, s) => {\n                return s.indexOf(c) + 1 ? \"\" : c;\n            }\n        );\n        const glyphPromises: Array<Promise<GlyphData>> = [];\n        for (const char of charset) {\n            const codePoint = char.codePointAt(0)!;\n            const font = this.getFont(codePoint, fontName);\n            const fontHash = `${font.name}_${fontStyle}`;\n            const glyphHash = `${fontHash}_${codePoint}`;\n\n            let fontGlyphMap = this.m_loadedGlyphs.get(fontHash);\n            if (fontGlyphMap === undefined) {\n                fontGlyphMap = new Map();\n                this.m_loadedGlyphs.set(fontHash, fontGlyphMap);\n            }\n\n            const glyph = fontGlyphMap.get(codePoint);\n            if (glyph === undefined) {\n                let glyphPromise = this.m_loadingGlyphs.get(glyphHash);\n                if (glyphPromise === undefined) {\n                    if (font.charset.indexOf(String.fromCodePoint(codePoint)) === -1) {\n                        const replacementGlyph = this.createReplacementGlyph(codePoint, char, font);\n                        fontGlyphMap!.set(codePoint, replacementGlyph);\n                        this.m_glyphTextureCache.add(glyphHash, replacementGlyph);\n                        continue;\n                    }\n\n                    let charUnicodeBlock: UnicodeBlock | undefined;\n                    for (const block of this.unicodeBlocks) {\n                        if (codePoint >= block.min && codePoint <= block.max) {\n                            charUnicodeBlock = block;\n                            break;\n                        }\n                    }\n\n                    glyphPromise = this.loadAssets(codePoint, fontStyle, charUnicodeBlock!, font);\n                    this.m_loadingGlyphs.set(glyphHash, glyphPromise);\n                    glyphPromise.then((loadedGlyph: GlyphData) => {\n                        this.m_loadingGlyphs.delete(glyphHash);\n                        fontGlyphMap!.set(codePoint, loadedGlyph);\n                        this.m_glyphTextureCache.add(glyphHash, loadedGlyph);\n                    });\n                }\n                glyphPromises.push(glyphPromise);\n            } else if (!this.m_glyphTextureCache.has(glyphHash)) {\n                glyphPromises.push(Promise.resolve(glyph));\n                this.m_glyphTextureCache.add(glyphHash, glyph);\n            }\n        }\n\n        return Promise.all(glyphPromises);\n    }\n\n    /**\n     * Retrieves the loaded [[GlyphData]] for a specific character.\n     * Returns `undefined` if the assets for this glyph haven't been loaded yet.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param font [[Font]] to get this glyph from.\n     * @param fontStyle Specific [[FontStyle]] to get glyphs for.\n     *\n     * @returns [[GlyphData]] for this code point.\n     */\n    getGlyph(codePoint: number, font: Font, fontStyle: FontStyle): GlyphData | undefined {\n        const fontGlyphMap = this.m_loadedGlyphs.get(`${font.name}_${fontStyle}`);\n        if (fontGlyphMap === undefined) {\n            return undefined;\n        }\n        return fontGlyphMap.get(codePoint);\n    }\n\n    /**\n     * Retrieves the loaded [[GlyphData]] for the specified text.\n     * Returns `undefined` if the assets for these glyphs haven't been loaded yet.\n     *\n     * @param input Input text.\n     * @param style Specific [[TextRenderStyle]] to get glyphs for.\n     * @param letterCaseArray Array containing the original letter case for the requested glyphs.\n     *\n     * @returns Array containing [[GlyphData]] for each character of the input text.\n     */\n    getGlyphs(\n        input: string,\n        style: TextRenderStyle,\n        letterCaseArray?: boolean[]\n    ): GlyphData[] | undefined {\n        const result = [];\n        const fontName = style.fontName;\n        const fontStyle = style.fontStyle;\n        const fontVariant = style.fontVariant;\n        const shouldTransform =\n            fontVariant === FontVariant.AllCaps || fontVariant === FontVariant.SmallCaps;\n        for (const character of input) {\n            const transformedCharacter = shouldTransform ? character.toUpperCase() : character;\n            for (const char of transformedCharacter) {\n                const codePoint = char.codePointAt(0)!;\n                const font = this.getFont(codePoint, fontName);\n                const glyphData = this.getGlyph(codePoint, font, fontStyle);\n                if (glyphData !== undefined) {\n                    result.push(glyphData);\n                    if (letterCaseArray !== undefined) {\n                        letterCaseArray.push(char !== character);\n                    }\n                } else {\n                    return undefined;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Gets the best matched font for a specific character.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param fontName Font name suggestion.\n     *\n     * @returns Best matched font.\n     */\n    getFont(codePoint: number, fontName?: string): Font {\n        let selectedFontName: string = this.fonts[0].name;\n        for (const block of this.unicodeBlocks) {\n            if (codePoint >= block.min && codePoint <= block.max) {\n                selectedFontName =\n                    fontName !== undefined &&\n                    block.fonts.find(element => {\n                        return element === fontName;\n                    }) !== undefined\n                        ? fontName\n                        : block.fonts[0];\n                break;\n            }\n        }\n\n        return this.fonts.find(element => {\n            return element.name === selectedFontName;\n        })!;\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `FontCatalog`.\n     *\n     * @param info The info object to increment with the values from this `FontCatalog`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        let numBytes = 0;\n\n        for (const block of this.unicodeBlocks) {\n            numBytes += (block.max - block.min) * 2;\n        }\n\n        // Always stored in RGBA internally.\n        let textureBytes =\n            this.m_glyphTextureCache.textureSize.x * this.m_glyphTextureCache.textureSize.y * 4;\n\n        for (const page in this.m_loadedPages.entries) {\n            if (this.m_loadedPages.get(page) !== undefined) {\n                const loadedPage = this.m_loadedPages.get(page);\n                if (loadedPage !== undefined) {\n                    textureBytes += loadedPage.image.width * loadedPage.image.height * 4;\n                }\n            }\n        }\n\n        info.heapSize += numBytes + textureBytes;\n        info.gpuSize += textureBytes;\n    }\n\n    private createReplacementGlyph(codePoint: number, char: string, font: Font): GlyphData {\n        const replacementGlyph = this.m_replacementGlyph.clone();\n        (replacementGlyph as any).codePoint = codePoint;\n        (replacementGlyph as any).character = char;\n        (replacementGlyph as any).font = font;\n        return replacementGlyph;\n    }\n\n    private async loadAssets(\n        codePoint: number,\n        fontStyle: FontStyle,\n        block: UnicodeBlock,\n        font: Font\n    ): Promise<GlyphData> {\n        const json = await this.loadBlock(block, font, fontStyle);\n        if (json === undefined) {\n            return this.m_replacementGlyph;\n        }\n\n        const sourceGlyphData = (json.chars as SrcGlyphData[]).find(char => char.id === codePoint);\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const texturePath = `${assetsPath}/${json.pages[sourceGlyphData!.page]}`;\n        const texture = await this.loadPage(texturePath);\n\n        const glyphData = new GlyphData(\n            sourceGlyphData!.id,\n            block.name,\n            sourceGlyphData!.width,\n            sourceGlyphData!.height,\n            sourceGlyphData!.xadvance,\n            sourceGlyphData!.xoffset,\n            sourceGlyphData!.yoffset,\n            sourceGlyphData!.x / texture!.image.width,\n            1.0 - (sourceGlyphData!.y + sourceGlyphData!.height) / texture!.image.height,\n            (sourceGlyphData!.x + sourceGlyphData!.width) / texture!.image.width,\n            1.0 - sourceGlyphData!.y / texture!.image.height,\n            texture!,\n            font\n        );\n\n        return glyphData;\n    }\n\n    private async loadPage(pagePath: string): Promise<THREE.Texture> {\n        let page = this.m_loadedPages.get(pagePath);\n        if (page === undefined) {\n            let pagePromise = this.m_loadingPages.get(pagePath);\n            if (pagePromise === undefined) {\n                pagePromise = FontCatalog.loadTexture(pagePath);\n                this.m_loadingPages.set(pagePath, pagePromise);\n                page = await pagePromise;\n                page.wrapS = THREE.ClampToEdgeWrapping;\n                page.wrapT = THREE.ClampToEdgeWrapping;\n                page.minFilter = THREE.NearestFilter;\n                page.needsUpdate = true;\n                if (this.m_loadingPages.delete(pagePath)) {\n                    this.m_loadedPages.set(pagePath, page);\n                }\n                this.m_loadingPages.delete(pagePath);\n            } else {\n                page = await pagePromise;\n            }\n        }\n        return page;\n    }\n\n    private getAssetsPath(fontStyle: FontStyle, font: Font) {\n        let fontStylePath = ASSETS_PATH;\n        switch (fontStyle) {\n            case FontStyle.Bold:\n                if (font.bold !== undefined) {\n                    fontStylePath = BOLD_ASSETS_PATH;\n                }\n                break;\n            case FontStyle.Italic:\n                if (font.italic !== undefined) {\n                    fontStylePath = ITALIC_ASSETS_PATH;\n                }\n                break;\n            case FontStyle.BoldItalic:\n                if (font.boldItalic !== undefined) {\n                    fontStylePath = BOLD_ITALIC_ASSETS_PATH;\n                } else if (font.italic !== undefined) {\n                    fontStylePath = ITALIC_ASSETS_PATH;\n                } else if (font.bold !== undefined) {\n                    fontStylePath = BOLD_ASSETS_PATH;\n                }\n                break;\n        }\n        return `${this.url}/${this.name}${fontStylePath}${font.name!}`;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LRUCache } from \"@here/harp-lrucache\";\nimport * as THREE from \"three\";\n\nimport { Font, FontMetrics } from \"./FontCatalog\";\nimport { GlyphData } from \"./GlyphData\";\nimport { GlyphClearMaterial, GlyphCopyMaterial } from \"./TextMaterials\";\n\n/**\n * Maximum number of texture atlas pages we can copy from in a single go. This amount is determined\n * by the maximum number of texture units available on a pixel shader for all devices:\n * https://webglstats.com/webgl/parameter/MAX_TEXTURE_IMAGE_UNITS\n */\nconst MAX_NUM_COPY_PAGES = 8;\n\n/**\n * Maximum texture size supported. This amount is determined by the maximum texture size supported\n * for all devices:\n * https://webglstats.com/webgl/parameter/MAX_TEXTURE_SIZE\n */\nconst MAX_TEXTURE_SIZE = 4096;\n\n/**\n * @hidden\n * Information stored for every entry in a [[GlyphTextureCache]].\n */\nexport interface GlyphCacheEntry {\n    glyphData: GlyphData;\n    location: THREE.Vector2;\n}\n\n/**\n * @hidden\n * Unified glyph SDF bitmap storage for all fonts in a [[FontCatalog]].\n * Implemented as an abstraction layer on top of an LRUCache and WebGLRenderTarget.\n */\nexport class GlyphTextureCache {\n    private m_cacheWidth: number;\n    private m_cacheHeight: number;\n    private m_textureSize: THREE.Vector2;\n    private m_entryCache: LRUCache<string, GlyphCacheEntry>;\n\n    private m_scene: THREE.Scene;\n    private m_camera: THREE.OrthographicCamera;\n    private m_rt: THREE.WebGLRenderTarget;\n\n    private m_copyTextureSet: Set<THREE.Texture>;\n    private m_copyTransform: THREE.Matrix3;\n    private m_copyPositions: THREE.Vector2[];\n    private m_copyMaterial: GlyphCopyMaterial;\n    private m_copyVertexBuffer: THREE.InterleavedBuffer;\n    private m_copyPositionAttribute: THREE.InterleavedBufferAttribute;\n    private m_copyUVAttribute: THREE.InterleavedBufferAttribute;\n    private m_copyGeometry: THREE.BufferGeometry;\n    private m_copyMesh: THREE.Mesh;\n    private m_copyGeometryDrawCount: number;\n\n    private m_clearMaterial: GlyphClearMaterial;\n    private m_clearPositionAttribute: THREE.BufferAttribute;\n    private m_clearGeometry: THREE.BufferGeometry;\n    private m_clearMesh: THREE.Mesh;\n    private m_clearGeometryDrawCount: number;\n\n    /**\n     * Creates a `GlyphTextureCache` object.\n     *\n     * @param capacity Cache's maximum glyph capacity.\n     * @param entryWidth Maximum entry width.\n     * @param entryHeight Maximum entry height.\n     *\n     * @returns New `GlyphTextureCache`.\n     */\n    constructor(\n        readonly capacity: number,\n        readonly entryWidth: number,\n        readonly entryHeight: number\n    ) {\n        const nRows = Math.floor(Math.sqrt(capacity));\n        this.m_cacheHeight = nRows * nRows < capacity ? nRows + 1 : nRows;\n        this.m_cacheWidth = nRows * this.m_cacheHeight < capacity ? nRows + 1 : nRows;\n\n        this.m_textureSize = new THREE.Vector2(\n            this.m_cacheWidth * entryWidth,\n            this.m_cacheHeight * entryHeight\n        );\n        if (this.m_textureSize.y > MAX_TEXTURE_SIZE || this.m_textureSize.x > MAX_TEXTURE_SIZE) {\n            // tslint:disable-next-line:no-console\n            console.warn(\n                \"GlyphTextureCache texture size (\" +\n                    this.m_textureSize.x +\n                    \", \" +\n                    this.m_textureSize.y +\n                    \") exceeds WebGL's widely supported MAX_TEXTURE_SIZE (\" +\n                    MAX_TEXTURE_SIZE +\n                    \").\\n\" +\n                    \"This could result in rendering errors on some devices.\\n\" +\n                    \"Please consider reducing its capacity or input assets size.\"\n            );\n        }\n\n        this.m_entryCache = new LRUCache<string, GlyphCacheEntry>(capacity);\n        this.initCacheEntries();\n\n        this.m_scene = new THREE.Scene();\n        this.m_camera = new THREE.OrthographicCamera(\n            0,\n            this.m_textureSize.x,\n            this.m_textureSize.y,\n            0\n        );\n        this.m_camera.position.z = 1;\n        this.m_camera.updateMatrixWorld(false);\n        this.m_rt = new THREE.WebGLRenderTarget(this.m_textureSize.x, this.m_textureSize.y, {\n            wrapS: THREE.ClampToEdgeWrapping,\n            wrapT: THREE.ClampToEdgeWrapping,\n            depthBuffer: false,\n            stencilBuffer: false\n        });\n\n        this.m_copyTextureSet = new Set<THREE.Texture>();\n        this.m_copyTransform = new THREE.Matrix3();\n        this.m_copyPositions = [];\n        this.m_copyPositions.push(\n            new THREE.Vector2(),\n            new THREE.Vector2(),\n            new THREE.Vector2(),\n            new THREE.Vector2()\n        );\n\n        this.m_copyMaterial = new GlyphCopyMaterial();\n        this.m_copyVertexBuffer = new THREE.InterleavedBuffer(new Float32Array(capacity * 20), 5);\n        this.m_copyVertexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_copyPositionAttribute = new THREE.InterleavedBufferAttribute(\n            this.m_copyVertexBuffer,\n            3,\n            0\n        );\n        this.m_copyUVAttribute = new THREE.InterleavedBufferAttribute(\n            this.m_copyVertexBuffer,\n            2,\n            3\n        );\n        this.m_copyGeometry = new THREE.BufferGeometry();\n        this.m_copyGeometry.setAttribute(\"position\", this.m_copyPositionAttribute);\n        this.m_copyGeometry.setAttribute(\"uv\", this.m_copyUVAttribute);\n\n        const copyIndexBuffer = new THREE.BufferAttribute(new Uint32Array(capacity * 6), 1);\n        copyIndexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_copyGeometry.setIndex(copyIndexBuffer);\n        this.m_copyMesh = new THREE.Mesh(this.m_copyGeometry, this.m_copyMaterial);\n        this.m_copyMesh.frustumCulled = false;\n        this.m_copyGeometryDrawCount = 0;\n\n        this.m_clearMaterial = new GlyphClearMaterial();\n        this.m_clearPositionAttribute = new THREE.BufferAttribute(\n            new Float32Array(capacity * 8),\n            2\n        );\n        this.m_clearPositionAttribute.setUsage(THREE.DynamicDrawUsage);\n        this.m_clearGeometry = new THREE.BufferGeometry();\n        this.m_clearGeometry.setAttribute(\"position\", this.m_clearPositionAttribute);\n        const clearIndexBuffer = new THREE.BufferAttribute(new Uint32Array(capacity * 6), 1);\n        clearIndexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_clearGeometry.setIndex(clearIndexBuffer);\n        this.m_clearMesh = new THREE.Mesh(this.m_clearGeometry, this.m_clearMaterial);\n        this.m_clearMesh.frustumCulled = false;\n        this.m_clearGeometryDrawCount = 0;\n\n        this.m_scene.add(this.m_clearMesh, this.m_copyMesh);\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose(): void {\n        this.m_entryCache.clear();\n        this.m_scene.remove(this.m_clearMesh, this.m_copyMesh);\n        this.m_rt.dispose();\n        this.m_clearMaterial.dispose();\n        this.m_copyMaterial.dispose();\n        this.m_copyTextureSet.clear();\n        this.m_clearGeometry.dispose();\n        this.m_copyGeometry.dispose();\n    }\n\n    /**\n     * Internal WebGL Texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_rt.texture;\n    }\n\n    /**\n     * Internal WebGL Texture size.\n     */\n    get textureSize(): THREE.Vector2 {\n        return this.m_textureSize;\n    }\n\n    /**\n     * Add a new entry to the GlyphTextureCache. If the limit of entries is hit, the least requested\n     * entry will be replaced.\n     *\n     * @param hash Entry's hash.\n     * @param glyph Entry's glyph data.\n     */\n    add(hash: string, glyph: GlyphData): void {\n        const entry = this.m_entryCache.get(hash);\n        if (entry !== undefined) {\n            return;\n        }\n\n        const oldestEntry = this.m_entryCache.oldest;\n        if (oldestEntry === null) {\n            throw new Error(\"GlyphTextureCache is uninitialized!\");\n        }\n        this.clearCacheEntry(oldestEntry.value);\n        this.copyGlyphToCache(hash, glyph, oldestEntry.value.location);\n    }\n\n    /**\n     * Checks if an entry is in the cache.\n     *\n     * @param hash Entry's hash.\n     *\n     * @returns Test result.\n     */\n    has(hash: string): boolean {\n        return this.m_entryCache.has(hash);\n    }\n\n    /**\n     * Retrieves an entry from the cache.\n     *\n     * @param hash Entry's hash.\n     *\n     * @returns Retrieval result.\n     */\n    get(hash: string): GlyphCacheEntry | undefined {\n        return this.m_entryCache.get(hash);\n    }\n\n    /**\n     * Clears the internal LRUCache.\n     */\n    clear(): void {\n        this.m_copyGeometryDrawCount = 0;\n        this.m_clearGeometryDrawCount = 0;\n        this.m_entryCache.clear();\n        this.m_copyTextureSet.clear();\n        this.initCacheEntries();\n    }\n\n    /**\n     * Updates the internal WebGLRenderTarget.\n     * The update will copy the newly introduced glyphs since the previous update.\n     *\n     * @param renderer WebGLRenderer.\n     */\n    update(renderer: THREE.WebGLRenderer): void {\n        let oldRenderTarget: THREE.RenderTarget | null = null;\n\n        const willClearGeometry = this.m_clearGeometryDrawCount > 0;\n        const willCopyGeometry = this.m_copyGeometryDrawCount > 0;\n\n        if (willClearGeometry || willCopyGeometry) {\n            oldRenderTarget = renderer.getRenderTarget();\n            renderer.setRenderTarget(this.m_rt);\n        }\n\n        if (willClearGeometry) {\n            if (this.m_clearGeometry.index === null) {\n                throw new Error(\"GlyphTextureCache clear geometry index is uninitialized!\");\n            }\n            this.m_clearPositionAttribute.needsUpdate = true;\n            this.m_clearPositionAttribute.updateRange.offset = 0;\n            this.m_clearPositionAttribute.updateRange.count = this.m_clearGeometryDrawCount * 8;\n            this.m_clearGeometry.index.needsUpdate = true;\n            this.m_clearGeometry.index.updateRange.offset = 0;\n            this.m_clearGeometry.index.updateRange.count = this.m_clearGeometryDrawCount * 6;\n            this.m_clearGeometry.setDrawRange(0, this.m_clearGeometryDrawCount * 6);\n\n            this.m_clearMesh.visible = true;\n            this.m_copyMesh.visible = false;\n\n            renderer.render(this.m_scene, this.m_camera);\n            this.m_clearGeometryDrawCount = 0;\n            this.m_clearMesh.visible = false;\n        }\n\n        if (willCopyGeometry) {\n            if (this.m_copyGeometry.index === null) {\n                throw new Error(\"GlyphTextureCache copy geometry index is uninitialized!\");\n            }\n            this.m_copyVertexBuffer.needsUpdate = true;\n            this.m_copyVertexBuffer.updateRange.offset = 0;\n            this.m_copyVertexBuffer.updateRange.count = this.m_copyGeometryDrawCount * 20;\n            this.m_copyGeometry.index.needsUpdate = true;\n            this.m_copyGeometry.index.updateRange.offset = 0;\n            this.m_copyGeometry.index.updateRange.count = this.m_copyGeometryDrawCount * 6;\n            this.m_copyGeometry.setDrawRange(0, this.m_copyGeometryDrawCount * 6);\n\n            this.m_copyMesh.visible = true;\n            const srcPages = Array.from(this.m_copyTextureSet);\n            const nCopies = Math.ceil(this.m_copyTextureSet.size / MAX_NUM_COPY_PAGES);\n            for (let copyIndex = 0; copyIndex < nCopies; copyIndex++) {\n                const pageOffset = copyIndex * MAX_NUM_COPY_PAGES;\n                this.m_copyMaterial.uniforms.pageOffset.value = pageOffset;\n                for (let i = 0; i < MAX_NUM_COPY_PAGES; i++) {\n                    const pageIndex = pageOffset + i;\n                    if (pageIndex < this.m_copyTextureSet.size) {\n                        this.m_copyMaterial.uniforms[\"page\" + i].value = srcPages[pageIndex];\n                    }\n                }\n\n                renderer.render(this.m_scene, this.m_camera);\n            }\n            this.m_copyTextureSet.clear();\n            this.m_copyGeometryDrawCount = 0;\n        }\n        if (willClearGeometry || willCopyGeometry) {\n            renderer.setRenderTarget(oldRenderTarget);\n        }\n    }\n\n    private initCacheEntries() {\n        const dummyMetrics: FontMetrics = {\n            size: 0,\n            distanceRange: 0,\n            base: 0,\n            lineHeight: 0,\n            lineGap: 0,\n            capHeight: 0,\n            xHeight: 0\n        };\n        const dummyFont: Font = {\n            name: \"\",\n            metrics: dummyMetrics,\n            charset: \"\"\n        };\n\n        const dummyGlyphData = new GlyphData(\n            0,\n            \"\",\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            THREE.Texture.DEFAULT_IMAGE,\n            dummyFont\n        );\n\n        for (let i = 0; i < this.m_cacheHeight; i++) {\n            for (let j = 0; j < this.m_cacheWidth; j++) {\n                const dummyEntry: GlyphCacheEntry = {\n                    glyphData: dummyGlyphData,\n                    location: new THREE.Vector2(j, i)\n                };\n                this.m_entryCache.set(`Dummy_${i * this.m_cacheHeight + j}`, dummyEntry);\n            }\n        }\n    }\n\n    private copyGlyphToCache(hash: string, glyph: GlyphData, cacheLocation: THREE.Vector2) {\n        this.m_copyTextureSet.add(glyph.texture);\n        let copyTextureIndex = 0;\n        for (const value of this.m_copyTextureSet.values()) {\n            if (value === glyph.texture) {\n                break;\n            }\n            copyTextureIndex++;\n        }\n        glyph.copyIndex = copyTextureIndex;\n\n        this.m_copyTransform.set(\n            1.0,\n            0.0,\n            cacheLocation.x * this.entryWidth - glyph.offsetX,\n            0.0,\n            1.0,\n            cacheLocation.y * this.entryHeight - glyph.positions[0].y,\n            0.0,\n            0.0,\n            0.0\n        );\n        for (let i = 0; i < 4; ++i) {\n            this.m_copyPositions[i].set(glyph.positions[i].x, glyph.positions[i].y);\n            this.m_copyPositions[i].applyMatrix3(this.m_copyTransform);\n        }\n\n        if (this.m_copyGeometryDrawCount >= this.capacity) {\n            return;\n        }\n        const baseVertex = this.m_copyGeometryDrawCount * 4;\n        const baseIndex = this.m_copyGeometryDrawCount * 6;\n\n        for (let i = 0; i < 4; ++i) {\n            this.m_copyPositionAttribute.setXYZ(\n                baseVertex + i,\n                this.m_copyPositions[i].x,\n                this.m_copyPositions[i].y,\n                glyph.copyIndex\n            );\n            this.m_copyUVAttribute.setXY(\n                baseVertex + i,\n                glyph.sourceTextureCoordinates[i].x,\n                glyph.sourceTextureCoordinates[i].y\n            );\n        }\n\n        if (this.m_copyGeometry.index === null) {\n            throw new Error(\"GlyphTextureCache copy geometry index is uninitialized!\");\n        }\n        this.m_copyGeometry.index.setX(baseIndex, baseVertex);\n        this.m_copyGeometry.index.setX(baseIndex + 1, baseVertex + 1);\n        this.m_copyGeometry.index.setX(baseIndex + 2, baseVertex + 2);\n        this.m_copyGeometry.index.setX(baseIndex + 3, baseVertex + 2);\n        this.m_copyGeometry.index.setX(baseIndex + 4, baseVertex + 1);\n        this.m_copyGeometry.index.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_copyGeometryDrawCount;\n\n        const u0 = this.m_copyPositions[0].x / this.m_textureSize.x;\n        const v0 = this.m_copyPositions[0].y / this.m_textureSize.y;\n        const u1 = this.m_copyPositions[3].x / this.m_textureSize.x;\n        const v1 = this.m_copyPositions[3].y / this.m_textureSize.y;\n        glyph.dynamicTextureCoordinates[0].set(u0, v0);\n        glyph.dynamicTextureCoordinates[1].set(u1, v0);\n        glyph.dynamicTextureCoordinates[2].set(u0, v1);\n        glyph.dynamicTextureCoordinates[3].set(u1, v1);\n\n        glyph.isInCache = true;\n        this.m_entryCache.set(hash, {\n            glyphData: glyph,\n            location: cacheLocation\n        });\n    }\n\n    private clearCacheEntry(entry: GlyphCacheEntry) {\n        entry.glyphData.isInCache = false;\n        this.m_copyPositions[0].set(\n            entry.location.x * this.entryWidth,\n            entry.location.y * this.entryHeight\n        );\n        this.m_copyPositions[1].set(\n            (entry.location.x + 1) * this.entryWidth,\n            entry.location.y * this.entryHeight\n        );\n        this.m_copyPositions[2].set(\n            entry.location.x * this.entryWidth,\n            (entry.location.y + 1) * this.entryHeight\n        );\n        this.m_copyPositions[3].set(\n            (entry.location.x + 1) * this.entryWidth,\n            (entry.location.y + 1) * this.entryHeight\n        );\n\n        if (this.m_clearGeometryDrawCount >= this.capacity) {\n            return;\n        }\n        const baseVertex = this.m_clearGeometryDrawCount * 4;\n        const baseIndex = this.m_clearGeometryDrawCount * 6;\n\n        for (let i = 0; i < 4; ++i) {\n            this.m_clearPositionAttribute.setXY(\n                baseVertex + i,\n                this.m_copyPositions[i].x,\n                this.m_copyPositions[i].y\n            );\n        }\n\n        if (this.m_clearGeometry.index === null) {\n            throw new Error(\"GlyphTextureCache clear geometry index is uninitialized!\");\n        }\n        this.m_clearGeometry.index.setX(baseIndex, baseVertex);\n        this.m_clearGeometry.index.setX(baseIndex + 1, baseVertex + 1);\n        this.m_clearGeometry.index.setX(baseIndex + 2, baseVertex + 2);\n        this.m_clearGeometry.index.setX(baseIndex + 3, baseVertex + 2);\n        this.m_clearGeometry.index.setX(baseIndex + 4, baseVertex + 1);\n        this.m_clearGeometry.index.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_clearGeometryDrawCount;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\n\n/** @hidden */\nexport class Entry<Key, Value> {\n    constructor(\n        public key: Key,\n        public value: Value,\n        public size: number,\n        public newer: Entry<Key, Value> | null,\n        public older: Entry<Key, Value> | null\n    ) {}\n}\n\n/**\n * Fixed size cache that evicts its entries in least-recently-used order when it overflows.\n * Modeled after standard JavaScript `Map` otherwise.\n */\nexport class LRUCache<Key, Value> {\n    /**\n     * Optional callback that is called on every item that is evicted from the cache.\n     *\n     * **Note**: This callback is not called when an item is explicitly deleted from the map via\n     * [[delete]] or [[clear]].\n     */\n    evictionCallback?: (key: Key, value: Value) => void;\n\n    /**\n     * Optional callback that is called on every item that should be evicted from the cache to\n     * determine if it can be removed, or should be locked in the cache.\n     *\n     * It returns `true` if the item can be removed from cache, `false` otherwise. Locking items in\n     * the cache should be a temporary measure, since if the cache is filled with non-evictable\n     * items only, it may grow beyond its capacity.\n     *\n     * **Note**: This callback is not called when an item is explicitly deleted from the map via\n     * [[delete]] or [[clear]].\n     */\n    canEvict?: (key: Key, value: Value) => boolean;\n    private m_capacity: number;\n    private m_size = 0;\n\n    /**\n     * The internal map object that keeps the key-value pairs and their order.\n     */\n    private m_map = new Map<Key, Entry<Key, Value>>();\n\n    /**\n     * The newest entry, i.e. the most recently used item.\n     */\n    private m_newest: Entry<Key, Value> | null = null;\n\n    /**\n     * The oldest entry, i.e. the least recently used item.\n     */\n    private m_oldest: Entry<Key, Value> | null = null;\n\n    /**\n     * A function determining the size per element.\n     */\n    private m_sizeFunction: (v: Value) => number;\n\n    /**\n     * Creates a new instance of `LRUCache`.\n     *\n     * The optional [[sizeFunction]] can be used to fine tune the memory consumption of all cached\n     * elements, thus [[cacheCapacity]] means then memory used (in MBs). Otherwise, if\n     * [[sizeFunction]] is not specified, the [[cacheCapacity]] accounts for the maximum\n     * number of elements stored.\n     *\n     * @param cacheCapacity Number used to configure the maximum cache size, may express\n     * number of entries or memory consumed in megabytes depending on [[sizeFunction]].\n     * @param sizeFunction A function determining the size per element.\n     */\n    constructor(cacheCapacity: number, sizeFunction: (v: Value) => number = () => 1) {\n        this.m_capacity = cacheCapacity;\n        this.m_sizeFunction = sizeFunction;\n    }\n\n    /**\n     * Iterates over all items from the most recently used item to the least recently used one.\n     *\n     * **Note**: Results are undefined if the entire cache is modified during iteration. You may\n     * although modify the current element in [[callbackfn]] function.\n     *\n     * @param callbackfn The callback to call for each item.\n     * @param thisArg Optional this argument for the callback.\n     */\n    forEach(\n        callbackfn: (value: Value, key: Key, map: LRUCache<Key, Value>) => void,\n        thisArg?: any\n    ): void {\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const older = entry.older;\n            callbackfn.call(thisArg, entry.value, entry.key, this);\n            entry = older;\n        }\n    }\n\n    /**\n     * The size of the cache, i.e. the sum of all the sizes of all the objects in the cache.\n     *\n     * @returns The size of the cache.\n     */\n    get size(): number {\n        return this.m_size;\n    }\n\n    /**\n     * Returns the maximum capacity of the cache, i.e. the maximum number of elements this cache\n     * can contain or the total amount of memory that may be consumed by cache if element size\n     * function was specified in cache c-tor.\n     *\n     * @returns The capacity of the cache.\n     */\n    get capacity(): number {\n        return this.m_capacity;\n    }\n\n    /**\n     * @deprecated - DO NOT USE. Will be removed in future versions.\n     *\n     * Returns the internal map object that keeps the key-value pairs and their order.\n     *\n     * @returns The internal map object.\n     */\n    get map(): Map<Key, Entry<Key, Value>> {\n        // ### TODO - remove me. Cache must not expose its internal object,\n        // modifications to it are fatal for the internal state machine.\n        return this.m_map;\n    }\n\n    /**\n     * Returns the newest entry in the cache.\n     *\n     * @returns Newest entry in the cache.\n     */\n    get newest(): Entry<Key, Value> | null {\n        return this.m_newest;\n    }\n\n    /**\n     * Returns the oldest entry in the cache.\n     *\n     * Note: Does not promote the oldest item as most recently used item.\n     *\n     * @returns Oldest entry in the cache.\n     */\n    get oldest(): Entry<Key, Value> | null {\n        return this.m_oldest;\n    }\n\n    /**\n     * Resets the capacity of this cache. If `newCapacity` is smaller than the current cache size,\n     * all items will be evicted until the cache shrinks to `newCapacity`.\n     *\n     * @param newCapacity The new capacity of this cache.\n     */\n    setCapacity(newCapacity: number): void {\n        this.m_capacity = newCapacity;\n        this.evict();\n    }\n\n    /**\n     * Resets the cache capacity and function used to measure the element size.\n     *\n     * @param newCapacity The new capacity masured in units returned from [[sizeMeasure]] funtion.\n     * @param sizeMeasure Function that defines the size of element, if you want to measure\n     * number of elements only always return 1 from this function (default), you may also\n     * specify own function that measures entries by memory consumed, nubmer of sub-elements, etc.\n     */\n    setCapacityAndMeasure(newCapacity: number, sizeMeasure: (v: Value) => number = () => 1) {\n        this.m_capacity = newCapacity;\n        this.m_sizeFunction = sizeMeasure;\n        this.shrinkToCapacity();\n    }\n\n    /**\n     * Updates the size of all elements in this cache. If their aggregated size is larger than the\n     * capacity, items will be evicted until the cache shrinks to fit the capacity.\n     */\n    shrinkToCapacity(): void {\n        let size = 0;\n        const sizeFunction = this.m_sizeFunction;\n\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const entrySize = sizeFunction(entry.value);\n            entry.size = entrySize;\n            size += entrySize;\n            entry = entry.older;\n        }\n\n        this.m_size = size;\n        this.evict();\n    }\n\n    /**\n     * Inserts or updates a key/value pair in the cache.\n     *\n     * If the key already existed in the cache, it will be updated and promoted to the most recently\n     * used item.\n     *\n     * If the key didn't exist in the cache, it will be inserted as most recently used item. An\n     * eviction of the least recently used item takes place if the cache exceeded its capacity.\n     *\n     * @param key The key for the key-value pair to insert or update.\n     * @param value The value for the key-value pair to insert or update.\n     */\n    set(key: Key, value: Value) {\n        const valueSize = this.m_sizeFunction(value);\n        let entry = this.m_map.get(key);\n        if (entry !== undefined) {\n            this.m_size = this.m_size - entry.size + valueSize;\n            entry.value = value;\n            entry.size = valueSize;\n            this.promoteEntry(entry);\n            this.evict();\n        } else {\n            if (valueSize > this.m_capacity) {\n                return; // single item too big to cache\n            }\n\n            entry = new Entry<Key, Value>(key, value, valueSize, null, null);\n            if (this.m_map.size === 0) {\n                this.m_newest = this.m_oldest = entry;\n            } else {\n                assert(this.m_newest !== null);\n                const newest: Entry<Key, Value> = this.m_newest!;\n                entry.older = this.m_newest;\n                newest.newer = entry;\n                this.m_newest = entry;\n            }\n            this.m_map.set(key, entry);\n            this.m_size += valueSize;\n            this.evict();\n        }\n    }\n\n    /**\n     * Looks up key in the cache and returns the associated value.\n     *\n     * @param key The key to look up.\n     * @returns The associated value, or `undefined` if the key-value pair is not in the cache.\n     */\n    get(key: Key): Value | undefined {\n        const entry = this.m_map.get(key);\n        if (entry === undefined) {\n            return undefined;\n        }\n\n        this.promoteEntry(entry);\n        return entry.value;\n    }\n\n    /**\n     * Test if a key/value pair is in the cache.\n     *\n     * @param key The key to look up.\n     * @returns `true` if the key-value pair is in the cache, `false` otherwise.\n     */\n    has(key: Key): boolean {\n        return this.m_map.has(key);\n    }\n\n    /**\n     * Clears the cache and removes all stored key-value pairs.\n     *\n     * Does not call the eviction callback. Use [[evictAll]] to clear the cache and call the\n     * eviction callback.\n     */\n    clear(): void {\n        this.m_newest = this.m_oldest = null;\n        this.m_size = 0;\n        this.m_map.clear();\n    }\n\n    /**\n     * Evicts all items from the cache, calling the eviction callback on each item.\n     *\n     * Use [[clear]] to remove all items without calling the eviction callback.\n     */\n    evictAll(): void {\n        const cb = this.evictionCallback;\n        if (cb !== undefined) {\n            this.forEach((value, key) => cb(key, value));\n        }\n        this.clear();\n    }\n\n    /**\n     * Evict selected elements from the cache using [[selector]] function.\n     *\n     * @param selector The function for selecting elements for eviction.\n     * @param thisArg Optional _this_ object reference.\n     */\n    evictSelected(selector: (value: Value, key: Key) => boolean, thisArg?: any) {\n        const cb = this.evictionCallback;\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const entryOlder = entry.older;\n            if (selector.call(thisArg, entry.value, entry.key)) {\n                if (cb !== undefined) {\n                    cb(entry.key, entry.value);\n                }\n                this.deleteEntry(entry);\n                this.m_map.delete(entry.key);\n            }\n            entry = entryOlder;\n        }\n    }\n\n    /**\n     * Explicitly removes a key-value pair from the cache.\n     *\n     * **Note**: This is an explicit removal, thus, the eviction callback will not be called.\n     *\n     * @param key The key of the key-value pair to delete.\n     * @returns `true` if the key-value pair existed and was deleted, `false` otherwise.\n     */\n    delete(key: Key): boolean {\n        const entry = this.m_map.get(key);\n        if (entry === undefined) {\n            return false;\n        }\n        this.deleteEntry(entry);\n        return this.m_map.delete(key);\n    }\n\n    protected evict() {\n        while (this.m_oldest !== null && this.m_size > this.m_capacity) {\n            const evicted = this.evictOldest();\n            if (evicted === undefined) {\n                return;\n            }\n        }\n    }\n\n    protected evictOldest(): Entry<Key, Value> | undefined {\n        assert(this.m_oldest !== null);\n        const oldest = this.m_oldest!;\n        assert(oldest.older === null);\n        let itemToRemove = oldest;\n\n        if (this.canEvict !== undefined) {\n            while (!this.canEvict(itemToRemove.key, itemToRemove.value)) {\n                if (itemToRemove.newer === null) {\n                    return undefined;\n                }\n                itemToRemove = itemToRemove.newer;\n            }\n        }\n\n        if (itemToRemove === oldest) {\n            this.m_oldest = itemToRemove.newer;\n            if (itemToRemove.newer !== null) {\n                assert(itemToRemove.newer.older === itemToRemove);\n                itemToRemove.newer.older = null;\n            }\n        } else {\n            if (itemToRemove.newer !== null) {\n                assert(itemToRemove.newer.older === itemToRemove);\n                itemToRemove.newer.older = itemToRemove.older;\n                if (itemToRemove.older !== null) {\n                    itemToRemove.older.newer = itemToRemove.newer;\n                }\n            } else {\n                return undefined;\n            }\n        }\n\n        const isOk = this.m_map.delete(itemToRemove.key);\n        assert(isOk === true);\n        if (isOk && this.evictionCallback !== undefined) {\n            this.evictionCallback(itemToRemove.key, itemToRemove.value);\n        }\n        this.m_size -= itemToRemove.size;\n        return itemToRemove;\n    }\n\n    private deleteEntry(entry: Entry<Key, Value>): void {\n        if (entry === this.m_newest) {\n            this.m_newest = entry.older;\n        } else if (entry.newer) {\n            entry.newer.older = entry.older;\n        } else {\n            assert(false);\n        }\n\n        if (entry === this.m_oldest) {\n            this.m_oldest = entry.newer;\n        } else if (entry.older) {\n            entry.older.newer = entry.newer;\n        } else {\n            assert(false);\n        }\n\n        this.m_size -= entry.size;\n    }\n\n    private promoteEntry(entry: Entry<Key, Value>): void {\n        if (entry === this.m_newest) {\n            return;\n        } // already newest, nothing to do\n\n        // re-link newer and older items\n        if (entry.newer) {\n            assert(entry.newer.older === entry);\n            entry.newer.older = entry.older;\n        }\n        if (entry.older) {\n            assert(entry.older.newer === entry);\n            entry.older.newer = entry.newer;\n        }\n        if (entry === this.m_oldest) {\n            this.m_oldest = entry.newer;\n        }\n        // re-link ourselves\n        entry.newer = null;\n        entry.older = this.m_newest;\n\n        // finally, set ourselves as the newest entry\n        assert(this.m_newest !== null);\n        const newest = this.m_newest!;\n        assert(newest.newer === null);\n        newest.newer = entry;\n        this.m_newest = entry;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { FontCatalog } from \"./rendering/FontCatalog\";\nimport { GlyphData } from \"./rendering/GlyphData\";\nimport { TextBufferObject } from \"./rendering/TextBufferObject\";\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT, TextGeometry } from \"./rendering/TextGeometry\";\nimport { SdfTextMaterial } from \"./rendering/TextMaterials\";\nimport { FontVariant, TextLayoutStyle, TextRenderStyle } from \"./rendering/TextStyle\";\nimport { LineTypesetter } from \"./typesetting/LineTypesetter\";\nimport { PathTypesetter, PathTypesettingParameters } from \"./typesetting/PathTypesetter\";\nimport { TypesettingParameters } from \"./typesetting/Typesetter\";\nimport { createSdfTextMaterial } from \"./utils/MaterialUtils\";\n\nconst tempTextPosition = new THREE.Vector3();\nconst tempTextBounds = {\n    array: [new THREE.Box2()],\n    offset: 0\n};\nlet tempVertexBuffer = new Float32Array();\n\ninterface TextPlacementParameters {\n    input: string | GlyphData[];\n    layer: TextCanvasLayer;\n    textPath?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n    textPathOverflow?: boolean;\n    bounds?: THREE.Box2;\n    individualBounds?: THREE.Box2[];\n    computeTextBuffer?: boolean;\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`measureText` function call.\n */\nexport interface MeasurementParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Output per-character bounds.\n     */\n    outputCharacterBounds?: THREE.Box2[];\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`addText` function call.\n */\nexport interface AdditionParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Layer where text will be added.\n     */\n    layer?: number;\n\n    /**\n     * If `true`, the input position parameter will be updated to contain the position of the last\n     * glyph added.\n     */\n    updatePosition?: boolean;\n\n    /**\n     * Object containing additional data intended to be retrieved during picking.\n     */\n    pickingData?: any;\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`createTextBufferObject` function call.\n */\nexport interface TextBufferCreationParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Output text bounding-box.\n     */\n    outputBounds?: boolean;\n\n    /**\n     * Output per-character bounds.\n     */\n    outputCharacterBounds?: boolean;\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n\n    /**\n     * If `true`, both the [[TextRenderStyle]] and [[TextLayoutStyle]] used to generate the\n     * [[TextBufferObject]] will be stored in it.\n     */\n    storeStyles?: boolean;\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`addTextBufferObject` function call.\n */\nexport interface TextBufferAdditionParameters {\n    layer?: number;\n    position?: THREE.Vector3;\n    scale?: number;\n    rotation?: number;\n    color?: THREE.Color;\n    opacity?: number;\n    backgroundColor?: THREE.Color;\n    backgroundOpacity?: number;\n    pickingData?: any;\n}\n\n/**\n * Default's [[TextCanvas]] layer identifier.\n */\nexport const DEFAULT_TEXT_CANVAS_LAYER = 0;\n\n/**\n * [[TextCanvas]] rendering layer.\n */\nexport interface TextCanvasLayer {\n    id: number;\n    storage: TextGeometry;\n}\n\n/**\n * [[TextCanvas]] construction parameters.\n */\nexport interface TextCanvasParameters {\n    /**\n     * WebGLRenderer internally used by this `TextCanvas`.\n     */\n    renderer: THREE.WebGLRenderer;\n\n    /**\n     * Initial [[FontCatalog]].\n     */\n    fontCatalog: FontCatalog;\n\n    /**\n     * Minimum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    minGlyphCount: number;\n\n    /**\n     * Maximum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    maxGlyphCount: number;\n\n    /**\n     * Material used to render text.\n     */\n    material?: THREE.Material;\n\n    /**\n     * Material used to render text background.\n     */\n    backgroundMaterial?: THREE.Material;\n}\n\n/**\n * Describes estimated usage of memory on heap and GPU.\n */\nexport interface MemoryUsage {\n    heapSize: number;\n    gpuSize: number;\n}\n\n/**\n * three.js text rendering engine which can manage and render high-quality, transformable, stylable\n * and properly layout SDF and MSDF text.\n */\nexport class TextCanvas {\n    /**\n     * Minimum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    readonly minGlyphCount: number;\n\n    /**\n     * Maximum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    readonly maxGlyphCount: number;\n\n    private m_renderer: THREE.WebGLRenderer;\n    private m_fontCatalog: FontCatalog;\n\n    private readonly m_defaultTextRenderStyle: TextRenderStyle;\n    private m_currentTextRenderStyle: TextRenderStyle;\n    private readonly m_defaultTextLayoutStyle: TextLayoutStyle;\n    private m_currentTextLayoutStyle: TextLayoutStyle;\n\n    private m_material: SdfTextMaterial | THREE.Material;\n    private m_bgMaterial: SdfTextMaterial | THREE.Material;\n    private m_ownsMaterial: boolean;\n    private m_ownsBgMaterial: boolean;\n\n    private m_defaultLayer: TextCanvasLayer;\n    private m_layers: TextCanvasLayer[];\n\n    private m_lineTypesetter: LineTypesetter;\n    private m_pathTypesetter: PathTypesetter;\n\n    /**\n     * Constructs a new `TextCanvas`.\n     *\n     * @param params `TextCanvas` construction parameters.\n     *\n     * @returns New `TextCanvas`.\n     */\n    constructor(params: TextCanvasParameters) {\n        this.m_renderer = params.renderer;\n        this.m_fontCatalog = params.fontCatalog;\n        this.minGlyphCount = params.minGlyphCount;\n        this.maxGlyphCount = params.maxGlyphCount;\n\n        if (params.material === undefined) {\n            this.m_ownsMaterial = true;\n            this.m_material = createSdfTextMaterial({ fontCatalog: params.fontCatalog });\n        } else {\n            this.m_ownsMaterial = false;\n            this.m_material = params.material;\n        }\n        if (params.backgroundMaterial === undefined) {\n            this.m_ownsBgMaterial = true;\n            this.m_bgMaterial = createSdfTextMaterial({\n                fontCatalog: params.fontCatalog,\n                isBackground: true\n            });\n        } else {\n            this.m_ownsBgMaterial = false;\n            this.m_bgMaterial = params.backgroundMaterial;\n        }\n\n        this.m_defaultLayer = {\n            id: DEFAULT_TEXT_CANVAS_LAYER,\n            storage: new TextGeometry(\n                new THREE.Scene(),\n                this.m_material,\n                this.m_bgMaterial,\n                this.minGlyphCount,\n                this.maxGlyphCount\n            )\n        };\n        this.m_layers = [this.m_defaultLayer];\n\n        this.m_defaultTextRenderStyle = new TextRenderStyle();\n        this.m_currentTextRenderStyle = this.m_defaultTextRenderStyle;\n        this.m_defaultTextLayoutStyle = new TextLayoutStyle();\n        this.m_currentTextLayoutStyle = this.m_defaultTextLayoutStyle;\n\n        this.m_lineTypesetter = new LineTypesetter();\n        this.m_pathTypesetter = new PathTypesetter();\n    }\n\n    /**\n     * Currently active [[FontCatalog]].\n     */\n    get fontCatalog(): FontCatalog {\n        return this.m_fontCatalog;\n    }\n    set fontCatalog(value: FontCatalog) {\n        this.m_fontCatalog = value;\n\n        const material = this.m_material as THREE.RawShaderMaterial;\n        material.uniforms.sdfTexture.value = this.m_fontCatalog.texture;\n        material.uniforms.sdfParams.value = new THREE.Vector4(\n            this.m_fontCatalog.textureSize.x,\n            this.m_fontCatalog.textureSize.y,\n            this.m_fontCatalog.size,\n            this.m_fontCatalog.distanceRange\n        );\n        material.defines.MSDF = this.m_fontCatalog.type === \"msdf\" ? 1.0 : 0.0;\n\n        const bgMaterial = this.m_bgMaterial as THREE.RawShaderMaterial;\n        bgMaterial.uniforms.sdfTexture.value = this.m_fontCatalog.texture;\n        bgMaterial.uniforms.sdfParams.value = new THREE.Vector4(\n            this.m_fontCatalog.textureSize.x,\n            this.m_fontCatalog.textureSize.y,\n            this.m_fontCatalog.size,\n            this.m_fontCatalog.distanceRange\n        );\n        bgMaterial.defines.MSDF = this.m_fontCatalog.type === \"msdf\" ? 1.0 : 0.0;\n    }\n\n    /**\n     * Currently active text rendering material.\n     */\n    get material(): THREE.Material {\n        return this.m_material;\n    }\n    set material(value: THREE.Material) {\n        if (this.m_ownsMaterial) {\n            this.m_material.dispose();\n            this.m_ownsMaterial = false;\n        }\n\n        this.m_material = value;\n        for (const layer of this.m_layers) {\n            layer.storage.mesh.material = this.m_material;\n        }\n    }\n\n    /**\n     * Currently active text background rendering material.\n     */\n    get backgroundMaterial(): THREE.Material {\n        return this.m_bgMaterial;\n    }\n    set backgroundMaterial(value: THREE.Material) {\n        if (this.m_ownsBgMaterial) {\n            this.m_bgMaterial.dispose();\n            this.m_ownsBgMaterial = false;\n        }\n\n        this.m_bgMaterial = value;\n        for (const layer of this.m_layers) {\n            layer.storage.backgroundMesh.material = this.m_bgMaterial;\n        }\n    }\n\n    /**\n     * Currently active text rendering style.\n     */\n    get textRenderStyle(): TextRenderStyle {\n        return this.m_currentTextRenderStyle;\n    }\n    set textRenderStyle(style: TextRenderStyle) {\n        this.m_currentTextRenderStyle = style;\n    }\n\n    /**\n     * Currently active text layout style.\n     */\n    get textLayoutStyle(): TextLayoutStyle {\n        return this.m_currentTextLayoutStyle;\n    }\n    set textLayoutStyle(style: TextLayoutStyle) {\n        this.m_currentTextLayoutStyle = style;\n    }\n\n    /**\n     * Clears all the placed glyphs in this `TextCanvas` (as well as resetting the current style).\n     */\n    clear() {\n        for (const layer of this.m_layers) {\n            layer.storage.clear();\n        }\n        this.m_currentTextRenderStyle = this.m_defaultTextRenderStyle;\n    }\n\n    /**\n     * Renders the content of this `TextCanvas`.\n     *\n     * @param camera Orthographic camera.\n     * @param target Optional render target.\n     * @param clear Optional render target clear operation.\n     */\n    render(camera: THREE.OrthographicCamera, target?: THREE.WebGLRenderTarget, clear?: boolean) {\n        this.m_fontCatalog.update(this.m_renderer);\n        let oldTarget: THREE.RenderTarget | null = null;\n        if (target !== undefined) {\n            oldTarget = this.m_renderer.getRenderTarget();\n            this.m_renderer.setRenderTarget(target);\n        }\n        if (clear === true) {\n            this.m_renderer.clear(true);\n        }\n        for (const layer of this.m_layers) {\n            layer.storage.update();\n            this.m_renderer.clear(false, true);\n            this.m_renderer.render(layer.storage.scene, camera);\n        }\n        if (target !== undefined) {\n            this.m_renderer.setRenderTarget(oldTarget);\n        }\n    }\n\n    /**\n     * Creates a new `TextCanvas` rendering layer and returns. If there was already a layer for the\n     * input `layerId`, it just returns this one instead.\n     *\n     * @param layerId Desired layer identifier.\n     *\n     * @returns Created [[TextCanvasLayer]].\n     */\n    addLayer(layerId: number): TextCanvasLayer {\n        let result = this.getLayer(layerId);\n        if (result === undefined) {\n            result = {\n                id: layerId,\n                storage: new TextGeometry(\n                    new THREE.Scene(),\n                    this.m_material,\n                    this.m_bgMaterial,\n                    this.minGlyphCount,\n                    this.maxGlyphCount\n                )\n            };\n\n            this.m_layers.push(result);\n            this.m_layers.sort((a: TextCanvasLayer, b: TextCanvasLayer) => {\n                return a.id - b.id;\n            });\n        }\n        return result;\n    }\n\n    /**\n     * Retrieves a specific `TextCanvas` rendering layer.\n     *\n     * @param layerId Desired layer identifier.\n     *\n     * @returns Selected [[TextCanvasLayer]].\n     */\n    getLayer(layerId: number): TextCanvasLayer | undefined {\n        return this.m_layers.find(layer => layer.id === layerId);\n    }\n\n    /**\n     * Retrieves all `TextCanvas` rendering layers.\n     *\n     * @returns Array of [[TextCanvasLayer]]s.\n     */\n    getAllLayers(): TextCanvasLayer[] {\n        return this.m_layers;\n    }\n\n    /**\n     * Returns the computed bounding box for the input text. The current [[TextRenderStyle]] and\n     * [[TextLayoutStyle]] will influence the results of this function.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param outputBounds Output text bounding box.\n     * @param params Optional measurement parameters.\n     *\n     * @returns Result of the measurement. If `false`, some error occurred during execution and the\n     * input text couldn't be properly measured.\n     */\n    measureText(\n        text: string | GlyphData[],\n        outputBounds: THREE.Box2,\n        params?: MeasurementParameters\n    ): boolean {\n        tempTextPosition.set(0, 0, 0);\n\n        let path;\n        let pathOverflow;\n        let upperCaseArray;\n        let outputCharacterBounds;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            outputCharacterBounds = params.outputCharacterBounds;\n            if (params.path !== undefined) {\n                const pathOrigin = params.path.getPoint(0);\n                if (pathOrigin === null) {\n                    return false;\n                }\n                tempTextPosition.set(pathOrigin.x, pathOrigin.y, 0.0);\n            }\n            if (params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        }\n\n        return this.placeText({\n            input: text,\n            layer: this.m_defaultLayer,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            bounds: outputBounds,\n            individualBounds: outputCharacterBounds,\n            letterCaseArray: upperCaseArray\n        });\n    }\n\n    /**\n     * Adds the input text to this `TextCanvas` in the specified screen position. The current\n     * [[TextRenderStyle]] and [[TextLayoutStyle]] will influence the results of this function.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param position Screen position.\n     * @param params Optional addition parameters.\n     *\n     * @returns Result of the addition. If `false`, some error occurred during execution and the\n     * input text couldn't be properly added.\n     */\n    addText(\n        text: string | GlyphData[],\n        position: THREE.Vector3,\n        params?: AdditionParameters\n    ): boolean {\n        tempTextPosition.copy(position);\n\n        let path;\n        let pathOverflow;\n        let upperCaseArray;\n        let targetLayer = this.m_defaultLayer;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            if (params.layer !== undefined) {\n                let tempLayer = this.getLayer(params.layer);\n                if (tempLayer === undefined) {\n                    tempLayer = this.addLayer(params.layer);\n                }\n                targetLayer = tempLayer;\n            }\n            if (params.path !== undefined) {\n                tempTextPosition.set(0, 0, tempTextPosition.z);\n            }\n            if (params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        }\n        const prevDrawCount = targetLayer.storage.drawCount;\n\n        const result = this.placeText({\n            input: text,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            layer: targetLayer,\n            letterCaseArray: upperCaseArray\n        });\n        if (result && params !== undefined) {\n            if (params.updatePosition === true) {\n                position.copy(tempTextPosition);\n            }\n            if (params.pickingData !== undefined) {\n                targetLayer.storage.addPickingData(\n                    prevDrawCount,\n                    targetLayer.storage.drawCount,\n                    params.pickingData\n                );\n            }\n        } else if (!result) {\n            (targetLayer.storage as any).m_drawCount = prevDrawCount;\n        }\n        return result;\n    }\n\n    /**\n     * Creates a new [[TextBufferObject]]. The computed text vertex buffer is equivalent to the\n     * result of performing the `addText` function for the input text in the screen origin.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param params Optional creation parameters.\n     *\n     * @returns New [[TextBufferObject]] (or `undefined` if requested text glyphs couldn't be\n     * retrieved from the current [[FontCatalog]]).\n     */\n    createTextBufferObject(\n        text: string | GlyphData[],\n        params?: TextBufferCreationParameters\n    ): TextBufferObject | undefined {\n        tempTextPosition.set(0, 0, 0);\n\n        let glyphArray;\n        let upperCaseArray: boolean[] | undefined;\n        const smallCapsEnabled =\n            this.m_currentTextRenderStyle.fontVariant === FontVariant.SmallCaps;\n        if (typeof text !== \"string\") {\n            glyphArray = text;\n            if (params !== undefined && params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        } else {\n            upperCaseArray = [];\n            glyphArray = this.m_fontCatalog.getGlyphs(\n                text,\n                this.m_currentTextRenderStyle,\n                smallCapsEnabled ? upperCaseArray : undefined\n            );\n            if (glyphArray === undefined) {\n                return undefined;\n            }\n        }\n\n        let path;\n        let pathOverflow;\n        let textBounds;\n        let characterBounds;\n        let renderStyle;\n        let layoutStyle;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            if (params.outputBounds === true) {\n                textBounds = new THREE.Box2();\n            }\n            if (params.outputCharacterBounds === true) {\n                characterBounds = [];\n            }\n            if (params.storeStyles === true) {\n                renderStyle = this.m_currentTextRenderStyle;\n                layoutStyle = this.m_currentTextLayoutStyle;\n            }\n        }\n\n        this.placeText({\n            input: text,\n            layer: this.m_defaultLayer,\n            computeTextBuffer: true,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            bounds: textBounds,\n            individualBounds: characterBounds,\n            letterCaseArray: upperCaseArray\n        });\n\n        return new TextBufferObject(\n            glyphArray,\n            new Float32Array(tempVertexBuffer),\n            textBounds,\n            characterBounds,\n            renderStyle,\n            layoutStyle\n        );\n    }\n\n    /**\n     * Adds a previously created [[TextBufferObject]] to the `TextCanvas`. Additional parameters can\n     * be provided to override the attributes stored in the buffer.\n     *\n     * @param textBufferObject [[TextBufferObject]] to add.\n     * @param params Optional addition parameters.\n     *\n     * @returns Result of the addition. If `false`, some error occurred during execution and the\n     * input text couldn't be properly added.\n     */\n    addTextBufferObject(\n        textBufferObject: TextBufferObject,\n        params?: TextBufferAdditionParameters\n    ): boolean {\n        let targetLayer = this.m_defaultLayer;\n        let position;\n        let scale;\n        let rotation;\n        let color;\n        let opacity;\n        let bgColor;\n        let bgOpacity;\n\n        if (params !== undefined) {\n            if (params.layer !== undefined) {\n                let tempLayer = this.getLayer(params.layer);\n                if (tempLayer === undefined) {\n                    tempLayer = this.addLayer(params.layer);\n                }\n                targetLayer = tempLayer;\n            }\n            position = params.position;\n            scale = params.scale;\n            rotation = params.rotation;\n            color = params.color;\n            opacity = params.opacity;\n            bgColor = params.backgroundColor;\n            bgOpacity = params.backgroundOpacity;\n        }\n        const prevDrawCount = targetLayer.storage.drawCount;\n\n        const result = targetLayer.storage.addTextBufferObject(\n            textBufferObject,\n            position,\n            scale,\n            rotation,\n            color,\n            opacity,\n            bgColor,\n            bgOpacity\n        );\n        if (result && params !== undefined) {\n            if (params.pickingData !== undefined) {\n                targetLayer.storage.addPickingData(\n                    prevDrawCount,\n                    targetLayer.storage.drawCount,\n                    params.pickingData\n                );\n            }\n        } else if (!result) {\n            (targetLayer.storage as any).m_drawCount = prevDrawCount;\n        }\n        return result;\n    }\n\n    /**\n     * Executes the `pickCallback` for all previously stored picking data for text covering the\n     * specified screen position.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickText(position: THREE.Vector2, callback: (pickData: any | undefined) => void): void {\n        for (const layer of this.m_layers) {\n            layer.storage.pick(position, callback);\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `TextCanvas`.\n     *\n     * @param info The info object to increment with the values from this `TextCanvas`.\n     */\n    getMemoryUsage(info: MemoryUsage) {\n        this.m_fontCatalog.updateMemoryUsage(info);\n\n        for (const layer of this.m_layers) {\n            layer.storage.updateMemoryUsage(info);\n        }\n    }\n\n    // Places all glyphs for input text. Depending on parameters, it can store the resulting glyphs\n    // in the current [[TextGeometry]] (or into a separate buffer) or compute the bounding box for\n    // the input (as a whole or on a per-character basis).\n    private placeText(params: TextPlacementParameters): boolean {\n        if (params.input.length === 0 || this.m_currentTextLayoutStyle.maxLines! === 0) {\n            if (params.bounds !== undefined) {\n                params.bounds.min.set(0, 0);\n                params.bounds.max.set(0, 0);\n            }\n            if (params.individualBounds !== undefined) {\n                params.individualBounds.length = 0;\n            }\n            return true;\n        }\n\n        let glyphArray;\n        let smallCapsTransformations: boolean[] | undefined;\n        const smallCapsEnabled =\n            this.m_currentTextRenderStyle.fontVariant === FontVariant.SmallCaps;\n        if (typeof params.input !== \"string\") {\n            glyphArray = params.input;\n            if (params.letterCaseArray) {\n                smallCapsTransformations = params.letterCaseArray;\n            }\n        } else {\n            smallCapsTransformations = [];\n            glyphArray = this.m_fontCatalog.getGlyphs(\n                params.input,\n                this.m_currentTextRenderStyle,\n                smallCapsEnabled ? smallCapsTransformations : undefined\n            );\n            if (glyphArray === undefined) {\n                return false;\n            }\n        }\n\n        let glyphBounds;\n        if (params.individualBounds !== undefined) {\n            tempTextBounds.array = params.individualBounds;\n            tempTextBounds.offset = 0;\n            glyphBounds = tempTextBounds;\n        }\n        if (params.bounds !== undefined) {\n            params.bounds.min.set(Infinity, Infinity);\n            params.bounds.max.set(-Infinity, -Infinity);\n        }\n        if (params.computeTextBuffer === true) {\n            tempVertexBuffer = new Float32Array(glyphArray.length * QUAD_VERTEX_MEMORY_FOOTPRINT);\n        }\n\n        const isPath = params.textPath !== undefined;\n        const typesettingParams: TypesettingParameters | PathTypesettingParameters = {\n            glyphs: glyphArray,\n            fontCatalog: this.m_fontCatalog,\n            textRenderStyle: this.m_currentTextRenderStyle,\n            textLayoutStyle: this.m_currentTextLayoutStyle,\n            position: tempTextPosition,\n            geometry: params.layer.storage,\n            smallCapsArray: smallCapsEnabled ? smallCapsTransformations : undefined,\n            globalBounds: params.bounds,\n            individualBounds: glyphBounds,\n            vertexBuffer: params.computeTextBuffer === true ? tempVertexBuffer : undefined\n        };\n\n        let result = true;\n        if (isPath) {\n            Object.assign(typesettingParams as PathTypesettingParameters, {\n                path: params.textPath,\n                pathOverflow: params.textPathOverflow === true\n            });\n            result = this.m_pathTypesetter.arrangeGlyphs(\n                typesettingParams as PathTypesettingParameters\n            );\n        } else {\n            result = this.m_lineTypesetter.arrangeGlyphs(typesettingParams);\n        }\n        if (glyphBounds !== undefined) {\n            glyphBounds.array.length = glyphBounds.offset;\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT } from \"../rendering/TextGeometry\";\nimport { FontStyle, FontVariant, WrappingMode } from \"../rendering/TextStyle\";\nimport { TypesettingUtils } from \"../utils/TypesettingUtils\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Typesetter, TypesettingParameters } from \"./Typesetter\";\n\n/**\n * [[Typesetter]] implementation that handles multi-line complex layout text.\n */\nexport class LineTypesetter implements Typesetter {\n    private m_tempTransform: THREE.Matrix3;\n    private m_tempCorners: THREE.Vector3[];\n    private m_tempLineDirection: UnicodeUtils.Direction;\n    private m_tempRunDirection: UnicodeUtils.Direction;\n    private m_tempPixelSize: number;\n    private m_tempPixelBgSize: number;\n    private m_tempScale: number;\n    private m_tempSmallCaps: boolean;\n\n    private m_currentParams?: TypesettingParameters;\n\n    /**\n     * Creates a `LineTypesetter` object.\n     *\n     * @returns New `LineTypesetter`.\n     */\n    constructor() {\n        this.m_tempTransform = new THREE.Matrix3();\n        this.m_tempCorners = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3()\n        ];\n        this.m_tempLineDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempRunDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempPixelSize = 1.0;\n        this.m_tempPixelBgSize = 1.0;\n        this.m_tempScale = 1.0;\n        this.m_tempSmallCaps = false;\n    }\n\n    /**\n     * Arranges the specified glyphs using this `LineTypesetter`. Text will be placed into multiple\n     * bidirectional lines, that will be generated taking into account [[textLayoutStyle]] features,\n     * such as:\n     * - Maximum line width.\n     * - Word and character wrapping.\n     * - Maximum number of lines.\n     * - Vertical and horizontal alignment.\n     * - Leading (spacing between lines).\n     *\n     * @param params Typesetting parameters.\n     *\n     * @returns If `false`, some error occurred during execution and the output should be dismissed.\n     */\n    arrangeGlyphs(params: TypesettingParameters): boolean {\n        // Initializes common typesetting parameters (used across all functions in this class).\n        this.m_currentParams = params;\n        this.m_tempLineDirection = TypesettingUtils.getDirection(this.m_currentParams.glyphs, 0);\n        this.m_tempRunDirection = this.m_tempLineDirection;\n        this.m_tempPixelSize = TypesettingUtils.getPixelSize(\n            this.m_currentParams.textRenderStyle.fontSize.size,\n            this.m_currentParams.textRenderStyle.fontSize.unit,\n            this.m_currentParams.fontCatalog.size\n        );\n        this.m_tempScale = this.m_tempPixelSize / this.m_currentParams.fontCatalog.size;\n        this.m_tempPixelBgSize = Math.min(\n            TypesettingUtils.getPixelSize(\n                this.m_currentParams.textRenderStyle.fontSize.backgroundSize,\n                this.m_currentParams.textRenderStyle.fontSize.unit,\n                this.m_currentParams.fontCatalog.size\n            ),\n            this.m_currentParams!.fontCatalog.distanceRange * this.m_tempScale\n        );\n        this.m_tempSmallCaps = this.m_currentParams!.smallCapsArray !== undefined;\n\n        this.m_currentParams.position.y +=\n            this.m_currentParams.textLayoutStyle.verticalAlignment *\n            this.m_currentParams.glyphs[0].font.metrics.capHeight *\n            this.m_tempScale;\n\n        const isOnlyMeasured =\n            this.m_currentParams.globalBounds !== undefined &&\n            this.m_currentParams.vertexBuffer === undefined;\n\n        // Compute line origin and height.\n        const origin = this.m_currentParams.position.x;\n        const lineHeight =\n            this.m_currentParams.glyphs[0].font.metrics.lineHeight +\n            this.m_currentParams.textLayoutStyle.leading;\n\n        // Initialize line-breaking and wrapping variables.\n        let lineStartIdx = 0;\n        let glyphWrapIdx = 0;\n        let wordWrapIdx = 0;\n        let lineStartX = 0;\n        let lineCurrX = 0;\n        let glyphWrapX = 0;\n        let wordWrapX = 0;\n\n        let lineCount = 0;\n        let isBidirectionalLine = false;\n        for (let i = 0; i < this.m_currentParams.glyphs.length; ++i) {\n            if (lineCount > this.m_currentParams.textLayoutStyle.maxLines - 1) {\n                break;\n            }\n            const glyphData = this.m_currentParams.glyphs[i];\n            if (!glyphData.isInCache && !isOnlyMeasured) {\n                return false;\n            }\n\n            const isNewLine = UnicodeUtils.isNewLine(glyphData.codePoint);\n            const isWhiteSpace = UnicodeUtils.isWhiteSpace(glyphData.codePoint);\n\n            // Check if this line should be treated as bidirectional.\n            if (!isBidirectionalLine && glyphData.direction === -this.m_tempLineDirection) {\n                isBidirectionalLine = true;\n            }\n            // Advance the line's current X offset (only for printable characters).\n            if (UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                lineCurrX +=\n                    (glyphData.advanceX + this.m_currentParams.textLayoutStyle.tracking) *\n                    this.m_tempScale *\n                    (this.m_tempSmallCaps\n                        ? TypesettingUtils.getSmallCapsScale(\n                              this.m_currentParams.glyphs,\n                              this.m_currentParams.smallCapsArray!,\n                              i,\n                              this.m_currentParams.textRenderStyle.fontVariant\n                          )\n                        : 1.0);\n            }\n            // If this is the first character in a line, update the line's X offset values (needed\n            // to properly center and wrap).\n            if (i === lineStartIdx) {\n                lineStartX = lineCurrX;\n                glyphWrapX = lineCurrX;\n                wordWrapX = lineCurrX;\n            }\n\n            // Check if should break the current line.\n            if (\n                isNewLine ||\n                (this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Character &&\n                    lineCurrX > this.m_currentParams.textLayoutStyle.lineWidth) ||\n                (this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                    lineCurrX > this.m_currentParams.textLayoutStyle.lineWidth &&\n                    wordWrapX !== lineStartX)\n            ) {\n                // Perform wrapping.\n                if (this.m_currentParams.textLayoutStyle.wrappingMode !== WrappingMode.None) {\n                    let wrapPointIdx = glyphWrapIdx;\n                    let wrapPointX = glyphWrapX;\n                    // Only wrap words when more than a single word fits into the current line.\n                    if (\n                        this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                        wordWrapX !== lineStartX\n                    ) {\n                        wrapPointIdx = wordWrapIdx;\n                        wrapPointX = wordWrapX;\n                    }\n\n                    lineCurrX = wrapPointX;\n                    i = Math.min(\n                        isNewLine ? (lineStartIdx === i ? wrapPointIdx : i) : wrapPointIdx,\n                        this.m_currentParams.glyphs.length - 1\n                    );\n                }\n\n                // Calculate the correct starting position for the line base on alignment, and place\n                // all glyphs in it.\n                const lineAlignment =\n                    this.m_tempLineDirection === UnicodeUtils.Direction.RTL && isBidirectionalLine\n                        ? 1.0 + this.m_currentParams.textLayoutStyle.horizontalAlignment\n                        : this.m_currentParams.textLayoutStyle.horizontalAlignment;\n                this.m_currentParams.position.x =\n                    this.m_currentParams.position.x + lineCurrX * lineAlignment;\n                if (\n                    !this.placeLine(lineStartIdx, i, this.m_tempLineDirection, isBidirectionalLine)\n                ) {\n                    return false;\n                }\n\n                // Update the line position.\n                this.m_currentParams.position.y -= lineHeight * this.m_tempScale;\n                this.m_currentParams.position.x = origin;\n\n                // Find the beginning of a new line (removing trailing white spaces).\n                while (\n                    i !== lineStartIdx &&\n                    i + 1 < this.m_currentParams.glyphs.length &&\n                    UnicodeUtils.isWhiteSpace(this.m_currentParams.glyphs[i + 1].codePoint)\n                ) {\n                    ++i;\n                }\n                lineStartIdx = i + 1;\n                if (lineStartIdx === this.m_currentParams.glyphs.length) {\n                    break;\n                }\n\n                // Only reset the line's direction when a new line character is found (to keep\n                // correct bidirectional behaviour when a bidirectional run is placed between\n                // multiple lines).\n                if (isNewLine) {\n                    this.m_tempLineDirection = TypesettingUtils.getDirection(\n                        this.m_currentParams.glyphs,\n                        lineStartIdx\n                    );\n                    this.m_tempRunDirection = this.m_tempLineDirection;\n                }\n\n                // Reset the line placement parameters.\n                lineStartX = 0;\n                lineCurrX = 0;\n                glyphWrapIdx = lineStartIdx;\n                glyphWrapX = 0;\n                wordWrapIdx = lineStartIdx;\n                wordWrapX = 0;\n                isBidirectionalLine = false;\n                lineCount++;\n            }\n            // If not, should if we should record any new wrapping points.\n            else if (\n                this.m_currentParams.textLayoutStyle.wrappingMode !== WrappingMode.None &&\n                !isWhiteSpace\n            ) {\n                // Update the per-glyph wrapping point.\n                glyphWrapIdx = i;\n                glyphWrapX = lineCurrX;\n\n                // Update the word wrapping point (only if mode is correctly set and we are\n                // currently placed at the end of a word).\n                if (\n                    this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                    i + 1 < this.m_currentParams.glyphs.length &&\n                    (UnicodeUtils.isWhiteSpace(this.m_currentParams.glyphs[i + 1].codePoint) ||\n                        UnicodeUtils.isNewLine(this.m_currentParams.glyphs[i + 1].codePoint))\n                ) {\n                    wordWrapIdx = i;\n                    wordWrapX = lineCurrX;\n                }\n            }\n        }\n\n        // If we still haven't placed all characters, place a final line.\n        if (\n            lineCount <= this.m_currentParams.textLayoutStyle.maxLines - 1 &&\n            lineStartIdx <= this.m_currentParams.glyphs.length - 1\n        ) {\n            const offset =\n                this.m_tempLineDirection === UnicodeUtils.Direction.RTL && isBidirectionalLine\n                    ? 1.0 + this.m_currentParams.textLayoutStyle.horizontalAlignment\n                    : this.m_currentParams.textLayoutStyle.horizontalAlignment;\n            this.m_currentParams.position.setX(\n                this.m_currentParams.position.x + lineCurrX * offset\n            );\n            if (\n                !this.placeLine(\n                    lineStartIdx,\n                    this.m_currentParams.glyphs.length - 1,\n                    this.m_tempLineDirection,\n                    isBidirectionalLine\n                )\n            ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Place characters alongside a line. Text direction is taken into account, and text is broken\n    // into directional runs.\n    private placeLine(\n        startIdx: number,\n        endIdx: number,\n        direction: UnicodeUtils.Direction,\n        isBidirectional: boolean\n    ): boolean {\n        // If the line is not bidirectional, place it as a single directional run.\n        if (!isBidirectional) {\n            return this.placeRun(startIdx, endIdx, direction);\n        }\n\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n\n        // Initialize line placement parameters.\n        const isRTL = direction === UnicodeUtils.Direction.RTL;\n        const origin = position.x;\n        let offset = 0;\n        let runStart = startIdx;\n\n        for (let i = startIdx; i <= endIdx; ++i) {\n            const glyphData = glyphDataArray[i];\n\n            // If the current glyph changes the line direction, place the current run.\n            if (glyphData.direction === -this.m_tempRunDirection) {\n                if (isRTL) {\n                    position.x = origin + offset;\n                }\n                if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                    return false;\n                }\n                if (!isRTL) {\n                    position.x = origin + offset;\n                }\n\n                runStart = i;\n                this.m_tempRunDirection *= -1.0;\n            }\n            // If the current glyph has neutral direction (i.e. white space) and we're in the middle\n            // of a run with direction opposite to the line's main direction, check for the closest\n            // strong direction in the run.\n            else if (\n                glyphData.direction === UnicodeUtils.Direction.Neutral &&\n                this.m_tempRunDirection === -direction\n            ) {\n                let neutralIdx = i;\n                while (\n                    neutralIdx + 1 < glyphDataArray.length &&\n                    Math.abs(glyphDataArray[neutralIdx].direction) !== 1\n                ) {\n                    ++neutralIdx;\n                }\n\n                // If the closest strong direction in the run is not the current run's direction,\n                // place the current run.\n                if (glyphDataArray[neutralIdx].direction !== this.m_tempRunDirection) {\n                    if (isRTL) {\n                        position.x = origin + offset;\n                    }\n                    if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                        return false;\n                    }\n                    if (!isRTL) {\n                        position.x = origin + offset;\n                    }\n\n                    runStart = i;\n                    this.m_tempRunDirection *= -1.0;\n                }\n            }\n\n            // Advance the offset position in the line.\n            offset +=\n                (glyphData.advanceX + textLayoutStyle.tracking) *\n                this.m_tempScale *\n                (this.m_tempSmallCaps\n                    ? TypesettingUtils.getSmallCapsScale(\n                          glyphDataArray,\n                          smallCapsArray!,\n                          i,\n                          textRenderStyle.fontVariant\n                      )\n                    : 1.0) *\n                direction;\n        }\n\n        // If we still haven't placed all characters in the line, place a final run.\n        if (runStart <= endIdx) {\n            if (isRTL) {\n                position.x = origin + offset;\n            }\n            if (!this.placeRun(runStart, endIdx, this.m_tempRunDirection)) {\n                return false;\n            }\n            if (!isRTL) {\n                position.x = origin + offset;\n            }\n        }\n\n        return true;\n    }\n\n    // Place a directional run of index inside a line.\n    private placeRun(startIdx: number, endIdx: number, direction: UnicodeUtils.Direction): boolean {\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const fontCatalog = this.m_currentParams!.fontCatalog;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n        const geometry = this.m_currentParams!.geometry;\n        const globalBounds = this.m_currentParams!.globalBounds;\n        const individualBounds = this.m_currentParams!.individualBounds;\n        const vertexBuffer = this.m_currentParams!.vertexBuffer;\n\n        // Move through the glyph array following the run's direction (as the order of the glyphs in\n        // memory might not match the order on glyphs on scree).\n        const start = direction === UnicodeUtils.Direction.LTR ? startIdx : endIdx;\n        const end = direction === UnicodeUtils.Direction.LTR ? endIdx : startIdx;\n        for (\n            let i = start;\n            direction === UnicodeUtils.Direction.RTL ? i >= end : i <= end;\n            i += direction\n        ) {\n            // Only process printable characters.\n            const glyphData = glyphDataArray[i];\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n\n            // When placing a RTL run, we need to check for weak runs (numerical runs of characters\n            // that don't change the overall run direction, but should always be displayed as LTR\n            // text).\n            if (\n                startIdx !== endIdx &&\n                i !== 0 &&\n                direction === UnicodeUtils.Direction.RTL &&\n                glyphData.direction === UnicodeUtils.Direction.Weak\n            ) {\n                let weakRunStart = i;\n                let weakGlyph = glyphDataArray[weakRunStart - 1];\n                while (\n                    weakRunStart !== startIdx &&\n                    (weakGlyph.direction === UnicodeUtils.Direction.Weak ||\n                        (weakGlyph.direction === UnicodeUtils.Direction.Neutral &&\n                            !UnicodeUtils.isWhiteSpace(weakGlyph.codePoint)))\n                ) {\n                    --weakRunStart;\n                    weakGlyph = glyphDataArray[weakRunStart - 1];\n                }\n\n                this.placeRun(Math.max(weakRunStart, startIdx), i, UnicodeUtils.Direction.LTR);\n\n                i = weakRunStart;\n                continue;\n            }\n\n            // Compute various rendering parameters for this glyph.\n            const glyphFont = glyphData.font;\n            const glyphFontMetrics = glyphFont.metrics;\n            const fontStyle = textRenderStyle.fontStyle;\n\n            const isBoldEmulated =\n                (fontStyle === FontStyle.Bold && glyphFont.bold === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.bold === undefined &&\n                    glyphFont.boldItalic === undefined);\n            const isItalicEmulated =\n                (fontStyle === FontStyle.Italic && glyphFont.italic === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.italic === undefined &&\n                    glyphFont.boldItalic === undefined);\n\n            const isSmallCaps = this.m_tempSmallCaps\n                ? smallCapsArray![i] && textRenderStyle.fontVariant === FontVariant.SmallCaps\n                : false;\n            const smallCapsScale = isSmallCaps\n                ? glyphFontMetrics.xHeight / glyphFontMetrics.capHeight\n                : 1.0;\n            const glyphScale = this.m_tempScale * smallCapsScale;\n\n            const emulationWeight =\n                ((isBoldEmulated ? 0.02 : 0.0) + (isSmallCaps ? 0.01 : 0.0)) *\n                (fontCatalog.size / fontCatalog.distanceRange);\n            const bgWeight =\n                (0.5 * this.m_tempPixelBgSize!) /\n                (fontCatalog.distanceRange * Math.max(glyphScale, 1.0));\n            const isMirrored =\n                UnicodeUtils.isRtlMirrored(glyphData.codePoint) &&\n                direction === UnicodeUtils.Direction.RTL;\n            const verticalOffset =\n                glyphFontMetrics.lineHeight -\n                glyphFontMetrics.base -\n                glyphFontMetrics.distanceRange * 0.5;\n\n            // Compute the glyphs transformation matrix and apply to all corners of a glyph.\n            TypesettingUtils.computeGlyphTransform(\n                this.m_tempTransform,\n                position,\n                glyphScale,\n                textLayoutStyle.canvasRotation,\n                textRenderStyle.rotation\n            );\n            for (let j = 0; j < 4; ++j) {\n                const glyphVertexPosition = glyphData.positions[j];\n                const horizontalOffset =\n                    isItalicEmulated && j > 1\n                        ? TypesettingUtils.OBLIQUE_OFFSET * glyphFontMetrics.size\n                        : 0.0;\n                this.m_tempCorners[j].set(\n                    glyphVertexPosition.x + horizontalOffset,\n                    glyphVertexPosition.y - verticalOffset,\n                    glyphVertexPosition.z\n                );\n                this.m_tempCorners[j].applyMatrix3(this.m_tempTransform);\n            }\n\n            // Depending on the typesetting options, add the computed glyph to the TextGeometry or\n            // update the text bounds.\n            if (globalBounds === undefined && vertexBuffer === undefined) {\n                if (\n                    !geometry.add(\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    )\n                ) {\n                    return false;\n                }\n            } else {\n                if (globalBounds !== undefined) {\n                    TypesettingUtils.updateBounds(\n                        this.m_tempCorners,\n                        globalBounds,\n                        individualBounds\n                    );\n                }\n                if (vertexBuffer !== undefined) {\n                    geometry.addToBuffer(\n                        vertexBuffer,\n                        i * QUAD_VERTEX_MEMORY_FOOTPRINT,\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    );\n                }\n            }\n\n            // Advance the current position and proceed to next glyph in the run.\n            position.set(\n                position.x +\n                    (glyphData.advanceX + textLayoutStyle.tracking) *\n                        glyphScale *\n                        Math.cos(textLayoutStyle.lineRotation),\n                position.y +\n                    (glyphData.advanceX + textLayoutStyle.tracking) *\n                        glyphScale *\n                        Math.sin(textLayoutStyle.lineRotation),\n                position.z\n            );\n        }\n\n        return true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT } from \"../rendering/TextGeometry\";\nimport { FontStyle, FontVariant } from \"../rendering/TextStyle\";\nimport { TypesettingUtils } from \"../utils/TypesettingUtils\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Typesetter, TypesettingParameters } from \"./Typesetter\";\n\n/**\n * @hidden\n * Parameters passed when placing glyphs using [[PathTypesetter]]'s `arrangeGlyphs` function.\n */\nexport interface PathTypesettingParameters extends TypesettingParameters {\n    /**\n     * Path to be followed when arranging glyphs.\n     */\n    path: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow: boolean;\n}\n\n/**\n * [[Typesetter]] implementation that arranges glyphs alongside a specified path.\n */\nexport class PathTypesetter implements Typesetter {\n    private m_tempTransform: THREE.Matrix3;\n    private m_tempCorners: THREE.Vector3[];\n    private m_tempLineDirection: UnicodeUtils.Direction;\n    private m_tempRunDirection: UnicodeUtils.Direction;\n    private m_tempPixelSize: number;\n    private m_tempPixelBgSize: number;\n    private m_tempScale: number;\n    private m_tempSmallCaps: boolean;\n\n    private m_tempPathPosition: THREE.Vector3;\n    private m_tempPathLength: number;\n    private m_tempPathOffset: number;\n\n    private m_currentParams?: PathTypesettingParameters;\n\n    /**\n     * Creates a `PathTypesetter` object.\n     *\n     * @returns New `PathTypesetter`.\n     */\n    constructor() {\n        this.m_tempTransform = new THREE.Matrix3();\n        this.m_tempCorners = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3()\n        ];\n        this.m_tempLineDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempRunDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempPixelSize = 1.0;\n        this.m_tempPixelBgSize = 1.0;\n        this.m_tempScale = 1.0;\n        this.m_tempSmallCaps = false;\n\n        this.m_tempPathPosition = new THREE.Vector3();\n        this.m_tempPathLength = 0.0;\n        this.m_tempPathOffset = 0.0;\n    }\n\n    /**\n     * Arranges the specified glyphs using this `PathTypesetter`. Text will be placed into a single\n     * bidirectional line that follows the specified path. Characters will be orientated and placed\n     * alongside this path following [[TextLayout]]'s [[VerticalAlignment]] and\n     * [[HorizontalAlignment]].\n     *\n     * @param params Typesetting parameters.\n     *\n     * @returns If `false`, some error occurred during execution and the output should be dismissed.\n     */\n    arrangeGlyphs(params: PathTypesettingParameters): boolean {\n        // Initializes common typesetting parameters (used across all functions in this class).\n        this.m_currentParams = params;\n        this.m_tempLineDirection = TypesettingUtils.getDirection(this.m_currentParams.glyphs, 0);\n        this.m_tempRunDirection = this.m_tempLineDirection;\n        this.m_tempPixelSize = TypesettingUtils.getPixelSize(\n            this.m_currentParams.textRenderStyle.fontSize.size,\n            this.m_currentParams.textRenderStyle.fontSize.unit,\n            this.m_currentParams.fontCatalog.size\n        );\n        this.m_tempScale = this.m_tempPixelSize / this.m_currentParams.fontCatalog.size;\n        this.m_tempPixelBgSize = Math.min(\n            TypesettingUtils.getPixelSize(\n                this.m_currentParams.textRenderStyle.fontSize.backgroundSize,\n                this.m_currentParams.textRenderStyle.fontSize.unit,\n                this.m_currentParams.fontCatalog.size\n            ),\n            this.m_currentParams!.fontCatalog.distanceRange * this.m_tempScale\n        );\n        this.m_tempSmallCaps = this.m_currentParams!.smallCapsArray !== undefined;\n\n        this.m_tempPathLength = this.m_currentParams.path.getLength();\n        this.m_tempPathOffset = 0.0;\n\n        const isOnlyMeasured =\n            this.m_currentParams.globalBounds !== undefined &&\n            this.m_currentParams.vertexBuffer === undefined;\n\n        // To be able to properly set the horizontal alignment on a path, we need to first retrieve\n        // how much of the path the input text covers, so we can calculate the correct initial\n        // offset.\n        let isBidirectional = false;\n        let pathWidth = 0.0;\n        for (let i = 0; i < this.m_currentParams.glyphs.length; ++i) {\n            const glyphData = this.m_currentParams.glyphs[i];\n            if (!glyphData.isInCache && !isOnlyMeasured) {\n                return false;\n            }\n\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n            if (!isBidirectional && glyphData.direction === -this.m_tempLineDirection) {\n                isBidirectional = true;\n            }\n\n            pathWidth +=\n                (glyphData.advanceX + this.m_currentParams.textLayoutStyle.tracking) *\n                this.m_tempScale *\n                (this.m_tempSmallCaps\n                    ? TypesettingUtils.getSmallCapsScale(\n                          this.m_currentParams.glyphs,\n                          this.m_currentParams.smallCapsArray!,\n                          i,\n                          this.m_currentParams.textRenderStyle.fontVariant\n                      )\n                    : 1.0);\n        }\n        this.m_tempPathOffset = Math.min(\n            Math.max(\n                -this.m_currentParams.textLayoutStyle.horizontalAlignment +\n                    (this.m_currentParams.textLayoutStyle.horizontalAlignment * pathWidth) /\n                        this.m_tempPathLength,\n                0\n            ),\n            1\n        );\n\n        // Place the input text as a single path line.\n        return this.placeLine(this.m_tempLineDirection, isBidirectional);\n    }\n\n    // Place characters alongside a path line. Text direction is taken into account, and text is\n    // broken into directional runs.\n    private placeLine(direction: UnicodeUtils.Direction, isBidirectional: boolean): boolean {\n        // If the line is not bidirectional, place it as a single directional run.\n        if (!isBidirectional) {\n            return this.placeRun(0, this.m_currentParams!.glyphs.length - 1, direction);\n        }\n\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n\n        // Initialize line placement parameters.\n        let runStart = 0;\n        for (let i = runStart; i < glyphDataArray.length; ++i) {\n            const glyphData = glyphDataArray[i];\n\n            // If the current glyph changes the line direction, place the current run.\n            if (glyphData.direction === -this.m_tempRunDirection) {\n                if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                    return false;\n                }\n\n                runStart = i;\n                this.m_tempRunDirection *= -1.0;\n            }\n            // If the current glyph has neutral direction (i.e. white space) and we're in the middle\n            // of a run with direction opposite to the line's main direction, check for the closest\n            // strong direction in the run.\n            else if (\n                glyphData.direction === UnicodeUtils.Direction.Neutral &&\n                this.m_tempRunDirection === -direction\n            ) {\n                let neutralIdx = i;\n                while (\n                    neutralIdx + 1 < glyphDataArray.length &&\n                    Math.abs(glyphDataArray[neutralIdx].direction) !== 1\n                ) {\n                    ++neutralIdx;\n                }\n\n                // If the closest strong direction in the run is not the current run's direction,\n                // place the current run.\n                if (glyphDataArray[neutralIdx].direction !== this.m_tempRunDirection) {\n                    if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                        return false;\n                    }\n\n                    runStart = i;\n                    this.m_tempRunDirection *= -1.0;\n                }\n            }\n        }\n\n        // If we still haven't placed all characters in the line, place a final run.\n        if (runStart < glyphDataArray.length) {\n            if (!this.placeRun(runStart, glyphDataArray.length - 1, this.m_tempRunDirection)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Place a directional run of index inside a path line.\n    private placeRun(startIdx: number, endIdx: number, direction: UnicodeUtils.Direction): boolean {\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const fontCatalog = this.m_currentParams!.fontCatalog;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n        const geometry = this.m_currentParams!.geometry;\n        const globalBounds = this.m_currentParams!.globalBounds;\n        const individualBounds = this.m_currentParams!.individualBounds;\n        const vertexBuffer = this.m_currentParams!.vertexBuffer;\n        const path = this.m_currentParams!.path;\n\n        const defaultGlyphRotation = textRenderStyle.rotation;\n        const normalDisplacement =\n            textLayoutStyle.verticalAlignment *\n            glyphDataArray[0].font.metrics.capHeight *\n            this.m_tempScale;\n\n        // Move through the glyph array following the run's direction (as the order of the glyphs in\n        // memory might not match the order on glyphs on scree).\n        const start = direction === UnicodeUtils.Direction.LTR ? startIdx : endIdx;\n        const end = direction === UnicodeUtils.Direction.LTR ? endIdx : startIdx;\n        for (\n            let i = start;\n            direction === UnicodeUtils.Direction.RTL ? i >= end : i <= end;\n            i += direction\n        ) {\n            // Only process printable characters.\n            const glyphData = glyphDataArray[i];\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n\n            // When placing a RTL run, we need to check for weak runs (numerical runs of characters\n            // that don't change the overall run direction, but should always be displayed as LTR\n            // text).\n            if (\n                startIdx !== endIdx &&\n                i !== 0 &&\n                direction === UnicodeUtils.Direction.RTL &&\n                glyphData.direction === UnicodeUtils.Direction.Weak\n            ) {\n                let weakRunStart = i;\n                let weakGlyph = glyphDataArray[weakRunStart - 1];\n                while (\n                    weakRunStart !== startIdx &&\n                    (weakGlyph.direction === UnicodeUtils.Direction.Weak ||\n                        (weakGlyph.direction === UnicodeUtils.Direction.Neutral &&\n                            !UnicodeUtils.isWhiteSpace(weakGlyph.codePoint)))\n                ) {\n                    --weakRunStart;\n                    weakGlyph = glyphDataArray[weakRunStart - 1];\n                }\n\n                this.placeRun(Math.max(weakRunStart, startIdx), i, UnicodeUtils.Direction.LTR);\n\n                i = weakRunStart;\n                continue;\n            }\n\n            // Compute various rendering parameters for this glyph.\n            const glyphFont = glyphData.font;\n            const glyphFontMetrics = glyphFont.metrics;\n            const fontStyle = textRenderStyle.fontStyle;\n\n            const isBoldEmulated =\n                (fontStyle === FontStyle.Bold && glyphFont.bold === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.bold === undefined &&\n                    glyphFont.boldItalic === undefined);\n            const isItalicEmulated =\n                (fontStyle === FontStyle.Italic && glyphFont.italic === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.italic === undefined &&\n                    glyphFont.boldItalic === undefined);\n\n            const isSmallCaps = this.m_tempSmallCaps\n                ? smallCapsArray![i] && textRenderStyle.fontVariant === FontVariant.SmallCaps\n                : false;\n            const smallCapsScale = isSmallCaps\n                ? glyphFontMetrics.xHeight / glyphFontMetrics.capHeight\n                : 1.0;\n            const glyphScale = this.m_tempScale * smallCapsScale;\n\n            const emulationWeight =\n                ((isBoldEmulated ? 0.02 : 0.0) + (isSmallCaps ? 0.01 : 0.0)) *\n                (fontCatalog.size / fontCatalog.distanceRange);\n            const bgWeight =\n                (0.5 * this.m_tempPixelBgSize!) /\n                (fontCatalog.distanceRange * Math.max(glyphScale, 1.0));\n            const isMirrored =\n                UnicodeUtils.isRtlMirrored(glyphData.codePoint) &&\n                direction === UnicodeUtils.Direction.RTL;\n\n            const verticalOffset =\n                glyphFontMetrics.lineHeight -\n                glyphFontMetrics.base -\n                glyphFontMetrics.distanceRange * 0.5;\n\n            // Update the current interpolated path position and angle.\n            const textPoint = path.getPoint(this.m_tempPathOffset);\n            if (textPoint === null) {\n                return this.m_currentParams!.pathOverflow;\n            }\n            const tangent = path.getTangent(this.m_tempPathOffset);\n            const normal = new THREE.Vector2(-tangent.y, tangent.x).multiplyScalar(\n                normalDisplacement\n            );\n            const angle = Math.atan2(tangent.y, tangent.x);\n            this.m_tempPathPosition.set(normal.x + textPoint.x, normal.y + textPoint.y, position.z);\n            textRenderStyle.rotation = defaultGlyphRotation + angle;\n\n            // Compute the glyphs transformation matrix and apply to all corners of a glyph.\n            TypesettingUtils.computeGlyphTransform(\n                this.m_tempTransform,\n                this.m_tempPathPosition,\n                glyphScale,\n                0.0,\n                textRenderStyle.rotation\n            );\n            for (let j = 0; j < 4; ++j) {\n                const glyphVertexPosition = glyphData.positions[j];\n                const horizontalOffset =\n                    isItalicEmulated && j > 1\n                        ? TypesettingUtils.OBLIQUE_OFFSET * glyphFontMetrics.size\n                        : 0.0;\n                this.m_tempCorners[j].set(\n                    glyphVertexPosition.x + horizontalOffset,\n                    glyphVertexPosition.y - verticalOffset,\n                    glyphVertexPosition.z\n                );\n                this.m_tempCorners[j].applyMatrix3(this.m_tempTransform);\n\n                this.m_tempCorners[j].x -= position.x;\n                this.m_tempCorners[j].y -= position.y;\n            }\n\n            // Depending on the typesetting options, add the computed glyph to the TextGeometry or\n            // update the text bounds.\n            if (globalBounds === undefined && vertexBuffer === undefined) {\n                if (\n                    !geometry.add(\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    )\n                ) {\n                    return false;\n                }\n            } else {\n                if (globalBounds !== undefined) {\n                    TypesettingUtils.updateBounds(\n                        this.m_tempCorners,\n                        globalBounds,\n                        individualBounds\n                    );\n                }\n                if (vertexBuffer !== undefined) {\n                    geometry.addToBuffer(\n                        vertexBuffer,\n                        i * QUAD_VERTEX_MEMORY_FOOTPRINT,\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    );\n                }\n            }\n\n            // Restore the original glyph rotation.\n            textRenderStyle.rotation = defaultGlyphRotation;\n\n            // Advance the current position and proceed to next glyph in the run.\n            this.m_tempPathOffset +=\n                ((glyphData.advanceX + textLayoutStyle.tracking) * glyphScale) /\n                this.m_tempPathLength;\n        }\n\n        return true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nenum ContextualForm {\n    Initial,\n    Medial,\n    Final\n}\n\nenum CombinedForm {\n    Isolated,\n    Connected\n}\n\n/**\n * Converter between arabic isolated forms (in Unicode Block 'Arabic') and their contextual forms\n * (in Unicode Block 'Arabic Presentation Forms-B').\n */\nexport class ContextualArabicConverter {\n    private static m_instance: ContextualArabicConverter;\n    static get instance(): ContextualArabicConverter {\n        if (this.m_instance === undefined) {\n            this.m_instance = new ContextualArabicConverter();\n        }\n        return this.m_instance;\n    }\n\n    private m_singleCharactersMap: Map<number, ReadonlyArray<number | undefined>> = new Map();\n    private m_combinedCharactersMap: Map<\n        number,\n        Map<number, ReadonlyArray<number | undefined>>\n    > = new Map();\n    private m_neutralCharacters: number[];\n\n    private constructor() {\n        // Single characters.\n        this.m_singleCharactersMap.set(0x0621, [undefined, undefined, undefined]); // HAMZA\n        this.m_singleCharactersMap.set(0x0622, [undefined, undefined, 0xfe82]); // ALEF_MADDA\n        this.m_singleCharactersMap.set(0x0623, [undefined, undefined, 0xfe84]); // ALEF_HAMZA_ABOVE\n        this.m_singleCharactersMap.set(0x0624, [undefined, undefined, 0xfe86]); // WAW_HAMZA\n        this.m_singleCharactersMap.set(0x0625, [undefined, undefined, 0xfe88]); // ALEF_HAMZA_BELOW\n        this.m_singleCharactersMap.set(0x0626, [0xfe8b, 0xfe8c, 0xfe8a]); // YEH_HAMZA\n        this.m_singleCharactersMap.set(0x0627, [undefined, undefined, 0xfe8e]); // ALEF\n        this.m_singleCharactersMap.set(0x0628, [0xfe91, 0xfe92, 0xfe90]); // BEH\n        this.m_singleCharactersMap.set(0x0629, [undefined, undefined, 0xfe94]); // TEH_MARBUTA\n        this.m_singleCharactersMap.set(0x062a, [0xfe97, 0xfe98, 0xfe96]); // TEH\n        this.m_singleCharactersMap.set(0x062b, [0xfe9b, 0xfe9c, 0xfe9a]); // THEH\n        this.m_singleCharactersMap.set(0x062c, [0xfe9f, 0xfea0, 0xfe9e]); // JEEM\n        this.m_singleCharactersMap.set(0x062d, [0xfea3, 0xfea4, 0xfea2]); // HAH\n        this.m_singleCharactersMap.set(0x062e, [0xfea7, 0xfea8, 0xfea6]); // KHAH\n        this.m_singleCharactersMap.set(0x062f, [undefined, undefined, 0xfeaa]); // DAL\n        this.m_singleCharactersMap.set(0x0630, [undefined, undefined, 0xfeac]); // THAL\n        this.m_singleCharactersMap.set(0x0631, [undefined, undefined, 0xfeae]); // REH\n        this.m_singleCharactersMap.set(0x0632, [undefined, undefined, 0xfeb0]); // ZAIN\n        this.m_singleCharactersMap.set(0x0633, [0xfeb3, 0xfeb4, 0xfeb2]); // SEEN\n        this.m_singleCharactersMap.set(0x0634, [0xfeb7, 0xfeb8, 0xfeb6]); // SHEEN\n        this.m_singleCharactersMap.set(0x0635, [0xfebb, 0xfebc, 0xfeba]); // SAD\n        this.m_singleCharactersMap.set(0x0636, [0xfebf, 0xfec0, 0xfebe]); // DAD\n        this.m_singleCharactersMap.set(0x0637, [0xfec3, 0xfec4, 0xfec2]); // TAH\n        this.m_singleCharactersMap.set(0x0638, [0xfec7, 0xfec8, 0xfec6]); // ZAH\n        this.m_singleCharactersMap.set(0x0639, [0xfecb, 0xfecc, 0xfeca]); // AIN\n        this.m_singleCharactersMap.set(0x063a, [0xfecf, 0xfed0, 0xfece]); // GHAIN\n        this.m_singleCharactersMap.set(0x0640, [0x0640, 0x0640, 0x0640]); // TATWEEL\n        this.m_singleCharactersMap.set(0x0641, [0xfed3, 0xfed4, 0xfed2]); // FEH\n        this.m_singleCharactersMap.set(0x0642, [0xfed7, 0xfed8, 0xfed6]); // QAF\n        this.m_singleCharactersMap.set(0x0643, [0xfedb, 0xfedc, 0xfeda]); // KAF\n        this.m_singleCharactersMap.set(0x0644, [0xfedf, 0xfee0, 0xfede]); // LAM\n        this.m_singleCharactersMap.set(0x0645, [0xfee3, 0xfee4, 0xfee2]); // MEEM\n        this.m_singleCharactersMap.set(0x0646, [0xfee7, 0xfee8, 0xfee6]); // NOON\n        this.m_singleCharactersMap.set(0x0647, [0xfeeb, 0xfeec, 0xfeea]); // HEH\n        this.m_singleCharactersMap.set(0x0648, [undefined, undefined, 0xfeee]); // WAW\n        this.m_singleCharactersMap.set(0x0649, [undefined, undefined, 0xfef0]); // ALEF_MAKSURA\n        this.m_singleCharactersMap.set(0x064a, [0xfef3, 0xfef4, 0xfef2]); // YEH\n        this.m_singleCharactersMap.set(0x067e, [0xfb58, 0xfb59, 0xfb57]); // PEH\n        this.m_singleCharactersMap.set(0x06cc, [0xfbfe, 0xfbff, 0xfbfd]); // Farsi Yeh\n        this.m_singleCharactersMap.set(0x0686, [0xfb7c, 0xfb7d, 0xfb7b]); // Tcheh\n        this.m_singleCharactersMap.set(0x06a9, [0xfb90, 0xfb91, 0xfb8f]); // Keheh\n        this.m_singleCharactersMap.set(0x06af, [0xfb94, 0xfb95, 0xfb93]); // Gaf\n        this.m_singleCharactersMap.set(0x0698, [undefined, undefined, 0xfb8b]); // Jeh\n\n        // Combined characters.\n        this.m_combinedCharactersMap.set(0x0644, new Map());\n        // LAM_ALEF_MADDA\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0622, [0xfef5, 0xfef6]);\n        // LAM_ALEF_HAMZA_ABOVE\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0623, [0xfef7, 0xfef8]);\n        // LAM_ALEF_HAMZA_BELOW\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0625, [0xfef9, 0xfefa]);\n        // LAM_ALEF\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0627, [0xfefb, 0xfefc]);\n\n        // Neutral characters.\n        this.m_neutralCharacters = [\n            0x0610, // ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM\n            0x0612, // ARABIC SIGN ALAYHE ASSALLAM\n            0x0613, // ARABIC SIGN RADI ALLAHOU ANHU\n            0x0614, // ARABIC SIGN TAKHALLUS\n            0x0615, // ARABIC SMALL HIGH TAH\n            0x064b, // ARABIC FATHATAN\n            0x064c, // ARABIC DAMMATAN\n            0x064d, // ARABIC KASRATAN\n            0x064e, // ARABIC FATHA\n            0x064f, // ARABIC DAMMA\n            0x0650, // ARABIC KASRA\n            0x0651, // ARABIC SHADDA\n            0x0652, // ARABIC SUKUN\n            0x0653, // ARABIC MADDAH ABOVE\n            0x0654, // ARABIC HAMZA ABOVE\n            0x0655, // ARABIC HAMZA BELOW\n            0x0656, // ARABIC SUBSCRIPT ALEF\n            0x0657, // ARABIC INVERTED DAMMA\n            0x0658, // ARABIC MARK NOON GHUNNA\n            0x0670, // ARABIC LETTER SUPERSCRIPT ALEF\n            0x06d6, // ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA\n            0x06d7, // ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA\n            0x06d8, // ARABIC SMALL HIGH MEEM INITIAL FORM\n            0x06d9, // ARABIC SMALL HIGH LAM ALEF\n            0x06da, // ARABIC SMALL HIGH JEEM\n            0x06db, // ARABIC SMALL HIGH THREE DOTS\n            0x06dc, // ARABIC SMALL HIGH SEEN\n            0x06df, // ARABIC SMALL HIGH ROUNDED ZERO\n            0x06e0, // ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO\n            0x06e1, // ARABIC SMALL HIGH DOTLESS HEAD OF KHAH\n            0x06e2, // ARABIC SMALL HIGH MEEM ISOLATED FORM\n            0x06e3, // ARABIC SMALL LOW SEEN\n            0x06e4, // ARABIC SMALL HIGH MADDA\n            0x06e7, // ARABIC SMALL HIGH YEH\n            0x06e8, // ARABIC SMALL HIGH NOON\n            0x06ea, // ARABIC EMPTY CENTRE LOW STOP\n            0x06eb, // ARABIC EMPTY CENTRE HIGH STOP\n            0x06ec, // ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE\n            0x06ed // ARABIC SMALL LOW MEEM\n        ];\n    }\n\n    /**\n     * Converts isolated arabic characters into their contextual form.\n     *\n     * @param input String with isolated arabic characters.\n     */\n    convert(input: string): string {\n        let output = \"\";\n        for (let i = 0; i < input.length; ++i) {\n            const currentCodePoint = input.charCodeAt(i);\n\n            // Only process arabic characters in the map.\n            if (this.isArabicCharacter(currentCodePoint)) {\n                // Find the first previous non-neutral character.\n                let prevIndex = i - 1;\n                for (; prevIndex >= 0; --prevIndex) {\n                    if (!this.isNeutral(input.charCodeAt(prevIndex))) {\n                        break;\n                    }\n                }\n\n                // Check if the previous character has ligatures with following characters.\n                let prevCodePoint = prevIndex >= 0 ? input.charCodeAt(prevIndex) : undefined;\n                if (prevCodePoint !== undefined) {\n                    const prevMap = this.getCharacterMap(prevCodePoint);\n                    if (\n                        prevMap === undefined ||\n                        (prevMap[ContextualForm.Initial] === undefined &&\n                            prevMap[ContextualForm.Medial] === undefined)\n                    ) {\n                        prevCodePoint = undefined;\n                    }\n                }\n\n                // Find the first next non-neutral character.\n                let nextIndex = i + 1;\n                for (; nextIndex < input.length; ++nextIndex) {\n                    if (!this.isNeutral(input.charCodeAt(nextIndex))) {\n                        break;\n                    }\n                }\n\n                // Check if the next character has ligatures with previous characters.\n                let nextCodePoint =\n                    nextIndex < input.length ? input.charCodeAt(nextIndex) : undefined;\n                if (nextCodePoint !== undefined) {\n                    const nextMap = this.getCharacterMap(nextCodePoint);\n                    if (\n                        nextMap === undefined ||\n                        (nextMap[ContextualForm.Medial] === undefined &&\n                            nextMap[ContextualForm.Final] === undefined)\n                    ) {\n                        nextCodePoint = undefined;\n                    }\n                }\n\n                // Check for Lam Alef combinated forms.\n                if (\n                    currentCodePoint === 0x0644 &&\n                    nextCodePoint !== undefined &&\n                    (nextCodePoint === 0x0622 ||\n                        nextCodePoint === 0x0623 ||\n                        nextCodePoint === 0x0625 ||\n                        nextCodePoint === 0x0627)\n                ) {\n                    const combinedMap = this.getCombinedCharacterMap(\n                        currentCodePoint,\n                        nextCodePoint\n                    )!;\n                    if (prevCodePoint !== undefined) {\n                        output += String.fromCharCode(combinedMap[CombinedForm.Connected]!);\n                    } else {\n                        output += String.fromCharCode(combinedMap[CombinedForm.Isolated]!);\n                    }\n\n                    // Skip the next character and continue.\n                    ++i;\n                    continue;\n                }\n\n                // Check for single character contextual forms.\n                const map = this.getCharacterMap(currentCodePoint)!;\n                // Intermediate.\n                if (\n                    prevCodePoint !== undefined &&\n                    nextCodePoint !== undefined &&\n                    map[ContextualForm.Medial] !== undefined\n                ) {\n                    output += String.fromCharCode(map[ContextualForm.Medial]!);\n                }\n                // Final.\n                else if (prevCodePoint !== undefined && map[ContextualForm.Final] !== undefined) {\n                    output += String.fromCharCode(map[ContextualForm.Final]!);\n                }\n                // Initial.\n                else if (nextCodePoint !== undefined && map[ContextualForm.Initial] !== undefined) {\n                    output += String.fromCharCode(map[ContextualForm.Initial]!);\n                }\n                // Isolated.\n                else {\n                    output += String.fromCharCode(currentCodePoint);\n                }\n            } else {\n                output += String.fromCharCode(currentCodePoint);\n            }\n        }\n\n        return output;\n    }\n\n    private isArabicCharacter(codePoint: number): boolean {\n        return this.m_singleCharactersMap.has(codePoint);\n    }\n\n    private getCharacterMap(codePoint: number): ReadonlyArray<number | undefined> | undefined {\n        return this.m_singleCharactersMap.get(codePoint);\n    }\n\n    private getCombinedCharacterMap(\n        codePoint: number,\n        nextCodePoint: number\n    ): ReadonlyArray<number | undefined> | undefined {\n        const map = this.m_combinedCharactersMap.get(codePoint);\n        if (map !== undefined) {\n            return map.get(nextCodePoint);\n        }\n        return undefined;\n    }\n\n    private isNeutral(codePoint: number): boolean {\n        for (const character of this.m_neutralCharacters) {\n            if (character === codePoint) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { DisplacementFeature, hasDisplacementFeature } from \"@here/harp-materials\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { DisplacedBufferAttribute } from \"./DisplacedBufferAttribute\";\nimport { DisplacedBufferGeometry, DisplacementRange } from \"./DisplacedBufferGeometry\";\n\nfunction isBufferGeometry(\n    geometry: THREE.Geometry | THREE.BufferGeometry\n): geometry is THREE.BufferGeometry {\n    const isBufferGeom = geometry instanceof THREE.BufferGeometry;\n    assert(isBufferGeom, \"Unsupported geometry type.\");\n    return isBufferGeom;\n}\n\nfunction isDisplacementMaterial(material: any): material is DisplacementFeature {\n    const isDisplacementFeature = hasDisplacementFeature(material);\n    assert(isDisplacementFeature, \"Material does not support displacement maps.\");\n    return isDisplacementFeature;\n}\n\nfunction isDataTextureMap(map?: THREE.Texture | null): map is THREE.DataTexture {\n    if (!map) {\n        return false;\n    }\n    const isDataTexture = map instanceof THREE.DataTexture;\n    assert(isDataTexture, \"Material does not support displacement maps.\");\n    return isDataTexture;\n}\n\n/**\n * Mesh with geometry modified by a displacement map. Overrides raycasting behaviour to apply\n * displacement map before intersection test.\n * @internal\n */\nexport class DisplacedMesh extends THREE.Mesh {\n    private static displacedPositions?: DisplacedBufferAttribute;\n\n    private static getDisplacedPositionAttribute(\n        geometry: THREE.BufferGeometry,\n        displacementMap: THREE.DataTexture\n    ): DisplacedBufferAttribute {\n        // Reuse same buffer attribute for all meshes since it's only needed during the\n        // intersection test.\n        if (!DisplacedMesh.displacedPositions) {\n            DisplacedMesh.displacedPositions = new DisplacedBufferAttribute(\n                geometry.attributes.position,\n                geometry.attributes.normal,\n                geometry.attributes.uv,\n                displacementMap\n            );\n        } else {\n            DisplacedMesh.displacedPositions.reset(\n                geometry.attributes.position,\n                geometry.attributes.normal,\n                geometry.attributes.uv,\n                displacementMap\n            );\n        }\n        return DisplacedMesh.displacedPositions;\n    }\n\n    m_displacedGeometry?: DisplacedBufferGeometry;\n\n    /**\n     * Creates an instance of displaced mesh.\n     * @param m_getDisplacementRange Displacement values range getter.\n     * @param [geometry] Original geometry to displace.\n     * @param [material] Material(s) to be used by the mesh. All must have the same displacement\n     * map.\n     */\n    constructor(\n        private m_getDisplacementRange: () => DisplacementRange,\n        geometry?: THREE.Geometry | THREE.BufferGeometry,\n        material?: THREE.Material | THREE.Material[]\n    ) {\n        super(geometry, material);\n        assert(!this.geometry || isBufferGeometry(this.geometry));\n        assert(!this.material || isDisplacementMaterial(this.firstMaterial));\n    }\n\n    raycast(raycaster: THREE.Raycaster, intersects: THREE.Intersection[]): void {\n        if (!this.geometry || !this.material) {\n            return;\n        }\n\n        // All materials in the object are expected to have the same displacement map.\n        const material = this.firstMaterial;\n\n        // Use default raycasting implementation if some type is unexpected.\n        if (\n            !isBufferGeometry(this.geometry) ||\n            !isDisplacementMaterial(material) ||\n            !isDataTextureMap(material.displacementMap)\n        ) {\n            super.raycast(raycaster, intersects);\n            return;\n        }\n        const displacementMap = material.displacementMap;\n        const displacementRange = this.m_getDisplacementRange();\n\n        if (this.m_displacedGeometry) {\n            this.m_displacedGeometry.reset(this.geometry, displacementMap, displacementRange);\n        } else {\n            this.m_displacedGeometry = new DisplacedBufferGeometry(\n                this.geometry,\n                displacementMap,\n                displacementRange,\n                DisplacedMesh.getDisplacedPositionAttribute(this.geometry, displacementMap)\n            );\n        }\n\n        // Replace the original geometry by the displaced one only during the intersection test.\n        this.geometry = this.m_displacedGeometry;\n        super.raycast(raycaster, intersects);\n        this.geometry = this.m_displacedGeometry.originalGeometry;\n    }\n\n    private get firstMaterial(): THREE.Material {\n        return Array.isArray(this.material) ? this.material[0] : this.material;\n    }\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\n\n// Offsets for the fields stored in cache for each vertex.\nenum Field {\n    VertexId = 0,\n    OlderIdx, // Index in cache of the immediately older vertex.\n    NewerIdx, // Index in cache of the immediately newer vertex.\n    X,\n    Y,\n    Z,\n    Count\n}\n\nconst Invalid: number = -1;\n\n/**\n * Compact vertex LRU Cache for on the fly temporary mesh transformations.\n * @internal\n */\nexport class VertexCache {\n    private m_cache: number[] = []; // Stores all fields for every cached vertex (see Field).\n    private m_vertexCount: number = 0;\n    private m_oldestIdx: number = 0;\n    private m_newestIdx: number = 0;\n\n    /**\n     * Creates a new cache with the specified maximum size.\n     * @param maxVertexCount The maximum number of vertices the cache will store.\n     */\n    constructor(readonly maxVertexCount: number) {\n        this.m_cache.length = this.maxVertexCount * Field.Count;\n        this.clear();\n    }\n\n    /**\n     * Clears the vertex cache.\n     */\n    clear() {\n        this.m_cache.fill(Invalid);\n        this.m_vertexCount = 0;\n    }\n\n    /**\n     * Gets a vertex from cache.\n     * @param vertexId The id of the vertex to get.\n     * @param vertex The vertex coordinates will be set here if found.\n     * @returns whether the vertex was found on cache.\n     */\n    get(vertexId: number, vertex: Vector3Like): boolean {\n        const vertexIdx = this.find(vertexId);\n        if (vertexIdx === undefined) {\n            return false;\n        }\n        this.promoteEntry(vertexIdx);\n        this.getVertex(vertexIdx, vertex);\n        return true;\n    }\n\n    /**\n     * Sets a vertex in cache. It's assumed there's no vertex with the same id already in cache.\n     * @param vertexId The vertex id.\n     * @param vertex The vertex coordinates.\n     */\n    set(vertexId: number, vertex: Vector3Like) {\n        let vertexIdx = Invalid;\n        if (this.m_vertexCount < this.maxVertexCount) {\n            vertexIdx = this.m_vertexCount * Field.Count;\n            this.m_vertexCount++;\n        } else {\n            vertexIdx = this.m_oldestIdx;\n        }\n        if (this.m_vertexCount === 1) {\n            this.m_oldestIdx = this.m_newestIdx = vertexIdx;\n        } else {\n            this.promoteEntry(vertexIdx);\n        }\n        this.setVertex(vertexIdx, vertexId, vertex);\n    }\n\n    private find(vertexId: number): number | undefined {\n        const size = this.m_cache.length;\n        for (let i = 0; i < size; i += Field.Count) {\n            if (this.m_cache[i] === vertexId) {\n                return i;\n            }\n        }\n        return undefined;\n    }\n    private promoteEntry(vertexIdx: number): void {\n        if (vertexIdx === this.m_newestIdx) {\n            return;\n        } // already newest, nothing to do\n        // re-link newer and older items\n        const newerIdx = this.getNewerIdx(vertexIdx);\n        const olderIdx = this.getOlderIdx(vertexIdx);\n        if (newerIdx !== Invalid) {\n            assert(this.getOlderIdx(newerIdx) === vertexIdx);\n            this.setOlderIdx(newerIdx, olderIdx);\n        }\n        if (olderIdx !== Invalid) {\n            assert(this.getNewerIdx(olderIdx) === vertexIdx);\n            this.setNewerIdx(olderIdx, newerIdx);\n        }\n        if (vertexIdx === this.m_oldestIdx) {\n            this.m_oldestIdx = newerIdx;\n        }\n        // re-link ourselves\n        this.setNewerIdx(vertexIdx, Invalid);\n        this.setOlderIdx(vertexIdx, this.m_newestIdx);\n        // finally, set ourselves as the newest entry\n        assert(this.m_newestIdx !== Invalid);\n        assert(this.getNewerIdx(this.m_newestIdx) === Invalid);\n        this.setNewerIdx(this.m_newestIdx, vertexIdx);\n        this.m_newestIdx = vertexIdx;\n    }\n    private getOlderIdx(vertexIdx: number): number {\n        return this.m_cache[vertexIdx + Field.OlderIdx];\n    }\n    private setOlderIdx(vertexIdx: number, olderIdx: number): void {\n        this.m_cache[vertexIdx + Field.OlderIdx] = olderIdx;\n    }\n    private getNewerIdx(vertexIdx: number): number {\n        return this.m_cache[vertexIdx + Field.NewerIdx];\n    }\n    private setNewerIdx(vertexIdx: number, newerIdx: number): void {\n        this.m_cache[vertexIdx + Field.NewerIdx] = newerIdx;\n    }\n    private getVertex(vertexIdx: number, vertex: Vector3Like): void {\n        vertex.x = this.m_cache[vertexIdx + Field.X];\n        vertex.y = this.m_cache[vertexIdx + Field.Y];\n        vertex.z = this.m_cache[vertexIdx + Field.Z];\n    }\n    private setVertex(vertexIdx: number, vertexId: number, vertex: Vector3Like): void {\n        this.m_cache[vertexIdx] = vertexId;\n        this.m_cache[vertexIdx + Field.X] = vertex.x;\n        this.m_cache[vertexIdx + Field.Y] = vertex.y;\n        this.m_cache[vertexIdx + Field.Z] = vertex.z;\n    }\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { DisplacedBufferAttribute } from \"./DisplacedBufferAttribute\";\n\nconst tmpNormalMin = new THREE.Vector3();\nconst tmpNormalMax = new THREE.Vector3();\nconst tmpBBox = new THREE.Box3();\n\n/**\n * @internal\n * Range of displacement values found in a given displacement map.\n */\nexport interface DisplacementRange {\n    min: number;\n    max: number;\n}\n\n/**\n * @internal\n * BufferGeometry decorator that displaces on the fly the position attribute using a specified\n * displacement map.\n */\nexport class DisplacedBufferGeometry extends THREE.BufferGeometry {\n    private m_displacedPositions: DisplacedBufferAttribute;\n    private m_originalBoundingBox = new THREE.Box3();\n\n    /**\n     * Creates an instance of displaced buffer geometry.\n     * @param originalGeometry The goeometry to be displaced.\n     * @param displacementMap A texture with the displacement values.\n     * @param m_displacementRange The displacement value range found in the displacement map.\n     * @param displacedPositions Buffer attribute that will be used for displaced positions if\n     * provided, otherwise a new buffer attribute will be created.\n     */\n    constructor(\n        public originalGeometry: THREE.BufferGeometry,\n        displacementMap: THREE.DataTexture,\n        private m_displacementRange: DisplacementRange,\n        displacedPositions?: DisplacedBufferAttribute\n    ) {\n        super();\n        if (!displacedPositions) {\n            this.m_displacedPositions = new DisplacedBufferAttribute(\n                originalGeometry.attributes.position,\n                originalGeometry.attributes.normal,\n                originalGeometry.attributes.uv,\n                displacementMap\n            );\n        } else {\n            this.m_displacedPositions = displacedPositions;\n        }\n        this.resetAttributes();\n    }\n\n    /**\n     * Resets the displaced buffer geometry to use new geometry or displacement map.\n     * @param geometry The goeometry to be displaced.\n     * @param displacementMap A texture with the displacement values.\n     * @param displacementRange The displacement value range found in the displacement map.\n     */\n    reset(\n        geometry: THREE.BufferGeometry,\n        displacementMap: THREE.DataTexture,\n        displacementRange: DisplacementRange\n    ) {\n        this.originalGeometry = geometry;\n        const positions = geometry.attributes.position;\n        const normals = geometry.attributes.normal;\n        const uvs = geometry.attributes.uv;\n        this.m_displacedPositions.reset(positions, normals, uvs, displacementMap);\n        const displacementRangeChanged =\n            this.m_displacementRange.min !== displacementRange.min ||\n            this.m_displacementRange.max !== displacementRange.max;\n        this.m_displacementRange = displacementRange;\n        this.resetAttributes();\n        this.resetBoundingVolumes(displacementRangeChanged);\n    }\n\n    // HARP-9585: Override of base class method, however tslint doesn't recognize it as such.\n    computeBoundingBox(): void {\n        // Calculate a coarse approximation of the displaced geometry bbox by displacing the\n        // original bbox and enlarging it to cover the whole displacement range.\n        // This approximation is used to avoid having to displace the whole geometry, which will\n        // be done only if the bbox test passes.\n        if (this.originalGeometry.boundingBox === null) {\n            this.originalGeometry.computeBoundingBox();\n        }\n        const origBBox = this.m_originalBoundingBox.copy(this.originalGeometry.boundingBox);\n        if (this.boundingBox === null) {\n            this.boundingBox = origBBox.clone();\n        } else {\n            this.boundingBox.copy(origBBox);\n        }\n        tmpBBox.copy(origBBox);\n        tmpNormalMin.fromBufferAttribute(this.attributes.normal as THREE.BufferAttribute, 0);\n        tmpNormalMax.copy(tmpNormalMin);\n        this.boundingBox\n            .translate(tmpNormalMin.multiplyScalar(this.m_displacementRange.min))\n            .union(tmpBBox.translate(tmpNormalMax.multiplyScalar(this.m_displacementRange.max)));\n    }\n\n    // HARP-9585: Override of base class method, however tslint doesn't recognize it as such.\n    computeBoundingSphere(): void {\n        // Use as coarse approximation the sphere bounding the bbox.\n        if (this.boundingBox === null) {\n            this.computeBoundingBox();\n        }\n        if (this.boundingSphere === null) {\n            this.boundingSphere = new THREE.Sphere();\n        }\n        this.boundingBox.getBoundingSphere(this.boundingSphere);\n    }\n\n    private needsBoundingBoxUpdate(displacementRangeChanged: boolean): boolean {\n        return (\n            displacementRangeChanged ||\n            (this.boundingBox &&\n                (!this.originalGeometry.boundingBox ||\n                    !this.m_originalBoundingBox.equals(this.originalGeometry.boundingBox)))\n        );\n    }\n\n    private resetBoundingVolumes(displacementRangeChanged: boolean) {\n        if (this.needsBoundingBoxUpdate(displacementRangeChanged)) {\n            this.computeBoundingBox();\n            if (this.boundingSphere) {\n                this.computeBoundingSphere();\n            }\n        }\n    }\n\n    private resetAttributes() {\n        this.index = this.originalGeometry.index;\n        this.groups = this.originalGeometry.groups;\n        this.drawRange = this.originalGeometry.drawRange;\n        this.attributes = { ...this.originalGeometry.attributes };\n        this.attributes.position = this.m_displacedPositions;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport * as THREE from \"three\";\n\n/**\n * This path in world coordinates is projected to screen space and blocks all other labels.\n *\n * It could be used for example:\n * - Border rejects labels.\n * - Route blocks street labels from being rendered underneath.\n *\n * Could potentially be expanded in future to have a priority, however for now, this isn't required.\n */\n\nexport class PathBlockingElement {\n    /**\n     * Note, [[screenSpaceLines]] is only used as a performance improvement and contains no\n     * useful information. They are used to contain the screen space coordinates of the\n     * points. By allocating the space here, we avoid per frame allocations, see\n     * [[TextElementsRenderer.prepopulateScreenWithBlockingElements]].\n     */\n    readonly screenSpaceLines: THREE.Line3[];\n\n    /**\n     * Constructs a path from a list of points.\n     * Pre allocates the [[screenSpaceLines]] used to render.\n     * @param points Points in world coordinates.\n     */\n    constructor(readonly points: Vector3Like[]) {\n        this.screenSpaceLines = new Array<THREE.Line3>(points.length >= 2 ? points.length - 1 : 0);\n        for (let i = 0; i < this.screenSpaceLines.length; i++) {\n            this.screenSpaceLines[i] = new THREE.Line3(new THREE.Vector3(), new THREE.Vector3());\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"@here/harp-text-canvas\";\nimport { getPixelFromImage, screenToUvCoordinates } from \"./PixelPicker\";\n\n/**\n * Declares an interface for a `struct` containing a [[BoxBuffer]]'s attribute state information.\n */\nexport interface State {\n    positionAttributeCount: number;\n    colorAttributeCount: number;\n    uvAttributeCount: number;\n    indexAttributeCount: number;\n    pickInfoCount: number;\n}\n\n/**\n * Initial number of boxes in BoxBuffer.\n */\nconst START_BOX_BUFFER_SIZE = 0;\n\n/**\n * Maximum number of boxes in BoxBuffer.\n */\nconst MAX_BOX_BUFFER_SIZE = 32 * 1024;\n\n/**\n * Number of vertices per box/glyph element: 4 corners.\n */\nconst NUM_VERTICES_PER_ELEMENT = 4;\n\n/**\n * Number of indices added per box/glyph: 2 triangles, 6 indices.\n */\nconst NUM_INDICES_PER_ELEMENT = 6;\n\n/**\n * Number of values per position.\n */\nconst NUM_POSITION_VALUES_PER_VERTEX = 3;\n\n/**\n * Number of values per color.\n */\nconst NUM_COLOR_VALUES_PER_VERTEX = 4;\n\n/**\n * Number of values per UV.\n */\nconst NUM_UV_VALUES_PER_VERTEX = 4;\n\n/**\n * Number of values per index.\n */\nconst NUM_INDEX_VALUES_PER_VERTEX = 1;\n\n/**\n * Number of bytes for float in an Float32Array.\n */\nconst NUM_BYTES_PER_FLOAT = 4;\n\n/**\n * Number of bytes for integer number in an UInt32Array.\n */\nconst NUM_BYTES_PER_INT32 = 4;\n\n/**\n * SubClass of [[THREE.Mesh]] to identify meshes that have been created by [[BoxBuffer]] and\n * [[TextBuffer]]. Add the isEmpty flag to quickly test for empty meshes.\n */\nexport class BoxBufferMesh extends THREE.Mesh {\n    constructor(geometry: THREE.BufferGeometry, material: THREE.Material | THREE.Material[]) {\n        super(geometry, material);\n\n        this.type = \"BoxBufferMesh\";\n    }\n\n    /**\n     * A mesh that has no positions and indices set is defined to be empty.\n     *\n     * @returns `True` if no indices have been added to the mesh.\n     */\n    get isEmpty(): boolean {\n        if (this.geometry === undefined) {\n            return true;\n        } else {\n            const bufferGeometry = this.geometry as THREE.BufferGeometry;\n            return bufferGeometry.index === null || bufferGeometry.index.count === 0;\n        }\n    }\n}\n\n/**\n * Buffer for (untransformed) `Box2` objects. Can be used to create a single geometry for screen-\n * aligned boxes, like POIs.\n */\nexport class BoxBuffer {\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` position data.\n     */\n    protected positionAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` color data.\n     */\n    protected colorAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` uv data.\n     */\n    protected uvAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` index data.\n     */\n    protected indexAttribute?: THREE.BufferAttribute;\n    protected pickInfos: Array<any | undefined>;\n\n    /**\n     * [[BufferGeometry]] holding all the different [[BufferAttribute]]s.\n     */\n    protected geometry: THREE.BufferGeometry | undefined;\n\n    /**\n     * [[Mesh]] used for rendering.\n     */\n    protected internalMesh: BoxBufferMesh | undefined;\n\n    private m_size: number = 0;\n\n    /**\n     * Creates a new `BoxBuffer`.\n     *\n     * @param material Material to be used for [[Mesh]] of this `BoxBuffer`.\n     * @param renderOrder Optional renderOrder of this buffer.\n     * @param startElementCount Initial number of elements this `BoxBuffer` can hold.\n     * @param maxElementCount Maximum number of elements this `BoxBuffer` can hold.\n     */\n    constructor(\n        readonly material: THREE.Material | THREE.Material[],\n        readonly renderOrder: number = 0,\n        readonly startElementCount = START_BOX_BUFFER_SIZE,\n        readonly maxElementCount = MAX_BOX_BUFFER_SIZE\n    ) {\n        this.resizeBuffer(startElementCount);\n        this.pickInfos = new Array();\n    }\n\n    /**\n     * Duplicate this `BoxBuffer` with same material and renderOrder.\n     *\n     * @returns A clone of this `BoxBuffer`.\n     */\n    clone(): BoxBuffer {\n        return new BoxBuffer(this.material, this.renderOrder);\n    }\n\n    /**\n     * Dispose of the geometry.\n     */\n    dispose() {\n        if (this.geometry !== undefined) {\n            this.geometry.dispose();\n            this.geometry = undefined;\n        }\n        this.internalMesh = undefined;\n    }\n\n    /**\n     * Return the current number of elements the buffer can hold.\n     */\n    get size(): number {\n        return this.m_size;\n    }\n\n    /**\n     * Clear's the `BoxBuffer` attribute buffers.\n     */\n    reset() {\n        if (this.positionAttribute !== undefined) {\n            this.positionAttribute.count = 0;\n            this.colorAttribute!.count = 0;\n            this.uvAttribute!.count = 0;\n            this.indexAttribute!.count = 0;\n            this.pickInfos!.length = 0;\n        }\n    }\n\n    /**\n     * Returns `true` if this `BoxBuffer` can hold the specified amount of glyphs. If the buffer\n     * can only add the glyph by increasing the buffer size, the resize() method is called, which\n     * will then create a new geometry for the mesh.\n     *\n     * @param glyphCount Number of glyphs to be added to the buffer.\n     * @returns `true` if the element (box or glyph) can be added to the buffer, `false` otherwise.\n     */\n    canAddElements(glyphCount = 1): boolean {\n        const indexAttribute = this.indexAttribute!;\n        if (\n            indexAttribute.count + glyphCount * NUM_INDICES_PER_ELEMENT >=\n            indexAttribute.array.length\n        ) {\n            // Too many elements for the current buffer, check if we can resize the buffer.\n            if (indexAttribute.array.length >= this.maxElementCount * NUM_INDICES_PER_ELEMENT) {\n                return false;\n            }\n\n            const newSize = Math.min(this.maxElementCount, this.size === 0 ? 256 : this.size * 2);\n            this.resize(newSize);\n        }\n        return true;\n    }\n\n    /**\n     * Returns this `BoxBuffer`'s attribute [[State]].\n     */\n    saveState(): State {\n        const state: State = {\n            positionAttributeCount: this.positionAttribute!.count,\n            colorAttributeCount: this.colorAttribute!.count,\n            uvAttributeCount: this.uvAttribute!.count,\n            indexAttributeCount: this.indexAttribute!.count,\n            pickInfoCount: this.pickInfos!.length\n        };\n        return state;\n    }\n\n    /**\n     * Store this `BoxBuffer`'s attribute [[State]] to a previously stored one.\n     *\n     * @param state [[State]] struct describing a previous attribute state.\n     */\n    restoreState(state: State) {\n        this.positionAttribute!.count = state.positionAttributeCount;\n        this.colorAttribute!.count = state.colorAttributeCount;\n        this.uvAttribute!.count = state.uvAttributeCount;\n        this.indexAttribute!.count = state.indexAttributeCount;\n        this.pickInfos!.length = state.pickInfoCount;\n    }\n\n    /**\n     * Adds a new box to this `BoxBuffer`.\n     *\n     * @param screenBox [[Math2D.Box]] holding screen coordinates for this box.\n     * @param uvBox [[Math2D.UvBox]] holding uv coordinates for this box.\n     * @param color Box's color.\n     * @param opacity Box's opacity.\n     * @param distance Box's distance to camera.\n     * @param pickInfo Box's picking information.\n     */\n    addBox(\n        screenBox: Math2D.Box,\n        uvBox: Math2D.UvBox,\n        color: THREE.Color,\n        opacity: number,\n        distance: number,\n        pickInfo?: any\n    ): boolean {\n        if (!this.canAddElements()) {\n            return false;\n        }\n\n        const { s0, t0, s1, t1 } = uvBox;\n        const { x, y, w, h } = screenBox;\n\n        const r = Math.round(color.r * 255);\n        const g = Math.round(color.g * 255);\n        const b = Math.round(color.b * 255);\n        const a = Math.round(opacity * 255);\n\n        const positionAttribute = this.positionAttribute!;\n        const colorAttribute = this.colorAttribute!;\n        const uvAttribute = this.uvAttribute!;\n        const indexAttribute = this.indexAttribute!;\n\n        const baseVertex = positionAttribute.count;\n        const baseIndex = indexAttribute.count;\n\n        positionAttribute.setXYZ(baseVertex, x, y, distance);\n        positionAttribute.setXYZ(baseVertex + 1, x + w, y, distance);\n        positionAttribute.setXYZ(baseVertex + 2, x, y + h, distance);\n        positionAttribute.setXYZ(baseVertex + 3, x + w, y + h, distance);\n\n        colorAttribute.setXYZW(baseVertex, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 1, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 2, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 3, r, g, b, a);\n\n        uvAttribute.setXY(baseVertex, s0, t0);\n        uvAttribute.setXY(baseVertex + 1, s1, t0);\n        uvAttribute.setXY(baseVertex + 2, s0, t1);\n        uvAttribute.setXY(baseVertex + 3, s1, t1);\n\n        indexAttribute.setX(baseIndex, baseVertex);\n        indexAttribute.setX(baseIndex + 1, baseVertex + 1);\n        indexAttribute.setX(baseIndex + 2, baseVertex + 2);\n        indexAttribute.setX(baseIndex + 3, baseVertex + 2);\n        indexAttribute.setX(baseIndex + 4, baseVertex + 1);\n        indexAttribute.setX(baseIndex + 5, baseVertex + 3);\n\n        positionAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        colorAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        uvAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        indexAttribute.count += NUM_INDICES_PER_ELEMENT;\n\n        this.pickInfos.push(pickInfo);\n\n        return true;\n    }\n\n    /**\n     * Updates a [[BufferGeometry]] object to reflect the changes in this `TextBuffer`'s attribute\n     * data.\n     */\n    updateBufferGeometry() {\n        const positionAttribute = this.positionAttribute!;\n        const colorAttribute = this.colorAttribute!;\n        const uvAttribute = this.uvAttribute!;\n        const indexAttribute = this.indexAttribute!;\n\n        if (positionAttribute.count > 0) {\n            positionAttribute.needsUpdate = true;\n            positionAttribute.updateRange.offset = 0;\n            positionAttribute.updateRange.count =\n                positionAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (colorAttribute.count > 0) {\n            colorAttribute.needsUpdate = true;\n            colorAttribute.updateRange.offset = 0;\n            colorAttribute.updateRange.count = colorAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (uvAttribute.count > 0) {\n            uvAttribute.needsUpdate = true;\n            uvAttribute.updateRange.offset = 0;\n            uvAttribute.updateRange.count = uvAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (indexAttribute.count > 0) {\n            indexAttribute.needsUpdate = true;\n            indexAttribute.updateRange.offset = 0;\n            indexAttribute.updateRange.count = indexAttribute.count;\n        }\n\n        if (this.geometry !== undefined) {\n            this.geometry.clearGroups();\n            this.geometry.addGroup(0, this.indexAttribute!.count);\n        }\n    }\n\n    /**\n     * Check if the buffer is empty. If it is empty, the memory usage is minimized to reduce\n     * footprint.\n     */\n    cleanUp() {\n        // If there is nothing in this buffer, resize it, it may never be used again.\n        if (this.indexAttribute!.count === 0 && this.size > START_BOX_BUFFER_SIZE) {\n            this.clearAttributes();\n        }\n    }\n\n    /**\n     * Determine if the mesh is empty.\n     */\n    get isEmpty(): boolean {\n        return this.internalMesh!.isEmpty;\n    }\n\n    /**\n     * Get the [[Mesh]] object. The geometry instance of the mesh may change if the buffers are\n     * resized. The mesh, once created, will not change, so it can always be added to the scene.\n     */\n    get mesh(): BoxBufferMesh {\n        if (this.internalMesh === undefined) {\n            this.resize();\n        }\n        return this.internalMesh!;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * boxes are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     * @param imageData Image data to test if the pixel is transparent\n     */\n    pickBoxes(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void,\n        imageData?: ImageBitmap | ImageData\n    ) {\n        const n = this.pickInfos.length;\n        const pickInfos = this.pickInfos;\n        const positions = this.positionAttribute!;\n        const screenX = screenPosition.x;\n        const screenY = screenPosition.y;\n\n        const canvas = document.createElement(\"canvas\");\n        for (let pickInfoIndex = 0; pickInfoIndex < n; pickInfoIndex++) {\n            const positionIndex = pickInfoIndex * NUM_VERTICES_PER_ELEMENT;\n\n            const minX = positions.getX(positionIndex);\n            if (screenX < minX) {\n                continue;\n            }\n\n            const maxX = positions.getX(positionIndex + 1);\n            if (screenX > maxX) {\n                continue;\n            }\n\n            const minY = positions.getY(positionIndex);\n            if (screenY < minY) {\n                continue;\n            }\n\n            const maxY = positions.getY(positionIndex + 2);\n            if (screenY > maxY) {\n                continue;\n            }\n\n            const box = new Math2D.Box(minX, minY, maxX - minX, maxY - minY);\n            if (\n                imageData !== undefined &&\n                pickInfos[pickInfoIndex].poiInfo !== undefined &&\n                pickInfos[pickInfoIndex].poiInfo.uvBox !== undefined &&\n                this.isPixelTransparent(\n                    imageData,\n                    screenX,\n                    screenY,\n                    box,\n                    pickInfos[pickInfoIndex].poiInfo.uvBox,\n                    canvas\n                )\n            ) {\n                continue;\n            }\n\n            if (pickInfos[pickInfoIndex] !== undefined) {\n                pickCallback(pickInfos[pickInfoIndex]);\n            }\n        }\n    }\n\n    /**\n     * Creates a new [[Geometry]] object from all the attribute data stored in this `BoxBuffer`.\n     * The [[Mesh]] object may be created if it is not initialized already.\n     *\n     * @param newSize Optional number of elements to resize the buffer to.\n     * @param forceResize Optional flag to force a resize even if new size is smaller than before.\n     */\n    resize(newSize?: number, forceResize?: boolean): BoxBufferMesh {\n        if (this.geometry !== undefined) {\n            this.geometry.dispose();\n        }\n\n        this.geometry = new THREE.BufferGeometry();\n\n        if (newSize !== undefined && (forceResize === true || newSize > this.size)) {\n            this.resizeBuffer(newSize);\n        }\n\n        this.geometry.setAttribute(\"position\", this.positionAttribute!);\n        this.geometry.setAttribute(\"color\", this.colorAttribute!);\n        this.geometry.setAttribute(\"uv\", this.uvAttribute!);\n        this.geometry.setIndex(this.indexAttribute!);\n        this.geometry.addGroup(0, this.indexAttribute!.count);\n\n        if (this.internalMesh === undefined) {\n            this.internalMesh = new BoxBufferMesh(this.geometry, this.material);\n            this.internalMesh.renderOrder = this.renderOrder;\n        } else {\n            this.internalMesh.geometry = this.geometry;\n        }\n        return this.internalMesh;\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `BoxBuffer`.\n     *\n     * @param info The info object to increment with the values from this `BoxBuffer`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        const numBytes =\n            this.positionAttribute!.count * NUM_POSITION_VALUES_PER_VERTEX * NUM_BYTES_PER_FLOAT +\n            this.colorAttribute!.count * NUM_COLOR_VALUES_PER_VERTEX +\n            this.uvAttribute!.count * NUM_UV_VALUES_PER_VERTEX * NUM_BYTES_PER_FLOAT +\n            this.indexAttribute!.count * NUM_BYTES_PER_INT32; // May be UInt16, so we overestimate\n\n        info.heapSize += numBytes;\n        info.gpuSize += numBytes;\n    }\n\n    /**\n     * Check if a pixel is transparent or not.\n     *\n     * @param imageData Data containing the pixels.\n     * @param xScreenPos X position of the pixel.\n     * @param yScreenPos Y position of the pixel.\n     * @param box Bounding box of the image in screen coordinates.\n     * @param uvBox Uv box referred to the given bounding box.\n     * @param canvas Canvas element that will be used to draw the image, in case the imageData is an\n     *      ImageBitmap\n     */\n    protected isPixelTransparent(\n        imageData: ImageBitmap | ImageData,\n        xScreenPos: number,\n        yScreenPos: number,\n        box: Math2D.Box,\n        uvBox: Math2D.UvBox,\n        canvas?: HTMLCanvasElement\n    ): boolean {\n        let pixelIsTransparent = false;\n\n        const { u, v } = screenToUvCoordinates(xScreenPos, yScreenPos, box, uvBox);\n\n        const imageWidth = imageData.width;\n        const x = imageWidth * u;\n        const imageHeight = imageData.height;\n        const y = imageHeight * v;\n\n        const pixel = getPixelFromImage(x, y, imageData, canvas);\n\n        if (pixel !== undefined && pixel[3] === 0) {\n            pixelIsTransparent = true;\n        }\n        return pixelIsTransparent;\n    }\n\n    /**\n     * Remove current attributes and arrays. Minimizes memory footprint.\n     */\n    protected clearAttributes() {\n        this.positionAttribute = undefined;\n        this.colorAttribute = undefined;\n        this.uvAttribute = undefined;\n        this.indexAttribute = undefined;\n        this.resize(START_BOX_BUFFER_SIZE, true);\n    }\n\n    /**\n     * Resize the attribute buffers. New value must be larger than the previous one.\n     *\n     * @param newSize New number of elements in the buffer. Number has to be larger than the\n     *      previous size.\n     */\n    protected resizeBuffer(newSize: number) {\n        const newPositionArray = new Float32Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_POSITION_VALUES_PER_VERTEX\n        );\n\n        if (this.positionAttribute !== undefined && this.positionAttribute.array.length > 0) {\n            const positionAttributeCount = this.positionAttribute.count;\n            newPositionArray.set(this.positionAttribute.array);\n            this.positionAttribute.array = newPositionArray;\n            this.positionAttribute.count = positionAttributeCount;\n        } else {\n            this.positionAttribute = new THREE.BufferAttribute(\n                newPositionArray,\n                NUM_POSITION_VALUES_PER_VERTEX\n            );\n            this.positionAttribute.count = 0;\n            this.positionAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const newColorArray = new Uint8Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_COLOR_VALUES_PER_VERTEX\n        );\n\n        if (this.colorAttribute !== undefined) {\n            const colorAttributeCount = this.colorAttribute.count;\n            newColorArray.set(this.colorAttribute.array);\n            this.colorAttribute.array = newColorArray;\n            this.colorAttribute.count = colorAttributeCount;\n        } else {\n            this.colorAttribute = new THREE.BufferAttribute(\n                newColorArray,\n                NUM_COLOR_VALUES_PER_VERTEX,\n                true\n            );\n            this.colorAttribute.count = 0;\n            this.colorAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const newUvArray = new Float32Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_UV_VALUES_PER_VERTEX\n        );\n\n        if (this.uvAttribute !== undefined) {\n            const uvAttributeCount = this.uvAttribute.count;\n            newUvArray.set(this.uvAttribute.array);\n            this.uvAttribute.array = newUvArray;\n            this.uvAttribute.count = uvAttributeCount;\n        } else {\n            this.uvAttribute = new THREE.BufferAttribute(newUvArray, NUM_UV_VALUES_PER_VERTEX);\n            this.uvAttribute.count = 0;\n            this.uvAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const numIndexValues = newSize * NUM_INDICES_PER_ELEMENT * NUM_INDEX_VALUES_PER_VERTEX;\n\n        const newIndexArray =\n            numIndexValues > 65535\n                ? new Uint32Array(numIndexValues)\n                : new Uint16Array(numIndexValues);\n\n        if (this.indexAttribute !== undefined) {\n            const indexAttributeCount = this.indexAttribute.count;\n            newIndexArray.set(this.indexAttribute.array);\n            this.indexAttribute.array = newIndexArray;\n            this.indexAttribute.count = indexAttributeCount;\n        } else {\n            this.indexAttribute = new THREE.BufferAttribute(\n                newIndexArray,\n                NUM_INDEX_VALUES_PER_VERTEX\n            );\n            this.indexAttribute.count = 0;\n            this.indexAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        this.m_size = newSize;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Math2D, MathUtils } from \"@here/harp-utils\";\n\n/**\n * It returns an array containing the channel colors for the pixel at the given coordinates.\n *\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param imageData Data containing the pixels.\n * @param canvas Canvas element that will be used to draw the image, in case the imageData is an\n * ImageBitmap\n */\nexport function getPixelFromImage(\n    xPos: number,\n    yPos: number,\n    imageData: ImageData | ImageBitmap,\n    canvas?: HTMLCanvasElement\n): Uint8ClampedArray | undefined {\n    let pickedColor;\n\n    const isImageBitmap = (imgData: ImageBitmap | ImageData) => {\n        return (imgData as ImageBitmap).close !== undefined;\n    };\n\n    if (isImageBitmap(imageData!)) {\n        if (canvas === undefined) {\n            canvas = document.createElement(\"canvas\");\n        }\n        pickedColor = getPixelFromImageBitmap(imageData as ImageBitmap, xPos, yPos, canvas);\n    } else {\n        const pixelsData = imageData as ImageData;\n        const stride = pixelsData.data.length / (pixelsData.height * pixelsData.width);\n        pickedColor = getPixelFromImageData(pixelsData, xPos, yPos, stride);\n    }\n    return pickedColor;\n}\n\n/**\n * Given the x and y position in screen coordinates inside the target box, it map them to the UV\n * coordinates.\n * @param screenX X value in screen coordinates.\n * @param screenY Y value in screen coordinates.\n * @param box Bounding box in screen coordinates.\n * @param uvBox Uv box referred to the given bounding box.\n */\nexport function screenToUvCoordinates(\n    screenX: number,\n    screenY: number,\n    box: Math2D.Box,\n    uvBox: Math2D.UvBox\n): { u: number; v: number } {\n    const minX = box.x;\n    const maxX = box.x + box.w;\n    const minY = box.y;\n    const maxY = box.y + box.h;\n    const u = MathUtils.map(screenX, minX, maxX, uvBox.s0, uvBox.s1);\n    const v = MathUtils.map(screenY, minY, maxY, uvBox.t0, uvBox.t1);\n\n    return { u, v };\n}\n\n/**\n * It returns an Uint8ClampedArray containing the color channel values for the given pixel\n * coordinates. It returns undefined if the given coordinates are out of range.\n *\n * @param image Bitmap image in which the pixels are stored.\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param canvas HTML Canvas element on which the image is drawn.\n */\nexport function getPixelFromImageBitmap(\n    image: ImageBitmap,\n    xPos: number,\n    yPos: number,\n    canvas: HTMLCanvasElement\n): Uint8ClampedArray | undefined {\n    if (xPos > image.width || xPos < 0 || yPos > image.height || yPos < 0) {\n        return undefined;\n    }\n\n    let pixelData;\n\n    canvas.width = image.width;\n    canvas.height = image.height;\n\n    const context = canvas.getContext(\"2d\");\n    if (context !== null) {\n        context.drawImage(\n            image,\n            0,\n            0,\n            image.width,\n            image.height,\n            0,\n            0,\n            canvas.width,\n            canvas.height\n        );\n        pixelData = context.getImageData(xPos, yPos, 1, 1).data;\n    }\n    return pixelData;\n}\n\n/**\n * It returns an Uint8ClampedArray containing the color channel values for the given pixel\n * coordinates. It returns undefined if the given coordinates are out of range.\n *\n * @param image Image data in which the pixels are stored.\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param stride The stride value of the image data.\n */\nexport function getPixelFromImageData(\n    imgData: ImageData,\n    xPos: number,\n    yPos: number,\n    stride: number\n): Uint8ClampedArray | undefined {\n    const getPixel = (imageData: ImageData, index: number, strd: number) => {\n        const i = index * strd;\n        const d = imageData.data;\n        const pixel = new Uint8ClampedArray(strd);\n        for (let s = 0; s < strd; s++) {\n            pixel[0] = d[i + s];\n        }\n        return pixel;\n    };\n    if (xPos > imgData.width || xPos < 0 || yPos > imgData.height || yPos < 0) {\n        return undefined;\n    }\n    return getPixel(imgData, yPos * imgData.width + xPos, stride);\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { IChannel } from \"@here/harp-utils\";\n\nexport class PlacementStats {\n    totalGroups: number = 0;\n    resortedGroups: number = 0;\n    total: number = 0;\n    uninitialized: number = 0;\n    tooFar: number = 0;\n    numNotVisible: number = 0;\n    numPathTooSmall: number = 0;\n    numCannotAdd: number = 0;\n    numRenderedPoiIcons: number = 0;\n    numRenderedPoiTexts: number = 0;\n    numPoiTextsInvisible: number = 0;\n    numRenderedTextElements: number = 0;\n\n    constructor(private readonly m_logger: IChannel) {}\n\n    clear() {\n        this.totalGroups = 0;\n        this.resortedGroups = 0;\n        this.total = 0;\n        this.uninitialized = 0;\n        this.tooFar = 0;\n        this.numNotVisible = 0;\n        this.numPathTooSmall = 0;\n        this.numCannotAdd = 0;\n        this.numRenderedPoiIcons = 0;\n        this.numRenderedPoiTexts = 0;\n        this.numPoiTextsInvisible = 0;\n        this.numRenderedTextElements = 0;\n    }\n    log() {\n        const numNotRendered =\n            this.uninitialized +\n            this.numPoiTextsInvisible +\n            this.tooFar +\n            this.numNotVisible +\n            this.numCannotAdd;\n        this.m_logger.debug(\"Total groups\", this.totalGroups);\n        this.m_logger.debug(\"Resorted groups\", this.resortedGroups);\n        this.m_logger.debug(\"Total labels\", this.total);\n        this.m_logger.debug(\"Rendered labels\", this.numRenderedTextElements);\n        this.m_logger.debug(\"Rejected labels\", numNotRendered);\n        this.m_logger.debug(\"Unitialized labels\", this.uninitialized);\n        this.m_logger.debug(\"Rendered poi icons\", this.numRenderedPoiIcons);\n        this.m_logger.debug(\"Rendered poi texts\", this.numRenderedPoiTexts);\n        this.m_logger.debug(\"Poi text invisible\", this.numPoiTextsInvisible);\n        this.m_logger.debug(\"Too far\", this.tooFar);\n        this.m_logger.debug(\"Not visible\", this.numNotVisible);\n        this.m_logger.debug(\"Path too small\", this.numPathTooSmall);\n        this.m_logger.debug(\"Rejected, max glyphs reached\", this.numCannotAdd);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * @hidden\n */\nexport class SimpleLineCurve extends THREE.LineCurve {\n    private m_lengths?: number[];\n\n    constructor(v1: THREE.Vector2, v2: THREE.Vector2) {\n        super(v1, v2);\n    }\n\n    getLengths(): number[] {\n        if (this.m_lengths === undefined) {\n            this.m_lengths = [0, this.v2.distanceTo(this.v1)];\n        }\n        return this.m_lengths;\n    }\n}\n\n/**\n * @hidden\n */\nexport class PathParam {\n    private m_point: THREE.Vector2 | undefined;\n\n    constructor(readonly path: THREE.Path, readonly index: number, readonly t: number) {}\n\n    get curve(): THREE.Curve<THREE.Vector2> {\n        return this.path.curves[this.index];\n    }\n\n    get point(): THREE.Vector2 {\n        if (this.m_point === undefined) {\n            this.m_point = this.curve.getPoint(this.t);\n        }\n        return this.m_point;\n    }\n}\n\n/**\n * @hidden\n */\nexport class SimplePath extends THREE.Path {\n    private m_cache?: number[];\n\n    constructor() {\n        super();\n    }\n\n    getLengths(): number[] {\n        if (this.m_cache) {\n            return this.m_cache;\n        }\n        let sum = 0;\n        const lengths = new Array<number>();\n        lengths.push(0);\n\n        this.curves.forEach(curve => {\n            const lineCurve = curve as THREE.LineCurve;\n            sum += lineCurve.v1.distanceTo(lineCurve.v2);\n            lengths.push(sum);\n        });\n        this.m_cache = lengths;\n        return lengths;\n    }\n\n    getParamAt(t: number): PathParam | null {\n        const distance = t * this.getLength();\n        const curveLengths = this.getCurveLengths();\n\n        for (let index = 0; index < curveLengths.length; ++index) {\n            if (curveLengths[index] < distance) {\n                continue;\n            }\n\n            const diff = curveLengths[index] - distance;\n            const curve = this.curves[index] as THREE.LineCurve;\n            const segmentLength = curve.getLength();\n            const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n            return new PathParam(this, index, u);\n        }\n\n        return null;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst DEFAULT_FONT_CATALOG = \"./resources/fonts/Default_FontCatalog.json\";\n\n/**\n * Default number of labels/POIs rendered in the scene\n */\nconst DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS = 500;\n\n/**\n * Number of elements that are put into second queue. This second chance queue is used to render\n * TextElements that have not been on screen before. This is a quick source for elements that can\n * appear when the camera moves a bit, before new elements are placed.\n */\nconst DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS = 300;\n\n/**\n * Maximum distance for text labels expressed as a ratio of distance to from the camera (0) to the\n * far plane (1.0). May be synchronized with fog value ?\n */\nconst DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS = 0.99;\n\n/**\n * Minimum scaling factor that may be applied to labels when their are distant from focus point.\n */\nconst DEFAULT_LABEL_DISTANCE_SCALE_MIN = 0.7;\n\n/**\n * Maximum scaling factor that may be applied to labels due to their distance from focus point.\n */\nconst DEFAULT_LABEL_DISTANCE_SCALE_MAX = 1.5;\n\nconst MIN_GLYPH_COUNT = 1024;\n\nconst MAX_GLYPH_COUNT = 32768;\n\nexport interface TextElementsRendererOptions {\n    /**\n     * The path to the font catalog file. Default is [[DEFAULT_FONT_CATALOG]].\n     */\n    fontCatalog?: string;\n    /**\n     * Optional initial number of glyphs (characters) for labels. In situations with limited,\n     * available memory, decreasing this number may be beneficial.\n     *\n     * @default [[MIN_GLYPH_COUNT]]\n     */\n    minNumGlyphs?: number;\n    /**\n     * Optional limit of number of glyphs (characters) for labels. In situations with limited,\n     * available memory, decreasing this number may be beneficial.\n     *\n     * @default [[MAX_GLYPH_COUNT]]\n     */\n    maxNumGlyphs?: number;\n    /**\n     * Limits the number of [[DataSource]] labels visible, such as road names and POIs.\n     * On small devices, you can reduce this number to to increase performance.\n     * @default [[DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS]].\n     */\n    maxNumVisibleLabels?: number;\n    /**\n     * The number of [[TextElement]]s that the [[TextElementsRenderer]] tries to render even\n     * if they were not visible during placement. This property only applies to [[TextElement]]s\n     * that were culled by the frustum; useful for map movements and animations.\n     * @default [[DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS]].\n     */\n    numSecondChanceLabels?: number;\n    /**\n     * The maximum distance for [[TextElement]] to be rendered, expressed as a fraction of\n     * the distance between the near and far plane [0, 1.0].\n     * @default [[DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS]].\n     */\n    maxDistanceRatioForTextLabels?: number;\n    /**\n     * The maximum distance for [[TextElement]] with icons to be rendered,\n     * expressed as a fraction of the distance\n     * between the near and far plane [0, 1.0].\n     * @default [[DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS]].\n     */\n    maxDistanceRatioForPoiLabels?: number;\n    /**\n     * The minimum scaling factor that may be applied to [[TextElement]]s due to their distance.\n     * If not defined the default value specified in [[TextElementsRenderer]] will be used.\n     * @default [[DEFAULT_LABEL_DISTANCE_SCALE_MIN]].\n     */\n    labelDistanceScaleMin?: number;\n    /**\n     * The maximum scaling factor that may be applied to [[TextElement]]s due to their distance.\n     * If not defined the default value specified in [[TextElementsRenderer]] will be used.\n     * @default [[DEFAULT_LABEL_DISTANCE_SCALE_MAX]].\n     */\n    labelDistanceScaleMax?: number;\n\n    /**\n     * Disable all fading animations for debugging and performance measurement.\n     * @default `false`\n     */\n    disableFading?: boolean;\n}\n\n/**\n * Initializes undefined text renderer options to default values.\n * @param options The options to be initialized.\n */\nexport function initializeDefaultOptions(options: TextElementsRendererOptions) {\n    if (options.fontCatalog === undefined) {\n        options.fontCatalog = DEFAULT_FONT_CATALOG;\n    }\n\n    if (options.minNumGlyphs === undefined) {\n        options.minNumGlyphs = MIN_GLYPH_COUNT;\n    }\n    if (options.maxNumGlyphs === undefined) {\n        options.maxNumGlyphs = MAX_GLYPH_COUNT;\n    }\n    if (options.maxNumVisibleLabels === undefined) {\n        options.maxNumVisibleLabels = DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS;\n    }\n    // TODO: Unused so far.\n    if (options.numSecondChanceLabels === undefined) {\n        options.numSecondChanceLabels = DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS;\n    }\n    if (options.labelDistanceScaleMin === undefined) {\n        options.labelDistanceScaleMin = DEFAULT_LABEL_DISTANCE_SCALE_MIN;\n    }\n    if (options.labelDistanceScaleMax === undefined) {\n        options.labelDistanceScaleMax = DEFAULT_LABEL_DISTANCE_SCALE_MAX;\n    }\n    if (options.maxDistanceRatioForTextLabels === undefined) {\n        options.maxDistanceRatioForTextLabels = DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS;\n    }\n    if (options.maxDistanceRatioForPoiLabels === undefined) {\n        options.maxDistanceRatioForPoiLabels = DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS;\n    }\n\n    if (options.disableFading === undefined) {\n        options.disableFading = false;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { assert, LoggerManager, LogLevel } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementFilter, TextElementGroupState } from \"./TextElementGroupState\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementType } from \"./TextElementType\";\n\nconst logger = LoggerManager.instance.create(\"TextElementsStateCache\", { level: LogLevel.Log });\n\n/**\n * Label distance tolerance squared in meters. Point labels with the same name that are closer in\n * world space than this value are treated as the same label. Used to identify duplicate labels in\n * overlapping tiles and label replacements at different storage levels.\n */\nfunction getDedupSqDistTolerance(zoomLevel: number) {\n    // Defining here a minimum tolerance of 10m at zoom level 13 or higher.\n    const minSqTol = 100;\n    const minSqTolLevel = 13;\n    const maxLevelDelta = 4;\n    const levelDelta = Math.min(\n        maxLevelDelta,\n        minSqTolLevel - Math.min(minSqTolLevel, Math.floor(zoomLevel))\n    );\n    // Distance tolerance computed applying a factor over an arbitrary minimum tolerance for a\n    // chosen zoom level. The factor is an exponential function on zoom level delta wrt minimum\n    // tolerance zoom level.\n    // error = sqrt(sqError) = sqrt(minSqError* 2^(4d)) = minError*2^(2d)\n\n    //tslint:disable-next-line: no-bitwise\n    return minSqTol << (levelDelta << 2);\n}\n\nconst tmpCachedDuplicate: { entries: TextElementState[]; index: number } = {\n    entries: [],\n    index: -1\n};\n\nfunction getCacheKey(element: TextElement): string | number {\n    return element.hasFeatureId() ? element.featureId! : element.text;\n}\n\n/**\n * Finds a duplicate for a text element among a list of candidates using their feature ids.\n * @param elementState The state of the text element for which the duplicate will be found.\n * @param candidates The list of candidates to check.\n * @returns The index of the candidate chosen as duplicate, or `undefined` if none was found.\n */\nfunction findDuplicateById(\n    elementState: TextElementState,\n    candidates: TextElementState[]\n): number | undefined {\n    // Cached entries with same feature id found, find the entry with the same tile offset.\n    const element = elementState.element;\n    const duplicateIndex = candidates.findIndex(\n        entry => entry.element.tileOffset === element.tileOffset\n    );\n    if (duplicateIndex === -1) {\n        return -1;\n    }\n    const candidate = candidates[duplicateIndex].element;\n    assert(element.featureId === candidate.featureId);\n\n    if (candidate.text !== element.text) {\n        // Labels with different text shouldn't share the same feature id. This points to\n        // an issue on the map data side. Submit a ticket to the corresponding map backend\n        // issue tracking system if available (e.g. OLPRPS project in JIRA for OMV),\n        // indicating affected labels including tile keys, texts and feature id.\n        logger.debug(\n            `Text feature id ${element.featureId} collision between \"${element.text} and \\\n             ${candidate.text}`\n        );\n        return undefined;\n    }\n    return duplicateIndex;\n}\n\ntype DuplicateCmp = (\n    newCandidate: TextElement,\n    newDistance: number,\n    oldCandidate: TextElement,\n    oldDistance: number\n) => boolean;\n\n// Duplicate criteria for path labels. Candidates are better the longer their paths are.\nfunction isBetterPathDuplicate(\n    newCandidate: TextElement,\n    _newDistance: number,\n    oldCandidate: TextElement,\n    _oldDistance: number\n): boolean {\n    if (newCandidate.pathLengthSqr === undefined) {\n        return false;\n    }\n    if (oldCandidate.pathLengthSqr === undefined) {\n        return false;\n    }\n    return newCandidate.pathLengthSqr > oldCandidate.pathLengthSqr;\n}\n\n// Duplicate criteria for point labels. Candidates are better the nearer they are to the label being\n// tested for duplicates.\nfunction isBetterPointDuplicate(\n    _newCandidate: TextElement,\n    newDistance: number,\n    _oldCandidate: TextElement,\n    oldDistance: number\n): boolean {\n    return newDistance < oldDistance;\n}\n\n/**\n * Finds a duplicate for a text element among a list of candidates using their text and distances.\n * @param elementState The state of the text element for which the duplicate will be found.\n * @param candidates The list of candidates to check.\n * @param zoomLevel Current zoom level.\n * @returns The index of the candidate chosen as duplicate, or `undefined` if none was found.\n */\nfunction findDuplicateByText(\n    elementState: TextElementState,\n    candidates: TextElementState[],\n    zoomLevel: number\n): number {\n    const element = elementState.element;\n    const maxSqDistError = getDedupSqDistTolerance(zoomLevel);\n    const entryCount = candidates.length;\n    const elementPosition = element.position;\n    const elementVisible = elementState.visible;\n    let dupIndex: number = -1;\n    let duplicate: TextElement | undefined;\n    let dupDistSquared: number = Infinity;\n    const isBetterDuplicate: DuplicateCmp =\n        element.type === TextElementType.PoiLabel ? isBetterPointDuplicate : isBetterPathDuplicate;\n\n    for (let i = 0; i < entryCount; ++i) {\n        const candidateEntry = candidates[i];\n        const cachedElement = candidateEntry.element;\n        const areDiffType = element.type !== cachedElement.type;\n        const areBothVisible = elementVisible && candidateEntry.visible;\n        if (areDiffType || areBothVisible) {\n            // Two text elements with different type or visible at the same time are always\n            // considered distinct.\n            continue;\n        }\n        const distSquared = elementPosition.distanceToSquared(cachedElement.position);\n        if (distSquared > maxSqDistError) {\n            // Cached text element is too far away to be a duplicate.\n            continue;\n        }\n        if (\n            duplicate === undefined ||\n            isBetterDuplicate(cachedElement, distSquared, duplicate, dupDistSquared)\n        ) {\n            dupIndex = i;\n            duplicate = cachedElement;\n            dupDistSquared = distSquared;\n        }\n    }\n\n    return dupIndex;\n}\n\n/**\n * Caches the state of text element groups currently rendered as well as the text element states\n * belonging to them, including their fading state and text deduplication information.\n */\nexport class TextElementStateCache {\n    private readonly m_referenceMap = new Map<TextElementGroup, TextElementGroupState>();\n    private m_sortedGroupStates: TextElementGroupState[] | undefined;\n\n    // Cache for point labels which may have duplicates in same tile or in neighboring tiles.\n    private readonly m_textMap = new Map<string | number, TextElementState[]>();\n\n    /**\n     * Gets the state corresponding to a given text element group or sets a newly created state if\n     * not found. It updates the states of the text elements belonging to the group using the\n     * specified parameters.\n     * @param textElementGroup The group of which the state will be obtained.\n     * @param tileKey The key of the tile to which the group belongs.\n     * @param textElementFilter Filter used to decide if a text element must be initialized,\n     * @see [[TextElementGroupState]] construction.\n     * @returns Tuple with the group state as first element and a boolean indicating whether the\n     * state was found in cache (`true`) or newly created (`false`) as second element.\n     */\n    getOrSet(\n        textElementGroup: TextElementGroup,\n        tileKey: TileKey,\n        textElementFilter: TextElementFilter\n    ): [TextElementGroupState, boolean] {\n        let groupState = this.get(textElementGroup);\n\n        if (groupState !== undefined) {\n            assert(groupState.size === textElementGroup.elements.length);\n            groupState.updateElements(textElementFilter);\n            return [groupState, true];\n        }\n\n        groupState = new TextElementGroupState(textElementGroup, tileKey, textElementFilter);\n        this.set(textElementGroup, groupState);\n\n        return [groupState, false];\n    }\n\n    get size(): number {\n        return this.m_referenceMap.size;\n    }\n\n    /**\n     * @returns All text element group states in the cache by group priority.\n     */\n    get sortedGroupStates(): TextElementGroupState[] {\n        if (this.m_sortedGroupStates === undefined) {\n            this.m_sortedGroupStates = Array.from(this.m_referenceMap.values());\n            this.m_sortedGroupStates.sort((a: TextElementGroupState, b: TextElementGroupState) => {\n                return b.group.priority - a.group.priority;\n            });\n        }\n\n        assert(this.m_referenceMap.size === this.m_sortedGroupStates.length);\n        return this.m_sortedGroupStates;\n    }\n\n    /**\n     * Updates state of all cached groups, discarding those that are not needed anymore.\n     * @param time The current time.\n     * @param disableFading `True` if fading is currently disabled, `false` otherwise.\n     * @param findReplacements `True` to replace each visible unvisited text element with a\n     * visited duplicate.\n     * @param zoomLevel Current zoom level.\n     * @returns `True` if any textElementGroup was evicted from cache, false otherwise.\n     */\n    update(time: number, disableFading: boolean, findReplacements: boolean, zoomLevel: number) {\n        const replaceCallback = findReplacements\n            ? this.replaceElement.bind(this, zoomLevel)\n            : undefined;\n\n        let anyEviction = false;\n        for (const [key, groupState] of this.m_referenceMap.entries()) {\n            if (groupState.visited) {\n                groupState.updateFading(time, disableFading);\n            } else {\n                if (findReplacements) {\n                    groupState.traverseVisibleElements(replaceCallback!);\n                }\n                this.m_referenceMap.delete(key);\n                this.m_sortedGroupStates = undefined;\n                anyEviction = true;\n            }\n        }\n        return anyEviction;\n    }\n\n    /**\n     * Clears visited state for all text element groups in cache.\n     */\n    clearVisited() {\n        for (const groupState of this.m_referenceMap.values()) {\n            groupState.visited = false;\n        }\n    }\n\n    clearTextCache() {\n        this.m_textMap.clear();\n    }\n\n    /**\n     * Clears the whole cache contents.\n     */\n    clear() {\n        this.m_referenceMap.clear();\n        this.m_sortedGroupStates = undefined;\n        this.m_textMap.clear();\n    }\n\n    /**\n     * Removes duplicates for a given text element.\n     *\n     * @param zoomLevel Current zoom level.\n     * @param elementState State of the text element to deduplicate.\n     * @returns True if it's the remaining element after deduplication, false if it's been marked\n     * as duplicate.\n     */\n    deduplicateElement(zoomLevel: number, elementState: TextElementState): boolean {\n        const cacheResult = this.findDuplicate(elementState, zoomLevel);\n\n        if (cacheResult === undefined) {\n            // Text not found so far, add this element to cache.\n            this.m_textMap.set(getCacheKey(elementState.element), [elementState]);\n            return true;\n        }\n\n        if (cacheResult.index === -1) {\n            // No duplicate found among elements with same text,add this one to cache.\n            cacheResult.entries.push(elementState);\n            return true;\n        }\n\n        // Duplicate found, check whether there's a label already visible and keep that one.\n        const cachedDuplicate = cacheResult.entries[cacheResult.index];\n\n        if (!cachedDuplicate.visible && elementState.visible) {\n            // New label is visible, substitute the cached label.\n            cacheResult.entries[cacheResult.index] = elementState;\n            cachedDuplicate.reset();\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Replaces a visible unvisited text element with a visited duplicate.\n     * @param zoomLevel Current zoom level.\n     * @param elementState State of the text element to deduplicate.\n     */\n    replaceElement(zoomLevel: number, elementState: TextElementState): void {\n        assert(elementState.visible);\n        const cacheResult = this.findDuplicate(elementState, zoomLevel);\n\n        if (cacheResult === undefined || cacheResult.index === -1) {\n            // No replacement found;\n            return;\n        }\n\n        const replacement = cacheResult.entries[cacheResult.index];\n        assert(!replacement.visible);\n\n        replacement.replace(elementState);\n    }\n\n    /**\n     * Gets the state corresponding to a given text element group.\n     * @param textElementGroup The group of which the state will be obtained.\n     * @returns The group state if cached, otherwise `undefined`.\n     */\n    private get(textElementGroup: TextElementGroup): TextElementGroupState | undefined {\n        const groupState = this.m_referenceMap.get(textElementGroup);\n\n        if (groupState !== undefined) {\n            groupState.visited = true;\n        }\n        return groupState;\n    }\n\n    /**\n     * Sets a specified state for a given text element group.\n     * @param textElementGroup  The group of which the state will be set.\n     * @param textElementGroupState The state to set for the group.\n     */\n    private set(textElementGroup: TextElementGroup, textElementGroupState: TextElementGroupState) {\n        assert(textElementGroup.elements.length > 0);\n        this.m_referenceMap.set(textElementGroup, textElementGroupState);\n        this.m_sortedGroupStates = undefined;\n    }\n\n    private findDuplicate(\n        elementState: TextElementState,\n        zoomLevel: number\n    ): { entries: TextElementState[]; index: number } | undefined {\n        // Point labels may have duplicates (as can path labels), Identify them\n        // and keep the one we already display.\n\n        const element = elementState.element;\n        const cachedEntries = this.m_textMap.get(getCacheKey(element));\n\n        if (cachedEntries === undefined) {\n            // No labels found with the same key.\n            return undefined;\n        }\n\n        tmpCachedDuplicate.entries = cachedEntries;\n        const index = element.hasFeatureId()\n            ? findDuplicateById(elementState, cachedEntries)\n            : findDuplicateByText(elementState, cachedEntries, zoomLevel);\n\n        if (index === undefined) {\n            // Feature id collision, try finding duplicates using text as key.\n            element.featureId = undefined;\n            return this.findDuplicate(elementState, zoomLevel);\n        }\n        tmpCachedDuplicate.index = index;\n        return tmpCachedDuplicate;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementState } from \"./TextElementState\";\n\n/**\n * Type of functions used to do early rejection of elements during group state creation or update.\n * @param textElementState The state of the text element to check.\n * @returns `undefined` if element was rejected, otherwise its current view distance.\n */\nexport type TextElementFilter = (textElementState: TextElementState) => number | undefined;\n\n/**\n * `TextElementGroupState` keeps the state of a text element group and each element in it while\n * they're being rendered.\n */\nexport class TextElementGroupState {\n    private m_textElementStates: TextElementState[];\n    private m_visited: boolean = false;\n\n    /**\n     * Creates the state for specified group.\n     * @param group The group of which the state will be created.\n     * @param tileKey The key of the tile to which this group belongs.\n     * @param filter Function used to do early rejection. @see [[TextElementFilter]].\n     */\n    constructor(\n        readonly group: TextElementGroup,\n        readonly tileKey: TileKey,\n        filter: TextElementFilter\n    ) {\n        assert(group.elements.length > 0);\n        const length = group.elements.length;\n        this.m_textElementStates = new Array(length);\n        this.m_visited = true;\n\n        // TODO: HARP-7648. Reduce number of allocations here:\n        // a) Avoid creating the state for labels that don't pass early placement checks and make\n        //    this checks more strict.\n        // b) Break label state objects into a set of arrays held at group level, one for each\n        //    primitive field in the label state.\n        for (let i = 0; i < length; ++i) {\n            const textElement = group.elements[i];\n            const state = new TextElementState(textElement);\n            const textDistance = filter(state);\n            state.update(textDistance);\n            this.m_textElementStates[i] = state;\n        }\n    }\n\n    /**\n     * Indicates whether the group has been submitted to the [[TextElementsRenderer]] in the current\n     * frame.\n     */\n    get visited(): boolean {\n        return this.m_visited;\n    }\n\n    set visited(visited: boolean) {\n        this.m_visited = visited;\n    }\n\n    /**\n     * @returns the priority of the text elements in the group.\n     */\n    get priority() {\n        return this.group.priority;\n    }\n\n    /**\n     * Updates the fading state of all text elements within the group to the specified time.\n     * @param time The time to which the fading state will be updated.\n     * @param disableFading `true` if fading is disabled, `false` otherwise.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        for (const elementState of this.m_textElementStates) {\n            if (elementState !== undefined) {\n                elementState.updateFading(time, disableFading);\n            }\n        }\n    }\n\n    /**\n     * Calls the specified callback for every visible text elements in the group.\n     * @param visibleElementsCallback Functions that will be called for every visible text element\n     * in the group.\n     */\n    traverseVisibleElements(visibleElementsCallback: (e: TextElementState) => void): void {\n        for (const elementState of this.m_textElementStates) {\n            if (elementState !== undefined && elementState.visible) {\n                visibleElementsCallback(elementState);\n            }\n        }\n    }\n\n    /**\n     * Updates the states of elements within the group.\n     * @param filter Function used to do early rejection. @see [[TextElementFilter]].\n     */\n    updateElements(filter: TextElementFilter) {\n        for (const elementState of this.m_textElementStates) {\n            const textDistance = filter(elementState);\n            elementState.update(textDistance);\n        }\n    }\n\n    get size(): number {\n        return this.m_textElementStates.length;\n    }\n\n    /**\n     * Returns text element states.\n     * @returns Array of element states.\n     */\n    get textElementStates(): TextElementState[] {\n        return this.m_textElementStates;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport { RenderState } from \"./RenderState\";\nimport { TextElement } from \"./TextElement\";\nimport { TextElementType } from \"./TextElementType\";\n\n/**\n * `TextElementState` keeps the current state of a text element while it's being rendered.\n */\nexport class TextElementState {\n    /**\n     * @hidden\n     * Used during label placement to reserve space from front to back.\n     */\n    private m_viewDistance: number | undefined;\n\n    /**\n     * @hidden\n     * Used during rendering. The array type is used for line markers only, which have a points\n     * array and multiple icon positions to render. Since line markers use the same renderState\n     * for text part and icon, there is no separate array of [[RenderState]]s for the text parts\n     * of the line markers.\n     */\n    private m_iconRenderStates?: RenderState | RenderState[];\n\n    /**\n     * @hidden\n     * Used during rendering.\n     */\n    private m_textRenderState?: RenderState;\n\n    constructor(readonly element: TextElement) {}\n\n    get initialized(): boolean {\n        return this.m_textRenderState !== undefined || this.m_iconRenderStates !== undefined;\n    }\n\n    /**\n     * @returns `true` if any component of the element is visible, `false` otherwise.\n     */\n    get visible(): boolean {\n        if (this.m_textRenderState !== undefined && this.m_textRenderState.isVisible()) {\n            return true;\n        }\n\n        const iconRenderState = this.iconRenderState;\n        if (iconRenderState !== undefined && iconRenderState.isVisible()) {\n            return true;\n        }\n\n        const iconRenderStates = this.iconRenderStates;\n        if (iconRenderStates === undefined) {\n            return false;\n        }\n\n        for (const state of iconRenderStates) {\n            if (state.isVisible()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Resets the element to an initialized state.\n     */\n    reset() {\n        if (this.m_textRenderState !== undefined) {\n            this.m_textRenderState.reset();\n        }\n\n        if (this.iconRenderState) {\n            (this.m_iconRenderStates as RenderState).reset();\n        } else if (this.m_iconRenderStates !== undefined) {\n            for (const renderState of this.m_iconRenderStates as RenderState[]) {\n                renderState.reset();\n            }\n        }\n        this.m_viewDistance = undefined;\n    }\n\n    /**\n     * Replaces given text element, inheriting its current state.\n     * The predecessor text element state is erased.\n     * @param predecessor Text element state to be replaced.\n     */\n    replace(predecessor: TextElementState) {\n        this.m_textRenderState = predecessor.m_textRenderState;\n        this.m_iconRenderStates = predecessor.m_iconRenderStates;\n        predecessor.m_textRenderState = undefined;\n        predecessor.m_iconRenderStates = undefined;\n\n        if (this.element.glyphs === undefined) {\n            // Use the predecessor glyphs, bounds and case array until proper ones are computed.\n            this.element.glyphs = predecessor.element.glyphs;\n            this.element.bounds = predecessor.element.bounds;\n            this.element.glyphCaseArray = predecessor.element.glyphCaseArray;\n        }\n    }\n\n    /**\n     * Returns the last computed distance of the text element to the camera.\n     * @returns Distance to camera.\n     */\n    get viewDistance(): number | undefined {\n        return this.m_viewDistance;\n    }\n\n    /**\n     * Updates the text element state.\n     * @param viewDistance The new view distance to set. If `undefined`, element is considered to\n     * be out of view.\n     */\n    update(viewDistance: number | undefined) {\n        if (this.initialized) {\n            this.setViewDistance(viewDistance);\n        } else if (viewDistance !== undefined) {\n            this.initialize(viewDistance);\n        }\n    }\n\n    /**\n     * Sets the distance of the element to the current view center.\n     * @param viewDistance The new view distance to set. If `undefined`, element is considered to\n     * be out of view.\n     */\n    setViewDistance(viewDistance: number | undefined) {\n        if (viewDistance === this.m_viewDistance) {\n            return;\n        }\n        this.m_viewDistance = viewDistance;\n    }\n\n    /**\n     * Return the last distance that has been computed for sorting during placement. This may not be\n     * the actual distance if the camera is moving, as the distance is computed only during\n     * placement. If the property `alwaysOnTop` is true, the value returned is always `0`.\n     *\n     * @returns 0 or negative distance to camera.\n     */\n    get renderDistance(): number {\n        return this.element.alwaysOnTop === true\n            ? 0\n            : this.m_viewDistance !== undefined\n            ? -this.m_viewDistance\n            : 0;\n    }\n\n    /**\n     * @returns The text render state.\n     */\n    get textRenderState(): RenderState | undefined {\n        return this.m_textRenderState;\n    }\n\n    /**\n     * Returns the icon render state for the case where the text element has only one icon.\n     * @returns The icon render state if the text element has a single icon, otherwise undefined.\n     */\n    get iconRenderState(): RenderState | undefined {\n        if (this.m_iconRenderStates === undefined) {\n            return undefined;\n        }\n\n        return this.m_iconRenderStates instanceof RenderState ? this.m_iconRenderStates : undefined;\n    }\n\n    /**\n     * Returns the icon render states for text elements with multiple icons.\n     * @returns The icon render states if the text element has multiple icons, otherwise undefined.\n     */\n    get iconRenderStates(): RenderState[] | undefined {\n        if (this.m_iconRenderStates === undefined) {\n            return undefined;\n        }\n\n        return this.m_iconRenderStates instanceof RenderState\n            ? undefined\n            : (this.m_iconRenderStates as RenderState[]);\n    }\n\n    /**\n     * Updates the fading state to the specified time.\n     * @param time The current time.\n     * @param disableFading If `True` there will be no fading transitions, i.e., state will go\n     * directly from FadedIn to FadedOut and viceversa.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        if (this.m_textRenderState !== undefined) {\n            this.m_textRenderState.updateFading(time, disableFading);\n        }\n\n        if (this.iconRenderState !== undefined) {\n            const iconRenderState = this.m_iconRenderStates as RenderState;\n            iconRenderState.updateFading(time, disableFading);\n        } else if (this.iconRenderStates !== undefined) {\n            for (const renderState of this.m_iconRenderStates as RenderState[]) {\n                renderState.updateFading(time, disableFading);\n            }\n        }\n    }\n\n    /**\n     * @param viewDistance Current distance of the element to the view center.\n     */\n    private initialize(viewDistance: number) {\n        assert(this.m_textRenderState === undefined);\n        assert(this.m_iconRenderStates === undefined);\n\n        this.setViewDistance(viewDistance);\n\n        if (this.element.type === TextElementType.LineMarker) {\n            this.m_iconRenderStates = new Array<RenderState>();\n            for (const _point of this.element.points as THREE.Vector3[]) {\n                const iconRenderStates = this.m_iconRenderStates as RenderState[];\n                const renderState = new RenderState();\n                iconRenderStates.push(renderState);\n            }\n            return;\n        }\n\n        this.m_textRenderState = new RenderState();\n\n        if (this.element.type === TextElementType.PoiLabel) {\n            this.m_iconRenderStates = new RenderState();\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n/**\n * State of fading.\n */\nexport enum FadingState {\n    Undefined = 0,\n    FadingIn = 1,\n    FadedIn = 2,\n    FadingOut = -1,\n    FadedOut = -2\n}\n\n/**\n * Time to fade in/fade out the labels in milliseconds.\n */\nexport const DEFAULT_FADE_TIME = 800;\n\n/**\n * State of rendering of the icon and text part of the `TextElement`. Mainly for fading the elements\n * in and out, to compute the opacity.\n *\n * @hidden\n */\nexport class RenderState {\n    private m_state = FadingState.Undefined;\n\n    /**\n     * Create a `RenderState`.\n     *\n     * @param value Current fading value [0..1].\n     * @param startTime Time stamp the fading started.\n     * @param opacity Computed opacity depending on value.\n     */\n    constructor(public value = 0.0, public startTime = 0, public opacity = 1.0) {}\n\n    /**\n     * Reset existing `RenderState` to appear like a fresh state.\n     */\n    reset() {\n        this.m_state = FadingState.Undefined;\n        this.value = 0.0;\n        this.startTime = 0.0;\n        this.opacity = 1.0;\n    }\n\n    /**\n     * @returns `true` if element state is `FadingState.Undefined`.\n     */\n    isUndefined(): boolean {\n        return this.m_state === FadingState.Undefined;\n    }\n\n    /**\n     * @returns `true` if element is either fading in or fading out.\n     */\n    isFading(): boolean {\n        const fading =\n            this.m_state === FadingState.FadingIn || this.m_state === FadingState.FadingOut;\n        return fading;\n    }\n\n    /**\n     * @returns `true` if element is fading in.\n     */\n    isFadingIn(): boolean {\n        const fadingIn = this.m_state === FadingState.FadingIn;\n        return fadingIn;\n    }\n\n    /**\n     * @returns `true` if element is fading out.\n     */\n    isFadingOut(): boolean {\n        const fadingOut = this.m_state === FadingState.FadingOut;\n        return fadingOut;\n    }\n\n    /**\n     * @returns `true` if element is done with fading in.\n     */\n    isFadedIn(): boolean {\n        const fadedIn = this.m_state === FadingState.FadedIn;\n        return fadedIn;\n    }\n\n    /**\n     * @returns `true` if element is done with fading out.\n     */\n    isFadedOut(): boolean {\n        const fadedOut = this.m_state === FadingState.FadedOut;\n        return fadedOut;\n    }\n\n    /**\n     * @returns `true` if state is neither faded out nor undefined.\n     */\n    isVisible(): boolean {\n        return this.m_state !== FadingState.FadedOut && this.m_state !== FadingState.Undefined;\n    }\n\n    /**\n     * Updates the state to [[FadingState.FadingIn]].\n     * If previous state is [[FadingState.FadingIn]] or [[FadingState.FadedIn]] it remains\n     * unchanged.\n     *\n     * @param time Current time.\n     */\n    startFadeIn(time: number) {\n        if (this.m_state === FadingState.FadingIn || this.m_state === FadingState.FadedIn) {\n            return;\n        }\n\n        if (this.m_state === FadingState.FadingOut) {\n            // The fadeout is not complete: compute the virtual fadingStartTime in the past, to get\n            // a correct end time:\n            this.value = 1.0 - this.value;\n            this.startTime = time - this.value * DEFAULT_FADE_TIME;\n        } else {\n            this.startTime = time;\n            this.value = 0.0;\n            this.opacity = 0;\n        }\n\n        this.m_state = FadingState.FadingIn;\n    }\n\n    /**\n     * Updates the state to [[FadingState.FadingOut]].\n     * If previous state is [[FadingState.FadingOut]] or [[FadingState.FadedOut]] it remains\n     * unchanged.\n     *\n     * @param time Current time.\n     */\n    startFadeOut(time: number) {\n        if (this.m_state === FadingState.FadingOut || this.m_state === FadingState.FadedOut) {\n            return;\n        }\n\n        if (this.m_state === FadingState.FadingIn) {\n            // The fade-in is not complete: compute the virtual fadingStartTime in the past, to get\n            // a correct end time:\n            this.startTime = time - this.value * DEFAULT_FADE_TIME;\n            this.value = 1.0 - this.value;\n        } else {\n            this.startTime = time;\n            this.value = 0.0;\n            this.opacity = 1;\n        }\n\n        this.m_state = FadingState.FadingOut;\n    }\n\n    /**\n     * Updates opacity to current time, changing the state to [[FadingState.FadedOut]] or\n     * [[FadingState.FadedIn]] when the opacity becomes 0 or 1 respectively.\n     * It does nothing if [[isFading]] !== `true`.\n     *\n     * @param time Current time.\n     * @param disableFading `true` if fading is disabled, `false` otherwise.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        if (this.m_state !== FadingState.FadingIn && this.m_state !== FadingState.FadingOut) {\n            return;\n        }\n\n        if (this.startTime === 0) {\n            this.startTime = time;\n        }\n\n        const fadingTime = time - this.startTime;\n        const startValue = this.m_state === FadingState.FadingIn ? 0 : 1;\n        const endValue = this.m_state === FadingState.FadingIn ? 1 : 0;\n\n        if (disableFading || fadingTime >= DEFAULT_FADE_TIME) {\n            this.value = 1.0;\n            this.opacity = endValue;\n            this.m_state =\n                this.m_state === FadingState.FadingIn ? FadingState.FadedIn : FadingState.FadedOut;\n        } else {\n            // TODO: HARP-7648. Do this once for all labels (calculate the last frame value\n            // increment).\n            this.value = fadingTime / DEFAULT_FADE_TIME;\n\n            this.opacity = THREE.MathUtils.clamp(\n                MathUtils.smootherStep(startValue, endValue, this.value),\n                0,\n                1\n            );\n            assert(this.isFading());\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"@here/harp-utils\";\nimport { PrePlacementResult } from \"./Placement\";\n\nexport class UpdateStats {\n    tiles: number = 0;\n    totalGroups: number = 0;\n    newGroups: number = 0;\n    totalLabels: number = 0;\n    results = new Array<number>(PrePlacementResult.Count);\n\n    constructor(private readonly m_logger: IChannel) {\n        this.results.fill(0);\n    }\n\n    clear() {\n        this.tiles = 0;\n        this.totalGroups = 0;\n        this.newGroups = 0;\n        this.totalLabels = 0;\n        this.results.fill(0);\n    }\n    log() {\n        this.m_logger.debug(\"Tiles\", this.tiles);\n        this.m_logger.debug(\"Total groups\", this.totalGroups);\n        this.m_logger.debug(\"New groups\", this.newGroups);\n        this.m_logger.debug(\"Total labels\", this.totalLabels);\n        this.m_logger.debug(\"Placed labels\", this.results[PrePlacementResult.Ok]);\n        this.m_logger.debug(\"Invisible\", this.results[PrePlacementResult.Invisible]);\n        this.m_logger.debug(\"Poi not ready\", this.results[PrePlacementResult.NotReady]);\n        this.m_logger.debug(\"Too far\", this.results[PrePlacementResult.TooFar]);\n        this.m_logger.debug(\"Duplicate\", this.results[PrePlacementResult.Duplicate]);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { PriorityListGroup } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\n\n/**\n * Group of [[TextElement]] sharing same priority.\n */\nexport class TextElementGroup extends PriorityListGroup<TextElement> {}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GroupedPriorityList } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\n\n/**\n * List of [[TextElement]] groups sorted by priority.\n */\nexport class TextElementGroupPriorityList extends GroupedPriorityList<TextElement> {}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    IndexedTechniqueParams,\n    LineMarkerTechnique,\n    PoiTechnique,\n    TextTechnique\n} from \"@here/harp-datasource-protocol\";\nimport { TextLayoutStyle, TextRenderStyle } from \"@here/harp-text-canvas\";\nimport { Tile } from \"../Tile\";\n\nexport class TileTextStyleCache {\n    private textRenderStyles: TextRenderStyle[] = [];\n    private textLayoutStyles: TextLayoutStyle[] = [];\n    private tile: Tile;\n\n    constructor(tile: Tile) {\n        this.tile = tile;\n    }\n\n    clear() {\n        this.textRenderStyles.length = 0;\n        this.textLayoutStyles.length = 0;\n    }\n\n    getRenderStyle(\n        technique: (TextTechnique | PoiTechnique | LineMarkerTechnique) & IndexedTechniqueParams\n    ): TextRenderStyle {\n        let style = this.textRenderStyles[technique._index];\n        if (style === undefined) {\n            style = this.textRenderStyles[\n                technique._index\n            ] = this.tile.mapView.textElementsRenderer.styleCache.createRenderStyle(\n                this.tile,\n                technique\n            );\n        }\n        return style;\n    }\n\n    getLayoutStyle(\n        technique: (TextTechnique | PoiTechnique | LineMarkerTechnique) & IndexedTechniqueParams\n    ): TextLayoutStyle {\n        let style = this.textLayoutStyles[technique._index];\n        if (style === undefined) {\n            style = this.textLayoutStyles[\n                technique._index\n            ] = this.tile.mapView.textElementsRenderer.styleCache.createLayoutStyle(\n                this.tile,\n                technique\n            );\n        }\n        return style;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport {\n    IBloomEffect,\n    IOutlineEffect,\n    ISepiaEffect,\n    IVignetteEffect\n} from \"@here/harp-datasource-protocol\";\nimport { SepiaShader, VignetteShader } from \"@here/harp-materials\";\nimport { IPassManager } from \"./IPassManager\";\nimport { LowResRenderPass } from \"./LowResRenderPass\";\nimport { MSAARenderPass, MSAASampling } from \"./MSAARenderPass\";\nimport { OutlineEffect } from \"./Outline\";\nimport { RenderPass, ShaderPass } from \"./Pass\";\nimport { BloomPass } from \"./UnrealBloomPass\";\n\nconst DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL = MSAASampling.Level_1;\nconst DEFAULT_STATIC_MSAA_SAMPLING_LEVEL = MSAASampling.Level_4;\n\n/**\n * Interface for the antialias settings passed when instantiating a [[MapView]], and transferred to\n * the [[MapRenderingManager]] instance. These parameters can be changed at runtime as opposed to\n * the native WebGL antialiasing.\n */\nexport interface IMapAntialiasSettings {\n    /**\n     * Whether the MSAA is enabled or not.\n     *\n     * @default `false`\n     */\n    msaaEnabled: boolean;\n\n    /**\n     * The sampling level to use for MSAA during continuous rendering.\n     *\n     * @default `MSAASampling.Level_1`\n     */\n    dynamicMsaaSamplingLevel?: MSAASampling;\n\n    /**\n     * The sampling level to use for MSAA when the rendering stops.\n     *\n     * @default `MSAASampling.Level_4`\n     */\n    staticMsaaSamplingLevel?: MSAASampling;\n}\n\n/**\n * The `MapRenderingManager` class manages the map rendering (as opposed to text) by dispatching the\n * [[MapRenderingManager.render]] call to a set of internal [[Pass]] instances. It provides an API\n * to modify some of the rendering processes like the antialiasing behaviour at runtime.\n */\nexport interface IMapRenderingManager extends IPassManager {\n    /**\n     * Bloom effect parameters.\n     */\n    bloom: IBloomEffect;\n\n    /**\n     * Outline effect parameters.\n     */\n    outline: IOutlineEffect;\n\n    /**\n     * Vignette effect parameters.\n     */\n    vignette: IVignetteEffect;\n\n    /**\n     * Sepia effect parameters.\n     */\n    sepia: ISepiaEffect;\n\n    /**\n     * Set a `pixelRatio` for dynamic rendering (i.e. during animations). If a value is specified,\n     * the `LowResRenderPass` will be employed to used to render the scene into a lower resolution\n     * render target, which will then be rendered to the screen.\n     */\n    lowResPixelRatio?: number;\n\n    /**\n     * The level of MSAA sampling while the user interacts. It should be a low level so that the\n     * MSAA does not impact the framerate.\n     */\n    dynamicMsaaSamplingLevel: MSAASampling;\n\n    /**\n     * Enable or disable the MSAA. If disabled, `MapRenderingManager` will use the renderer provided\n     * in the [[MapRenderingManager.render]] method to render the scene.\n     */\n    msaaEnabled: boolean;\n\n    /**\n     * The higher level of MSAA sampling for a last frame to render, when the camera is static. It\n     * can be a high level, providing high quality renders requiring few tens of seconds, since no\n     * frame is expected to immediately follow in the requestAnimationFrame. It is still limited by\n     * zooming, since zooming is not requestAnimationFrame-based and can lead to stuttering if the\n     * render time is too long, except on desktop Mac, where mouse interaction already implements\n     * some damping. Higher levels of sampling may lead to noticeable color banding, visible in\n     * areas with a slight color gradient, like large areas or the sky background.\n     */\n    staticMsaaSamplingLevel: MSAASampling;\n\n    /**\n     * The method to call to render the map. This method depends on an `isStaticFrame` boolean that\n     * notifies the pass manager to switch to a higher level render quality for the last frame.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the map with.\n     * @param isStaticFrame Whether the frame to render is static or dynamic. Selects level of\n     * antialiasing.\n     * @param time Optional time argument provided by the requestAnimationFrame, to pass to\n     * sub-passes.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        isStaticFrame: boolean,\n        time?: number\n    ): void;\n\n    /**\n     * Updating the outline rebuilds the outline materials of every outlined mesh.\n     *\n     * @param options outline options from the [[Theme]].\n     */\n    updateOutline(options: {\n        thickness: number;\n        color: string;\n        ghostExtrudedPolygons: boolean;\n    }): void;\n}\n\n/**\n * The implementation of [[IMapRenderingManager]] to instantiate in [[MapView]] and manage the map\n * rendering.\n */\nexport class MapRenderingManager implements IMapRenderingManager {\n    bloom = {\n        enabled: false,\n        strength: 1.5,\n        radius: 0.4,\n        threshold: 0.85\n    };\n    outline = {\n        enabled: false,\n        thickness: 0.005,\n        color: \"#000000\",\n        ghostExtrudedPolygons: false,\n        needsUpdate: false\n    };\n    vignette = {\n        enabled: false,\n        offset: 1.0,\n        darkness: 1.0\n    };\n    sepia = {\n        enabled: false,\n        amount: 0.5\n    };\n\n    private m_width: number = 1;\n    private m_height: number = 1;\n\n    private m_outlineEffect?: OutlineEffect;\n    private m_msaaPass: MSAARenderPass;\n    private m_renderPass: RenderPass = new RenderPass();\n    private m_target1: THREE.WebGLRenderTarget = new THREE.WebGLRenderTarget(1, 1);\n    private m_target2: THREE.WebGLRenderTarget = new THREE.WebGLRenderTarget(1, 1);\n    private m_bloomPass?: BloomPass;\n    private m_sepiaPass: ShaderPass = new ShaderPass(SepiaShader);\n    private m_vignettePass: ShaderPass = new ShaderPass(VignetteShader);\n    private m_readBuffer: THREE.WebGLRenderTarget;\n    private m_dynamicMsaaSamplingLevel: MSAASampling;\n    private m_staticMsaaSamplingLevel: MSAASampling;\n    private m_lowResPass: LowResRenderPass;\n\n    /**\n     * The constructor of `MapRenderingManager`.\n     *\n     * @param width Width of the frame buffer.\n     * @param height Height of the frame buffer.\n     * @param lowResPixelRatio The `pixelRatio` determines the resolution of the internal\n     *  `WebGLRenderTarget`. Values between 0.5 and `window.devicePixelRatio` can be tried to give\n     * good results. A value of `undefined` disables the low res render pass. The value should not\n     * be larger than`window.devicePixelRatio`.\n     * @param antialiasSetting The object defining the demeanor of MSAA.\n     */\n    constructor(\n        width: number,\n        height: number,\n        lowResPixelRatio: number | undefined,\n        antialiasSettings: IMapAntialiasSettings | undefined = { msaaEnabled: false }\n    ) {\n        this.m_readBuffer = new THREE.WebGLRenderTarget(width, height);\n        this.m_msaaPass = new MSAARenderPass();\n        this.m_msaaPass.enabled =\n            antialiasSettings !== undefined ? antialiasSettings.msaaEnabled === true : false;\n        this.m_dynamicMsaaSamplingLevel =\n            antialiasSettings.dynamicMsaaSamplingLevel === undefined\n                ? DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL\n                : antialiasSettings.dynamicMsaaSamplingLevel;\n        this.m_staticMsaaSamplingLevel =\n            antialiasSettings.staticMsaaSamplingLevel === undefined\n                ? DEFAULT_STATIC_MSAA_SAMPLING_LEVEL\n                : antialiasSettings.staticMsaaSamplingLevel;\n        this.m_lowResPass = new LowResRenderPass(lowResPixelRatio);\n        this.m_lowResPass.enabled = lowResPixelRatio !== undefined;\n    }\n\n    updateOutline(options: { thickness: number; color: string; ghostExtrudedPolygons: boolean }) {\n        this.outline.color = options.color;\n        this.outline.thickness = options.thickness;\n        this.outline.ghostExtrudedPolygons = options.ghostExtrudedPolygons;\n        this.outline.needsUpdate = true;\n    }\n\n    /**\n     * The method to call to render the map with the `MapRenderingManager` instance. It contains the\n     * chain of sub-passes that can transfer the write and read buffers, and other sheer rendering\n     * conditions as disabling AA when a high DPI device is in use.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the map with.\n     * @param scene The ThreeJS Scene instance containing the map objects to render.\n     * @param camera The ThreeJS Camera instance to render the scene through.\n     * @param isStaticFrame Whether the frame to render is static or dynamic. Selects level of\n     * antialiasing.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        isStaticFrame: boolean\n    ) {\n        const target = null;\n        if (!isStaticFrame && this.m_lowResPass.pixelRatio !== undefined) {\n            // Not designed to be combined with our own MSAA\n            this.m_lowResPass.renderToScreen = true;\n            this.m_lowResPass.render(renderer, scene, camera, target, this.m_readBuffer);\n            return;\n        }\n\n        const usePostEffects =\n            this.bloom.enabled ||\n            this.outline.enabled ||\n            this.vignette.enabled ||\n            this.sepia.enabled;\n\n        let activeTarget: null | THREE.WebGLRenderTarget = null;\n\n        // 1. If the bloom is enabled, clear the depth.\n        if (this.bloom.enabled || this.vignette.enabled || this.sepia.enabled) {\n            renderer.setRenderTarget(this.m_target1);\n            renderer.clearDepth();\n        }\n\n        // 2. Render the map.\n\n        if (this.m_msaaPass.enabled) {\n            // Use a higher MSAA sampling level for static rendering.\n            this.m_msaaPass.samplingLevel = isStaticFrame\n                ? this.m_staticMsaaSamplingLevel\n                : this.m_dynamicMsaaSamplingLevel;\n            // MSAA is the only effect for the moment.\n            this.m_msaaPass.renderToScreen = !usePostEffects;\n            // Render to the specified target with the MSAA pass.\n            this.m_msaaPass.render(renderer, scene, camera, target, this.m_readBuffer);\n        } else {\n            if (this.bloom.enabled || this.vignette.enabled || this.sepia.enabled) {\n                activeTarget = this.m_target1;\n                this.m_renderPass.render(renderer, scene, camera, this.m_target1, null!);\n            } else if (!this.outline.enabled || (this.outline.enabled && !this.bloom.enabled)) {\n                renderer.render(scene, camera);\n            }\n        }\n\n        // 3. Apply effects\n        if (this.outline.enabled) {\n            if (this.m_outlineEffect === undefined) {\n                this.m_outlineEffect = new OutlineEffect(renderer);\n            }\n            if (this.outline.needsUpdate) {\n                this.m_outlineEffect.color = this.outline.color;\n                this.m_outlineEffect.thickness = this.outline.thickness;\n                this.m_outlineEffect.ghostExtrudedPolygons = this.outline.ghostExtrudedPolygons;\n                this.outline.needsUpdate = false;\n            }\n            const nextEffectEnabled =\n                this.bloom.enabled || this.vignette.enabled || this.sepia.enabled;\n            if (nextEffectEnabled) {\n                activeTarget = this.m_target1;\n            }\n            renderer.setRenderTarget(nextEffectEnabled ? activeTarget : null!);\n            this.m_outlineEffect.render(scene, camera);\n        }\n\n        if (this.bloom.enabled) {\n            if (this.m_bloomPass === undefined) {\n                this.m_bloomPass = new BloomPass(\n                    new THREE.Vector2(this.m_width, this.m_height),\n                    this.bloom.strength,\n                    this.bloom.radius,\n                    this.bloom.threshold\n                );\n            }\n            const nextEffectEnabled = this.vignette.enabled || this.sepia.enabled;\n            this.m_bloomPass.renderToScreen = !nextEffectEnabled;\n            this.m_bloomPass.radius = this.bloom.radius;\n            this.m_bloomPass.strength = this.bloom.strength;\n            this.m_bloomPass.threshold = this.bloom.threshold;\n            this.m_bloomPass.render(renderer, scene, camera, null!, activeTarget!);\n        } else if (this.m_bloomPass !== undefined) {\n            this.m_bloomPass.dispose();\n            this.m_bloomPass = undefined;\n        }\n\n        if (this.vignette.enabled) {\n            const oldTarget = activeTarget!;\n            const nextEffectEnabled = this.sepia.enabled;\n            this.m_vignettePass.uniforms.offset.value = this.vignette.offset;\n            this.m_vignettePass.uniforms.darkness.value = this.vignette.darkness;\n            this.m_vignettePass.renderToScreen = !nextEffectEnabled;\n            if (nextEffectEnabled) {\n                activeTarget = activeTarget === this.m_target1 ? this.m_target2 : this.m_target1;\n            }\n            this.m_vignettePass.render(renderer, scene, camera, activeTarget!, oldTarget);\n        }\n\n        if (this.sepia.enabled) {\n            this.m_sepiaPass.renderToScreen = true;\n            this.m_sepiaPass.uniforms.amount.value = this.sepia.amount;\n            this.m_sepiaPass.render(renderer, scene, camera, null!, activeTarget!);\n        }\n    }\n\n    /**\n     * The resize function to call on resize events to resize the render targets. It shall include\n     * the resize methods of all the sub-passes used in `MapRenderingManager`.\n     *\n     * @param width New width to use.\n     * @param height New height to use.\n     */\n    setSize(width: number, height: number) {\n        this.m_readBuffer.setSize(width, height);\n        this.m_msaaPass.setSize(width, height);\n        if (this.m_bloomPass !== undefined) {\n            this.m_bloomPass.setSize(width, height);\n        }\n        this.m_lowResPass.setSize(width, height);\n        this.m_target1.setSize(width, height);\n        this.m_target2.setSize(width, height);\n        this.m_width = width;\n        this.m_height = height;\n    }\n\n    /**\n     * The `lowResPixelRatio` determines the resolution of the internal `WebGLRenderTarget`. Values\n     * between 0.5 and `window.devicePixelRatio` can be tried to give  good results. A value of\n     * `undefined` disables the low res render pass. The value should not be larger than\n     * `window.devicePixelRatio`.\n     */\n    get lowResPixelRatio(): number | undefined {\n        return this.m_lowResPass.pixelRatio;\n    }\n\n    set lowResPixelRatio(pixelRatio: number | undefined) {\n        this.m_lowResPass.pixelRatio = pixelRatio;\n        this.m_lowResPass.enabled = pixelRatio !== undefined;\n    }\n\n    /**\n     * Set the level of sampling while the user interacts.\n     *\n     * @param samplingLevel The sampling level.\n     */\n    set dynamicMsaaSamplingLevel(samplingLevel: MSAASampling) {\n        this.m_dynamicMsaaSamplingLevel = samplingLevel;\n    }\n\n    /**\n     * Return the sampling level defined during continuous rendering.\n     */\n    get dynamicMsaaSamplingLevel(): MSAASampling {\n        return this.m_dynamicMsaaSamplingLevel;\n    }\n\n    /**\n     * Enable or disable the MSAA. If disabled, `MapRenderingManager` will use the renderer provided\n     * in the [[MapRenderingManager.render]] method to render the scene.\n     *\n     * @param value If `true`, MSAA is enabled, disabled otherwise.\n     */\n    set msaaEnabled(value: boolean) {\n        this.m_msaaPass.enabled = value;\n    }\n\n    /**\n     * Return whether the MSAA is enabled.\n     */\n    get msaaEnabled(): boolean {\n        return this.m_msaaPass.enabled;\n    }\n\n    /**\n     * Set the sampling level for rendering static frames.\n     *\n     * @param samplingLevel The sampling level.\n     */\n    set staticMsaaSamplingLevel(samplingLevel: MSAASampling) {\n        this.m_staticMsaaSamplingLevel = samplingLevel;\n    }\n\n    /**\n     * Return the sampling level defined for rendering static frames.\n     */\n\n    get staticMsaaSamplingLevel(): MSAASampling {\n        return this.m_staticMsaaSamplingLevel;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CopyMaterial, CopyShader } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\n\nimport { Pass } from \"./Pass\";\n\n/**\n * The `LowResRenderPass` renders the scene at a lower resolution into an internal\n * `WebGLRenderTarget`, and then copies the result into the frame buffer. The size of the internal\n * buffer is determined by the current frame buffer size multiplied by `pixelRatio`.\n *\n * @note Since no anti-aliasing is applied during dynamic rendering, visual artifacts may be\n * visible.\n */\nexport class LowResRenderPass extends Pass {\n    private m_renderTarget: THREE.WebGLRenderTarget | null = null;\n    private readonly m_localCamera: THREE.OrthographicCamera = new THREE.OrthographicCamera(\n        -1,\n        1,\n        1,\n        -1,\n        0,\n        1\n    );\n    private readonly m_quadScene: THREE.Scene = new THREE.Scene();\n    private readonly m_quadUniforms: { [uniformName: string]: THREE.IUniform } =\n        CopyShader.uniforms;\n    private readonly m_quadMaterial: THREE.ShaderMaterial = new CopyMaterial(this.m_quadUniforms);\n    private readonly m_quad: THREE.Mesh = new THREE.Mesh(\n        new THREE.PlaneBufferGeometry(2, 2),\n        this.m_quadMaterial\n    );\n    private m_pixelRatio: number | undefined;\n    private m_savedWidth = 0;\n    private m_savedHeight = 0;\n\n    /**\n     * The constructor for `LowResRenderPass`. It builds an internal scene with a camera looking at\n     * a quad.\n     *\n     * @param lowResPixelRatio The `pixelRatio` determines the resolution of the internal\n     *  `WebGLRenderTarget`. Values between 0.5 and `window.devicePixelRatio` can be tried to give\n     * good results. A value of `undefined` disables the low res render pass. The value should not\n     * be larger than`window.devicePixelRatio`.\n     */\n    constructor(public lowResPixelRatio?: number) {\n        super();\n        this.m_quad.frustumCulled = false;\n        this.m_quadScene.add(this.m_quad);\n        this.m_pixelRatio = lowResPixelRatio;\n    }\n\n    /**\n     * Releases all used resources.\n     */\n    dispose() {\n        this.m_quadMaterial.dispose();\n        this.m_quad.geometry.dispose();\n        if (this.m_renderTarget !== null) {\n            this.m_renderTarget.dispose();\n            this.m_renderTarget = null;\n        }\n    }\n\n    /**\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. The value should not be larger than\n     * `window.devicePixelRatio`.\n     *\n     * @default `undefined`\n     */\n    set pixelRatio(ratio: number | undefined) {\n        this.m_pixelRatio = ratio;\n        if (this.m_renderTarget && this.pixelRatio !== undefined) {\n            this.m_renderTarget.setSize(\n                Math.floor(this.m_savedWidth * this.pixelRatio),\n                Math.floor(this.m_savedHeight * this.pixelRatio)\n            );\n        }\n    }\n\n    get pixelRatio(): number | undefined {\n        return this.m_pixelRatio;\n    }\n\n    /**\n     * The render function of `LowResRenderPass`. It renders the whole scene into an internal\n     * `WebGLRenderTarget` instance with a lower resolution, using the passed in `WebGLRenderer`.\n     * The low resolution image is then copied to the `writeBuffer`, which is `undefined` in case it\n     * is the screen.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the scene with.\n     * @param scene The ThreeJS Scene instance to render the scene with.\n     * @param camera The ThreeJS Camera instance to render the scene with.\n     * @param writeBuffer A ThreeJS WebGLRenderTarget instance to render the scene to.\n     * @param readBuffer A ThreeJS WebGLRenderTarget instance to render the scene.\n     * @override\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        if (!this.enabled || this.pixelRatio === undefined) {\n            return;\n        }\n\n        // Initiates the local render target with the read buffer's dimensions, if not available.\n        if (this.m_renderTarget === null) {\n            this.m_savedWidth = readBuffer.width;\n            this.m_savedHeight = readBuffer.height;\n            this.m_renderTarget = new THREE.WebGLRenderTarget(\n                Math.floor(this.m_savedWidth * this.pixelRatio),\n                Math.floor(this.m_savedHeight * this.pixelRatio),\n                {\n                    minFilter: THREE.LinearFilter,\n                    magFilter: THREE.LinearFilter,\n                    format: THREE.RGBAFormat,\n                    depthBuffer: true,\n                    stencilBuffer: true\n                }\n            );\n            this.m_renderTarget.texture.name = \"LowResRenderPass.sample\";\n        }\n\n        this.m_quadUniforms.tDiffuse.value = this.m_renderTarget.texture;\n        this.m_quadUniforms.opacity.value = 1.0;\n\n        const oldRenderTarget = renderer.getRenderTarget();\n        renderer.setRenderTarget(this.m_renderTarget);\n        renderer.clear();\n        // Render into the low resolution internal render target.\n        renderer.render(scene, camera);\n\n        // Render the low resolution target into the screen.\n        // NOTE: three.js doesn't like undefined as renderTarget, but works with `null`\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        renderer.clear();\n        renderer.render(this.m_quadScene, this.m_localCamera);\n        renderer.setRenderTarget(oldRenderTarget);\n    }\n\n    /**\n     * Resize the internal render target to match the new size specified. The size of internal\n     * buffer depends on the `pixelRatio`.\n     *\n     * @param width New width to apply to the render target.\n     * @param height New height to apply to the render target.\n     * @override\n     */\n    setSize(width: number, height: number) {\n        this.m_savedWidth = width;\n        this.m_savedHeight = height;\n        if (this.m_renderTarget && this.pixelRatio !== undefined) {\n            this.m_renderTarget.setSize(\n                Math.floor(width * this.pixelRatio),\n                Math.floor(height * this.pixelRatio)\n            );\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { chainCallbacks } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nconst vertexShaderChunk = `\n    uniform float outlineThickness;\n\n    vec4 calculateOutline( vec4 pos, vec3 objectNormal, vec4 skinned ) {\n\n        float thickness = outlineThickness;\n        const float ratio = 1.0;\n        vec4 pos2 = projectionMatrix * modelViewMatrix * vec4( skinned.xyz + objectNormal, 1.0 );\n        vec4 norm = normalize( pos - pos2 );\n        return pos + norm * thickness * pos.w * ratio;\n\n    }`;\n\nconst vertexShaderChunk2 = `\n    #if ! defined( LAMBERT ) && ! defined( PHONG ) && ! defined( TOON ) && ! defined( STANDARD )\n        #ifndef USE_ENVMAP\n            vec3 objectNormal = normalize( normal );\n        #endif\n    #endif\n\n    #ifdef FLIP_SIDED\n        objectNormal = -objectNormal;\n    #endif\n\n    #ifdef DECLARE_TRANSFORMED\n        vec3 transformed = vec3( position );\n    #endif\n\n    gl_Position = calculateOutline( gl_Position, objectNormal, vec4( transformed, 1.0 ) );\n\n    #include <fog_vertex>`;\n\nconst fragmentShader = `\n    #include <common>\n    #include <fog_pars_fragment>\n\n    uniform vec3 outlineColor;\n    uniform float outlineAlpha;\n\n    void main() {\n\n        gl_FragColor = vec4( outlineColor, outlineAlpha );\n\n        #include <fog_fragment>\n\n    }`;\n\nexport class OutlineEffect {\n    enabled: boolean = true;\n\n    autoClear: boolean;\n    domElement: HTMLCanvasElement;\n    shadowMap: THREE.WebGLShadowMap;\n\n    private m_defaultThickness: number = 0.02;\n    private m_defaultColor: THREE.Color = new THREE.Color(0, 0, 0);\n    private m_defaultAlpha: number = 1;\n    private m_defaultKeepAlive: boolean = false;\n    private m_ghostExtrudedPolygons: boolean = false;\n\n    private m_cache: any = {};\n    private m_removeThresholdCount: number = 60;\n    private m_originalMaterials: any = {};\n    private m_originalOnBeforeRenders: any = {};\n\n    private m_shaderIDs: { [key: string]: string } = {\n        MeshBasicMaterial: \"basic\",\n        MeshLambertMaterial: \"lambert\",\n        MeshPhongMaterial: \"phong\",\n        MeshToonMaterial: \"phong\",\n        MeshStandardMaterial: \"physical\",\n        MeshPhysicalMaterial: \"physical\"\n    };\n    private m_uniformsChunk = {\n        outlineThickness: { value: this.m_defaultThickness },\n        outlineColor: { value: this.m_defaultColor },\n        outlineAlpha: { value: this.m_defaultAlpha }\n    };\n\n    constructor(private m_renderer: THREE.WebGLRenderer) {\n        this.autoClear = m_renderer.autoClear;\n        this.domElement = m_renderer.domElement;\n        this.shadowMap = m_renderer.shadowMap;\n    }\n\n    set thickness(thickness: number) {\n        this.m_defaultThickness = thickness;\n        this.m_uniformsChunk.outlineThickness.value = thickness;\n        this.m_cache = {};\n    }\n\n    set color(color: string) {\n        this.m_defaultColor.set(color);\n        this.m_cache = {};\n    }\n\n    set ghostExtrudedPolygons(ghost: boolean) {\n        this.m_ghostExtrudedPolygons = ghost;\n    }\n\n    clear(color: boolean, depth: boolean, stencil: boolean) {\n        this.m_renderer.clear(color, depth, stencil);\n    }\n\n    getPixelRatio() {\n        return this.m_renderer.getPixelRatio();\n    }\n\n    setPixelRatio(value: number) {\n        this.m_renderer.setPixelRatio(value);\n    }\n\n    getSize(target: THREE.Vector2) {\n        return this.m_renderer.getSize(target);\n    }\n\n    setSize(width: number, height: number, updateStyle: boolean) {\n        this.m_renderer.setSize(width, height, updateStyle);\n    }\n\n    setViewport(x: number, y: number, width: number, height: number) {\n        this.m_renderer.setViewport(x, y, width, height);\n    }\n\n    setScissor(x: number, y: number, width: number, height: number) {\n        this.m_renderer.setScissor(x, y, width, height);\n    }\n\n    setScissorTest(boolean: boolean) {\n        this.m_renderer.setScissorTest(boolean);\n    }\n\n    setRenderTarget(renderTarget: THREE.WebGLRenderTarget) {\n        this.m_renderer.setRenderTarget(renderTarget);\n    }\n\n    render(scene: THREE.Scene, camera: THREE.Camera) {\n        // Re-rendering the scene with the outline effect enables to hide the\n        // extruded polygons and show only the outlines (it is a hack and should be\n        // implemented another way!).\n        if (this.m_ghostExtrudedPolygons) {\n            if (!this.enabled) {\n                this.m_renderer.render(scene, camera);\n                return;\n            }\n\n            const currentAutoClear = this.m_renderer.autoClear;\n            this.m_renderer.autoClear = this.autoClear;\n\n            this.m_renderer.render(scene, camera);\n\n            this.m_renderer.autoClear = currentAutoClear;\n        }\n\n        this.renderOutline(scene, camera);\n    }\n\n    renderOutline(scene: THREE.Scene, camera: THREE.Camera) {\n        const currentAutoClear = this.m_renderer.autoClear;\n        const currentSceneAutoUpdate = scene.autoUpdate;\n        const currentSceneBackground = scene.background;\n        const currentShadowMapEnabled = this.m_renderer.shadowMap.enabled;\n\n        scene.autoUpdate = false;\n        scene.background = null;\n        this.m_renderer.autoClear = false;\n        this.m_renderer.shadowMap.enabled = false;\n\n        scene.traverse(this.setOutlineMaterial.bind(this));\n\n        this.m_renderer.render(scene, camera);\n\n        scene.traverse(this.restoreOriginalMaterial.bind(this));\n\n        this.cleanupCache();\n\n        scene.autoUpdate = currentSceneAutoUpdate;\n        scene.background = currentSceneBackground;\n        this.m_renderer.autoClear = currentAutoClear;\n        this.m_renderer.shadowMap.enabled = currentShadowMapEnabled;\n    }\n\n    private createInvisibleMaterial() {\n        return new THREE.ShaderMaterial({ name: \"invisible\", visible: false });\n    }\n\n    private createMaterial(originalMaterial: THREE.Material) {\n        const shaderID = this.m_shaderIDs[originalMaterial.type];\n        let originalUniforms;\n        let originalVertexShader;\n\n        if (shaderID !== undefined) {\n            const shader = THREE.ShaderLib[shaderID];\n            originalUniforms = shader.uniforms;\n            originalVertexShader = shader.vertexShader;\n        } else if ((originalMaterial as any).isRawShaderMaterial === true) {\n            originalUniforms = (originalMaterial as any).uniforms;\n            originalVertexShader = (originalMaterial as any).vertexShader;\n\n            if (\n                !/attribute\\s+vec3\\s+position\\s*;/.test(originalVertexShader) ||\n                !/attribute\\s+vec3\\s+normal\\s*;/.test(originalVertexShader)\n            ) {\n                return this.createInvisibleMaterial();\n            }\n        } else if ((originalMaterial as any).isShaderMaterial === true) {\n            originalUniforms = (originalMaterial as any).uniforms;\n            originalVertexShader = (originalMaterial as any).vertexShader;\n        } else {\n            return this.createInvisibleMaterial();\n        }\n\n        const uniforms = { ...originalUniforms, ...this.m_uniformsChunk };\n\n        const vertexShader = originalVertexShader\n            // put vertexShaderChunk right before \"void main() {...}\"\n            .replace(/void\\s+main\\s*\\(\\s*\\)/, vertexShaderChunk + \"\\nvoid main()\")\n            // put vertexShaderChunk2 the end of \"void main() {...}\"\n            // Note: here assums originalVertexShader ends with \"}\" of \"void main() {...}\"\n            .replace(/\\}\\s*$/, vertexShaderChunk2 + \"\\n}\")\n            // remove any light related lines\n            // Note: here is very sensitive to originalVertexShader\n            // TODO: consider safer way\n            .replace(/#include\\s+<[\\w_]*light[\\w_]*>/g, \"\");\n\n        const defines = {};\n\n        if (\n            !/vec3\\s+transformed\\s*=/.test(originalVertexShader) &&\n            !/#include\\s+<begin_vertex>/.test(originalVertexShader)\n        ) {\n            (defines as any).DECLARE_TRANSFORMED = true;\n        }\n\n        return new THREE.ShaderMaterial({\n            defines,\n            uniforms,\n            vertexShader,\n            fragmentShader,\n            side: THREE.BackSide,\n            //wireframe: true,\n            skinning: false,\n            morphTargets: false,\n            morphNormals: false,\n            fog: false\n        });\n    }\n\n    private getOutlineMaterialFromCache(originalMaterial: THREE.Material) {\n        let data = this.m_cache[originalMaterial.uuid];\n\n        if (data === undefined) {\n            data = {\n                material: this.createMaterial(originalMaterial),\n                used: true,\n                keepAlive: this.m_defaultKeepAlive,\n                count: 0\n            };\n\n            this.m_cache[originalMaterial.uuid] = data;\n        }\n\n        data.used = true;\n\n        return data.material;\n    }\n\n    private getOutlineMaterial(originalMaterial: THREE.Material) {\n        const outlineMaterial = this.getOutlineMaterialFromCache(originalMaterial);\n\n        this.m_originalMaterials[outlineMaterial.uuid] = originalMaterial;\n\n        this.updateOutlineMaterial(outlineMaterial, originalMaterial);\n\n        return outlineMaterial;\n    }\n\n    private setOutlineMaterial(object: THREE.Object3D) {\n        if ((object as THREE.Mesh).material === undefined) {\n            return;\n        }\n\n        if (Array.isArray((object as THREE.Mesh).material)) {\n            for (\n                let i = 0, il = ((object as THREE.Mesh).material as THREE.Material[]).length;\n                i < il;\n                i++\n            ) {\n                ((object as THREE.Mesh).material as THREE.Material[])[i] = this.getOutlineMaterial(\n                    ((object as THREE.Mesh).material as THREE.Material[])[i]\n                );\n            }\n        } else {\n            (object as THREE.Mesh).material = this.getOutlineMaterial(\n                (object as THREE.Mesh).material as THREE.Material\n            );\n        }\n\n        this.m_originalOnBeforeRenders[object.uuid] = object.onBeforeRender;\n        object.onBeforeRender = chainCallbacks(\n            object.onBeforeRender,\n            this.onBeforeRender.bind(this)\n        );\n    }\n\n    private restoreOriginalMaterial(object: THREE.Object3D) {\n        if ((object as THREE.Mesh).material === undefined) {\n            return;\n        }\n\n        if (Array.isArray((object as THREE.Mesh).material)) {\n            for (\n                let i = 0, il = ((object as THREE.Mesh).material as THREE.Material[]).length;\n                i < il;\n                i++\n            ) {\n                ((object as THREE.Mesh).material as THREE.Material[])[i] = this.m_originalMaterials[\n                    ((object as THREE.Mesh).material as THREE.Material[])[i].uuid\n                ];\n            }\n        } else {\n            (object as THREE.Mesh).material = this.m_originalMaterials[\n                ((object as THREE.Mesh).material as THREE.Material).uuid\n            ];\n        }\n\n        object.onBeforeRender = this.m_originalOnBeforeRenders[object.uuid];\n    }\n\n    private onBeforeRender(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        geometry: THREE.Geometry | THREE.BufferGeometry,\n        material: THREE.Material,\n        group: THREE.Group\n    ) {\n        const originalMaterial = this.m_originalMaterials[material.uuid];\n\n        // just in case\n        if (originalMaterial === undefined) {\n            return;\n        }\n\n        this.updateUniforms(material, originalMaterial);\n    }\n\n    private updateUniforms(material: THREE.Material, originalMaterial: THREE.Material) {\n        const outlineParameters = originalMaterial.userData.outlineParameters;\n\n        (material as any).uniforms.outlineAlpha.value = originalMaterial.opacity;\n\n        if (outlineParameters !== undefined) {\n            if (outlineParameters.thickness !== undefined) {\n                (material as any).uniforms.outlineThickness.value = outlineParameters.thickness;\n            }\n            if (outlineParameters.color !== undefined) {\n                (material as any).uniforms.outlineColor.value.fromArray(outlineParameters.color);\n            }\n            if (outlineParameters.alpha !== undefined) {\n                (material as any).uniforms.outlineAlpha.value = outlineParameters.alpha;\n            }\n        }\n    }\n\n    private updateOutlineMaterial(material: THREE.Material, originalMaterial: THREE.Material) {\n        if (material.name === \"invisible\") {\n            return;\n        }\n\n        const outlineParameters = originalMaterial.userData.outlineParameters;\n\n        (material as any).skinning = (originalMaterial as any).skinning;\n        (material as any).morphTargets = (originalMaterial as any).morphTargets;\n        (material as any).morphNormals = (originalMaterial as any).morphNormals;\n        material.fog = originalMaterial.fog;\n\n        if (outlineParameters !== undefined) {\n            material.visible =\n                originalMaterial.visible === false\n                    ? false\n                    : outlineParameters.visible !== undefined\n                    ? outlineParameters.visible\n                    : true;\n\n            material.transparent =\n                outlineParameters.alpha !== undefined && outlineParameters.alpha < 1.0\n                    ? true\n                    : originalMaterial.transparent;\n\n            if (outlineParameters.keepAlive !== undefined) {\n                this.m_cache[originalMaterial.uuid].keepAlive = outlineParameters.keepAlive;\n            }\n        } else {\n            material.transparent = originalMaterial.transparent;\n            material.visible = originalMaterial.visible;\n        }\n\n        if ((originalMaterial as any).wireframe === true || originalMaterial.depthTest === false) {\n            material.visible = false;\n        }\n    }\n\n    private cleanupCache() {\n        let keys;\n\n        // clear originialMaterials\n        keys = Object.keys(this.m_originalMaterials);\n\n        for (let i = 0, il = keys.length; i < il; i++) {\n            this.m_originalMaterials[keys[i]] = undefined;\n        }\n\n        // clear originalOnBeforeRenders\n        keys = Object.keys(this.m_originalOnBeforeRenders);\n\n        for (let i = 0, il = keys.length; i < il; i++) {\n            this.m_originalOnBeforeRenders[keys[i]] = undefined;\n        }\n\n        // remove unused outlineMaterial from cache\n        keys = Object.keys(this.m_cache);\n\n        for (const key of keys) {\n            if (this.m_cache[key].used === false) {\n                this.m_cache[key].count++;\n\n                if (\n                    this.m_cache[key].keepAlive === false &&\n                    this.m_cache[key].count > this.m_removeThresholdCount\n                ) {\n                    delete this.m_cache[key];\n                }\n            } else {\n                this.m_cache[key].used = false;\n                this.m_cache[key].count = 0;\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CopyShader, LuminosityHighPassShader } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\nimport { Pass } from \"./Pass\";\n\nconst BlurDirectionX = new THREE.Vector2(1.0, 0.0);\nconst BlurDirectionY = new THREE.Vector2(0.0, 1.0);\n\n/**\n * The TS version of ThreeJS's UnrealBloomPass.\n */\nexport class BloomPass extends Pass {\n    strength: number;\n    radius: number;\n    threshold: number;\n    resolution: THREE.Vector2 = new THREE.Vector2(256, 256);\n    private m_renderTargetsHorizontal: THREE.WebGLRenderTarget[] = [];\n    private m_renderTargetsVertical: THREE.WebGLRenderTarget[] = [];\n    private m_nMips: number = 5;\n    private m_highPassUniforms: any;\n    private m_materialHighPassFilter: THREE.ShaderMaterial;\n    private m_separableBlurMaterials: THREE.ShaderMaterial[] = [];\n    private m_materialCopy: THREE.ShaderMaterial;\n    private m_copyUniforms: any;\n    private m_compositeMaterial: THREE.ShaderMaterial;\n\n    private m_camera: THREE.OrthographicCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    private m_scene: THREE.Scene = new THREE.Scene();\n    private m_basic = new THREE.MeshBasicMaterial();\n    private m_quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2));\n\n    private m_bloomTintColors: THREE.Vector3[] = [\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1)\n    ];\n\n    private m_renderTargetBright: THREE.WebGLRenderTarget;\n\n    constructor(resolution: THREE.Vector2, strength: number, radius: number, threshold: number) {\n        super();\n\n        this.strength = strength;\n        this.radius = radius;\n        this.threshold = threshold;\n        this.resolution = resolution;\n\n        this.m_quad.frustumCulled = false;\n        this.m_scene.add(this.m_quad);\n\n        const pars = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBAFormat\n        };\n\n        let resx = Math.round(this.resolution.x / 2);\n        let resy = Math.round(this.resolution.y / 2);\n\n        this.m_renderTargetBright = new THREE.WebGLRenderTarget(resx, resy, pars);\n        this.m_renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n        this.m_renderTargetBright.texture.generateMipmaps = false;\n\n        for (let i = 0; i < this.m_nMips; i++) {\n            const renderTargetHorizonal = new THREE.WebGLRenderTarget(resx, resy, pars);\n            renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n            renderTargetHorizonal.texture.generateMipmaps = false;\n            this.m_renderTargetsHorizontal.push(renderTargetHorizonal);\n\n            const renderTargetVertical = new THREE.WebGLRenderTarget(resx, resy, pars);\n            renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n            renderTargetVertical.texture.generateMipmaps = false;\n            this.m_renderTargetsVertical.push(renderTargetVertical);\n\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n\n        this.m_highPassUniforms = THREE.UniformsUtils.clone(LuminosityHighPassShader.uniforms);\n\n        // tslint:disable:no-string-literal\n        this.m_highPassUniforms[\"luminosityThreshold\"].value = threshold;\n        this.m_highPassUniforms[\"smoothWidth\"].value = 0.01;\n\n        this.m_materialHighPassFilter = new THREE.ShaderMaterial({\n            uniforms: this.m_highPassUniforms,\n            vertexShader: LuminosityHighPassShader.vertexShader,\n            fragmentShader: LuminosityHighPassShader.fragmentShader,\n            defines: {}\n        });\n\n        // Gaussian Blur Materials\n        const kernelSizeArray = [3, 5, 7, 9, 11];\n        resx = Math.round(this.resolution.x / 2);\n        resy = Math.round(this.resolution.y / 2);\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n            this.m_separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(\n                resx,\n                resy\n            );\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n\n        // Composite material\n        this.m_compositeMaterial = this.getCompositeMaterial(this.m_nMips);\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture1\"\n        ].value = this.m_renderTargetsVertical[0].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture2\"\n        ].value = this.m_renderTargetsVertical[1].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture3\"\n        ].value = this.m_renderTargetsVertical[2].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture4\"\n        ].value = this.m_renderTargetsVertical[3].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture5\"\n        ].value = this.m_renderTargetsVertical[4].texture;\n        this.m_compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n        this.m_compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n        this.m_compositeMaterial.needsUpdate = true;\n\n        const bloomFactors = [1.0, 0.8, 0.6, 0.4, 0.2];\n        this.m_compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n        this.m_compositeMaterial.uniforms[\"bloomTintColors\"].value = this.m_bloomTintColors;\n\n        this.m_copyUniforms = THREE.UniformsUtils.clone(CopyShader.uniforms);\n        this.m_copyUniforms[\"opacity\"].value = 1.0;\n        // tslint:enable:no-string-literal\n\n        this.m_materialCopy = new THREE.ShaderMaterial({\n            uniforms: this.m_copyUniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            blending: THREE.AdditiveBlending,\n            depthTest: false,\n            depthWrite: false,\n            transparent: true\n        });\n    }\n    dispose() {\n        for (const rt of this.m_renderTargetsHorizontal) {\n            rt.dispose();\n        }\n        for (const rt of this.m_renderTargetsVertical) {\n            rt.dispose();\n        }\n        this.m_renderTargetBright.dispose();\n    }\n    /** @override */\n    setSize(width: number, height: number) {\n        let resx = Math.round(width / 2);\n        let resy = Math.round(height / 2);\n        this.m_renderTargetBright.setSize(resx, resy);\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_renderTargetsHorizontal[i].setSize(resx, resy);\n            this.m_renderTargetsVertical[i].setSize(resx, resy);\n            // tslint:disable-next-line:no-string-literal\n            this.m_separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(\n                resx,\n                resy\n            );\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n    }\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        // tslint:disable:no-string-literal\n\n        // Render input to screen\n        if (this.renderToScreen) {\n            this.m_quad.material = this.m_basic;\n            this.m_basic.map = readBuffer.texture;\n            renderer.setRenderTarget(null!);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n        }\n\n        // 1. Extract bright areas\n        this.m_highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n        this.m_highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n        this.m_quad.material = this.m_materialHighPassFilter;\n\n        renderer.setRenderTarget(this.m_renderTargetBright);\n        renderer.clear();\n        renderer.render(this.m_scene, this.m_camera);\n\n        // 2. Blur all the mips progressively\n        let inputRenderTarget = this.m_renderTargetBright;\n\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_quad.material = this.m_separableBlurMaterials[i];\n\n            this.m_separableBlurMaterials[i].uniforms[\"colorTexture\"].value =\n                inputRenderTarget.texture;\n            this.m_separableBlurMaterials[i].uniforms[\"direction\"].value = BlurDirectionX;\n            renderer.setRenderTarget(this.m_renderTargetsHorizontal[i]);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n\n            this.m_separableBlurMaterials[i].uniforms[\n                \"colorTexture\"\n            ].value = this.m_renderTargetsHorizontal[i].texture;\n            this.m_separableBlurMaterials[i].uniforms[\"direction\"].value = BlurDirectionY;\n            renderer.setRenderTarget(this.m_renderTargetsVertical[i]);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n\n            inputRenderTarget = this.m_renderTargetsVertical[i];\n        }\n\n        // Composite all the mips\n        this.m_quad.material = this.m_compositeMaterial;\n        this.m_compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n        this.m_compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n        this.m_compositeMaterial.uniforms[\"bloomTintColors\"].value = this.m_bloomTintColors;\n\n        renderer.setRenderTarget(this.m_renderTargetsHorizontal[0]);\n        renderer.clear();\n        renderer.render(this.m_scene, this.m_camera);\n\n        // Blend it additively over the input texture\n        this.m_quad.material = this.m_materialCopy;\n        this.m_copyUniforms[\"tDiffuse\"].value = this.m_renderTargetsHorizontal[0].texture;\n\n        if (this.renderToScreen) {\n            renderer.setRenderTarget(null!);\n            renderer.render(this.m_scene, this.m_camera);\n        } else {\n            renderer.setRenderTarget(readBuffer);\n            renderer.render(this.m_scene, this.m_camera);\n        }\n        // tslint:enable:no-string-literal\n    }\n\n    getSeperableBlurMaterial(kernelRadius: number): THREE.ShaderMaterial {\n        return new THREE.ShaderMaterial({\n            defines: {\n                KERNEL_RADIUS: kernelRadius,\n                SIGMA: kernelRadius\n            },\n\n            uniforms: {\n                colorTexture: { value: null },\n                texSize: { value: new THREE.Vector2(0.5, 0.5) },\n                direction: { value: new THREE.Vector2(0.5, 0.5) }\n            },\n\n            vertexShader: `varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            }`,\n\n            fragmentShader: `#include <common>\n            varying vec2 vUv;\n            uniform sampler2D colorTexture;\n            uniform vec2 texSize;\n            uniform vec2 direction;\n\n            float gaussianPdf(in float x, in float sigma) {\n                return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n            }\n            void main() {\\n\\\n                vec2 invSize = 1.0 / texSize;\n                float fSigma = float(SIGMA);\n                float weightSum = gaussianPdf(0.0, fSigma);\n                vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n                for( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n                    float x = float(i);\n                    float w = gaussianPdf(x, fSigma);\n                    vec2 uvOffset = direction * invSize * x;\n                    vec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n                    vec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n                    diffuseSum += (sample1 + sample2) * w;\n                    weightSum += 2.0 * w;\n                }\n                gl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n            }`\n        });\n    }\n\n    getCompositeMaterial(nMips: number): THREE.ShaderMaterial {\n        return new THREE.ShaderMaterial({\n            defines: {\n                NUM_MIPS: nMips\n            },\n\n            uniforms: {\n                blurTexture1: { value: null },\n                blurTexture2: { value: null },\n                blurTexture3: { value: null },\n                blurTexture4: { value: null },\n                blurTexture5: { value: null },\n                dirtTexture: { value: null },\n                bloomStrength: { value: 1.0 },\n                bloomFactors: { value: null },\n                bloomTintColors: { value: null },\n                bloomRadius: { value: 0.0 }\n            },\n\n            vertexShader: `varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n                }`,\n\n            fragmentShader: `varying vec2 vUv;\n                uniform sampler2D blurTexture1;\n                uniform sampler2D blurTexture2;\n                uniform sampler2D blurTexture3;\n                uniform sampler2D blurTexture4;\n                uniform sampler2D blurTexture5;\n                uniform sampler2D dirtTexture;\n                uniform float bloomStrength;\n                uniform float bloomRadius;\n                uniform float bloomFactors[NUM_MIPS];\n                uniform vec3 bloomTintColors[NUM_MIPS];\n\n                float lerpBloomFactor(const in float factor) {\n                    float mirrorFactor = 1.2 - factor;\n                    return mix(factor, mirrorFactor, bloomRadius);\n                }\n\n                void main() {\n                    gl_FragColor = bloomStrength * (\nlerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\nlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\nlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\nlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\nlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n                }`\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Message sent by web worker that requests to resolve actual\n * URLs of it's dependencies.\n *\n * Main thread is expected.\n */\nexport interface WorkerBootstrapRequest {\n    type: \"worker-bootstrap-request\";\n\n    /// Names of dependencies, usually NPM package names.\n    dependencies: string[];\n}\n\nexport interface WorkerBootstrapResponse {\n    type: \"worker-bootstrap-response\";\n\n    /// Actual URL scripts requested in [[WorkerBootstrapRequest]].\n    resolvedDependencies: string[];\n}\n\nexport function isWorkerBootstrapRequest(message: any): message is WorkerBootstrapRequest {\n    return (\n        message &&\n        message.type === \"worker-bootstrap-request\" &&\n        Array.isArray(message.dependencies)\n    );\n}\n\nexport function isWorkerBootstrapResponse(message: any): message is WorkerBootstrapResponse {\n    return (\n        message &&\n        message.type === \"worker-bootstrap-response\" &&\n        Array.isArray(message.resolvedDependencies)\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    OrientedBox3,\n    Projection,\n    ProjectionType,\n    TileKey,\n    TilingScheme\n} from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { DataSource } from \"./DataSource\";\nimport { CalculationStatus, ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { MapTileCuller } from \"./MapTileCuller\";\nimport { MapView } from \"./MapView\";\nimport { MapViewUtils, TileOffsetUtils } from \"./Utils\";\n\nconst tmpVectors3 = [new THREE.Vector3(), new THREE.Vector3()];\nconst tmpVector4 = new THREE.Vector4();\n\n/**\n * Represents a unique TileKey and the area it takes up on screen.\n *\n * Note, in certain tiling projections, it is possible to have an offset, which represents a tile\n * which has fully wrapped around, hence this defaults to 0 to simplify usage for projections which\n * don't require it.\n */\nexport class TileKeyEntry {\n    constructor(\n        public tileKey: TileKey,\n        public area: number,\n        public offset: number = 0,\n        public minElevation: number = 0,\n        public maxElevation: number = 0,\n        public distance: number = 0\n    ) {}\n}\n\nfunction getGeoBox(tilingScheme: TilingScheme, childTileKey: TileKey, offset: number) {\n    const geoBox = tilingScheme.getGeoBox(childTileKey);\n    const longitudeOffset = 360.0 * offset;\n    geoBox.northEast.longitude += longitudeOffset;\n    geoBox.southWest.longitude += longitudeOffset;\n    return geoBox;\n}\n\n/**\n * Map tile keys to TileKeyEntry.\n * Keys are a combination of morton code and tile offset,\n * see [[TileOffsetUtils.getKeyForTileKeyAndOffset]].\n */\ntype TileKeyEntries = Map<number, TileKeyEntry>;\n\n/**\n * Map zoom level to map of visible tile key entries\n */\ntype ZoomLevelTileKeyMap = Map<number, TileKeyEntries>;\n\n/**\n * Result of frustum intersection\n */\ninterface IntersectionResult {\n    /**\n     * Tiles intersected by the frustum per zoom level.\n     */\n    readonly tileKeyEntries: ZoomLevelTileKeyMap;\n\n    /**\n     * True if the intersection was calculated using precise elevation data, false if it's an\n     * approximation.\n     */\n    calculationFinal: boolean;\n}\n\n/**\n * Computes the tiles intersected by the frustum defined by the current camera setup.\n */\nexport class FrustumIntersection {\n    private readonly m_frustum: THREE.Frustum = new THREE.Frustum();\n    // used to project global coordinates into camera local coordinates\n    private readonly m_viewProjectionMatrix = new THREE.Matrix4();\n    private readonly m_mapTileCuller: MapTileCuller;\n    private m_rootTileKeys: TileKeyEntry[] = [];\n    private readonly m_tileKeyEntries: ZoomLevelTileKeyMap = new Map();\n\n    constructor(\n        private readonly m_camera: THREE.PerspectiveCamera,\n        readonly mapView: MapView,\n        private readonly m_extendedFrustumCulling: boolean,\n        private readonly m_tileWrappingEnabled: boolean,\n        private readonly m_enableMixedLod: boolean\n    ) {\n        this.m_mapTileCuller = new MapTileCuller(m_camera);\n    }\n\n    /**\n     * Return camera used for generating frustum.\n     */\n    get camera(): THREE.PerspectiveCamera {\n        return this.m_camera;\n    }\n\n    /**\n     * Return projection used to convert geo coordinates to world coordinates.\n     */\n    get projection(): Projection {\n        return this.mapView.projection;\n    }\n\n    /**\n     * Updates the frustum to match the current camera setup.\n     */\n    updateFrustum(projectionMatrixOverride?: THREE.Matrix4) {\n        this.m_viewProjectionMatrix.multiplyMatrices(\n            projectionMatrixOverride !== undefined\n                ? projectionMatrixOverride\n                : this.m_camera.projectionMatrix,\n            this.m_camera.matrixWorldInverse\n        );\n\n        this.m_frustum.setFromProjectionMatrix(this.m_viewProjectionMatrix);\n\n        if (this.m_extendedFrustumCulling) {\n            this.m_mapTileCuller.setup();\n        }\n        this.computeRequiredInitialRootTileKeys(this.m_camera.position);\n    }\n\n    /**\n     * Computes the tiles intersected by the updated frustum, see [[updateFrustum]].\n     *\n     * @param tilingScheme The tiling scheme used to generate the tiles.\n     * @param elevationRangeSource Source of elevation range data if any.\n     * @param zoomLevels A list of zoom levels to render.\n     * @param dataSources A list of data sources to render.\n     * @returns The computation result, see [[FrustumIntersection.Result]].\n     */\n    compute(\n        tilingScheme: TilingScheme,\n        elevationRangeSource: ElevationRangeSource | undefined,\n        zoomLevels: number[],\n        dataSources: DataSource[]\n    ): IntersectionResult {\n        this.m_tileKeyEntries.clear();\n        let calculationFinal = true;\n\n        // Compute target tile area in clip space size.\n        // A tile should take up roughly 256x256 pixels on screen in accordance to\n        // the zoom level chosen by [MapViewUtils.calculateZoomLevelFromDistance].\n        assert(this.mapView.viewportHeight !== 0);\n        const targetTileArea = Math.pow(256 / this.mapView.viewportHeight, 2);\n        const useElevationRangeSource: boolean =\n            elevationRangeSource !== undefined &&\n            elevationRangeSource.getTilingScheme() === tilingScheme;\n        const obbIntersections =\n            this.mapView.projection.type === ProjectionType.Spherical || useElevationRangeSource;\n        const tileBounds = obbIntersections ? new OrientedBox3() : new THREE.Box3();\n        const uniqueZoomLevels = new Set(zoomLevels);\n\n        // create tile key map per zoom level\n        for (const zoomLevel of uniqueZoomLevels) {\n            this.m_tileKeyEntries.set(zoomLevel, new Map());\n        }\n        for (const item of this.m_rootTileKeys) {\n            const tileKeyEntry = new TileKeyEntry(\n                item.tileKey,\n                Infinity,\n                item.offset,\n                item.minElevation,\n                item.maxElevation\n            );\n            for (const zoomLevel of uniqueZoomLevels) {\n                const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                tileKeyEntries.set(\n                    TileOffsetUtils.getKeyForTileKeyAndOffset(item.tileKey, item.offset),\n                    tileKeyEntry\n                );\n            }\n        }\n\n        const workList = [...this.m_rootTileKeys.values()];\n        while (workList.length > 0) {\n            const tileEntry = workList.pop();\n\n            if (tileEntry === undefined) {\n                break;\n            }\n\n            // Stop subdivision if hightest visible level is reached\n            const tileKey = tileEntry.tileKey;\n            const subdivide = dataSources.some((ds, i) =>\n                ds.shouldSubdivide(zoomLevels[i], tileKey)\n            );\n            if (!subdivide) {\n                continue;\n            }\n\n            // Stop subdivision if area of tile is too small(mixed LOD only)\n            if (this.m_enableMixedLod && tileEntry.area < targetTileArea) {\n                continue;\n            }\n\n            const parentTileKey = TileOffsetUtils.getKeyForTileKeyAndOffset(\n                tileKey,\n                tileEntry.offset\n            );\n\n            // delete parent tile key from applicable zoom levels\n            for (const zoomLevel of uniqueZoomLevels) {\n                if (tileKey.level >= zoomLevel) {\n                    continue;\n                }\n\n                const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                tileKeyEntries.delete(parentTileKey);\n            }\n\n            for (const childTileKey of tilingScheme.getSubTileKeys(tileKey)) {\n                const offset = tileEntry.offset;\n                const tileKeyAndOffset = TileOffsetUtils.getKeyForTileKeyAndOffset(\n                    childTileKey,\n                    offset\n                );\n\n                const geoBox = getGeoBox(tilingScheme, childTileKey, offset);\n\n                // For tiles without elevation range source, default 0 (getGeoBox always\n                // returns box with altitude min/max equal to zero) will be propagated as\n                // min and max elevation, these tiles most probably contains features that\n                // lays directly on the ground surface.\n                if (useElevationRangeSource) {\n                    const range = elevationRangeSource!.getElevationRange(childTileKey);\n                    geoBox.southWest.altitude = range.minElevation;\n                    geoBox.northEast.altitude = range.maxElevation;\n                    calculationFinal =\n                        calculationFinal &&\n                        range.calculationStatus === CalculationStatus.FinalPrecise;\n                }\n\n                this.mapView.projection.projectBox(geoBox, tileBounds);\n                const { area, distance } = this.computeTileAreaAndDistance(tileBounds);\n\n                if (area > 0) {\n                    const subTileEntry = new TileKeyEntry(\n                        childTileKey,\n                        area,\n                        offset,\n                        geoBox.southWest.altitude, // minElevation\n                        geoBox.northEast.altitude, // maxElevation\n                        distance\n                    );\n\n                    // insert sub tile entry into tile entries map per zoom level\n                    for (const zoomLevel of uniqueZoomLevels) {\n                        if (subTileEntry.tileKey.level > zoomLevel) {\n                            continue;\n                        }\n\n                        const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                        tileKeyEntries.set(tileKeyAndOffset, subTileEntry);\n                    }\n\n                    workList.push(subTileEntry);\n                }\n            }\n        }\n        return { tileKeyEntries: this.m_tileKeyEntries, calculationFinal };\n    }\n\n    /**\n     * Estimate screen space area of tile and distance to center of tile\n     * @param tileBounds The bounding volume of a tile\n     * @return Area estimate and distance to tile center in clip space\n     */\n    private computeTileAreaAndDistance(\n        tileBounds: THREE.Box3 | OrientedBox3\n    ): { area: number; distance: number } {\n        if (tileBounds instanceof THREE.Box3) {\n            if (\n                (this.m_extendedFrustumCulling &&\n                    !this.m_mapTileCuller.frustumIntersectsTileBox(tileBounds)) ||\n                !this.m_frustum.intersectsBox(tileBounds)\n            ) {\n                return {\n                    area: 0,\n                    distance: Infinity\n                };\n            }\n        } else if (!tileBounds.intersects(this.m_frustum)) {\n            return {\n                area: 0,\n                distance: Infinity\n            };\n        }\n\n        // Project tile bounds center\n        const center = tileBounds.getCenter(tmpVectors3[0]);\n        const projectedPoint = tmpVector4\n            .set(center.x, center.y, center.z, 1.0)\n            .applyMatrix4(this.m_viewProjectionMatrix);\n\n        // Estimate objects screen space size with diagonal of bounds\n        // Dividing by w projects object size to screen space\n        const size = tileBounds.getSize(tmpVectors3[1]);\n        const objectSize = (0.5 * size.length()) / projectedPoint.w;\n\n        return {\n            area: objectSize * objectSize,\n            distance: projectedPoint.z / projectedPoint.w\n        };\n    }\n\n    /**\n     * Create a list of root nodes to test against the frustum. The root nodes each start at level 0\n     * and have an offset (see [[Tile]]) based on:\n     * - the current position [[worldCenter]].\n     * - the height of the camera above the world.\n     * - the field of view of the camera (the maximum value between the horizontal / vertical\n     *   values)\n     * - the tilt of the camera (because we see more tiles when tilted).\n     *\n     * @param worldCenter The center of the camera in world space.\n     */\n    private computeRequiredInitialRootTileKeys(worldCenter: THREE.Vector3) {\n        this.m_rootTileKeys = [];\n        const rootTileKey = TileKey.fromRowColumnLevel(0, 0, 0);\n        const tileWrappingEnabled = this.mapView.projection.type === ProjectionType.Planar;\n\n        if (!tileWrappingEnabled || !this.m_tileWrappingEnabled) {\n            this.m_rootTileKeys.push(new TileKeyEntry(rootTileKey, Infinity, 0, 0));\n            return;\n        }\n\n        const worldGeoPoint = this.mapView.projection.unprojectPoint(worldCenter);\n        const startOffset = Math.round(worldGeoPoint.longitude / 360.0);\n\n        // This algorithm computes the number of offsets we need to test. The following diagram may\n        // help explain the algorithm below.\n        //\n        //   |🎥\n        //   |.\\ .\n        //   | . \\  .\n        // z |  .  \\   .c2\n        //   |  c1.  \\b    .\n        //   |     .   \\      .\n        //___|a___d1.____\\e______.d2______f\n        //\n        // Where:\n        // - 🎥 is the camera\n        // - z is the height of the camera above the ground.\n        // - a is a right angle.\n        // - b is the look at vector of the camera.\n        // - c1 and c2 are the frustum planes of the camera.\n        // - c1 to c2 is the fov.\n        // - d1 and d2 are the intersection points of the frustum with the world plane.\n        // - e is the tilt/pitch of the camera.\n        // - f is the world\n        //\n        // The goal is to find the distance from e->d2. This is a longitude value, and we convert it\n        // to some offset range. Note e->d2 >= e->d1 (because we can't have a negative tilt).\n        // To find e->d2, we use the right triangle 🎥, a, d2 and subtract the distance a->d2 with\n        // a->e.\n        // a->d2 is found using the angle between a and d2 from the 🎥, this is simply e (because of\n        // similar triangles, angle between a, 🎥 and e equals the tilt) + half of the fov (because\n        // we need the angle between e, 🎥 and d2) and using trigonometry, result is therefore:\n        // (tan(a->d2) * z).\n        // a->e needs just the tilt and trigonometry to compute, result is: (tan(a->e) * z).\n\n        const camera = this.m_camera;\n        const cameraPitch = MapViewUtils.extractAttitude(this.mapView, camera).pitch;\n        // Ensure that the aspect is >= 1.\n        const aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n        // Angle between a->d2, note, the fov is vertical, hence we translate to horizontal.\n        const totalAngleRad = THREE.MathUtils.degToRad((camera.fov * aspect) / 2) + cameraPitch;\n        // Length a->d2\n        const worldLengthHorizontalFull = Math.tan(totalAngleRad) * camera.position.z;\n        // Length a->e\n        const worldLengthHorizontalSmallerHalf = Math.tan(cameraPitch) * camera.position.z;\n        // Length e -> d2\n        const worldLengthHorizontal = worldLengthHorizontalFull - worldLengthHorizontalSmallerHalf;\n        const worldLeftPoint = new THREE.Vector3(\n            worldCenter.x - worldLengthHorizontal,\n            worldCenter.y,\n            worldCenter.z\n        );\n        const worldLeftGeoPoint = this.mapView.projection.unprojectPoint(worldLeftPoint);\n        // We multiply by SQRT2 because we need to account for a rotated view (in which case there\n        // are more tiles that can be seen).\n        const offsetRange = THREE.MathUtils.clamp(\n            Math.ceil(\n                Math.abs((worldGeoPoint.longitude - worldLeftGeoPoint.longitude) / 360) * Math.SQRT2\n            ),\n            0,\n            // We can store currently up to 16 unique keys(2^4, where 4 is the default bit-shift\n            // value which is used currently in the [[VisibleTileSet]] methods) hence we can have a\n            // maximum range of 7 (because 2*7+1 = 15).\n            7\n        );\n        for (\n            let offset = -offsetRange + startOffset;\n            offset <= offsetRange + startOffset;\n            offset++\n        ) {\n            this.m_rootTileKeys.push(new TileKeyEntry(rootTileKey, Infinity, offset, 0, 0));\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Second step tile culling: Do additional check for intersection of box and frustum by checking if\n * the frustum is outside any plane of the tiles `bbox` (oriented, not AABB). It's in the inverse of\n * the standard frustum test, which excludes many cases where the large terrain tiles straddle the\n * planes of the frustum.\n *\n * @see http://www.iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm\n */\nexport class MapTileCuller {\n    private m_globalFrustumMin = new THREE.Vector3();\n    private m_globalFrustumMax = new THREE.Vector3();\n\n    private m_frustumCorners = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n\n    /**\n     * Constructs a `MapTileCuller`.\n     *\n     * @param m_camera A `THREE.Camera`.\n     */\n    constructor(private m_camera: THREE.Camera) {}\n\n    /**\n     * Sets up culling and computes frustum corners. You mus call this function before the culling\n     * starts.\n     */\n    setup() {\n        const frustumCorners = this.getFrustumCorners();\n\n        const matrix = this.m_camera.matrixWorld;\n\n        this.m_globalFrustumMin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this.m_globalFrustumMax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n        for (const frustumCorner of frustumCorners) {\n            frustumCorner.applyMatrix4(matrix);\n\n            this.m_globalFrustumMin.x = Math.min(this.m_globalFrustumMin.x, frustumCorner.x);\n            this.m_globalFrustumMin.y = Math.min(this.m_globalFrustumMin.y, frustumCorner.y);\n            this.m_globalFrustumMin.z = Math.min(this.m_globalFrustumMin.z, frustumCorner.z);\n\n            this.m_globalFrustumMax.x = Math.max(this.m_globalFrustumMax.x, frustumCorner.x);\n            this.m_globalFrustumMax.y = Math.max(this.m_globalFrustumMax.y, frustumCorner.y);\n            this.m_globalFrustumMax.z = Math.max(this.m_globalFrustumMax.z, frustumCorner.z);\n        }\n    }\n\n    /**\n     * Checks if the tile's bounding box intersects with the current view's frustum.\n     *\n     * @param tileBounds The bounding box for the tile.\n     */\n    frustumIntersectsTileBox(tileBounds: THREE.Box3): boolean {\n        const globalFrustumMin = this.m_globalFrustumMin;\n        const globalFrustumMax = this.m_globalFrustumMax;\n\n        if (\n            globalFrustumMax.x < tileBounds.min.x ||\n            globalFrustumMax.y < tileBounds.min.y ||\n            globalFrustumMax.z < tileBounds.min.z ||\n            globalFrustumMin.x > tileBounds.max.x ||\n            globalFrustumMin.y > tileBounds.max.y ||\n            globalFrustumMin.z > tileBounds.max.z\n        ) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns the eight corners of the frustum.\n     */\n    private getFrustumCorners(): THREE.Vector3[] {\n        const frustumCorners = this.m_frustumCorners;\n        const invProjMatrix = (this.m_camera as any).projectionMatrixInverse as THREE.Matrix4;\n\n        let cornerIndex = 0;\n\n        function addPoint(x: number, y: number, z: number) {\n            frustumCorners[cornerIndex++].set(x, y, z).applyMatrix4(invProjMatrix);\n        }\n\n        const w = 1;\n        const h = 1;\n        const n = -1;\n        const f = 1;\n\n        // near\n        addPoint(-w, -h, n);\n        addPoint(w, -h, n);\n        addPoint(-w, h, n);\n        addPoint(w, h, n);\n\n        // far\n        addPoint(-w, -h, f);\n        addPoint(w, -h, f);\n        addPoint(-w, h, f);\n        addPoint(w, h, f);\n\n        return frustumCorners;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryKind, GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { MapView } from \"../MapView\";\nimport { Tile } from \"../Tile\";\nimport { TileGeometryLoader } from \"./TileGeometryLoader\";\n\ntype TileUpdateCallback = (tile: Tile) => void;\n\n/**\n * Manages the content (the geometries) of a tile.\n */\nexport class TileGeometryManager {\n    /**\n     * The set of geometry kinds that is enabled. Their geometry will be created after decoding.\n     */\n    get enabledGeometryKinds(): GeometryKindSet {\n        return this.enabledKinds;\n    }\n\n    set enabledGeometryKinds(kinds: GeometryKindSet) {\n        this.enabledKinds = kinds;\n    }\n\n    /**\n     * The set of geometry kinds that is disabled. Their geometry will not be created after\n     * decoding.\n     */\n    get disabledGeometryKinds(): GeometryKindSet {\n        return this.disabledKinds;\n    }\n\n    set disabledGeometryKinds(kinds: GeometryKindSet) {\n        this.disabledKinds = kinds;\n    }\n\n    /**\n     * The set of geometry kinds that is hidden. Their geometry may be created, but it is hidden\n     * until the method `hideKind` with an argument of `addOrRemoveToHiddenSet:false` is called.\n     */\n    get hiddenGeometryKinds(): GeometryKindSet {\n        return this.hiddenKinds;\n    }\n\n    set hiddenGeometryKinds(kinds: GeometryKindSet) {\n        this.hiddenKinds = kinds;\n        this.incrementVisibilityCounter();\n    }\n\n    /**\n     * If set to `true`, the filters of enabled/disabledGeometryKinds are applied, otherwise they\n     * are ignored.\n     */\n    enableFilterByKind: boolean = true;\n\n    protected get visibilityCounter(): number {\n        return this.m_visibilityCounter;\n    }\n\n    protected enabledKinds: GeometryKindSet = new GeometryKindSet();\n    protected disabledKinds: GeometryKindSet = new GeometryKindSet();\n    protected hiddenKinds: GeometryKindSet = new GeometryKindSet();\n\n    protected m_tileUpdateCallback: TileUpdateCallback | undefined;\n\n    /**\n     * Optimization for evaluation in `update()` method. Only if a kind is hidden/unhidden, the\n     * visibility of the kinds is applied to their geometries.\n     */\n    private m_visibilityCounter: number = 1;\n\n    /**\n     * Creates an instance of `TileGeometryManager` with a reference to the [[MapView]].\n     */\n    constructor(protected mapView: MapView) {}\n\n    /**\n     * Initialize the [[Tile]] with the TileGeometryManager.\n     */\n    initTile(tile: Tile): void {\n        if (tile.dataSource.useGeometryLoader) {\n            tile.tileGeometryLoader = new TileGeometryLoader(tile);\n        }\n    }\n\n    /**\n     * Process the [[Tile]]s for rendering. May alter the content of the tile per frame.\n     */\n    updateTiles(tiles: Tile[]): void {\n        for (const tile of tiles) {\n            const geometryLoader = tile.tileGeometryLoader;\n            if (geometryLoader !== undefined) {\n                geometryLoader.update(\n                    this.enableFilterByKind ? this.enabledGeometryKinds : undefined,\n                    this.enableFilterByKind ? this.disabledGeometryKinds : undefined\n                );\n                if (this.m_tileUpdateCallback) {\n                    this.m_tileUpdateCallback(tile);\n                }\n            }\n        }\n\n        // If the visibility status of the kinds changed since the last update, the new visibility\n        // status is applied (again).\n        if (this.updateTileObjectVisibility(tiles)) {\n            this.mapView.update();\n        }\n    }\n\n    /**\n     * Clear the enabled, disabled and hidden sets.\n     */\n    clear(): void {\n        this.enabledKinds.clear();\n        this.disabledKinds.clear();\n        this.hiddenKinds.clear();\n    }\n\n    /**\n     * Enable a [[GeometryKind]] by adding it to the enabled set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the enabled set.\n     * @param {boolean} addOrRemoveToEnabledSet Pass in `true` to add the kind to the set, pass in\n     *      `false` to remove from that set.\n     */\n    enableKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToEnabledSet: boolean = true\n    ): void {\n        this.enableDisableKinds(this.enabledKinds, kind, addOrRemoveToEnabledSet);\n    }\n\n    /**\n     * Disable a [[GeometryKind]] by adding it to the disabled set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the disabled set.\n     * @param {boolean} addOrRemoveToHiddenSet Pass in `true` to add the kind to the set, pass in\n     *      `false` to remove from that set.\n     */\n    disableKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToDisabledSet: boolean = true\n    ): void {\n        this.enableDisableKinds(this.disabledKinds, kind, addOrRemoveToDisabledSet);\n    }\n\n    /**\n     * Hide a [[GeometryKind]] by adding it to the hidden set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the hidden set.\n     * @param {boolean} addOrRemoveToHiddenSet Pass in `true` to hide the kind(s), `false` to show\n     *      it again.\n     */\n    hideKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToHiddenSet: boolean = true\n    ): void {\n        let visibilityHasChanged = false;\n\n        if (Array.isArray(kind) || kind instanceof Set) {\n            for (const oneKind of kind) {\n                const visibilityChange = this.addRemove(\n                    this.hiddenKinds,\n                    oneKind,\n                    addOrRemoveToHiddenSet\n                );\n                visibilityHasChanged = visibilityHasChanged || visibilityChange;\n            }\n        } else {\n            visibilityHasChanged = this.addRemove(this.hiddenKinds, kind, addOrRemoveToHiddenSet);\n        }\n\n        // Will be evaluated in the next update()\n        if (visibilityHasChanged) {\n            this.incrementVisibilityCounter();\n        }\n    }\n\n    /**\n     * Return all [[GeometryKind]]s that are contained in the tiles.\n     *\n     * @param {IterableIterator<Tile>} tiles The\n     * @returns {GeometryKindSet}\n     */\n    getAvailableKinds(tiles: IterableIterator<Tile>): GeometryKindSet {\n        const visibleKinds: GeometryKindSet = new GeometryKindSet();\n        for (const tile of tiles) {\n            const geometryLoader = tile.tileGeometryLoader;\n            if (geometryLoader !== undefined) {\n                const tileKinds = geometryLoader.availableGeometryKinds;\n                if (tileKinds !== undefined) {\n                    for (const kind of tileKinds) {\n                        visibleKinds.add(kind);\n                    }\n                }\n            }\n        }\n        return visibleKinds;\n    }\n\n    /**\n     * Apply the visibility status taken from the `hiddenKinds` to all geometries in the specified\n     * tiles.\n     *\n     * @param {Tile[]} tiles List of [[Tiles]] to process the visibility status of.\n     */\n    updateTileObjectVisibility(tiles: Tile[]): boolean {\n        let needUpdate = false;\n\n        for (const tile of tiles) {\n            if (tile.objects.length === 0 || tile.visibilityCounter === this.visibilityCounter) {\n                continue;\n            }\n            tile.visibilityCounter = this.visibilityCounter;\n\n            for (const object of tile.objects) {\n                const geometryKind: GeometryKind[] | undefined =\n                    object.userData !== undefined ? object.userData.kind : undefined;\n                if (geometryKind !== undefined) {\n                    const nowVisible = !geometryKind.some(kind => this.hiddenKinds.has(kind));\n                    needUpdate = needUpdate || object.visible !== nowVisible;\n                    object.visible = nowVisible;\n                }\n            }\n        }\n        return needUpdate;\n    }\n\n    /**\n     * Sets a callback that will be called for every updated tile on [[updateTiles]].\n     *\n     * @param {TileUpdateCallback} callback The callback that will be called after a tile has been\n     * updated, passing the updated tile as argument. If `undefined`, a previously set callback will\n     * be cleared.\n     */\n    setTileUpdateCallback(callback?: TileUpdateCallback): void {\n        this.m_tileUpdateCallback = callback;\n    }\n\n    protected incrementVisibilityCounter(): number {\n        return ++this.m_visibilityCounter;\n    }\n\n    /**\n     * Add or remove a kind|array of kinds|set of kinds from the specified kind set.\n     *\n     * @hidden\n     * @param {GeometryKindSet} set\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind\n     * @param {boolean} addToSet\n     */\n    private enableDisableKinds(\n        set: GeometryKindSet,\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addToSet: boolean\n    ): void {\n        if (Array.isArray(kind)) {\n            for (const oneKind of kind as GeometryKind[]) {\n                this.addRemove(set, oneKind, addToSet);\n            }\n        } else if (kind instanceof Set) {\n            const kindSet = kind as GeometryKindSet;\n            for (const oneKind of kindSet) {\n                this.addRemove(set, oneKind, addToSet);\n            }\n        } else if (kind !== undefined) {\n            this.addRemove(set, kind, addToSet);\n        }\n    }\n\n    /**\n     * Add or remove a single kind from the specified kind set.\n     *\n     * @hidden\n     * @param {GeometryKindSet} set\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind\n     * @param {boolean} addToSet\n     */\n    private addRemove(kindsSet: GeometryKindSet, kind: GeometryKind, addToSet: boolean): boolean {\n        if (addToSet) {\n            if (!kindsSet.has(kind)) {\n                kindsSet.add(kind);\n                return true;\n            }\n        } else {\n            if (kindsSet.has(kind)) {\n                kindsSet.delete(kind);\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    GeometryKind,\n    GeometryKindSet,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isFillTechnique,\n    isLineMarkerTechnique,\n    isLineTechnique,\n    isPoiTechnique,\n    isSegmentsTechnique,\n    isSolidLineTechnique,\n    isTextTechnique,\n    Technique\n} from \"@here/harp-datasource-protocol\";\nimport { PerformanceTimer } from \"@here/harp-utils\";\n\nimport { PerformanceStatistics } from \"../Statistics\";\nimport { Tile } from \"../Tile\";\nimport { TileGeometryCreator } from \"./TileGeometryCreator\";\n\n/**\n * Loads the geometry for its [[Tile]]. Loads all geometry in a single step.\n */\nexport class TileGeometryLoader {\n    /**\n     * Make sure that all technique have their geometryKind set, either from the theme or their\n     * default value.\n     *\n     * Also gather set of the [[GeometryKind]]s found in the techniques and return it.\n     *\n     * @param {DecodedTile} decodedTile\n     * @returns {GeometryKindSet} The set of kinds used in the decodeTile.\n     */\n    static prepareAvailableGeometryKinds(decodedTile: DecodedTile): GeometryKindSet {\n        const foundSet: GeometryKindSet = new GeometryKindSet();\n\n        for (const technique of decodedTile.techniques) {\n            const geometryKind = TileGeometryLoader.compileGeometryKind(technique);\n\n            if (geometryKind instanceof Set) {\n                for (const kind of geometryKind) {\n                    foundSet.add(kind);\n                }\n            } else {\n                foundSet.add(geometryKind);\n            }\n        }\n        return foundSet;\n    }\n\n    /**\n     * Make sure that the technique has its geometryKind set, either from the theme or their default\n     * value.\n     *\n     * @param {Technique} technique\n     */\n    static compileGeometryKind(technique: Technique): GeometryKind | GeometryKindSet {\n        // tslint:disable-next-line: deprecation\n        let geometryKind = technique.kind;\n\n        // Set default kind based on technique.\n        if (geometryKind === undefined) {\n            if (isFillTechnique(technique)) {\n                geometryKind = GeometryKind.Area;\n            } else if (\n                isLineTechnique(technique) ||\n                isSolidLineTechnique(technique) ||\n                isSegmentsTechnique(technique) ||\n                isExtrudedLineTechnique(technique)\n            ) {\n                geometryKind = GeometryKind.Line;\n            } else if (isExtrudedPolygonTechnique(technique)) {\n                geometryKind = GeometryKind.Building;\n            } else if (\n                isPoiTechnique(technique) ||\n                isLineMarkerTechnique(technique) ||\n                isTextTechnique(technique)\n            ) {\n                geometryKind = GeometryKind.Label;\n            } else {\n                geometryKind = GeometryKind.All;\n            }\n\n            // tslint:disable-next-line: deprecation\n            technique.kind = geometryKind;\n        } else if (Array.isArray(geometryKind)) {\n            // tslint:disable-next-line: deprecation\n            geometryKind = technique.kind = new GeometryKindSet(geometryKind);\n        }\n\n        return geometryKind;\n    }\n\n    private m_decodedTile?: DecodedTile;\n    private m_isFinished: boolean = false;\n    private m_availableGeometryKinds: GeometryKindSet | undefined;\n    private m_enabledKinds: GeometryKindSet | undefined;\n    private m_disabledKinds: GeometryKindSet | undefined;\n    private m_timeout: any;\n\n    constructor(private m_tile: Tile) {}\n\n    /**\n     * The [[Tile]] this `TileGeometryLoader` is managing.\n     */\n    get tile(): Tile {\n        return this.m_tile;\n    }\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded and the loading process is finished.\n     */\n    get isFinished(): boolean {\n        return this.m_isFinished;\n    }\n\n    /**\n     * `True` if geometry of a `Tile` has been loaded but is not fully processed.\n     */\n    get geometryCreationPending(): boolean {\n        // Geometry loading not yet finished and timeout already set, but not yet processing\n        // (m_timeout !== undefined), or timeout callback already in progress\n        // (m_timeout === undefined), but decoded tile still not reset.\n        return !this.isFinished && this.m_decodedTile !== undefined;\n    }\n\n    /**\n     * `True` if the basic geometry has been loaded, and the `Tile` is ready  for display.\n     */\n    get basicGeometryLoaded(): boolean {\n        return this.m_tile.hasGeometry;\n    }\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded.\n     */\n    get allGeometryLoaded(): boolean {\n        return this.m_isFinished;\n    }\n\n    /**\n     * Set the [[DecodedTile]] of the tile. Is called after the decoded tile has been loaded, and\n     * prepares its content for later processing in the 'updateXXX' methods.\n     *\n     * @param {DecodedTile} decodedTile The decoded tile with the flat geometry data belonging to\n     *      this tile.\n     * @returns {DecodedTile} The processed decoded tile.\n     */\n    setDecodedTile(decodedTile: DecodedTile): DecodedTile {\n        this.m_decodedTile = decodedTile;\n\n        if (this.m_decodedTile !== undefined) {\n            this.m_availableGeometryKinds = TileGeometryLoader.prepareAvailableGeometryKinds(\n                this.m_decodedTile\n            );\n        }\n        return this.m_decodedTile;\n    }\n\n    /**\n     * The kinds of geometry stored in this [[Tile]].\n     */\n    get availableGeometryKinds(): GeometryKindSet | undefined {\n        return this.m_availableGeometryKinds;\n    }\n\n    /**\n     * Start with or continue with loading geometry. Called repeatedly until `isFinished` is `true`.\n     */\n    update(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void {\n        const tile = this.tile;\n\n        // Cheap sanity check, do it first so no longer processing is needed.\n        if (this.isFinished) {\n            return;\n        }\n\n        // Check if tile should be already discarded (invisible, disposed).\n        // If the tile is not ready for display, or if it has become invisible while being loaded,\n        // for example by moving the camera, the tile is not finished and its geometry is not\n        // created. This is an optimization for fast camera movements and zooms.\n        if (this.discardNeedlessTile(tile)) {\n            return;\n        }\n\n        // Geometry kinds have changed when loading, if so reset entire loading because\n        // this geometry loader generates all geometry at once.\n        if (\n            this.geometryCreationPending &&\n            !this.compareGeometryKinds(enabledKinds, disabledKinds)\n        ) {\n            this.reset();\n        }\n\n        // First time this tile is handled, or reset has been requested.\n        // Note: Finished condition already checked above.\n        if (!this.geometryCreationPending && tile.decodedTile !== undefined) {\n            TileGeometryCreator.instance.processTechniques(tile, enabledKinds, disabledKinds);\n            this.setGeometryKinds(enabledKinds, disabledKinds);\n            this.setDecodedTile(tile.decodedTile);\n            this.prepareForRender(enabledKinds, disabledKinds);\n        }\n    }\n\n    /**\n     * Dispose of any resources.\n     */\n    dispose(): void {\n        this.m_decodedTile = undefined;\n        // TODO: Release other resource: availableGeometryKind, enabled/disabled sets, timeout?\n    }\n\n    /**\n     * Reset the loader to its initial state and cancels any asynchronous work.\n     */\n    reset(): void {\n        this.m_availableGeometryKinds?.clear();\n        this.m_enabledKinds?.clear();\n        this.m_disabledKinds?.clear();\n\n        this.m_decodedTile = undefined;\n        this.m_isFinished = false;\n\n        if (this.m_timeout !== undefined) {\n            clearTimeout(this.m_timeout);\n            this.m_timeout = undefined;\n        }\n    }\n\n    private finish() {\n        this.m_tile.loadingFinished();\n        this.m_tile.removeDecodedTile();\n\n        this.m_decodedTile = undefined;\n        this.m_isFinished = true;\n\n        if (this.m_timeout !== undefined) {\n            clearTimeout(this.m_timeout);\n            this.m_timeout = undefined;\n        }\n    }\n\n    /**\n     * Called by [[VisibleTileSet]] to mark that [[Tile]] is visible and it should prepare geometry.\n     */\n    private prepareForRender(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ) {\n        const tile = this.tile;\n        const decodedTile = this.m_decodedTile;\n\n        // Just a sanity check that satisfies compiler check below.\n        if (decodedTile === undefined) {\n            this.finish();\n            return;\n        }\n\n        this.m_timeout = setTimeout(() => {\n            // Reset timeout so it is untouched during processing.\n            this.m_timeout = undefined;\n\n            if (this.discardNeedlessTile(tile)) {\n                return;\n            }\n\n            const stats = PerformanceStatistics.instance;\n            let now = 0;\n            if (stats.enabled) {\n                now = PerformanceTimer.now();\n            }\n\n            const geometryCreator = TileGeometryCreator.instance;\n\n            tile.clear();\n            // Set up techniques which should be processed.\n            geometryCreator.initDecodedTile(decodedTile, enabledKinds, disabledKinds);\n            geometryCreator.createAllGeometries(tile, decodedTile);\n\n            if (stats.enabled) {\n                const geometryCreationTime = PerformanceTimer.now() - now;\n                const currentFrame = stats.currentFrame;\n\n                // Account for the geometry creation in the current frame.\n                currentFrame.addValue(\"render.fullFrameTime\", geometryCreationTime);\n                currentFrame.addValue(\"render.geometryCreationTime\", geometryCreationTime);\n\n                currentFrame.addValue(\"geometry.geometryCreationTime\", geometryCreationTime);\n                currentFrame.addValue(\"geometryCount.numGeometries\", decodedTile.geometries.length);\n                currentFrame.addValue(\"geometryCount.numTechniques\", decodedTile.techniques.length);\n                currentFrame.addValue(\n                    \"geometryCount.numPoiGeometries\",\n                    decodedTile.poiGeometries !== undefined ? decodedTile.poiGeometries.length : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numTextGeometries\",\n                    decodedTile.textGeometries !== undefined ? decodedTile.textGeometries.length : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numTextPathGeometries\",\n                    decodedTile.textPathGeometries !== undefined\n                        ? decodedTile.textPathGeometries.length\n                        : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numPathGeometries\",\n                    decodedTile.pathGeometries !== undefined ? decodedTile.pathGeometries.length : 0\n                );\n                currentFrame.addMessage(\n                    // tslint:disable-next-line: max-line-length\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} col=${tile.tileKey.column} row=${tile.tileKey.row}`\n                );\n            }\n            this.finish();\n            tile.dataSource.requestUpdate();\n        }, 0);\n    }\n\n    private discardNeedlessTile(tile: Tile): boolean {\n        // If the tile has become invisible while being loaded, for example by moving the\n        // camera, the tile is not finished and its geometry is not created. This is an\n        // optimization for fast camera movements and zooms.\n        if (!tile.isVisible) {\n            // Dispose the tile from the visible set, so it can be reloaded properly next time\n            // it is needed.\n            tile.mapView.visibleTileSet.disposeTile(tile);\n\n            const stats = PerformanceStatistics.instance;\n            if (stats.enabled) {\n                stats.currentFrame.addMessage(\n                    // tslint:disable-next-line: max-line-length\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} col=${tile.tileKey.column} row=${tile.tileKey.row} DISCARDED - invisible`\n                );\n            }\n            this.finish();\n            return true;\n        }\n        // Tile already disposed (this may potentially happen in timeout callback).\n        else if (tile.disposed) {\n            const stats = PerformanceStatistics.instance;\n            if (stats.enabled) {\n                stats.currentFrame.addMessage(\n                    // tslint:disable-next-line: max-line-length\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} col=${tile.tileKey.column} row=${tile.tileKey.row} DISCARDED - disposed`\n                );\n            }\n            this.finish();\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Stores geometry kinds used to load decoded tile geometry.\n     *\n     * This values are stored to detect geometry kind changes during loading.\n     *\n     * @param enabledKinds Set of geometry kinds to be displayed or undefined.\n     * @param disabledKinds Set of geometry kinds that won't be rendered.\n     */\n    private setGeometryKinds(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void {\n        if (enabledKinds !== undefined) {\n            this.m_enabledKinds = Object.assign(\n                this.m_enabledKinds ?? new GeometryKindSet(),\n                enabledKinds\n            );\n        }\n        if (disabledKinds !== undefined) {\n            this.m_disabledKinds = Object.assign(\n                this.m_disabledKinds ?? new GeometryKindSet(),\n                disabledKinds\n            );\n        }\n    }\n\n    /**\n     * Compare enabled and disabled geometry kinds with currently set.\n     *\n     * Method compares input sets with recently used geometry kinds in performance wise\n     * manner, taking special care of undefined and zero size sets.\n     *\n     * @param enabledKinds Set of geometry kinds to be displayed or undefined.\n     * @param disabledKinds Set of geometry kinds that won't be rendered.\n     * @return `true` only if sets are logically equal, meaning that undefined and empty sets\n     * may result in same geometry (techniques kind) beeing rendered.\n     */\n    private compareGeometryKinds(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): boolean {\n        const enabledSame = this.m_enabledKinds === enabledKinds;\n        const disabledSame = this.m_disabledKinds === disabledKinds;\n        // Same references, no need to compare.\n        if (enabledSame && disabledSame) {\n            return true;\n        }\n        const enabledEmpty =\n            (this.m_enabledKinds === undefined || this.m_enabledKinds.size === 0) &&\n            (enabledKinds === undefined || enabledKinds.size === 0);\n        const disabledEmpty =\n            (this.m_disabledKinds === undefined || this.m_disabledKinds.size === 0) &&\n            (disabledKinds === undefined || disabledKinds.size === 0);\n\n        // We deal only with empty, the same or undefined sets - fast return, no need to compare.\n        if (\n            (enabledEmpty && disabledEmpty) ||\n            (enabledSame && disabledEmpty) ||\n            (disabledSame && enabledEmpty)\n        ) {\n            return true;\n        }\n        // It is enough that one the the sets are different, try to spot difference otherwise\n        // return true. Compare only non-empty sets.\n        if (!enabledEmpty) {\n            // If one set undefined then other must be non-empty, for sure different.\n            if (enabledKinds === undefined || this.m_enabledKinds === undefined) {\n                return false;\n            }\n            // Both defined and non-empty, compare the sets.\n            else if (!enabledKinds.has(this.m_enabledKinds)) {\n                return false;\n            }\n        }\n        if (!disabledEmpty) {\n            // One set defined and non-empty other undefined, for sure different.\n            if (disabledKinds === undefined || this.m_disabledKinds === undefined) {\n                return false;\n            }\n            // Both defined and non-empty, compare the sets.\n            else if (!disabledKinds.has(this.m_disabledKinds)) {\n                return false;\n            }\n        }\n        // No difference found.\n        return true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Raycasting points is not supported as necessary in Three.js. This class extends a\n * [[THREE.Raycaster]] and adds the width / height of the canvas to allow picking of screen space\n * geometry.\n *\n * @internal\n */\nexport class PickingRaycaster extends THREE.Raycaster {\n    /**\n     * Constructor.\n     *\n     * @param width the canvas width.\n     * @param height the canvas height.\n     */\n    constructor(public width: number, public height: number) {\n        super();\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TextCanvas } from \"@here/harp-text-canvas\";\nimport { MapView } from \"../MapView\";\nimport { PoiRenderer } from \"./PoiRenderer\";\n\nexport class PoiRendererFactory {\n    /**\n     * Creates an instance of poi renderer factory.\n     * @param m_mapView\n     */\n    constructor(private readonly m_mapView: MapView) {}\n\n    /**\n     * Creates poi renderer\n     * @param textCanvas\n     * @returns\n     */\n    createPoiRenderer(textCanvas: TextCanvas): PoiRenderer {\n        return new PoiRenderer(this.m_mapView, textCanvas);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/StyleSetEvaluator\";\nexport * from \"./lib/Extruder\";\nexport * from \"./lib/IMeshBuffers\";\nexport * from \"./lib/Outliner\";\nexport * from \"./lib/Expr\";\nexport * from \"./lib/ThreeBufferUtils\";\nexport * from \"./lib/GeoJsonDataType\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Fills an index buffer with the indices for the extruded walls for a polygon contour.\n *\n * @param indexBuffer Index buffer to be filled.\n * @param vertexOffset Starting offset of the vertices composing the contour.\n * @param vertexStride Number of elements per contour vertex.\n * @param contour Vertices that compose the contour.\n * @param contourEdges Collection of booleans indicating if contour edges should be added.\n * @param boundaryWalls If `false`, walls in tile boundaries will not be created.\n *\n */\nexport function addExtrudedWalls(\n    indexBuffer: number[],\n    vertexOffset: number,\n    vertexStride: number,\n    contour: number[],\n    contourEdges?: boolean[],\n    boundaryWalls?: boolean\n): void {\n    // Infer the index buffer's position of the vertices that form the extruded-polygons' walls\n    // by stepping through the contour segment by segment.\n    const nSegments = contour.length / vertexStride;\n    for (let i = 0; i < nSegments; ++i) {\n        const vFootprint0 = vertexOffset + i * 2;\n        const vRoof0 = vFootprint0 + 1;\n        const vFootprint1 = vertexOffset + ((i + 1) % nSegments) * 2;\n        const vRoof1 = vFootprint1 + 1;\n        if (boundaryWalls !== false || contourEdges === undefined) {\n            indexBuffer.push(vFootprint0, vRoof0, vRoof1, vRoof1, vFootprint1, vFootprint0);\n        } else if (contourEdges[i]) {\n            indexBuffer.push(vFootprint0, vRoof0, vRoof1, vRoof1, vFootprint1, vFootprint0);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst currEdgeStart = new THREE.Vector2();\nconst currEdgeGoal = new THREE.Vector2();\nconst prevEdgeStart = new THREE.Vector2();\nconst prevEdgeGoal = new THREE.Vector2();\n\n/**\n * Fills an index buffer with the indices for the edges of a polygon contour.\n *\n * @param indexBuffer Edge index buffer to be filled.\n * @param vertexOffset Starting offset of the vertices composing the contour.\n * @param vertexStride Number of elements per contour vertex.\n * @param polygonContour Vertices that compose the contour.\n * @param polygonContourEdges Collection of booleans indicating if contour edges should be added.\n */\nexport function addPolygonEdges(\n    indexBuffer: number[],\n    vertexOffset: number,\n    vertexStride: number,\n    polygonContour: number[],\n    polygonContourEdges: boolean[],\n    isExtruded?: boolean,\n    addFootprintEdges?: boolean,\n    wallEdgeSlope?: number\n) {\n    for (let i = 0; i < polygonContourEdges.length; ++i) {\n        if (polygonContourEdges[i]) {\n            if (isExtruded === true) {\n                const vFootprint0 = vertexOffset + i * 2;\n                const vRoof0 = vFootprint0 + 1;\n                const vFootprint1 = vertexOffset + ((i + 1) % polygonContourEdges.length) * 2;\n                const vRoof1 = vFootprint1 + 1;\n\n                if (addFootprintEdges === true) {\n                    indexBuffer.push(vFootprint0, vFootprint1);\n                }\n                indexBuffer.push(vRoof0, vRoof1);\n\n                const prevEdgeIdx = (i === 0 ? polygonContourEdges.length : i) - 1;\n                if (polygonContourEdges[prevEdgeIdx]) {\n                    if (wallEdgeSlope !== undefined) {\n                        const v0x = polygonContour[i * vertexStride];\n                        const v0y = polygonContour[i * vertexStride + 1];\n                        const v1x =\n                            polygonContour[((i + 1) % polygonContourEdges.length) * vertexStride];\n                        const v1y =\n                            polygonContour[\n                                ((i + 1) % polygonContourEdges.length) * vertexStride + 1\n                            ];\n\n                        currEdgeStart.set(v0x, v0y);\n                        currEdgeGoal.set(v1x, v1y);\n                        prevEdgeStart.set(\n                            polygonContour[prevEdgeIdx * vertexStride],\n                            polygonContour[prevEdgeIdx * vertexStride + 1]\n                        );\n                        prevEdgeGoal.set(currEdgeStart.x, currEdgeStart.y);\n\n                        if (\n                            prevEdgeGoal\n                                .sub(prevEdgeStart)\n                                .normalize()\n                                .dot(currEdgeGoal.sub(currEdgeStart).normalize()) <= wallEdgeSlope\n                        ) {\n                            indexBuffer.push(vFootprint0, vRoof0);\n                        }\n                    } else {\n                        indexBuffer.push(vFootprint0, vRoof0);\n                    }\n                }\n            } else {\n                const vFoot0 = vertexOffset + i;\n                const vRoof0 = vertexOffset + ((i + 1) % polygonContourEdges.length);\n                indexBuffer.push(vFoot0, vRoof0);\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BufferAttribute as ThreeBufferAttribute,\n    BufferGeometry as ThreeBufferGeometry,\n    InterleavedBufferAttribute as ThreeInterleavedBufferAttribute,\n    TypedArray\n} from \"three\";\nimport {\n    BufferAttribute,\n    BufferElementType,\n    Geometry,\n    GeometryType,\n    InterleavedBufferAttribute\n} from \"./DecodedTile\";\n\n/**\n * Collection of helper methods to convert\n * {@link https://threejs.org/docs/index.html#api/en/core/BufferGeometry|three.js BufferGeometry}\n * to [[Geometry]] that allows creation and transfering of THREE BufferGeometry in webworkers.\n * See also [[CustomDatasourceExample]].\n */\nexport namespace ThreeBufferUtils {\n    export function getBufferElementType(buffer: TypedArray): BufferElementType {\n        if (buffer instanceof Int8Array) {\n            return \"int8\";\n        } else if (buffer instanceof Uint8Array) {\n            return \"uint8\";\n        } else if (buffer instanceof Int16Array) {\n            return \"int16\";\n        } else if (buffer instanceof Uint16Array) {\n            return \"uint16\";\n        } else if (buffer instanceof Int32Array) {\n            return \"int32\";\n        } else if (buffer instanceof Uint32Array) {\n            return \"uint32\";\n        } else if (buffer instanceof Float32Array) {\n            return \"float\";\n        }\n\n        throw new Error(`Unsupported buffer type ${name}`);\n    }\n\n    export function fromThreeBufferAttribute(\n        bufferAttribute: ThreeBufferAttribute\n    ): BufferAttribute {\n        const buffer = (bufferAttribute.array as any) as TypedArray;\n        return {\n            name: bufferAttribute.name,\n            buffer: buffer.buffer,\n            type: getBufferElementType(buffer),\n            itemCount: bufferAttribute.itemSize,\n            normalized: bufferAttribute.normalized\n        };\n    }\n\n    export function fromThreeInterleavedBufferAttribute(\n        bufferAttribute: ThreeInterleavedBufferAttribute\n    ): InterleavedBufferAttribute {\n        throw new Error(\"Not implemented yet\");\n    }\n\n    export function fromThreeBufferGeometry(\n        bufferGeometry: ThreeBufferGeometry,\n        techniqueIndex: number\n    ): Geometry {\n        const vertexAttributes: BufferAttribute[] = [];\n        const attributeNames = Object.getOwnPropertyNames(bufferGeometry.attributes);\n        for (const name of attributeNames) {\n            const attribute = bufferGeometry.attributes[name];\n            // FIXME: Also support InterleavedBufferAttribute\n            const vertexAttribute = fromThreeBufferAttribute(attribute as ThreeBufferAttribute);\n            vertexAttribute.name = name;\n            vertexAttributes.push(vertexAttribute);\n        }\n        const index =\n            bufferGeometry.index !== null\n                ? fromThreeBufferAttribute(bufferGeometry.index)\n                : undefined;\n\n        let count = 0;\n        if (index !== undefined) {\n            count = bufferGeometry.index === null ? 0 : bufferGeometry.index.count;\n        } else {\n            // If there is no index buffer, try to deduce the count from the position attribute.\n            const posAttr = bufferGeometry.attributes.position as ThreeBufferAttribute;\n            if (posAttr === undefined) {\n                throw new Error(\"Missing position attibute to deduce item count\");\n            }\n            count = posAttr.count;\n        }\n\n        return {\n            type: GeometryType.Unspecified,\n            vertexAttributes,\n            index,\n            groups: [{ start: 0, count, technique: techniqueIndex }]\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport * as THREE from \"three\";\n\n/**\n * Determines whether a position in NDC (Normalized Device Coordinates) is inside the screen.\n * @param ndc The position to check.\n */\nfunction isOnScreen(ndc: THREE.Vector3) {\n    return ndc.z > -1 && ndc.z < 1 && ndc.x >= -1 && ndc.x <= 1 && ndc.y >= -1 && ndc.y <= 1;\n}\n\n/**\n * @hidden\n * Handles the projection of world coordinates to screen coordinates.\n */\nexport class ScreenProjector {\n    static tempV2 = new THREE.Vector2();\n    static tempV3 = new THREE.Vector3();\n\n    private m_width: number = 0;\n    private m_height: number = 0;\n\n    /**\n     * Constructs a new `ScreenProjector`.\n     *\n     * @param m_camera Camera to project against.\n     */\n    constructor(private m_camera: THREE.Camera) {}\n\n    /**\n     * Height of the screen.\n     */\n    get width(): number {\n        return this.m_width;\n    }\n\n    /**\n     * Width of the screen.\n     */\n    get height(): number {\n        return this.m_height;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector2} target The target vector.\n     * @returns {THREE.Vector2} The projected vector (the parameter 'target') or undefined if\n     * outside the near / far plane.\n     */\n    project(\n        source: Vector3Like,\n        target: THREE.Vector2 = new THREE.Vector2()\n    ): THREE.Vector2 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (p.z > -1 && p.z < 1) {\n            return this.ndcToScreen(p, target);\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector2} target The target vector.\n     * @returns {THREE.Vector2} The projected vector (the parameter 'target') or undefined if\n     * outside the screen.\n     */\n    projectOnScreen(\n        source: Vector3Like,\n        target: THREE.Vector2 = new THREE.Vector2()\n    ): THREE.Vector2 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (isOnScreen(p)) {\n            return this.ndcToScreen(p, target);\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates. The z component between -1 and 1 is also returned.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector3} target The target vector.\n     * @returns {THREE.Vector3} The projected vector (the parameter 'target') or undefined if\n     * outside the near / far plane.\n     */\n    project3(\n        source: Vector3Like,\n        target: THREE.Vector3 = new THREE.Vector3()\n    ): THREE.Vector3 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (p.z > -1 && p.z < 1) {\n            target.set((p.x * this.m_width) / 2, (p.y * this.m_height) / 2, p.z);\n            return target;\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector. Stores\n     * result in NDC in the target vector.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector3} target The target vector.\n     * @returns {THREE.Vector3} The projected vector (the parameter 'target').\n     */\n    projectVector(source: Vector3Like, target: THREE.Vector3): THREE.Vector3 {\n        target.set(source.x, source.y, source.z).project(this.m_camera);\n        return target;\n    }\n\n    /**\n     * Fast test to check if projected point is on screen.\n     *\n     * @returns {boolean} `true` if point is on screen, `false` otherwise.\n     */\n    onScreen(source: Vector3Like): boolean {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        return isOnScreen(p);\n    }\n\n    /**\n     * Update the `ScreenProjector` with the latest values of the screen and the camera.\n     *\n     * @param {THREE.Camera} camera Camera to project against.\n     * @param {number} width Width of screen/canvas.\n     * @param {number} height Height of screen/canvas.\n     */\n    update(camera: THREE.Camera, width: number, height: number) {\n        this.m_camera = camera;\n        this.m_width = width;\n        this.m_height = height;\n    }\n\n    private ndcToScreen(ndc: THREE.Vector3, screenCoords: THREE.Vector2): THREE.Vector2 {\n        return screenCoords.set((ndc.x * this.m_width) / 2, (ndc.y * this.m_height) / 2);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CubemapSky, GradientSky } from \"@here/harp-datasource-protocol\";\nimport { ProjectionType } from \"@here/harp-geoutils\";\nimport { SkyCubemapTexture } from \"./SkyCubemapTexture\";\nimport { SkyGradientTexture } from \"./SkyGradientTexture\";\n\nimport * as THREE from \"three\";\n\n/**\n * Class that handles [[MapView]]'s sky background.\n */\nexport class SkyBackground {\n    private m_skyTexture?: SkyGradientTexture | SkyCubemapTexture;\n\n    /**\n     * Constructs a new `SkyBackground`.\n     *\n     * @param m_sky Sky configuration parameters.\n     * @param m_projectionType [[MapView]]'s projection type.\n     * @param camera [[MapView]]'s camera.\n     */\n    constructor(\n        private m_sky: GradientSky | CubemapSky,\n        private m_projectionType: ProjectionType,\n        camera: THREE.Camera\n    ) {\n        switch (this.m_sky.type) {\n            case \"gradient\":\n                this.m_skyTexture = new SkyGradientTexture(this.m_sky, this.m_projectionType);\n                this.updateCamera(camera);\n                break;\n            case \"cubemap\": {\n                this.m_skyTexture = new SkyCubemapTexture(this.m_sky);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        this.m_skyTexture!.dispose();\n    }\n\n    /**\n     * Sky texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_skyTexture!.texture;\n    }\n\n    /**\n     * This method updates the skybox based on the camera position (needed for some types of sky).\n     *\n     * @param camera The camera used in the map view.\n     */\n    updateCamera(camera: THREE.Camera) {\n        if (this.m_sky.type === \"gradient\") {\n            (this.m_skyTexture! as SkyGradientTexture).update(camera);\n        }\n    }\n\n    /**\n     * Updates the sky texture with new parameters.\n     *\n     * @param params New sky configuration parameters.\n     * @param projectionType Which projection is used, this may also change (in which case the\n     * textures should be recreated).\n     */\n    updateTexture(params: GradientSky | CubemapSky, projectionType: ProjectionType) {\n        const isSameSkyType =\n            this.m_sky.type === params.type && this.m_projectionType === projectionType;\n        switch (params.type) {\n            case \"gradient\":\n                if (isSameSkyType) {\n                    (this.m_skyTexture! as SkyGradientTexture).updateTexture(params);\n                } else {\n                    this.m_skyTexture = new SkyGradientTexture(params, projectionType);\n                }\n                break;\n            case \"cubemap\": {\n                if (isSameSkyType) {\n                    (this.m_skyTexture! as SkyCubemapTexture).updateTexture(params);\n                } else {\n                    this.m_skyTexture = new SkyCubemapTexture(params);\n                }\n                break;\n            }\n        }\n        this.m_projectionType = projectionType;\n        this.m_sky = params;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GradientSky } from \"@here/harp-datasource-protocol\";\nimport { ProjectionType } from \"@here/harp-geoutils\";\nimport { getOptionValue } from \"@here/harp-utils\";\nimport { Color, CubeTexture, DataTexture, Line3, Plane, RGBFormat, Texture, Vector3 } from \"three\";\n\nexport const DEFAULT_TEXTURE_SIZE = 512;\nexport const DEFAULT_MONOMIAL_POWER = 1;\n\n// Vectors used for skybox bitmap computation.\nconst cameraDir = [\n    new Vector3(1, 0, 0),\n    new Vector3(-1, 0, 0),\n    new Vector3(0, -1, 0),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 0, 1),\n    new Vector3(0, 0, -1)\n];\nconst cameraRight = [\n    new Vector3(0, 0, -1),\n    new Vector3(0, 0, 1),\n    new Vector3(1, 0, 0),\n    new Vector3(1, 0, 0),\n    new Vector3(1, 0, 0),\n    new Vector3(-1, 0, 0)\n];\nconst cameraUp = [\n    new Vector3(0, 1, 0),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 0, 1),\n    new Vector3(0, 0, -1),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 1, 0)\n];\n\n/**\n * Class tha generates a texture containing a linear gradient, to be used with [[SkyBackground]].\n *\n * The gradient is mapped onto a sphere, where `topColor` maps to the top of the upper hemisphere,\n * `bottomColor` to the bottom of the upper hemisphere, and `groundColor` fills the bottom\n *  hemisphere..\n */\nexport class SkyGradientTexture {\n    private m_width: number;\n    private m_faceCount: number;\n    private m_faces: DataTexture[];\n    private m_skybox?: CubeTexture;\n\n    // Used only in the planar case.\n    private m_farClipPlaneDividedVertically?: THREE.Line3;\n    private m_groundPlane?: THREE.Plane;\n    private m_bottomMidFarPoint?: THREE.Vector3;\n    private m_topMidFarPoint?: THREE.Vector3;\n    private m_horizonPosition?: THREE.Vector3;\n    private m_farClipPlaneCorners?: THREE.Vector3[];\n\n    /**\n     * Constructs a new `SkyGradientTexture`.\n     *\n     * @param sky Initial [[GradientSky]] configuration.\n     * @param m_projectionType [[MapView]]'s projection type.\n     * @param m_height Optional height parameter.\n     */\n    constructor(\n        sky: GradientSky,\n        private m_projectionType: ProjectionType,\n        private m_height: number = DEFAULT_TEXTURE_SIZE\n    ) {\n        const topColor = new Color(sky.topColor);\n        const bottomColor = new Color(sky.bottomColor);\n        const groundColor = new Color(sky.groundColor);\n\n        this.m_width = this.m_projectionType === ProjectionType.Planar ? 1.0 : this.m_height;\n        this.m_faceCount = this.m_projectionType === ProjectionType.Planar ? 1.0 : 6.0;\n        this.m_faces = [];\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            const data = new Uint8Array(3 * this.m_width * this.m_height);\n            this.fillTextureData(data, i, topColor, bottomColor, groundColor, sky.monomialPower);\n\n            const texture = new DataTexture(data, this.m_width, this.m_height, RGBFormat);\n            texture.needsUpdate = true;\n            texture.unpackAlignment = 1;\n            this.m_faces.push(texture);\n        }\n\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox = new CubeTexture(this.m_faces);\n            this.m_skybox.needsUpdate = true;\n        } else {\n            this.m_farClipPlaneDividedVertically = new Line3();\n            this.m_groundPlane = new Plane(new Vector3(0, 0, 1));\n            this.m_bottomMidFarPoint = new Vector3();\n            this.m_topMidFarPoint = new Vector3();\n            this.m_horizonPosition = new Vector3();\n            this.m_farClipPlaneCorners = [\n                new Vector3(),\n                new Vector3(),\n                new Vector3(),\n                new Vector3()\n            ];\n        }\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            this.m_faces[i].dispose();\n        }\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox!.dispose();\n        }\n    }\n\n    /**\n     * `SkyGradientTexture`'s texture resource (simple texture or cubemap depending on\n     * [[MapView]]'s projection).\n     */\n    get texture(): Texture {\n        return this.m_projectionType === ProjectionType.Planar ? this.m_faces[0] : this.m_skybox!;\n    }\n\n    /**\n     * This method updates the position of the texture depending on the camera frustum.\n     *\n     * @param camera The camera used in the map view.\n     */\n    update(camera: THREE.Camera) {\n        if (this.m_projectionType === ProjectionType.Planar) {\n            this.setHorizonPosition(camera);\n            this.updateTexturePosition();\n        }\n    }\n\n    /**\n     * Updates the `SkyGradientTexture` with new parameters.\n     *\n     * @param params New [[GradientSky]] configuration.\n     */\n    updateTexture(sky: GradientSky) {\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            this.fillTextureData(\n                this.m_faces[i].image.data,\n                i,\n                new Color(sky.topColor),\n                new Color(sky.bottomColor),\n                new Color(sky.groundColor),\n                sky.monomialPower\n            );\n            this.m_faces[i].needsUpdate = true;\n        }\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox!.needsUpdate = true;\n        }\n    }\n\n    // When creating the texture, a Uint8Array is required, because the resulting texture passed\n    // to the scene as a background, is a texImage2D object, that does not accept UintClampedArray\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D\n    // But, when updating the texture, a Uint8ClampedArray is passed as argument, because\n    // this.m_texture.image.data returns a Uint8ClampedArray. That's why this method accepts both.\n    private fillTextureData(\n        data: Uint8ClampedArray | Uint8Array,\n        faceIdx: number,\n        topColor: Color,\n        bottomColor: Color,\n        groundColor: Color,\n        monomialPower?: number\n    ) {\n        const color = new Color();\n        const dir = new Vector3();\n        const right = new Vector3();\n        const up = new Vector3();\n\n        const upDir = new Vector3(0, 0, 1);\n        for (let i = 0; i < this.m_height; ++i) {\n            for (let j = 0; j < this.m_width; ++j) {\n                if (this.m_projectionType === ProjectionType.Spherical) {\n                    const offsetX = right\n                        .copy(cameraRight[faceIdx])\n                        .multiplyScalar(((j + 0.5) / this.m_width) * 2.0 - 1.0);\n                    const offsetY = up\n                        .copy(cameraUp[faceIdx])\n                        .multiplyScalar(((i + 0.5) / this.m_height) * 2.0 - 1.0);\n                    dir.copy(cameraDir[faceIdx])\n                        .add(offsetX)\n                        .add(offsetY)\n                        .normalize();\n                    const t = Math.max(upDir.dot(dir), 0);\n\n                    color\n                        .copy(groundColor)\n                        .lerp(bottomColor, Math.min(t * 100, 1))\n                        .lerp(topColor, t ** getOptionValue(monomialPower, DEFAULT_MONOMIAL_POWER))\n                        .multiplyScalar(255);\n                } else {\n                    const t = i / this.m_height;\n                    if (i === 0) {\n                        color.copy(groundColor).multiplyScalar(255);\n                    } else {\n                        color\n                            .copy(bottomColor)\n                            .lerp(\n                                topColor,\n                                t ** getOptionValue(monomialPower, DEFAULT_MONOMIAL_POWER)\n                            )\n                            .multiplyScalar(255);\n                    }\n                }\n\n                data[i * this.m_width * 3 + j * 3] = color.r;\n                data[i * this.m_width * 3 + j * 3 + 1] = color.g;\n                data[i * this.m_width * 3 + j * 3 + 2] = color.b;\n            }\n        }\n    }\n\n    private setHorizonPosition(camera: THREE.Camera) {\n        this.m_farClipPlaneCorners![0].set(-1, -1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![1].set(1, -1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![2].set(-1, 1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![3].set(1, 1, 1).unproject(camera);\n\n        this.m_bottomMidFarPoint!.copy(this.m_farClipPlaneCorners![0])\n            .add(this.m_farClipPlaneCorners![1])\n            .multiplyScalar(0.5);\n        this.m_topMidFarPoint!.copy(this.m_farClipPlaneCorners![2])\n            .add(this.m_farClipPlaneCorners![3])\n            .multiplyScalar(0.5);\n        this.m_farClipPlaneDividedVertically!.set(this.m_bottomMidFarPoint, this.m_topMidFarPoint);\n\n        const hasIntersection = this.m_groundPlane!.intersectLine(\n            this.m_farClipPlaneDividedVertically!,\n            this.m_horizonPosition!\n        );\n\n        // When there is no intersection between the ground plane and the\n        // farClipPlaneDividedVertically, be sure that the horizon is reset. Otherwise a previous\n        // intersection point stored in the m_horizonPosition will be considered the valid one.\n        if (!hasIntersection) {\n            this.m_horizonPosition!.set(0.0, 0.0, 0.0);\n        }\n    }\n\n    private updateTexturePosition() {\n        const coveredBySky = this.m_bottomMidFarPoint!.distanceTo(this.m_horizonPosition!);\n        const frustumHeight = this.m_farClipPlaneDividedVertically!.distance();\n        const skyRatio = coveredBySky / frustumHeight;\n\n        // If there is no intersection between the ground plane and the line that defines the far\n        // clip plane divided vertically, it means that there is no sky visible and therefore the\n        // ground color should be displayed. When there is no intersection, the length of the\n        // this.m_horizonPosition is still equal to zero, as threejs initialize an empty vector with\n        // all the three components to zero.\n        // If there is an intersection, calculate the offset.\n        const ratio = this.m_horizonPosition!.length() === 0 ? 1 : skyRatio - 2 / this.m_height;\n\n        // If the bottom part of the far clipping plane is under the ground plane, scroll the\n        // texture down. Otherwise, the camera is looking at the sky, therefore, scroll the texture\n        // up.\n        this.m_faces[0].offset.set(0, this.m_bottomMidFarPoint!.z <= 0 ? -ratio : skyRatio);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { FontCatalog } from \"@here/harp-text-canvas\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\n\nexport const DEFAULT_FONT_CATALOG_NAME = \"default\";\n\nconst logger = LoggerManager.instance.create(\"FontCatalogLoader\");\n\ntype FontCatalogCallback = (name: string, catalog: FontCatalog) => void;\n\nexport class FontCatalogLoader {\n    private m_catalogsLoading: number = 0;\n\n    constructor(private readonly m_theme: Theme) {}\n\n    /**\n     * Initializes font catalog loader.\n     * @param defaultFontCatalogUrl Url of the font catalog that will be used by default if the\n     * theme doesn't define any font catalog.\n     * @returns Name of the default font catalog.\n     */\n    initialize(defaultFontCatalogUrl: string): string {\n        if (this.m_theme.fontCatalogs === undefined || this.m_theme.fontCatalogs.length === 0) {\n            this.m_theme.fontCatalogs = [\n                {\n                    name: DEFAULT_FONT_CATALOG_NAME,\n                    url: defaultFontCatalogUrl\n                }\n            ];\n            return DEFAULT_FONT_CATALOG_NAME;\n        }\n\n        const defaultFontCatalogName = this.m_theme.fontCatalogs[0].name;\n        return defaultFontCatalogName;\n    }\n\n    async loadCatalogs(catalogCallback: FontCatalogCallback): Promise<void[]> {\n        assert(this.m_theme.fontCatalogs !== undefined);\n        assert(this.m_theme.fontCatalogs!.length > 0);\n\n        const promises: Array<Promise<void>> = [];\n\n        this.m_theme.fontCatalogs!.forEach(fontCatalogConfig => {\n            this.m_catalogsLoading += 1;\n            const fontCatalogPromise: Promise<void> = FontCatalog.load(fontCatalogConfig.url, 1024)\n                .then<void>(catalogCallback.bind(undefined, fontCatalogConfig.name))\n                .catch((error: Error) => {\n                    logger.error(\"Failed to load FontCatalog: \", error);\n                })\n                .finally(() => {\n                    this.m_catalogsLoading -= 1;\n                });\n            promises.push(fontCatalogPromise);\n        });\n\n        return Promise.all(promises);\n    }\n\n    get loading(): boolean {\n        return this.m_catalogsLoading > 0;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { Projection } from \"@here/harp-geoutils\";\nimport { ElevationProvider } from \"../ElevationProvider\";\nimport { MapView } from \"../MapView\";\nimport { ViewState } from \"./ViewState\";\n\n/**\n * View state obtained from a MapView instance.\n */\nexport class MapViewState implements ViewState {\n    constructor(\n        private readonly m_mapView: MapView,\n        private readonly m_renderedTilesChangeCheck: () => boolean\n    ) {}\n\n    get worldCenter(): THREE.Vector3 {\n        return this.m_mapView.worldCenter;\n    }\n    get cameraIsMoving(): boolean {\n        return this.m_mapView.cameraIsMoving;\n    }\n    get maxVisibilityDist(): number {\n        return this.m_mapView.viewRanges.maximum;\n    }\n    get zoomLevel(): number {\n        return this.m_mapView.zoomLevel;\n    }\n    get env(): Env {\n        return this.m_mapView.env;\n    }\n    get frameNumber(): number {\n        return this.m_mapView.frameNumber;\n    }\n    get lookAtDistance(): number {\n        return this.m_mapView.targetDistance;\n    }\n    get isDynamic(): boolean {\n        return this.m_mapView.isDynamicFrame;\n    }\n    get hiddenGeometryKinds(): GeometryKindSet | undefined {\n        return this.m_mapView.tileGeometryManager === undefined\n            ? undefined\n            : this.m_mapView.tileGeometryManager.hiddenGeometryKinds;\n    }\n\n    get renderedTilesChanged(): boolean {\n        return this.m_renderedTilesChangeCheck();\n    }\n\n    get projection(): Projection {\n        return this.m_mapView.projection;\n    }\n\n    get elevationProvider(): ElevationProvider | undefined {\n        return this.m_mapView.elevationProvider;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { FontCatalog, TextCanvas } from \"@here/harp-text-canvas\";\nimport { assert } from \"@here/harp-utils\";\n\nexport class TextCanvasFactory {\n    private m_minGlyphCount: number = 0; //Min amount of glyphs each [[TextCanvas]] layer can store.\n    private m_maxGlyphCount: number = 0; //Max amount of glyphs each [[TextCanvas]] layer can store.\n\n    /**\n     * Creates an instance of text canvas factory.\n     * @param m_renderer\n     */\n    constructor(private readonly m_renderer: THREE.WebGLRenderer) {}\n\n    setGlyphCountLimits(min: number, max: number) {\n        this.m_minGlyphCount = min;\n        this.m_maxGlyphCount = max;\n    }\n\n    /**\n     * Creates text canvas\n     * @param fontCatalog Initial [[FontCatalog]].\n     */\n    createTextCanvas(fontCatalog: FontCatalog): TextCanvas {\n        assert(this.m_maxGlyphCount > 0);\n\n        return new TextCanvas({\n            renderer: this.m_renderer,\n            fontCatalog,\n            minGlyphCount: this.m_minGlyphCount,\n            maxGlyphCount: this.m_maxGlyphCount\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { getOptionValue } from \"@here/harp-utils\";\nimport { MapView, MapViewEventNames } from \"../MapView\";\nimport { CopyrightInfo } from \"./CopyrightInfo\";\n\n/**\n * Helper class that maintains up-to-date [[MapView]] copyright information in DOM element.\n *\n * @example\n *\n *     // HTML snippet\n *     <div id=\"copyrightNotice\" style=\"position:absolute; right:0; bottom:0; z-index:100\"></div>\n *\n *     // JavaScript\n *     const mapView = new MapView({ ... });\n *     CopyrightElementHandler.install(\"copyrightNotice\", mapView);\n */\nexport class CopyrightElementHandler {\n    /**\n     * Install [[CopyrightElementHandler]] on DOM element and - optionally - attach to a [[MapView]]\n     * instance.\n     *\n     * @param element HTML DOM element or a HTML DOM element id\n     * @param mapView, optional, [[attach]] to this [[MapView]]\n     */\n    static install(element: string | HTMLElement, mapView?: MapView): CopyrightElementHandler {\n        return new CopyrightElementHandler(element, mapView);\n    }\n\n    /**\n     * Static copyright info.\n     *\n     * Use when [[MapView]]'s [[DataSource]]'s do not provide proper copyright information.\n     */\n    staticInfo: CopyrightInfo[] | undefined;\n\n    private m_defaults: Map<string, CopyrightInfo> = new Map();\n    private m_element: HTMLElement;\n    private m_mapViews: MapView[] = [];\n\n    /**\n     * Creates a new `CopyrightElementHandler` that updates the DOM element with the copyright info\n     * of the given `mapView`.\n     *\n     * Note: Generally, the static [[install]] method can be used to create and attach a new\n     * `CopyrightElementHandler` to a [[MapView]]\n     *\n     * @param element HTML DOM element or a HTML DOM element id\n     * @param mapView optional, [[attach]] to this [[MapView]] instance\n     */\n    constructor(element: string | HTMLElement, mapView?: MapView) {\n        if (typeof element === \"string\") {\n            const htmlElement = document.getElementById(element);\n            if (!htmlElement) {\n                throw new Error(`CopyrightElementHandler: unable to find DOM element #${element}`);\n            }\n            this.m_element = htmlElement;\n        } else {\n            this.m_element = element;\n        }\n\n        if (mapView !== undefined) {\n            this.attach(mapView);\n        }\n    }\n\n    /**\n     * Destroys this object by removing all event listeners from the attached [[MapView]]s.\n     */\n    destroy() {\n        for (const mapView of this.m_mapViews) {\n            mapView.removeEventListener(MapViewEventNames.CopyrightChanged, this.update);\n        }\n    }\n\n    /**\n     * Attaches this [[CopyrightInfo]] updates from [[MapView]] instance.\n     */\n    attach(mapView: MapView): this {\n        this.m_mapViews.push(mapView);\n\n        mapView.addEventListener(MapViewEventNames.CopyrightChanged, this.update);\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Stop following [[CopyrightInfo]] updates from [[MapView]] instance.\n     */\n    detach(mapView: MapView): this {\n        mapView.removeEventListener(MapViewEventNames.CopyrightChanged, this.update);\n\n        this.m_mapViews = this.m_mapViews.filter(item => item !== mapView);\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Set [[CopyrightInfo]] defaults to be used in case [[DataSource]] does not provide deatailed\n     * copyright information.\n     *\n     * The defaults will applied to all undefined `year`, `label` and `link` values in the copyright\n     * information retrieved from [[MapView]].\n     */\n    setDefaults(defaults: CopyrightInfo[] | undefined): this {\n        this.m_defaults.clear();\n        if (defaults !== undefined) {\n            for (const item of defaults) {\n                this.m_defaults.set(item.id, item);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the [[staticInfo]] property.\n     *\n     * A `CopyrightElementHandler` always displays a deduplicated sum of static copyright info and\n     * copyright information obtained from attached [[MapView]]s.\n     *\n     * This information is used when [[DataSource]] instances of given [[MapView]] do not provide\n     * copyright information.\n     */\n    setStaticCopyightInfo(staticInfo: CopyrightInfo[] | undefined): this {\n        this.staticInfo = staticInfo;\n        return this;\n    }\n\n    /**\n     * Update copyright info text in controlled HTML element.\n     */\n    update = () => {\n        const mergedCopyrightInfo = this.m_mapViews\n            .map(mapView => mapView.copyrightInfo)\n            .reduce(CopyrightInfo.mergeArrays, this.staticInfo || []);\n\n        // Conditionally hiding of element with copyright information.\n        // If nothing to show we schould to avoid empty white rectangle in right bottom corner.\n        if (mergedCopyrightInfo.length === 0) {\n            this.m_element.style.display = \"none\";\n            return;\n        } else {\n            this.m_element.style.display = \"block\";\n        }\n\n        if (this.m_defaults.size !== 0) {\n            for (const sourceInfo of mergedCopyrightInfo) {\n                const defaults = this.m_defaults.get(sourceInfo.id);\n                if (defaults !== undefined) {\n                    sourceInfo.year = getOptionValue(sourceInfo.year, defaults.year);\n                    sourceInfo.label = getOptionValue(sourceInfo.label, defaults.label);\n                    sourceInfo.link = getOptionValue(sourceInfo.link, defaults.link);\n                }\n            }\n        }\n        const deduped = CopyrightInfo.mergeArrays(mergedCopyrightInfo);\n\n        this.m_element.innerHTML = CopyrightInfo.formatAsHtml(deduped);\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TransferManager } from \"@here/harp-transfer-manager\";\nimport {\n    AreaCopyrightInfo,\n    CopyrightCoverageProvider,\n    CopyrightCoverageResponse\n} from \"./CopyrightCoverageProvider\";\n\ninterface RequestHeaders {\n    [field: string]: string;\n}\n\n/**\n * Copyright provider which retrieves copyright coverage information from provided URL.\n */\nexport class UrlCopyrightProvider extends CopyrightCoverageProvider {\n    private m_cachedCopyrightResponse: Promise<AreaCopyrightInfo[]> | undefined;\n\n    /**\n     * Default constructor.\n     *\n     * @param m_fetchURL URL to fetch copyrights data from.\n     * @param m_baseScheme Scheme to get copyrights from.\n     * @param m_requestHeaders Optional request headers for requests(e.g. Authorization)\n     */\n    constructor(\n        private m_fetchURL: string,\n        private m_baseScheme: string,\n        private m_requestHeaders?: RequestHeaders\n    ) {\n        super();\n    }\n\n    /**\n     * Sets request headers.\n     * @param headers\n     */\n    setRequestHeaders(headers: RequestHeaders | undefined) {\n        this.m_requestHeaders = headers;\n    }\n\n    /**\n     * @inheritdoc\n     * @override\n     */\n    getCopyrightCoverageData(): Promise<AreaCopyrightInfo[]> {\n        if (this.m_cachedCopyrightResponse !== undefined) {\n            return this.m_cachedCopyrightResponse;\n        }\n\n        this.m_cachedCopyrightResponse = new TransferManager()\n            .downloadJson<CopyrightCoverageResponse>(this.m_fetchURL, {\n                headers: this.m_requestHeaders\n            })\n            .then(json => json[this.m_baseScheme])\n            .catch(error => {\n                this.logger.error(error);\n                return [];\n            });\n\n        return this.m_cachedCopyrightResponse;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @module\n *\n * This module provides classes to ease downloading URLs. In particular, following redirects,\n * retrying on HTTP errors, and limiting the number of parallel concurrent downloads.\n */\n\nimport \"@here/harp-fetch\";\nimport { DeferredPromise } from \"./DeferredPromise\";\n\n/**\n * `TransferManager` for downloading URLs.\n *\n * Features:\n *\n * * Merges JSON downloads, for example, the same URL if requested as JSON will only be downloaded\n *   once.\n * * Limits the amount of parallel downloads, useful when requesting a large amount of URLs that\n *   would otherwise stall the browser.\n * * Retries the downloads with an increasing timeout on HTTP 503 replies.\n *\n * The static method [[instance]] can be used to get a default constructed instance.\n */\nexport class TransferManager {\n    /**\n     * The timeout in milliseconds to wait between retries. This timeout is multiplied with the\n     * number of retries. First retry waits for 0 ms, second retry for 500 ms, third for 1000 ms and\n     * so on.\n     */\n    static readonly retryTimeout = 500;\n    /**\n     * The amount of maximum parallel downloads to allow.\n     */\n    static readonly maxParallelDownloads = 16;\n    /**\n     * Returns a default instance of [[TransferManager]].\n     */\n    static instance(): TransferManager {\n        return TransferManager.defaultInstance;\n    }\n    private static readonly defaultInstance = new TransferManager();\n    private static async fetchRepeatedly(\n        fetchFunction: typeof fetch,\n        retryCount: number,\n        maxRetries: number,\n        url: string,\n        init?: RequestInit\n    ): Promise<Response> {\n        try {\n            const response = await fetchFunction(url, init);\n            if (response.status !== 503 || retryCount > maxRetries) {\n                return response;\n            }\n        } catch (err) {\n            if (\n                err.hasOwnProperty(\"isCancelled\") ||\n                (err.hasOwnProperty(\"name\") && err.name === \"AbortError\") ||\n                retryCount > maxRetries\n            ) {\n                throw err;\n            }\n        }\n        return TransferManager.waitFor(TransferManager.retryTimeout * retryCount).then(() =>\n            TransferManager.fetchRepeatedly(fetchFunction, maxRetries, retryCount + 1, url, init)\n        );\n    }\n    private static waitFor(milliseconds: number): Promise<void> {\n        return new Promise<void>(resolve => setTimeout(resolve, milliseconds));\n    }\n    private activeDownloadCount = 0;\n    private downloadQueue = new Array<DeferredPromise<Response>>();\n    private activeDownloads = new Map<string, Promise<any>>();\n    /**\n     * Constructs a new [[TransferManager]].\n     *\n     * @param fetchFunction The default fetch function to use.\n     * @param maxRetries The maximum amount to try to re-fetch a resource.\n     */\n    constructor(readonly fetchFunction = fetch, readonly maxRetries: number = 5) {}\n    /**\n     * Downloads a JSON object. Merges downloads if requested multiple times.\n     *\n     * Note: This method merges multiple downloads of the same resource to\n     * only one request. The init parameter is ignored if the download is merged.\n     * Call [[download]] instead to download the resource without merging.\n     *\n     * @param url The URL to download\n     * @param init Optional extra parameters for the download.\n     */\n    downloadJson<T>(url: string, init?: RequestInit): Promise<T> {\n        return this.downloadAs<T>(response => response.json(), url, init);\n    }\n    /**\n     * Downloads a binary object. Merges downloads if requested multiple times.\n     *\n     * Note: This method merges multiple downloads of the same resource to\n     * only one request. The init parameter is ignored if the download is merged.\n     * Call [[download]] instead to download the resource without merging.\n     *\n     * @param url The URL to download\n     * @param init Optional extra parameters for the download\n     */\n    downloadArrayBuffer(url: string, init?: RequestInit): Promise<ArrayBuffer> {\n        return this.download(url, init).then(response => response.arrayBuffer());\n    }\n    /**\n     * Downloads a URL and returns the response.\n     *\n     * Does not merge multiple requests to the same URL.\n     *\n     * @param url The URL to download.\n     * @param init Optional extra parameters for the download.\n     */\n    download(url: string, init?: RequestInit): Promise<Response> {\n        if (this.activeDownloadCount >= TransferManager.maxParallelDownloads) {\n            const deferred = new DeferredPromise<Response>(() => this.doDownload(url, init));\n            this.downloadQueue.push(deferred);\n            return deferred.promise;\n        }\n        return this.doDownload(url, init);\n    }\n    private async doDownload(url: string, init?: RequestInit): Promise<Response> {\n        try {\n            ++this.activeDownloadCount;\n            const response = await TransferManager.fetchRepeatedly(\n                this.fetchFunction,\n                0,\n                this.maxRetries,\n                url,\n                init\n            );\n\n            this.onDownloadDone();\n            return response;\n        } catch (error) {\n            this.onDownloadDone();\n            throw error;\n        }\n    }\n    private onDownloadDone() {\n        --this.activeDownloadCount;\n        this.execDeferredDownload();\n    }\n    private execDeferredDownload() {\n        const future = this.downloadQueue.pop();\n        if (future === undefined) {\n            return;\n        }\n        future.exec();\n    }\n    private downloadAs<T>(\n        converter: (response: Response) => Promise<T>,\n        url: string,\n        init?: RequestInit\n    ): Promise<T> {\n        const cacheKey = url;\n        const pendingFetch = this.activeDownloads.get(cacheKey);\n        if (pendingFetch !== undefined) {\n            return Promise.resolve(pendingFetch);\n        }\n        const newFetch = this.download(url, init)\n            .then(response => {\n                this.activeDownloads.delete(cacheKey);\n                if (response.ok) {\n                    return converter(response);\n                }\n                throw new Error(JSON.stringify(response));\n            })\n            .catch(err => {\n                this.activeDownloads.delete(cacheKey);\n                throw err;\n            });\n        this.activeDownloads.set(cacheKey, newFetch);\n        return newFetch;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n *\n * DeferredPromise takes an executor function for executing it later, when [[exec]] is called.\n * This class allows wrapping other promises or long running functions for later execution.\n * @internal\n * @hidden\n */\nexport class DeferredPromise<T> {\n    /**\n     * Internal promise to store the result of the deferred executor function.\n     */\n    readonly promise: Promise<T>;\n    private resolveFunc?: (result?: T) => void;\n    private rejectFunc?: (reason?: any) => void;\n\n    /**\n     * Constructs a new [[DeferredPromise]]\n     * @param executor Async function that should be executed at a later point in time.\n     */\n    constructor(private readonly executor: () => Promise<T>) {\n        this.promise = new Promise<T>((resolve, reject) => {\n            this.resolveFunc = resolve;\n            this.rejectFunc = reject;\n        });\n    }\n\n    /**\n     * When `exec` is called the deferred executor function is executed.\n     */\n    exec() {\n        this.executor()\n            .then(result => this.resolveFunc!(result))\n            .catch(error => this.rejectFunc!(error));\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * `ImageItem` is used to identify an image in the [[ImageCache]].\n */\nexport interface ImageItem {\n    /** URL of the image, or unique identifier. */\n    url: string;\n    /** Pixel data. */\n    imageData?: ImageData | ImageBitmap;\n    /** Turns to `true` when the data has finished loading. */\n    loaded: boolean;\n    /** `loadingPromise` is only used during loading/generating the image. */\n    loadingPromise?: Promise<ImageItem | undefined>;\n}\n\nexport namespace ImageItem {\n    /**\n     * Missing Typedoc\n     */\n    export function isLoading(imageItem: ImageItem): boolean {\n        return imageItem.loadingPromise !== undefined;\n    }\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nexport interface RequestHeaders {\n    [field: string]: string;\n}\n\n/**\n * A texture loader that supports request headers(e.g. for Authorization)\n */\nexport class TextureLoader {\n    private m_textureLoader = new THREE.TextureLoader();\n\n    /**\n     * Load an image from url and create a texture\n     * @param url URL to the image\n     * @param requestHeaders Optional request headers to load image(e.g. Authorization)\n     * @param crossOrigin Enable/disable CORS\n     */\n    async load(\n        url: string,\n        requestHeaders?: RequestHeaders | undefined,\n        crossOrigin: boolean = true\n    ): Promise<THREE.Texture> {\n        // Use THREE.js texture loader directly if no request header is set\n        if (requestHeaders === undefined) {\n            return this.loadWithThreeLoader(url);\n        }\n\n        // Load image with fetch API if request header is set\n        const response = await fetch(url, {\n            headers: requestHeaders,\n            mode: crossOrigin ? \"cors\" : \"no-cors\"\n        });\n        const blob = await response.blob();\n\n        // Load image from blob using THREE.js loader\n        const texture = await this.loadWithThreeLoader(URL.createObjectURL(blob));\n\n        // Set correct image format from original URL or blob mime type\n        // (object URL does not contain file format)\n        const isJPEG =\n            blob.type === \"image/jpeg/\" ||\n            url.search(/\\.jpe?g($|\\?)/i) > 0 ||\n            url.search(/^data\\:image\\/jpeg/) === 0;\n        texture.format = isJPEG ? THREE.RGBFormat : THREE.RGBAFormat;\n\n        return texture;\n    }\n\n    private loadWithThreeLoader(url: string): Promise<THREE.Texture> {\n        return new Promise<THREE.Texture>((resolve, reject) => {\n            this.m_textureLoader.setCrossOrigin(\"\");\n            this.m_textureLoader.load(\n                url,\n                texture => resolve(texture),\n                undefined,\n                () => reject(new Error(\"failed to load texture\"))\n            );\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GeometryType, getFeatureId } from \"@here/harp-datasource-protocol\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport { Tile, TileFeatureData } from \"../Tile\";\nimport {\n    BufferedGeometryLineAccessor,\n    BufferedGeometryObject3dAccessor,\n    IGeometryAccessor,\n    ILineAccessor,\n    IndexedBufferedGeometryLineAccessor,\n    IObject3dAccessor,\n    isLineAccessor,\n    isObject3dAccessor\n} from \"./TileGeometry\";\n\nconst logger = LoggerManager.instance.create(\"TileDataAccessor\");\n\n/**\n * Interface for a client visitor that is used to visit all `THREE.Object`s in a tile.\n */\nexport interface ITileDataVisitor {\n    tile: Tile;\n\n    /**\n     * Should return `true` if the visitor wants to visit the object with the specified\n     * `featureId`. This function is called before the type of the object is even known.\n     */\n    wantsFeature(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the point with the specified\n     * `featureId`.\n     */\n    wantsPoint(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the line with the specified\n     * `featureId`.\n     */\n    wantsLine(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the area object with the specified\n     * `featureId`.\n     */\n    wantsArea(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the object with the specified\n     * `featureId`.\n     */\n    wantsObject3D(featureId: number | undefined): boolean;\n\n    /**\n     * Visits a point object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitPoint(featureId: number | undefined): void;\n\n    /**\n     * Visits a line object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitLine(featureId: number | undefined, lineAccessor: ILineAccessor): void;\n\n    /**\n     * Visit an area object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitArea(featureId: number | undefined): void;\n\n    /**\n     * Visits a 3D object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitObject3D(featureId: number | undefined, object3dAccessor: IObject3dAccessor): void;\n}\n\n/**\n * An interface that provides options for [[TileDataAccessor]].\n */\nexport interface TileDataAccessorOptions {\n    /** Limit to objects that have `featureID`s. */\n    onlyWithFeatureIds?: boolean;\n    /** Sets and overrides `wantPoints`, `wantLines`, `wantAreas`, `wantObject3D`. */\n    wantsAll?: boolean;\n    /** `true` to visit points. */\n    wantsPoints?: boolean;\n    /** `true` to visit lines. */\n    wantsLines?: boolean;\n    /** `true` to visit area objects. */\n    wantsAreas?: boolean;\n    /** `true` to visit general 3D objects. */\n    wantsObject3D?: boolean;\n}\n\n/**\n * An accessor for all geometries in a tile. This class uses a client-provided [[ITileDataVisitor]]\n * to visit all objects, based on filtering options specified by both, the `TileDataAccessor` and\n * the visitor itself.\n */\nexport class TileDataAccessor {\n    private m_wantsPoints = true;\n    private m_wantsLines = true;\n    private m_wantsAreas = true;\n    private m_wantsObject3D = true;\n\n    /**\n     * Constructs a `TileDataAccessor` instance.\n     *\n     * @param tile The tile to access.\n     * @param visitor The visitor.\n     * @param options Options for the tile.\n     */\n    constructor(\n        public tile: Tile,\n        private visitor: ITileDataVisitor,\n        options: TileDataAccessorOptions\n    ) {\n        const wantsAll = options.wantsAll === true;\n        this.m_wantsPoints = wantsAll || !(options.wantsPoints === false);\n        this.m_wantsLines = wantsAll || !(options.wantsLines === false);\n        this.m_wantsAreas = wantsAll || !(options.wantsAreas === false);\n        this.m_wantsObject3D = wantsAll || !(options.wantsObject3D === false);\n    }\n\n    /**\n     * Calls the visitor on all objects in the tile.\n     */\n    visitAll(): void {\n        const objects = this.tile.objects;\n\n        for (const object of objects) {\n            this.visitObject(object);\n        }\n    }\n\n    /**\n     * Visits a single object. This function should normally be called during visiting.\n     *\n     * @param object The object to visit.\n     */\n    protected visitObject(object: THREE.Object3D): void {\n        const featureData: TileFeatureData | undefined =\n            object.userData !== undefined\n                ? (object.userData.feature as TileFeatureData)\n                : undefined;\n\n        // early opt out if there is no feature data, or if the feature data has only a single id\n        // and the visitor wants to ignore that featureId\n        if (\n            featureData === undefined ||\n            (featureData.objInfos !== undefined &&\n                featureData.objInfos.length === 1 &&\n                !this.visitor.wantsFeature(getFeatureId(featureData.objInfos[0])))\n        ) {\n            return;\n        }\n\n        const geometryType = featureData.geometryType;\n        if (geometryType === undefined) {\n            logger.warn(\"#visitObject: visiting object failed, no geometryType\", object);\n            return;\n        }\n\n        assert(featureData.objInfos !== undefined, \"featureData.ids missing\");\n        assert(featureData.starts !== undefined, \"featureData.starts missing\");\n        assert(Array.isArray(featureData.starts), \"featureData.starts is not an array\");\n        if (featureData.objInfos !== undefined && featureData.starts !== undefined) {\n            assert(\n                featureData.objInfos.length === featureData.starts.length,\n                \"featureData.ids and featureData.starts have unequal length\"\n            );\n        }\n\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                if (!this.m_wantsPoints) {\n                    return;\n                }\n                break;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                if (!this.m_wantsLines) {\n                    return;\n                }\n                break;\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                if (!this.m_wantsAreas) {\n                    return;\n                }\n                break;\n            case GeometryType.Object3D:\n                if (!this.m_wantsObject3D) {\n                    return;\n                }\n                break;\n            default:\n                logger.warn(\"#visitObject: invalid geometryType\");\n        }\n\n        if (object.type !== \"Mesh\") {\n            logger.warn(\"#visitObject: visiting object failed, not of type 'Mesh'\", object);\n            return;\n        }\n\n        const mesh = object as THREE.Mesh;\n\n        this.visitMesh(mesh, featureData);\n    }\n\n    /**\n     * Gets the `BufferGeometry` from the specified object. This function requires the\n     * attribute `position` in `BufferGeometry` to be set.\n     *\n     * @param object The object from which to get the geometry.\n     * @returns the geometry of the object, or `undefined`.\n     */\n    protected getBufferGeometry(object: THREE.Mesh): THREE.BufferGeometry | undefined {\n        const geometry = object.geometry;\n\n        if (geometry.type !== \"BufferGeometry\") {\n            logger.warn(\"#visitObject: object does not have BufferGeometry\");\n            return undefined;\n        }\n\n        const bufferGeometry = geometry as THREE.BufferGeometry;\n\n        // we know its a BufferAttribute because it is a BufferGeometry\n        const position: THREE.BufferAttribute = bufferGeometry.getAttribute(\n            \"position\"\n        ) as THREE.BufferAttribute;\n\n        if (!position) {\n            logger.warn(\"#visitLines: BufferGeometry has no position attribute\");\n            return undefined;\n        }\n\n        return bufferGeometry;\n    }\n\n    /**\n     * Obtains an accessor for the nonindexed geometry. This function may return `undefined`\n     * if the accessor is not implemented.\n     *\n     * @param geometryType The type of geometry.\n     * @param object The object for which to access the attributes and geometry.\n     * @param bufferGeometry The object's `BufferGeometry`.\n     * @returns an accessor for a specified object, if available.\n     */\n    protected getGeometryAccessor(\n        geometryType: GeometryType,\n        object: THREE.Mesh,\n        bufferGeometry: THREE.BufferGeometry\n    ): IGeometryAccessor | undefined {\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                return new BufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.Object3D:\n                return new BufferedGeometryObject3dAccessor(object, geometryType, bufferGeometry);\n            default:\n                logger.warn(\"#getGeometryAccessor: invalid geometryType\");\n        }\n        return undefined;\n    }\n\n    /**\n     * Obtains an accessor for the indexed geometry. This function may return `undefined`\n     * if the accessor is not implemented.\n     *\n     * @param geometryType The type of geometry.\n     * @param object The object for which to access the attributes and geometry.\n     * @param bufferGeometry The object's `BufferGeometry`.\n     * @returns an accessor for a specified object, if available.\n     */\n    protected getIndexedGeometryAccessor(\n        geometryType: GeometryType,\n        object: THREE.Mesh,\n        bufferGeometry: THREE.BufferGeometry\n    ): IGeometryAccessor | undefined {\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                return new IndexedBufferedGeometryLineAccessor(\n                    object,\n                    geometryType,\n                    bufferGeometry\n                );\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.Object3D:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            default:\n                logger.warn(\"#getIndexedGeometryAccessor: invalid geometryType\");\n        }\n        return undefined;\n    }\n\n    /**\n     * Visit the object.\n     *\n     * @param meshObject Object of type `Mesh`.\n     * @param featureData Dataset stored along with the object.\n     */\n    protected visitMesh(meshObject: THREE.Mesh, featureData: TileFeatureData): void {\n        const { objInfos, starts } = featureData;\n        const geometryType = featureData.geometryType;\n\n        // make linter happy: we already know that these both are valid\n        if (objInfos === undefined || starts === undefined || geometryType === undefined) {\n            return;\n        }\n\n        let geometryAccessor: IGeometryAccessor | undefined;\n\n        for (let featureIndex = 0; featureIndex < objInfos.length; featureIndex++) {\n            const featureId = getFeatureId(objInfos[featureIndex]);\n\n            if (!this.visitor.wantsFeature(featureId)) {\n                continue;\n            }\n\n            const featureStart = starts[featureIndex];\n            let featureEnd: number = -1;\n\n            // lazy creation of accessor, in case featureId was not wanted...\n            if (geometryAccessor === undefined) {\n                const bufferGeometry = this.getBufferGeometry(meshObject);\n                if (bufferGeometry === undefined) {\n                    continue;\n                }\n\n                if (bufferGeometry.index !== null) {\n                    geometryAccessor = this.getIndexedGeometryAccessor(\n                        geometryType,\n                        meshObject,\n                        bufferGeometry\n                    );\n                } else {\n                    geometryAccessor = this.getGeometryAccessor(\n                        geometryType,\n                        meshObject,\n                        bufferGeometry\n                    );\n                }\n\n                if (geometryAccessor === undefined) {\n                    logger.warn(\"#visitObject: no accessor geometryType\", geometryType);\n                    continue;\n                }\n            }\n\n            featureEnd =\n                featureIndex < starts.length - 1\n                    ? starts[featureIndex + 1]\n                    : geometryAccessor.getCount();\n\n            // setup/update the accessor for the new range of the object\n            geometryAccessor.setRange(featureStart, featureEnd);\n\n            switch (geometryType) {\n                case GeometryType.Point:\n                case GeometryType.Text:\n                    this.visitor.visitPoint(featureId);\n                    break;\n                case GeometryType.SolidLine:\n                case GeometryType.ExtrudedLine:\n                case GeometryType.TextPath:\n                    assert(isLineAccessor(geometryAccessor));\n                    this.visitor.visitLine(featureId, (geometryAccessor as any) as ILineAccessor);\n                    break;\n                case GeometryType.Polygon:\n                case GeometryType.ExtrudedPolygon:\n                    this.visitor.visitArea(featureId);\n                    break;\n                case GeometryType.Object3D:\n                    assert(isObject3dAccessor(geometryAccessor));\n                    this.visitor.visitObject3D(\n                        featureId,\n                        (geometryAccessor as any) as IObject3dAccessor\n                    );\n                    break;\n                default:\n                    logger.warn(\"#visitObject: invalid geometryType\");\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/Lines\";\nexport * from \"./lib/TriangulateLines\";\nexport * from \"./lib/HighPrecisionLines\";\nexport * from \"./lib/HighPrecisionUtils\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Projection } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n// Preallocate temp variables used during line generation.\nconst tmpV = new THREE.Vector3();\nconst tmpNormal = new THREE.Vector3();\nconst tmpTangent0 = new THREE.Vector3();\nconst tmpTangent1 = new THREE.Vector3();\nconst tmpBitangent = new THREE.Vector3();\nconst SEGMENT_OFFSET = 0.1;\n\n/**\n * Describes vertex attribute parameters of interleaved buffer.\n */\ninterface VertexAttributeDescriptor {\n    name: string;\n    itemSize: number;\n    offset: number;\n}\n\ninterface VertexDescriptor {\n    attributes: VertexAttributeDescriptor[];\n    stride: number;\n}\n\n/**\n * Declares all the vertex attributes used for rendering a line using the [[SolidLineMaterial]].\n */\n\n/** Base line vertex attributes. */\nconst LINE_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        // The \"extrusionCoord\" is a vec4 which represents:\n        // xy: Extrusion coordinates\n        // sign(xy): Extrusion direction\n        // z: Line length\n        { name: \"extrusionCoord\", itemSize: 3, offset: 0 },\n        { name: \"position\", itemSize: 3, offset: 3 },\n        { name: \"tangent\", itemSize: 3, offset: 6 },\n        { name: \"bitangent\", itemSize: 4, offset: 9 }\n    ],\n    stride: 13\n};\n\n/** Optional normal and uv coordinates. */\nconst NORMAL_UV_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        { name: \"uv\", itemSize: 2, offset: LINE_VERTEX_ATTRIBUTES.stride },\n        { name: \"normal\", itemSize: 3, offset: LINE_VERTEX_ATTRIBUTES.stride + 2 }\n    ],\n    stride: 5\n};\n\n/** Base line vertex attributes plus normals and uv coordinates. */\nconst LINE_VERTEX_ATTRIBUTES_NUV: VertexDescriptor = {\n    attributes: [...LINE_VERTEX_ATTRIBUTES.attributes, ...NORMAL_UV_VERTEX_ATTRIBUTES.attributes],\n    stride: LINE_VERTEX_ATTRIBUTES.stride + NORMAL_UV_VERTEX_ATTRIBUTES.stride\n};\n\n/**\n * Declares all the vertex attributes used for rendering a line using the\n * [[HighPrecisionLineMaterial]].\n */\nconst HP_LINE_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        { name: \"extrusionCoord\", itemSize: 2, offset: 0 },\n        { name: \"position\", itemSize: 3, offset: 2 },\n        { name: \"positionLow\", itemSize: 3, offset: 5 },\n        { name: \"tangent\", itemSize: 3, offset: 8 },\n        { name: \"bitangent\", itemSize: 4, offset: 11 }\n    ],\n    stride: 15\n};\n\n/** High precision line vertex attributes plus normals and uv coordinates. */\nconst HP_LINE_VERTEX_ATTRIBUTES_NUV: VertexDescriptor = {\n    attributes: [\n        ...HP_LINE_VERTEX_ATTRIBUTES.attributes,\n        ...NORMAL_UV_VERTEX_ATTRIBUTES.attributes\n    ],\n    stride: HP_LINE_VERTEX_ATTRIBUTES.stride + NORMAL_UV_VERTEX_ATTRIBUTES.stride\n};\n\n/**\n * Class that holds the vertex and index attributes for a [[Lines]] object.\n */\nexport class LineGeometry {\n    vertices: number[] = [];\n    vertexColors: number[] = [];\n    indices: number[] = [];\n}\n\nfunction getVertexDescriptor(hasNormalsAndUvs: boolean, highPrecision: boolean): VertexDescriptor {\n    if (highPrecision) {\n        return hasNormalsAndUvs ? HP_LINE_VERTEX_ATTRIBUTES_NUV : HP_LINE_VERTEX_ATTRIBUTES;\n    } else {\n        return hasNormalsAndUvs ? LINE_VERTEX_ATTRIBUTES_NUV : LINE_VERTEX_ATTRIBUTES;\n    }\n}\n\n/**\n * Creates a [[LineGeometry]] object out of a polyline.\n *\n * @param center Center of the polyline.\n * @param polyline Array of `numbers` describing a polyline.\n * @param offsets Array of `numbers` representing line segment offsets.\n * @param uvs Array of `numbers` representing texture coordinates.\n * @param colors Array of `numbers` describing a polyline's colors.\n * @param geometry [[LineGeometry]] object used to store the vertex and index attributes.\n * @param highPrecision If `true` will create high-precision vertex information.\n */\nexport function createLineGeometry(\n    center: THREE.Vector3,\n    polyline: ArrayLike<number>,\n    projection: Projection,\n    offsets?: ArrayLike<number>,\n    uvs?: ArrayLike<number>,\n    colors?: ArrayLike<number>,\n    geometry = new LineGeometry(),\n    highPrecision: boolean = false\n): LineGeometry {\n    if (polyline.length === 0) {\n        return geometry;\n    }\n\n    const stride = getVertexDescriptor(uvs !== undefined, highPrecision).stride;\n\n    const pointCount = polyline.length / 3;\n    const segments = new Array<number>(pointCount);\n    const tangents = new Array<number>(polyline.length - 3);\n    const baseVertex = geometry.vertices.length / stride;\n\n    const hasSegmentOffsets = offsets !== undefined && offsets.length > 0;\n    const hasTexCoords = uvs !== undefined && uvs.length > 0;\n    const vertexColors = colors !== undefined && colors.length && polyline.length;\n\n    assert(!hasSegmentOffsets || offsets!.length === pointCount);\n    assert(!hasTexCoords || uvs!.length / 2 === pointCount);\n    assert(!vertexColors || colors!.length === polyline.length);\n\n    // Compute segments and tangents.\n    let sum = SEGMENT_OFFSET;\n    segments[0] = sum;\n    for (let i = 0; i < pointCount - 1; ++i) {\n        let sqrLength = 0;\n        for (let j = 0; j < 3; ++j) {\n            const d = polyline[(i + 1) * 3 + j] - polyline[i * 3 + j];\n            tangents[i * 3 + j] = d;\n            sqrLength += d * d;\n        }\n        const len = Math.sqrt(sqrLength);\n        sum = sum + len;\n        segments[i + 1] = sum;\n    }\n\n    const lineCoverage = hasSegmentOffsets\n        ? Math.abs(offsets![offsets!.length - 1] - offsets![0])\n        : 1.0;\n    const lineLength = segments[segments.length - 1] / lineCoverage;\n\n    // Override the segments if offsets are explicitly provided.\n    if (hasSegmentOffsets) {\n        for (let i = 0; i < pointCount; ++i) {\n            segments[i] = offsets![i] * lineLength + SEGMENT_OFFSET;\n        }\n    }\n\n    // Check if we're working with a closed line.\n    let isClosed = true;\n    for (let j = 0; j < 3; ++j) {\n        isClosed = isClosed && polyline[j] === polyline[polyline.length - 3 + j];\n    }\n\n    const tmpVertices: number[] = [];\n\n    const addVertexPair = (\n        i: number,\n        T1: number,\n        T2: number,\n        segment: number,\n        extrusionCoord: number\n    ) => {\n        tmpVertices.length = 0;\n\n        // Store the segment and extrusionCoord attributes.\n        geometry.vertices.push(segment, extrusionCoord * -1, lineLength);\n        tmpVertices.push(segment, extrusionCoord * 1, lineLength);\n\n        // Store the position attribute (component-dependant).\n        for (let j = 0; j < 3; ++j) {\n            if (!highPrecision) {\n                geometry.vertices.push(polyline[i * 3 + j]);\n                tmpVertices.push(polyline[i * 3 + j]);\n            } else {\n                const highComp = Math.fround(polyline[i * 3 + j]);\n                const lowComp = polyline[i * 3 + j] - highComp;\n                geometry.vertices.push(highComp, lowComp);\n                tmpVertices.push(highComp, lowComp);\n            }\n            tmpNormal.setComponent(j, polyline[i * 3 + j]);\n        }\n\n        // Store the bitangent attribute (component-dependant).\n        for (let j = 0; j < 3; ++j) {\n            tmpTangent0.setComponent(j, tangents[T1 + j]);\n            tmpTangent1.setComponent(j, tangents[T2 + j]);\n        }\n        tmpTangent0.normalize();\n        geometry.vertices.push(tmpTangent0.x, tmpTangent0.y, tmpTangent0.z);\n        tmpVertices.push(tmpTangent0.x, tmpTangent0.y, tmpTangent0.z);\n        tmpNormal.add(center); // tmpNormal contains world position\n        projection.surfaceNormal(tmpNormal, tmpNormal);\n        const angle = computeBitangent(\n            tmpNormal,\n            tmpTangent0,\n            tmpTangent1.normalize(),\n            tmpBitangent\n        );\n        geometry.vertices.push(tmpBitangent.x, tmpBitangent.y, tmpBitangent.z, angle);\n        tmpVertices.push(tmpBitangent.x, tmpBitangent.y, tmpBitangent.z, angle);\n\n        if (hasTexCoords) {\n            // uvs\n            geometry.vertices.push(uvs![i * 2], uvs![i * 2 + 1]);\n            tmpVertices.push(uvs![i * 2], uvs![i * 2 + 1]);\n            // normals\n            geometry.vertices.push(tmpNormal.x, tmpNormal.y, tmpNormal.z);\n            tmpVertices.push(tmpNormal.x, tmpNormal.y, tmpNormal.z);\n        }\n\n        geometry.vertices.push(...tmpVertices);\n\n        // Add vertex colors (if supplied).\n        if (vertexColors) {\n            geometry.vertexColors.push(colors![i * 3], colors![i * 3 + 1], colors![i * 3 + 2]);\n            geometry.vertexColors.push(colors![i * 3], colors![i * 3 + 1], colors![i * 3 + 2]);\n        }\n    };\n\n    for (let i = 0; i < pointCount; ++i) {\n        // Retrieve the per-point tangents.\n        const T1 = isClosed && i === 0 ? tangents.length - 3 : Math.max(0, i - 1) * 3;\n        const T2 = isClosed && i === pointCount - 1 ? 0 : Math.min(i * 3, tangents.length - 3);\n\n        // Process v0 and v1.\n        if (i > 0) {\n            addVertexPair(i, T1, T2, segments[i - 1], segments[i]);\n        }\n\n        // Process v2 and v3.\n        if (i + 1 < pointCount) {\n            addVertexPair(\n                i,\n                T1,\n                T2,\n                segments[Math.min(i, segments.length - 1)] * -1,\n                segments[Math.min(i + 1, segments.length - 1)]\n            );\n        }\n    }\n\n    // Store the triangle indices in the final index buffer.\n    for (let i = 0; i < pointCount - 1; ++i) {\n        const base = baseVertex + i * 4;\n        geometry.indices.push(base, base + 1, base + 2, base + 2, base + 1, base + 3);\n    }\n\n    return geometry;\n}\n\n/**\n * Creates a [[LineGeometry]] object out of a polyline.\n *\n * @param polyline Array of `numbers` describing a polyline.\n * @param colors Array of `numbers` describing a polyline's colors.\n * @param geometry [[LineGeometry]] object used to store the vertex and index attributes.\n */\nexport function createSimpleLineGeometry(\n    polyline: ArrayLike<number>,\n    colors?: ArrayLike<number>,\n    geometry = new LineGeometry()\n): LineGeometry {\n    if (polyline.length === 0) {\n        return geometry;\n    }\n\n    const pointCount = polyline.length / 3;\n    let index = geometry.vertices.length / 3;\n\n    const vertexColors = colors !== undefined && colors.length && polyline.length;\n\n    for (let i = 0; i < pointCount; ++i, index++) {\n        if (i > 0) {\n            geometry.indices.push(index);\n        }\n        if (i < pointCount - 1) {\n            geometry.indices.push(index);\n        }\n        for (let j = 0; j < 3; ++j) {\n            geometry.vertices.push(polyline[i * 3 + j]);\n            if (vertexColors) {\n                geometry.vertexColors.push(colors![i * 3 + j]);\n            }\n        }\n    }\n\n    return geometry;\n}\n\n/**\n * Class used to render groups (or batches) of width-variable lines (in the same tile).\n */\nexport class LineGroup {\n    /**\n     * Adds all the attribute data needed to a [[BufferGeometry]] object for rendering `Lines`.\n     *\n     * @param vertices Array of vertex attributes.\n     * @param colors Array of vertex colors.\n     * @param indices Array of vertex indices.\n     * @param geometry [[BufferGeometry]] object which will store all the `Lines` attribute data.\n     * @param hasNormalsAnUvs Whether vertices have normal and uv coordinates as attributes.\n     * @param highPrecision If `true` will create high-precision vertex information.\n     * @param isSimple `true` to create simple (nonsolid, nonextruded) lines. Defaults to `false`.\n     */\n    static createGeometry(\n        vertices: ArrayLike<number>,\n        colors: ArrayLike<number>,\n        indices: ArrayLike<number>,\n        geometry: THREE.BufferGeometry,\n        hasNormalsAndUvs: boolean = false,\n        highPrecision = false,\n        isSimple = false\n    ): THREE.BufferGeometry {\n        if (isSimple) {\n            geometry.setAttribute(\n                \"position\",\n                new THREE.BufferAttribute(new Float32Array(vertices), 3)\n            );\n            if (colors.length === vertices.length) {\n                geometry.setAttribute(\n                    \"color\",\n                    new THREE.BufferAttribute(new Float32Array(colors), 3)\n                );\n            }\n            geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\n            return geometry;\n        } else {\n            const vertexDescriptor = getVertexDescriptor(hasNormalsAndUvs, highPrecision);\n\n            const buffer = new THREE.InterleavedBuffer(\n                new Float32Array(vertices),\n                vertexDescriptor.stride\n            );\n            vertexDescriptor.attributes.forEach(descr => {\n                const attribute = new THREE.InterleavedBufferAttribute(\n                    buffer,\n                    descr.itemSize,\n                    descr.offset,\n                    false\n                );\n                geometry.setAttribute(descr.name, attribute);\n            });\n            if (colors.length === vertices.length) {\n                geometry.setAttribute(\n                    \"color\",\n                    new THREE.BufferAttribute(new Float32Array(colors), 3)\n                );\n            }\n\n            geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\n\n            return geometry;\n        }\n    }\n\n    private readonly m_geometry: LineGeometry;\n\n    constructor(\n        readonly hasNormalsAndUvs: boolean = false,\n        readonly highPrecision: boolean = false,\n        readonly isSimple: boolean = false\n    ) {\n        this.m_geometry = new LineGeometry();\n    }\n\n    /**\n     * Clears the list of line strips.\n     */\n    clear() {\n        this.m_geometry.vertices = [];\n        this.m_geometry.vertexColors = [];\n        this.m_geometry.indices = [];\n    }\n\n    /**\n     * Add the given points to this line group.\n     *\n     * @param center World center of the provided points.\n     * @param points Sequence of (x,y,z) coordinates.\n     * @param offsets Sequence of line segment offsets.\n     * @param uvs Sequence of (u,v) texture coordinates.\n     * @param colors Sequence of (r,g,b) color components.\n     */\n    add(\n        center: THREE.Vector3,\n        points: ArrayLike<number>,\n        projection: Projection,\n        offsets?: ArrayLike<number>,\n        uvs?: ArrayLike<number>,\n        colors?: ArrayLike<number>\n    ): this {\n        if (!this.isSimple) {\n            assert(!this.hasNormalsAndUvs || uvs !== undefined);\n            createLineGeometry(\n                center,\n                points,\n                projection,\n                offsets,\n                uvs,\n                colors,\n                this.m_geometry,\n                this.highPrecision\n            );\n        } else {\n            createSimpleLineGeometry(points, colors, this.m_geometry);\n        }\n        return this;\n    }\n\n    /**\n     * Returns the list of vertices.\n     */\n    get vertices(): number[] {\n        return this.m_geometry.vertices;\n    }\n\n    /**\n     * Returns the list of vertex colors.\n     */\n    get vertexColors(): number[] {\n        return this.m_geometry.vertexColors;\n    }\n\n    /**\n     * Returns the list of indices.\n     */\n    get indices(): number[] {\n        return this.m_geometry.indices;\n    }\n\n    /**\n     * Returns the list of [[VertexAttributeDescriptor]]s.\n     */\n    get vertexAttributes(): VertexAttributeDescriptor[] {\n        return getVertexDescriptor(this.hasNormalsAndUvs, this.highPrecision).attributes;\n    }\n\n    /**\n     * Returns the vertex attribute stride.\n     */\n    get stride(): number {\n        return getVertexDescriptor(this.hasNormalsAndUvs, this.highPrecision).stride;\n    }\n\n    /**\n     * Creates a three.js geometry.\n     */\n    createGeometry(geometry?: THREE.BufferGeometry): THREE.BufferGeometry {\n        if (geometry === undefined) {\n            geometry = new THREE.BufferGeometry();\n        }\n        return LineGroup.createGeometry(\n            this.m_geometry.vertices,\n            this.m_geometry.vertexColors,\n            this.m_geometry.indices,\n            geometry,\n            this.hasNormalsAndUvs,\n            this.highPrecision\n        );\n    }\n}\n\nfunction computeBitangent(\n    n: THREE.Vector3,\n    t0: THREE.Vector3,\n    t1: THREE.Vector3,\n    bt: THREE.Vector3\n): number {\n    let angle = 0;\n    if (!t0.equals(t1)) {\n        angle = Math.acos(t0.dot(t1)) * Math.sign(n.dot(tmpV.copy(t0).cross(t1)));\n        if (Number.isNaN(angle)) {\n            angle = 0;\n        }\n    }\n    bt.copy(t0)\n        .add(t1)\n        .normalize()\n        .cross(n)\n        .normalize();\n    return angle;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { HighPrecisionPointMaterial } from \"@here/harp-materials\";\n\nimport { HighPrecisionObject } from \"./HighPrecisionLines\";\nimport { HighPrecisionUtils } from \"./HighPrecisionUtils\";\n\n/**\n * Class used to render high-precision points.\n */\nexport class HighPrecisionPoints extends THREE.Points implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Number of dimensions this `HighPrecisionObject` is specified in (2D/3D).\n     */\n    dimensionality?: number;\n\n    /**\n     * Creates a `HighPrecisionPoints` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered point.\n     * @param opacity Opacity of the rendered point.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionPointMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        if (material === undefined) {\n            material = new HighPrecisionPointMaterial({\n                color: color ? color : HighPrecisionPointMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : 1\n            });\n        }\n\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    /**\n     * Clears the [[BufferGeometry]] used to render this point.\n     */\n    clearGeometry(): THREE.BufferGeometry {\n        return (this.geometry = new THREE.BufferGeometry());\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        if (\n            (this.material as any).isHighPrecisionPointsMaterial &&\n            this.dimensionality !== undefined\n        ) {\n            (this.material as any).setDimensionality(this.dimensionality);\n        }\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/OmvDataFilter\";\nexport * from \"./lib/OmvDataSource\";\nexport * from \"./lib/OmvDecoderDefs\";\nexport * from \"./lib/OmvTile\";\nexport * from \"./lib/OmvDebugLabelsTile\";\nexport * from \"./lib/OmvRestClient\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { GeometryKind, GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { MapEnv } from \"@here/harp-datasource-protocol/index-decoder\";\nimport {\n    OmvFeatureFilterDescription,\n    OmvFilterDescription,\n    OmvFilterFeatureAttribute,\n    OmvFilterString,\n    OmvGeometryType,\n    OmvLayerFilterDescription\n} from \"./OmvDecoderDefs\";\n\n/**\n * The `OmvFeatureFilter` is designed to work in an `OmvVisitor`/`visitOmv` combination (for\n * example, `OmvDecoder`). Returning `false` from any of the calls terminates processing of that\n * layer or feature.\n *\n * The `OmvFeatureFilter` is an \"early-opt-out\" filter, which cannot filter individual features,\n * because at that point the features are not really decoded. Use the [[OmvFeatureModifier]] to\n * filter for individual features.\n */\nexport interface OmvFeatureFilter {\n    /**\n     * Returns `true` if the filter contains rules for specific kinds.\n     */\n    hasKindFilter: boolean;\n\n    /**\n     * Return `false` if the layer should not be processed.\n     *\n     * @param layer Current layer.\n     * @param level Level of tile.\n     */\n    wantsLayer(layer: string, level: number): boolean;\n\n    /**\n     * Return `false` if the point feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if the line feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if the polygon feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if kind of object is not enabled and the geometry should not be created.\n     *\n     * @param {(string | string[])} kind Tag \"kind\" of the tag.\n     * @returns {boolean}\n     */\n    wantsKind(kind: string | string[]): boolean;\n}\n\n/**\n * The `OmvFeatureModifier` can be used to filter individual features. It gets passed in the [[Env]]\n * of the feature, which contains all the values that can be searched for in a style. If a filter\n * function returns false, the feature is ignored, and no geometry is being created.\n *\n * In addition to pure filtering, the `OmvFeatureModifier` can also modify the [[Env]] of the\n * feature, or even add new properties to the feature, for example, traffic states. The\n * `OmvFeatureModifier` is executed before the styles are selected, so the geometry is created with\n * the modified feature properties.\n */\nexport interface OmvFeatureModifier {\n    /**\n     * Check if the point feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of point feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessPointFeature(layer: string, env: MapEnv, level: number): boolean;\n\n    /**\n     * Check if the line feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of line feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessLineFeature(layer: string, env: MapEnv, level: number): boolean;\n\n    /**\n     * Check if the polygon feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of polygon feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessPolygonFeature(layer: string, env: MapEnv, level: number): boolean;\n}\n\n/**\n * Builds an `OmvFilterDescription` (internal type) that specifies an [[OmvFeatureFilter]] as well\n * as an [[OmvFeatureModifier]].\n *\n */\nexport class OmvFeatureFilterDescriptionBuilder {\n    private m_processLayersDefault: boolean = true;\n    private m_processPointsDefault: boolean = true;\n    private m_processLinesDefault: boolean = true;\n    private m_processPolygonsDefault: boolean = true;\n\n    private readonly m_layersToProcess = new Array<OmvLayerFilterDescription>();\n    private readonly m_layersToIgnore = new Array<OmvLayerFilterDescription>();\n    private readonly m_pointsToProcess = new Array<OmvFilterDescription>();\n    private readonly m_ignoredPoints = new Array<OmvFilterDescription>();\n    private readonly m_linesToProcess = new Array<OmvFilterDescription>();\n    private readonly m_linesToIgnore = new Array<OmvFilterDescription>();\n    private readonly m_polygonsToProcess = new Array<OmvFilterDescription>();\n    private readonly m_polygonsToIgnore = new Array<OmvFilterDescription>();\n\n    private m_kindsToProcess: string[] = [];\n    private m_kindsToIgnore: string[] = [];\n\n    /**\n     * Builds an `OmvFilterDescription` (internal type) that specifies an [[OmvFeatureFilter]] as\n     * well as an [[OmvFeatureModifier]].\n     *\n     * @param processLayersDefault If `true`, all unspecified layers will be processed. If `false`,\n     * all unspecified layers will be ignored.\n     * @param processPointsDefault If `true`, all unspecified point features will be processed. If\n     * `false`, all unspecified point features will be ignored.\n     * @param processLinesDefault If `true`, all unspecified line features will be processed. If\n     * `false`, all unspecified line features will be ignored.\n     * @param processPolygonsDefault If `true`, all unspecified polygon features will be processed.\n     * If `false`, all unspecified polygon features will be ignored.\n     */\n    constructor(\n        options?: OmvFeatureFilterDescriptionBuilder.OmvFeatureFilterDescriptionBuilderOptions\n    ) {\n        if (options) {\n            this.m_processLayersDefault =\n                options.processLayersDefault !== undefined ? options.processLayersDefault : true;\n            this.m_processPointsDefault =\n                options.processPointsDefault !== undefined ? options.processPointsDefault : true;\n            this.m_processLinesDefault =\n                options.processLinesDefault !== undefined ? options.processLinesDefault : true;\n            this.m_processPolygonsDefault =\n                options.processPolygonsDefault !== undefined\n                    ? options.processPolygonsDefault\n                    : true;\n        }\n    }\n\n    /**\n     * Add a layer that should be processed.\n     *\n     * @param layer Layer name to be matched.\n     * @param match Match condition.\n     */\n    processLayer(\n        layer: string,\n        match = OmvFilterString.StringMatch.Match,\n        minLevel: number = 0,\n        maxLevel: number = Infinity\n    ) {\n        this.m_layersToProcess.push({\n            name: { value: layer, match },\n            minLevel,\n            maxLevel\n        });\n    }\n\n    /**\n     * Add a layer that should be ignored.\n     *\n     * @param layer Layer name to be matched.\n     * @param match Match condition.\n     */\n    ignoreLayer(\n        layer: string,\n        match = OmvFilterString.StringMatch.Match,\n        minLevel: number = 0,\n        maxLevel: number = Infinity\n    ) {\n        this.m_layersToIgnore.push({\n            name: { value: layer, match },\n            minLevel,\n            maxLevel\n        });\n    }\n\n    /**\n     * Add a valid point feature.\n     *\n     * @param options Feature options.\n     */\n    processPoint(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_pointsToProcess, options);\n    }\n\n    /**\n     * Add valid point features.\n     *\n     * @param options Multi feature options.\n     */\n    processPoints(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_pointsToProcess, options);\n    }\n\n    /**\n     * Add a point feature that should be ignored.\n     *\n     * @param options Feature options.\n     */\n    ignorePoint(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_ignoredPoints, options);\n    }\n\n    /**\n     * Add point features that should be ignored.\n     *\n     * @param options Multi feature options.\n     */\n    ignorePoints(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_ignoredPoints, options);\n    }\n\n    /**\n     * Add a valid line feature.\n     *\n     * @param options Feature options.\n     */\n    processLine(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_linesToProcess, options);\n    }\n\n    /**\n     * Add valid line features.\n     *\n     * @param options Multi feature options.\n     */\n    processLines(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_linesToProcess, options);\n    }\n\n    /**\n     * Ignore a line feature.\n     *\n     * @param options Feature options.\n     */\n    ignoreLine(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_linesToIgnore, options);\n    }\n\n    /**\n     * Ignore line features.\n     *\n     * @param options Multi feature options.\n     */\n    ignoreLines(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_linesToIgnore, options);\n    }\n\n    /**\n     * Add a valid polygon feature.\n     *\n     * @param options Feature options.\n     */\n    processPolygon(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_polygonsToProcess, options);\n    }\n\n    /**\n     * Add valid polygon features.\n     *\n     * @param options Multi feature options.\n     */\n    processPolygons(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_polygonsToProcess, options);\n    }\n\n    /**\n     * Ignore a valid polygon feature.\n     *\n     * @param options Feature options.\n     */\n    ignorePolygon(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_polygonsToIgnore, options);\n    }\n\n    /**\n     * Ignore polygon features.\n     *\n     * @param options Multi feature options.\n     */\n    ignorePolygons(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_polygonsToIgnore, options);\n    }\n\n    /**\n     * Add all the specified strings as \"enabledKinds\".\n     *\n     * @param {string[]} enabledKinds List of kinds that should be generated.\n     */\n    processKinds(enabledKinds: string[]) {\n        this.m_kindsToProcess = this.m_kindsToProcess.concat(enabledKinds);\n    }\n\n    /**\n     * Add all the specified strings as \"disabledKinds\".\n     *\n     * @param {string[]} disabledKinds List of kinds that should _not_ be generated.\n     */\n    ignoreKinds(disabledKinds: string[]) {\n        this.m_kindsToIgnore = this.m_kindsToIgnore.concat(disabledKinds);\n    }\n\n    /**\n     * Create a filter description that can be passed as an option to the [[OmvDataSource]].\n     */\n    createDescription(): OmvFeatureFilterDescription {\n        return {\n            processLayersDefault: this.m_processLayersDefault,\n            processPointsDefault: this.m_processPointsDefault,\n            processLinesDefault: this.m_processLinesDefault,\n            processPolygonsDefault: this.m_processPolygonsDefault,\n\n            layersToProcess: this.m_layersToProcess,\n            layersToIgnore: this.m_layersToIgnore,\n            pointsToProcess: this.m_pointsToProcess,\n            pointsToIgnore: this.m_ignoredPoints,\n            linesToProcess: this.m_linesToProcess,\n            linesToIgnore: this.m_linesToIgnore,\n            polygonsToProcess: this.m_polygonsToProcess,\n            polygonsToIgnore: this.m_polygonsToIgnore,\n\n            kindsToProcess: this.m_kindsToProcess,\n            kindsToIgnore: this.m_kindsToIgnore\n        };\n    }\n\n    private addItem(\n        items: OmvFilterDescription[],\n        options: OmvFeatureFilterDescriptionBuilder.FeatureOption\n    ) {\n        if (options.minLevel === undefined || isNaN(options.minLevel)) {\n            options.minLevel = 0;\n        }\n        if (options.maxLevel === undefined || isNaN(options.maxLevel)) {\n            options.maxLevel = Infinity;\n        }\n\n        const item: OmvFilterDescription = {\n            layerName: {\n                value: options.layer,\n                match:\n                    options.matchLayer === undefined\n                        ? OmvFilterString.StringMatch.Match\n                        : options.matchLayer\n            },\n            geometryTypes:\n                options.geomType !== undefined\n                    ? Array.isArray(options.geomType)\n                        ? options.geomType\n                        : [options.geomType]\n                    : undefined,\n            classes: [\n                {\n                    value: options.featureClass,\n                    match:\n                        options.matchClass === undefined\n                            ? OmvFilterString.StringMatch.Match\n                            : options.matchClass\n                }\n            ],\n            minLevel: options.minLevel,\n            maxLevel: options.maxLevel,\n            featureAttribute: options.featureAttribute\n        };\n\n        items.push(item);\n    }\n\n    private addItems(\n        items: OmvFilterDescription[],\n        options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption\n    ) {\n        if (options.minLevel === undefined || isNaN(options.minLevel)) {\n            options.minLevel = 0;\n        }\n        if (options.maxLevel === undefined || isNaN(options.maxLevel)) {\n            options.maxLevel = Infinity;\n        }\n\n        const item: OmvFilterDescription = {\n            layerName: {\n                value: options.layer,\n                match:\n                    options.matchLayer === undefined\n                        ? OmvFilterString.StringMatch.Match\n                        : options.matchLayer\n            },\n            geometryTypes:\n                options.geomTypes !== undefined\n                    ? Array.isArray(options.geomTypes)\n                        ? options.geomTypes\n                        : [options.geomTypes]\n                    : undefined,\n            classes: options.featureClasses,\n            minLevel: options.minLevel,\n            maxLevel: options.maxLevel,\n            featureAttribute: options.featureAttribute\n        };\n\n        items.push(item);\n    }\n}\n\nexport namespace OmvFeatureFilterDescriptionBuilder {\n    /**\n     * Options for `OmvFeatureFilterDescriptionBuilder`.\n     */\n    export interface OmvFeatureFilterDescriptionBuilderOptions {\n        /**\n         * If `true`, all unspecified layers will be processed. If `false`, all unspecified layers\n         * will be ignored.\n         */\n        processLayersDefault?: boolean;\n        /**\n         * If `true`, all unspecified point features will be processed. If `false`, all unspecified\n         * point features will be ignored.\n         */\n        processPointsDefault?: boolean;\n        /**\n         * If `true`, all unspecified line features will be processed. If `false`, all unspecified\n         * line\n         * features will be ignored.\n         */\n        processLinesDefault?: boolean;\n        /**\n         * If `true`, all unspecified polygon features will be processed. If `false`, all\n         * unspecified polygon features will be ignored.\n         */\n        processPolygonsDefault?: boolean;\n    }\n\n    /**\n     * Description of a single feature.\n     */\n    export interface FeatureOption {\n        /**\n         * Layer name to be matched.\n         */\n        layer: string;\n        /**\n         * Optional geometry type to be limited to. If specified, but does not match, the feature is\n         * ignored.\n         */\n        geomType: OmvGeometryType | OmvGeometryType[] | undefined;\n        /**\n         * Optional class to match. If specified, but does not match, the feature is ignored.\n         */\n        featureClass: string;\n        /**\n         * Match condition for the layer name.\n         */\n        matchLayer?: OmvFilterString.StringMatch;\n        /**\n         * Match condition for `featureClass`.\n         */\n        matchClass?: OmvFilterString.StringMatch;\n        /**\n         * Minimum tile level to match.\n         */\n        minLevel?: number;\n        /**\n         * Maximum tile level to match.\n         */\n        maxLevel?: number;\n        /**\n         * Feature attribute to match.\n         */\n        featureAttribute?: OmvFilterFeatureAttribute;\n    }\n\n    /**\n     * Description for multiple features.\n     */\n    export interface MultiFeatureOption {\n        /**\n         * Layer name to be matched.\n         */\n        layer: string;\n        /**\n         * Optional geometry type to be limited to. If specified, but does not match, the feature is\n         * ignored.\n         */\n        geomTypes?: OmvGeometryType | OmvGeometryType[] | undefined;\n        /**\n         * Optional classes to match. If specified, but does not match, the feature is ignored.\n         */\n        featureClasses?: OmvFilterString[];\n        /**\n         * Match condition for the layer name.\n         */\n        matchLayer?: OmvFilterString.StringMatch;\n        /**\n         * Minimum tile level to match.\n         */\n        minLevel?: number;\n        /**\n         * Maximum tile level to match.\n         */\n        maxLevel?: number;\n        /**\n         * Feature attribute to match.\n         */\n        featureAttribute?: OmvFilterFeatureAttribute;\n    }\n}\n\n/**\n * `OmvFeatureFilter` implementation that uses a `OmvFeatureFilterDescription` to filter `TileData`\n * features before they are completely decoded.\n *\n * @hidden\n */\nexport class OmvGenericFeatureFilter implements OmvFeatureFilter {\n    private static matchLayer(\n        layer: string,\n        layerItems: OmvLayerFilterDescription[],\n        level: number\n    ): boolean {\n        for (const layerItem of layerItems) {\n            if (level < layerItem.minLevel || level > layerItem.maxLevel) {\n                continue;\n            }\n\n            if (OmvFilterString.matchString(layer, layerItem.name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private disabledKinds: GeometryKindSet | undefined;\n    private enabledKinds: GeometryKindSet | undefined;\n\n    constructor(private description: OmvFeatureFilterDescription) {\n        if (this.description.kindsToProcess.length > 0) {\n            this.enabledKinds = new GeometryKindSet(\n                this.description.kindsToProcess as GeometryKind[]\n            );\n        }\n        if (this.description.kindsToIgnore.length > 0) {\n            this.disabledKinds = new GeometryKindSet(\n                this.description.kindsToIgnore as GeometryKind[]\n            );\n        }\n    }\n\n    wantsLayer(layer: string, level: number): boolean {\n        if (OmvGenericFeatureFilter.matchLayer(layer, this.description.layersToProcess, level)) {\n            return true;\n        }\n\n        if (OmvGenericFeatureFilter.matchLayer(layer, this.description.layersToIgnore, level)) {\n            return false;\n        }\n\n        return this.description.processLayersDefault;\n    }\n\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.pointsToProcess,\n            this.description.pointsToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processPointsDefault\n        );\n    }\n\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.linesToProcess,\n            this.description.linesToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processLinesDefault\n        );\n    }\n\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.polygonsToProcess,\n            this.description.polygonsToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processPolygonsDefault\n        );\n    }\n\n    wantsKind(kind: string | string[]): boolean {\n        // undefined -> no way to filter\n        if (kind === undefined) {\n            return true;\n        }\n\n        return (\n            !(\n                this.disabledKinds !== undefined &&\n                this.disabledKinds.hasOrIntersects(kind as GeometryKind)\n            ) ||\n            (this.enabledKinds !== undefined &&\n                this.enabledKinds.hasOrIntersects(kind as GeometryKind))\n        );\n    }\n\n    get hasKindFilter(): boolean {\n        return this.enabledKinds !== undefined || this.disabledKinds !== undefined;\n    }\n\n    private wantsFeature(\n        itemsToProcess: OmvFilterDescription[],\n        itemsToIgnore: OmvFilterDescription[],\n        layer: string,\n        geometryType: OmvGeometryType,\n        level: number,\n        defaultResult: boolean\n    ): boolean {\n        for (const item of itemsToProcess) {\n            if (level < item.minLevel || level > item.maxLevel) {\n                continue;\n            }\n\n            if (!OmvFilterString.matchString(layer, item.layerName)) {\n                // this rule is not for this layer\n                continue;\n            }\n\n            if (item.geometryTypes !== undefined && item.geometryTypes.indexOf(geometryType) >= 0) {\n                return true;\n            }\n        }\n\n        for (const item of itemsToIgnore) {\n            if (!OmvFilterString.matchString(layer, item.layerName)) {\n                // this rule is not for this layer\n                continue;\n            }\n\n            if (item.geometryTypes !== undefined && item.geometryTypes.indexOf(geometryType) >= 0) {\n                return false;\n            }\n        }\n\n        return defaultResult;\n    }\n}\n\n/**\n * An [[OmvFeatureFilter]] implementation that delegates all filter decision\n * returning `true` for any predicate if all delegates return `true`.\n */\nexport class ComposedDataFilter implements OmvFeatureFilter {\n    constructor(readonly filters: OmvFeatureFilter[]) {}\n\n    get hasKindFilter() {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.hasKindFilter,\n            true\n        );\n    }\n\n    wantsLayer(layer: string, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsLayer(layer, level),\n            true\n        );\n    }\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsPointFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsLineFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsPolygonFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsKind(kind: string | string[]): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsKind(kind),\n            true\n        );\n    }\n}\n/**\n * `OmvFeatureModifier` implementation that uses a `OmvFeatureFilterDescription` to filter\n * `TileData` features before they are completely decoded.\n *\n * @hidden\n */\nexport class OmvGenericFeatureModifier implements OmvFeatureModifier {\n    static matchItems(\n        layerName: string,\n        featureClass: string,\n        items: OmvFilterDescription[]\n    ): boolean {\n        for (const item of items) {\n            if (item.classes !== undefined) {\n                if (!OmvFilterString.matchString(layerName, item.layerName)) {\n                    continue;\n                }\n                for (const matchClass of item.classes) {\n                    if (OmvFilterString.matchString(featureClass, matchClass)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    static matchAttribute(layerName: string, env: MapEnv, items: OmvFilterDescription[]): boolean {\n        for (const item of items) {\n            if (item.featureAttribute !== undefined) {\n                if (\n                    OmvFilterString.matchString(layerName, item.layerName) &&\n                    env.lookup(item.featureAttribute.key) === item.featureAttribute.value\n                ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    constructor(private description: OmvFeatureFilterDescription) {}\n\n    doProcessPointFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.pointsToProcess,\n            this.description.pointsToIgnore,\n            layer,\n            env,\n            this.description.processPointsDefault\n        );\n    }\n\n    doProcessLineFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.linesToProcess,\n            this.description.linesToIgnore,\n            layer,\n            env,\n            this.description.processLinesDefault\n        );\n    }\n\n    doProcessPolygonFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.polygonsToProcess,\n            this.description.polygonsToIgnore,\n            layer,\n            env,\n            this.description.processPolygonsDefault\n        );\n    }\n\n    protected doProcessFeature(\n        itemsToProcess: OmvFilterDescription[],\n        itemsToIgnore: OmvFilterDescription[],\n        layer: string,\n        env: MapEnv,\n        defaultResult: boolean\n    ): boolean {\n        if (layer === undefined || (itemsToProcess.length === 0 && itemsToIgnore.length === 0)) {\n            return defaultResult;\n        }\n\n        let featureClass: string | undefined;\n        const featureClassThing = env.lookup(\"class\");\n\n        if (featureClassThing !== undefined && featureClassThing !== null) {\n            featureClass = featureClassThing.toString();\n        }\n\n        if (\n            featureClass &&\n            OmvGenericFeatureModifier.matchItems(layer, featureClass, itemsToProcess)\n        ) {\n            return true;\n        }\n\n        if (\n            featureClass &&\n            OmvGenericFeatureModifier.matchItems(layer, featureClass, itemsToIgnore)\n        ) {\n            return false;\n        }\n\n        if (OmvGenericFeatureModifier.matchAttribute(layer, env, itemsToProcess)) {\n            return true;\n        }\n\n        if (OmvGenericFeatureModifier.matchAttribute(layer, env, itemsToIgnore)) {\n            return false;\n        }\n\n        return defaultResult;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    AttributeMap,\n    Definitions,\n    GeometryType,\n    ITileDecoder,\n    OptionsMap,\n    StyleSet,\n    WorkerServiceProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { EarthConstants, TileKey, webMercatorTilingScheme } from \"@here/harp-geoutils\";\nimport { LineGroup } from \"@here/harp-lines\";\nimport { CopyrightInfo, CopyrightProvider, DataSourceOptions } from \"@here/harp-mapview\";\nimport { DataProvider, TileDataSource, TileFactory } from \"@here/harp-mapview-decoder\";\nimport { getOptionValue, LoggerManager } from \"@here/harp-utils\";\nimport {\n    FeatureModifierId,\n    OMV_TILE_DECODER_SERVICE_TYPE,\n    OmvDecoderOptions,\n    OmvFeatureFilterDescription\n} from \"./OmvDecoderDefs\";\nimport { OmvRestClient, OmvRestClientParameters } from \"./OmvRestClient\";\nimport { OmvTile } from \"./OmvTile\";\n\nconst logger = LoggerManager.instance.create(\"OmvDataSource\");\n\nexport interface LinesGeometry {\n    type: GeometryType;\n    lines: LineGroup;\n    technique: number;\n\n    /**\n     * Optional array of objects. It can be used to pass user data from the geometry to the mesh.\n     */\n    objInfos?: AttributeMap[];\n\n    /**\n     * Optional list of feature start indices. The indices point into the index attribute.\n     */\n    featureStarts?: number[];\n}\n\nexport interface OmvTileFactory {\n    /** Create an instance of [[OmvTile]] or a subclass. */\n    createTile(dataSource: OmvDataSource, tileKey: TileKey): OmvTile;\n}\n\nexport interface OmvDataSourceParameters extends DataSourceOptions {\n    /**\n     * If set to `true`, features that have no technique in the theme will be printed to the console\n     * (can be excessive!).\n     */\n    showMissingTechniques?: boolean;\n\n    /**\n     * If set to `true`, an [[ExtendedTileInfo]] is created for every tile in addition to the\n     * [[DecodedTile]]. This is useful if the features should be passed on for processing without\n     * geometry being automatically created from them. One application is picking.\n     */\n    createTileInfo?: boolean;\n\n    /**\n     * Specify the decoder that should be used. If not supplied, the default will be used.\n     */\n    decoder?: ITileDecoder;\n\n    /**\n     * Optionally specify the DataProvider that should be used.\n     */\n    dataProvider?: DataProvider;\n\n    /**\n     * Specify the URL to the decoder bundle. If not supplied, the default will be used.\n     */\n    concurrentDecoderScriptUrl?: string;\n\n    /**\n     * Gather feature IDs from `OmvData`. Defaults to `false`.\n     * @deprecated, FeatureIds are always gathered, use [[gatherFeatureAttributes]] to gather\n     * all feature attributes.\n     */\n    gatherFeatureIds?: boolean;\n\n    /**\n     * Gather feature attributes from `OmvData`. Defaults to `false`.\n     */\n    gatherFeatureAttributes?: boolean;\n\n    /**\n     * Gather road segments data from [[OmvData]]. Defaults to `false`.\n     */\n    gatherRoadSegments?: boolean;\n\n    /**\n     * If not set to `false`, very short text labels will be skipped during decoding based on a\n     * heuristic.\n     */\n    skipShortLabels?: boolean;\n\n    /**\n     * A description for the feature filter that can be safely passed down to the web workers. It\n     * has to be generated with the help of the [[OmvFeatureFilterDescriptionBuilder]] (to guarantee\n     * correctness). This parameter gets applied to the decoder used in the [[OmvDataSource]]\n     * which might be shared between various [[OmvDataSource]]s.\n     */\n    filterDescr?: OmvFeatureFilterDescription;\n\n    /**\n     * Optional, custom factory for [[Tile]] instances created by this [[OmvDataSource]].\n     */\n    tileFactory?: TileFactory<OmvTile>;\n\n    /**\n     * Identifier used to choose OmvFeatureModifier, if undefined [[OmvGenericFeatureModifier]] is\n     * used. This parameter gets applied to the decoder used in the [[OmvDataSource]] which might\n     * be shared between various [[OmvDataSource]]s.\n     */\n    featureModifierId?: FeatureModifierId;\n\n    /**\n     * Optional, default copyright information of tiles provided by this data source.\n     * Implementation should provide this information from the source data if possible.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Optional copyright info provider for tiles provided by this data source.\n     */\n    copyrightProvider?: CopyrightProvider;\n\n    /**\n     * Maximum geometry height above groud level this `OmvDataSource` can produce.\n     *\n     * Used in first stage of frustum culling before [[Tile.maxGeometryHeight]] data is available.\n     *\n     * @default [[EarthConstants.MAX_BUILDING_HEIGHT]].\n     */\n    maxGeometryHeight?: number;\n\n    /**\n     * Indicates whether overlay on elevation is enabled. Defaults to `false`.\n     */\n    enableElevationOverlay?: boolean;\n\n    /**\n     * Indicates whether to add a ground plane to cover the tile completely. This is necessary for\n     * the fallback logic, such that the parent fall back tiles don't overlap the children tiles.\n     * Default is true (i.e. if not defined it is taken to be true)\n     */\n    addGroundPlane?: boolean;\n}\n\n/**\n * A helper function to retrieve the [[DataProvider]] from the [[OmvDataSource]]s parameters.\n *\n * @param params The parameters passed into the OmvDataSource.\n */\nfunction getDataProvider(params: OmvWithRestClientParams | OmvWithCustomDataProvider) {\n    if ((params as OmvWithCustomDataProvider).dataProvider) {\n        return (params as OmvWithCustomDataProvider).dataProvider;\n    } else if (\n        (params as OmvWithRestClientParams).baseUrl ||\n        (params as OmvWithRestClientParams).url\n    ) {\n        return new OmvRestClient(params as OmvRestClientParameters);\n    } else {\n        throw new Error(\"OmvDataSource: missing url, baseUrl or dataProvider params\");\n    }\n}\n\nexport type OmvWithRestClientParams = OmvRestClientParameters & OmvDataSourceParameters;\nexport type OmvWithCustomDataProvider = OmvDataSourceParameters & { dataProvider: DataProvider };\n\nlet missingOmvDecoderServiceInfoEmitted: boolean = false;\n\nexport class OmvDataSource extends TileDataSource<OmvTile> {\n    private readonly m_decoderOptions: OmvDecoderOptions;\n\n    constructor(private m_params: OmvWithRestClientParams | OmvWithCustomDataProvider) {\n        super(m_params.tileFactory || new TileFactory(OmvTile), {\n            styleSetName: m_params.styleSetName || \"omv\",\n            name: m_params.name,\n            tilingScheme: webMercatorTilingScheme,\n            dataProvider: getDataProvider(m_params),\n            concurrentDecoderServiceName: OMV_TILE_DECODER_SERVICE_TYPE,\n            decoder: m_params.decoder,\n            concurrentDecoderScriptUrl: m_params.concurrentDecoderScriptUrl,\n            copyrightInfo: m_params.copyrightInfo,\n            copyrightProvider: m_params.copyrightProvider,\n            // tslint:disable-next-line: deprecation\n            minZoomLevel: m_params.minZoomLevel,\n            // tslint:disable-next-line: deprecation\n            maxZoomLevel: m_params.maxZoomLevel,\n            minDataLevel: getOptionValue(m_params.minDataLevel, 1),\n            maxDataLevel: getOptionValue(m_params.maxDataLevel, 17),\n            minDisplayLevel: m_params.minDisplayLevel,\n            maxDisplayLevel: m_params.maxDisplayLevel,\n            storageLevelOffset: getOptionValue(m_params.storageLevelOffset, -1)\n        });\n\n        this.cacheable = true;\n        this.addGroundPlane =\n            m_params.addGroundPlane === undefined || m_params.addGroundPlane === true;\n\n        this.m_decoderOptions = {\n            showMissingTechniques: this.m_params.showMissingTechniques === true,\n            filterDescription: this.m_params.filterDescr,\n            gatherFeatureAttributes: this.m_params.gatherFeatureAttributes === true,\n            createTileInfo: this.m_params.createTileInfo === true,\n            gatherRoadSegments: this.m_params.gatherRoadSegments === true,\n            featureModifierId: this.m_params.featureModifierId,\n            skipShortLabels: this.m_params.skipShortLabels,\n            storageLevelOffset: getOptionValue(m_params.storageLevelOffset, -1),\n            enableElevationOverlay: this.m_params.enableElevationOverlay === true\n        };\n\n        this.maxGeometryHeight = getOptionValue(\n            m_params.maxGeometryHeight,\n            EarthConstants.MAX_BUILDING_HEIGHT\n        );\n    }\n\n    /** @override */\n    async connect() {\n        try {\n            await super.connect();\n        } catch (error) {\n            if (\n                WorkerServiceProtocol.isUnknownServiceError(error) &&\n                !missingOmvDecoderServiceInfoEmitted\n            ) {\n                logger.info(\n                    \"Unable to create decoder service in worker. Use \" +\n                        \" 'OmvTileDecoderService.start();' in decoder script.\"\n                );\n                missingOmvDecoderServiceInfoEmitted = true;\n            }\n            throw error;\n        }\n        this.configureDecoder(undefined, undefined, undefined, this.m_decoderOptions);\n    }\n\n    /**\n     * Remove the current data filter.\n     * Will be applied to the decoder, which might be shared with other omv datasources.\n     */\n    removeDataFilter(): void {\n        this.configureDecoder(undefined, undefined, undefined, {\n            filterDescription: null\n        });\n    }\n\n    /**\n     * Set a new data filter. Can also be done during the creation of an [[OmvDataSource]].\n     * Will be applied to the decoder, which might be shared with other omv datasources.\n     *\n     * @param filterDescription Data filter description created with\n     * [[OmvFeatureFilterDescriptionBuilder]].\n     */\n    setDataFilter(filterDescription: OmvFeatureFilterDescription): void {\n        this.m_decoderOptions.filterDescription =\n            filterDescription !== null ? filterDescription : undefined;\n\n        this.configureDecoder(undefined, undefined, undefined, {\n            filterDescription\n        });\n    }\n\n    /** @override */\n    shouldPreloadTiles(): boolean {\n        return true;\n    }\n\n    /** @override */\n    setLanguages(languages?: string[]): void {\n        if (languages !== undefined) {\n            this.configureDecoder(undefined, undefined, languages, undefined);\n        }\n    }\n\n    /** @override */\n    get storageLevelOffset() {\n        return super.storageLevelOffset;\n    }\n\n    /** @override */\n    set storageLevelOffset(levelOffset: number) {\n        super.storageLevelOffset = levelOffset;\n        this.m_decoderOptions.storageLevelOffset = this.storageLevelOffset;\n        this.configureDecoder(undefined, undefined, undefined, {\n            storageLevelOffset: this.storageLevelOffset\n        });\n    }\n\n    /** @override */\n    setEnableElevationOverlay(enable: boolean) {\n        if (this.m_decoderOptions.enableElevationOverlay !== enable) {\n            this.m_decoderOptions.enableElevationOverlay = enable;\n            this.configureDecoder(undefined, undefined, undefined, {\n                enableElevationOverlay: enable\n            });\n        }\n    }\n\n    private configureDecoder(\n        styleSet?: StyleSet,\n        definitions?: Definitions,\n        languages?: string[],\n        options?: OptionsMap\n    ) {\n        this.clearCache();\n        this.decoder.configure(styleSet, definitions, languages, options);\n        this.mapView.markTilesDirty(this);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/DataProvider\";\nexport * from \"./lib/TileDataSource\";\nexport * from \"./lib/TileLoader\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    Definitions,\n    ITileDecoder,\n    StyleSet,\n    Theme,\n    TileInfo\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport {\n    ConcurrentDecoderFacade,\n    CopyrightInfo,\n    CopyrightProvider,\n    DataSource,\n    DataSourceOptions,\n    Tile,\n    TileLoaderState\n} from \"@here/harp-mapview\";\nimport { LoggerManager } from \"@here/harp-utils\";\nimport { DataProvider } from \"./DataProvider\";\nimport { TileInfoLoader, TileLoader } from \"./TileLoader\";\n\n/**\n * Set of common options for all [[TileDataSource]]s.\n */\nexport interface TileDataSourceOptions extends DataSourceOptions {\n    /**\n     * The [[TilingScheme]] the data source is using.\n     */\n    tilingScheme: TilingScheme;\n\n    /**\n     * The [[DataProvider]] to use for downloading the actual data.\n     */\n    dataProvider: DataProvider;\n\n    /**\n     * Optional: Specify [[ITileDecoder]] instance.\n     */\n    decoder?: ITileDecoder;\n\n    /**\n     * Optional name of decoder service class.\n     * @see [[ConcurrentDecoderFacade]]\n     * @see [[ConcurrentWorkerSet]]\n     */\n    concurrentDecoderServiceName?: string;\n\n    /**\n     * Optional URL for decoder bundle to be loaded into web worker.\n     */\n    concurrentDecoderScriptUrl?: string;\n\n    /**\n     * Optional count of web workers to use with the decoder bundle.\n     */\n    concurrentDecoderWorkerCount?: number;\n\n    /**\n     * Optional, default copyright information of tiles provided by this data source.\n     * Implementation should provide this information from the source data if possible.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Optional copyright info provider for tiles provided by this data source. Copyrights from\n     * provider are concatenated with default ones from `copyrightInfo`.\n     */\n    copyrightProvider?: CopyrightProvider;\n}\n\n/**\n * Templated factory class to create instances of [[Tile]].\n */\nexport class TileFactory<TileType extends Tile> {\n    /**\n     * Initialize the factory using the constructor of the element to be called when a [[Tile]] is\n     * created.\n     *\n     * @param m_modelConstructor Constructor of (subclass of) [[Tile]].\n     */\n    constructor(\n        private m_modelConstructor: new (dataSource: DataSource, tileKey: TileKey) => TileType\n    ) {}\n\n    /**\n     * Create an instance of (subclass of) [[Tile]]. The required parameters are passed as arguments\n     * to the constructor of [[Tile]].\n     *\n     * @param dataSource [[Datasource]] this class belongs to.\n     * @param tileKey Quadtree address of the [[Tile]].\n     */\n    create(dataSource: DataSource, tileKey: TileKey): TileType {\n        return new this.m_modelConstructor(dataSource, tileKey);\n    }\n}\n\n/**\n * Common base class for the typical [[DataSource]] which uses an [[ITileDecoder]] to decode the\n * tile content asynchronously. The decoder can be passed in as an option, or a default\n * asynchronous one is generated.\n */\nexport class TileDataSource<TileType extends Tile> extends DataSource {\n    protected readonly logger = LoggerManager.instance.create(\"TileDataSource\");\n    protected readonly m_decoder: ITileDecoder;\n    private m_isReady: boolean = false;\n\n    /**\n     * Set up the `TileDataSource`.\n     *\n     * @param m_tileFactory Factory to create the [[Tile]] instances.\n     * @param m_options Options specifying the parameters of the [[DataSource]].\n     */\n    constructor(\n        private readonly m_tileFactory: TileFactory<TileType>,\n        private readonly m_options: TileDataSourceOptions\n    ) {\n        super({\n            name: m_options.name,\n            styleSetName: m_options.styleSetName,\n            // tslint:disable-next-line: deprecation\n            minZoomLevel: m_options.minZoomLevel,\n            // tslint:disable-next-line: deprecation\n            maxZoomLevel: m_options.maxZoomLevel,\n            minDataLevel: m_options.minDataLevel,\n            maxDataLevel: m_options.maxDataLevel,\n            minDisplayLevel: m_options.minDisplayLevel,\n            maxDisplayLevel: m_options.maxDisplayLevel,\n            storageLevelOffset: m_options.storageLevelOffset\n        });\n        if (m_options.decoder) {\n            this.m_decoder = m_options.decoder;\n        } else if (m_options.concurrentDecoderServiceName) {\n            this.m_decoder = ConcurrentDecoderFacade.getTileDecoder(\n                m_options.concurrentDecoderServiceName,\n                m_options.concurrentDecoderScriptUrl,\n                m_options.concurrentDecoderWorkerCount\n            );\n        } else {\n            throw new Error(\n                `TileDataSource[${this.name}]: unable to create, missing decoder or ` +\n                    `concurrentDecoderServiceName`\n            );\n        }\n        this.useGeometryLoader = true;\n        this.cacheable = true;\n    }\n\n    /** @override */\n    dispose() {\n        this.decoder.dispose();\n    }\n\n    /** @override */\n    ready(): boolean {\n        return this.m_isReady && this.m_options.dataProvider.ready();\n    }\n\n    /**\n     * Get the [[ITileDecoder]] of this `ITileDataSource`, which has either been passed in with\n     * the options, or has been supplied by the [[ConcurrentDecoderFacade]].\n     */\n    get decoder(): ITileDecoder {\n        return this.m_decoder;\n    }\n\n    /** @override */\n    async connect() {\n        await Promise.all([this.m_options.dataProvider.connect(), this.m_decoder.connect()]);\n        this.m_isReady = true;\n\n        this.m_decoder.configure(undefined, undefined, undefined, {\n            storageLevelOffset: this.m_options.storageLevelOffset\n        });\n    }\n\n    /** @override */\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        this.m_decoder.configure(styleSet, definitions, languages);\n        this.mapView.markTilesDirty(this);\n    }\n\n    /**\n     * Apply the [[Theme]] to this data source.\n     *\n     * Applies new [[StyleSet]] and definitions from theme only if matching styleset (see\n     * `styleSetName` property) is found in `theme`.\n     * @override\n     */\n    setTheme(theme: Theme, languages?: string[]): void {\n        const styleSet =\n            this.styleSetName !== undefined && theme.styles\n                ? theme.styles[this.styleSetName]\n                : undefined;\n\n        if (styleSet !== undefined) {\n            this.setStyleSet(styleSet, theme.definitions, languages);\n        }\n    }\n\n    /**\n     * Get the [[DataProvider]] that has been passed in with the options.\n     */\n    dataProvider(): DataProvider {\n        return this.m_options.dataProvider;\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_options.tilingScheme;\n    }\n\n    /**\n     * Create a [[Tile]] and start the asynchronous download of the tile content. The [[Tile]] will\n     * be empty, but the download and decoding will be scheduled immediately. [[Tile]] instance is\n     * initialized with default copyrights, concatenated with copyrights from copyright provider of\n     * this data source.\n     *\n     * @param tileKey Quadtree address of the requested tile.\n     * @override\n     */\n    getTile(tileKey: TileKey): TileType | undefined {\n        const tile = this.m_tileFactory.create(this, tileKey);\n        tile.tileLoader = new TileLoader(\n            this,\n            tileKey,\n            this.m_options.dataProvider,\n            this.decoder,\n            0\n        );\n        tile.copyrightInfo = this.m_options.copyrightInfo;\n        if (this.m_options.copyrightProvider !== undefined) {\n            this.m_options.copyrightProvider\n                .getCopyrights(tile.geoBox, tileKey.level)\n                .then(copyrightInfo => {\n                    tile.copyrightInfo =\n                        tile.copyrightInfo === undefined\n                            ? copyrightInfo\n                            : [...tile.copyrightInfo, ...copyrightInfo];\n                    this.requestUpdate();\n                });\n        }\n        tile.load();\n\n        return tile;\n    }\n\n    /**\n     * Get [[TileInfo]] of a tile.\n     *\n     * @param tileKey Quadtree address of the requested tile.\n     * @returns A promise which will contain the [[TileInfo]] when resolved.\n     */\n    getTileInfo(tileKey: TileKey): Promise<TileInfo | undefined> {\n        const promise = new Promise<TileInfo | undefined>((resolve, reject) => {\n            const tileLoader = new TileInfoLoader(\n                this,\n                tileKey,\n                this.m_options.dataProvider,\n                this.decoder,\n                0\n            );\n\n            tileLoader.loadAndDecode().then(loaderState => {\n                if (loaderState === TileLoaderState.Ready) {\n                    resolve(tileLoader.tileInfo);\n                } else {\n                    reject(\n                        new Error(`TileDataSource#getInfoTile wrong final state: ${loaderState}`)\n                    );\n                }\n            });\n        });\n\n        return promise;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { getPropertyValue, isTextTechnique } from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils/lib/tiling/TileKey\";\nimport { DataSource, TextElement } from \"@here/harp-mapview\";\nimport { debugContext } from \"@here/harp-mapview/lib/DebugContext\";\nimport {\n    ContextualArabicConverter,\n    FontUnit,\n    TextLayoutStyle,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport * as THREE from \"three\";\n\nimport { TileGeometryCreator } from \"@here/harp-mapview/lib/geometry/TileGeometryCreator\";\nimport { OmvTile } from \"./OmvTile\";\n\nconst debugMaterial = new THREE.LineBasicMaterial({\n    color: 0x000000,\n    linewidth: 2,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst debugCircleMaterial = new THREE.MeshBasicMaterial({\n    color: 0xff0000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst debugCircleMaterialWF = new THREE.MeshBasicMaterial({\n    color: 0xff0000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\ndebugCircleMaterialWF.wireframe = true;\n\nconst debugCircleMaterial2WF = new THREE.MeshBasicMaterial({\n    color: 0x8080ff,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\ndebugCircleMaterial2WF.wireframe = true;\n\nconst debugBlackCircleMaterial = new THREE.MeshBasicMaterial({\n    color: 0x000000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst textRenderStyle = new TextRenderStyle();\nconst textLayoutStyle = new TextLayoutStyle();\n\ntextRenderStyle.fontSize = {\n    unit: FontUnit.Point,\n    size: 9,\n    backgroundSize: 0\n};\ntextRenderStyle.opacity = 0.75;\ntextRenderStyle.backgroundOpacity = 0.75;\n\nexport class OmvDebugLabelsTile extends OmvTile {\n    constructor(dataSource: DataSource, tileKey: TileKey) {\n        super(dataSource, tileKey);\n    }\n\n    /** @override */\n    loadingFinished() {\n        this.addLabelDebugInfo();\n    }\n\n    /**\n     * Create [[TextElement]] objects from the given decoded [[Tile]] and list of materials.\n     */\n    private addLabelDebugInfo() {\n        // activate in the browser with:\n        // window.__debugContext.setValue(\"DEBUG_TEXT_PATHS\", true)\n        const debugTextPaths = debugContext.getValue(\"DEBUG_TEXT_PATHS\");\n        const debugTextPathsFull = debugContext.getValue(\"DEBUG_TEXT_PATHS_FULL\");\n\n        if (!(debugTextPaths || debugTextPathsFull) || this.decodedTile === undefined) {\n            return;\n        }\n\n        const tileGeometryCreator = TileGeometryCreator.instance;\n        const decodedTile = this.decodedTile!;\n\n        tileGeometryCreator.createTextElements(this, decodedTile);\n\n        const colorMap = new Map<number, THREE.Color>();\n\n        // allow limiting to specific names and/or index. There can be many paths with the same text\n        const textFilter = debugContext.getValue(\"DEBUG_TEXT_PATHS.FILTER.TEXT\");\n        const indexFilter = debugContext.getValue(\"DEBUG_TEXT_PATHS.FILTER.INDEX\");\n        const env = this.mapView.env;\n\n        if (decodedTile.textPathGeometries !== undefined) {\n            this.preparedTextPaths = tileGeometryCreator.prepareTextPaths(\n                decodedTile.textPathGeometries,\n                decodedTile\n            );\n        }\n\n        if (this.preparedTextPaths !== undefined) {\n            const lineGeometry = new THREE.BufferGeometry();\n            const lineIndices = new Array<number>();\n            const linePositions = new Array<number>();\n\n            const redPointGeometry = new THREE.BufferGeometry();\n            const redPointIndices = new Array<number>();\n            const redPointPositions = new Array<number>();\n\n            const blackPointGeometry = new THREE.BufferGeometry();\n            const blackPointIndices = new Array<number>();\n            const blackPointPositions = new Array<number>();\n\n            let baseVertex = 0;\n            const pointScale = this.mapView.pixelToWorld;\n            const worldOffsetX = this.computeWorldOffsetX();\n\n            for (const textPath of this.preparedTextPaths) {\n                const technique = decodedTile.techniques[textPath.technique];\n                if (!isTextTechnique(technique)) {\n                    continue;\n                }\n                if (technique.color !== undefined) {\n                    colorMap.set(\n                        textPath.technique,\n                        new THREE.Color(getPropertyValue(technique.color, env))\n                    );\n                }\n\n                baseVertex = linePositions.length / 3;\n\n                const text = textPath.text;\n\n                const elementIndex = this.preparedTextPaths.indexOf(textPath);\n\n                const createDebugInfo =\n                    (!textFilter || (text && text.indexOf(textFilter) >= 0)) &&\n                    (indexFilter === undefined || indexFilter === elementIndex);\n\n                if (createDebugInfo) {\n                    for (let i = 0; i < textPath.path.length; i += 3) {\n                        const pathIndex = i / 3;\n                        const x = textPath.path[i];\n                        const y = textPath.path[i + 1];\n                        // raise it a bit, so we get identify connectivity visually by tilting\n                        const z = textPath.path[i + 2] + i / 3;\n\n                        if (debugTextPaths) {\n                            linePositions.push(x, y, z);\n                        }\n\n                        const isRedPoint = i === 0;\n\n                        if (debugTextPathsFull || isRedPoint) {\n                            const pointSize = pointScale * (isRedPoint ? 6 : 4);\n\n                            const positions = isRedPoint ? redPointPositions : blackPointPositions;\n                            const indices = isRedPoint ? redPointIndices : blackPointIndices;\n\n                            positions.push(x, y - pointSize, z);\n                            positions.push(x + pointSize, y, z);\n                            positions.push(x, y + pointSize, z);\n                            positions.push(x - pointSize, y, z);\n\n                            const pointIndex = positions.length / 3;\n\n                            indices.push(pointIndex - 4);\n                            indices.push(pointIndex - 3);\n                            indices.push(pointIndex - 2);\n                            indices.push(pointIndex - 4);\n                            indices.push(pointIndex - 2);\n                            indices.push(pointIndex - 1);\n\n                            if (debugTextPathsFull) {\n                                // give point index a label\n                                const label: string =\n                                    pathIndex % 5 === 0\n                                        ? text + \":\" + pathIndex\n                                        : Number(pathIndex).toString();\n                                const labelElement = new TextElement(\n                                    ContextualArabicConverter.instance.convert(label),\n                                    new THREE.Vector3(x + worldOffsetX, y, z),\n                                    textRenderStyle,\n                                    textLayoutStyle,\n                                    getPropertyValue(technique.priority || 0, env),\n                                    technique.xOffset || 0.0,\n                                    technique.yOffset || 0.0\n                                );\n                                labelElement.minZoomLevel = technique.minZoomLevel;\n                                labelElement.mayOverlap = true;\n                                labelElement.reserveSpace = false;\n                                labelElement.alwaysOnTop = true;\n                                labelElement.ignoreDistance = true;\n                                labelElement.priority = TextElement.HIGHEST_PRIORITY;\n                                this.addTextElement(labelElement);\n                            }\n                        }\n                    }\n\n                    // the lines of a path share a common geometry\n                    const N = textPath.path.length / 3;\n                    for (let i = 0; i < N; ++i) {\n                        if (i > 0) {\n                            lineIndices.push(baseVertex + i);\n                        }\n                        if (i + 1 < N) {\n                            lineIndices.push(baseVertex + i);\n                        }\n                    }\n                }\n            }\n\n            if (lineIndices.length > 0) {\n                lineGeometry.addGroup(0, lineIndices.length, 0);\n\n                lineGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(linePositions), 3)\n                );\n\n                lineGeometry.setIndex(new THREE.BufferAttribute(new Uint32Array(lineIndices), 1));\n                const lineMesh = new THREE.LineSegments(lineGeometry, debugMaterial);\n                lineMesh.renderOrder = 2000;\n                this.objects.push(lineMesh);\n            }\n\n            if (redPointIndices.length > 0) {\n                redPointGeometry.addGroup(0, redPointIndices.length, 0);\n\n                redPointGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(redPointPositions), 3)\n                );\n\n                redPointGeometry.setIndex(\n                    new THREE.BufferAttribute(new Uint32Array(redPointIndices), 1)\n                );\n                const redPointMesh = new THREE.Mesh(redPointGeometry, debugCircleMaterial);\n                redPointMesh.renderOrder = 3000;\n                this.objects.push(redPointMesh);\n            }\n\n            if (blackPointIndices.length > 0) {\n                blackPointGeometry.addGroup(0, blackPointIndices.length, 0);\n\n                blackPointGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(blackPointPositions), 3)\n                );\n\n                blackPointGeometry.setIndex(\n                    new THREE.BufferAttribute(new Uint32Array(blackPointIndices), 1)\n                );\n                const blackPointMesh = new THREE.Mesh(blackPointGeometry, debugBlackCircleMaterial);\n                blackPointMesh.renderOrder = 2500;\n                this.objects.push(blackPointMesh);\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @hidden */\nexport const apikey = \"J0IJdYzKDYS3nHVDDEWETIqK3nAcxqW42vz7xeSq61M\";\n\n/** @hidden */\nexport const copyrightInfo = [\n    {\n        id: \"here.com\",\n        year: new Date().getFullYear(),\n        label: \"HERE\",\n        link: \"https://legal.here.com/terms\"\n    }\n];\n"],"sourceRoot":""}